"use strict";
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([[94],{

/***/ 2893:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
// Generated from KotlinParser.g4 by ANTLR 4.10.1
// jshint ignore: start
const antlr4_1 = __importDefault(__webpack_require__(7228));
const KotlinParserListener_1 = __importDefault(__webpack_require__(9915));
const KotlinParserVisitor_1 = __importDefault(__webpack_require__(3130));
const serializedATN = [4, 1, 169, 3303, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4,
    7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12,
    2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2,
    20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27,
    7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7,
    34, 2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41,
    2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47, 7, 47, 2, 48, 7, 48, 2,
    49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56,
    7, 56, 2, 57, 7, 57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 2, 63, 7,
    63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2, 68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70,
    2, 71, 7, 71, 2, 72, 7, 72, 2, 73, 7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2,
    78, 7, 78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83, 2, 84, 7, 84, 2, 85,
    7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2, 89, 7, 89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7,
    92, 2, 93, 7, 93, 2, 94, 7, 94, 2, 95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 2, 98, 7, 98, 2, 99, 7, 99,
    2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103, 7, 103, 2, 104, 7, 104, 2, 105, 7, 105,
    2, 106, 7, 106, 2, 107, 7, 107, 2, 108, 7, 108, 2, 109, 7, 109, 2, 110, 7, 110, 2, 111, 7, 111,
    2, 112, 7, 112, 2, 113, 7, 113, 2, 114, 7, 114, 2, 115, 7, 115, 2, 116, 7, 116, 2, 117, 7, 117,
    2, 118, 7, 118, 2, 119, 7, 119, 2, 120, 7, 120, 2, 121, 7, 121, 2, 122, 7, 122, 2, 123, 7, 123,
    2, 124, 7, 124, 2, 125, 7, 125, 2, 126, 7, 126, 2, 127, 7, 127, 2, 128, 7, 128, 2, 129, 7, 129,
    2, 130, 7, 130, 2, 131, 7, 131, 2, 132, 7, 132, 2, 133, 7, 133, 2, 134, 7, 134, 2, 135, 7, 135,
    2, 136, 7, 136, 2, 137, 7, 137, 2, 138, 7, 138, 2, 139, 7, 139, 2, 140, 7, 140, 2, 141, 7, 141,
    2, 142, 7, 142, 2, 143, 7, 143, 2, 144, 7, 144, 2, 145, 7, 145, 2, 146, 7, 146, 2, 147, 7, 147,
    2, 148, 7, 148, 2, 149, 7, 149, 2, 150, 7, 150, 2, 151, 7, 151, 2, 152, 7, 152, 2, 153, 7, 153,
    2, 154, 7, 154, 2, 155, 7, 155, 2, 156, 7, 156, 2, 157, 7, 157, 2, 158, 7, 158, 2, 159, 7, 159,
    2, 160, 7, 160, 2, 161, 7, 161, 2, 162, 7, 162, 2, 163, 7, 163, 2, 164, 7, 164, 2, 165, 7, 165,
    1, 0, 3, 0, 334, 8, 0, 1, 0, 5, 0, 337, 8, 0, 10, 0, 12, 0, 340, 9, 0, 1, 0, 5, 0, 343, 8, 0, 10, 0, 12,
    0, 346, 9, 0, 1, 0, 1, 0, 1, 0, 5, 0, 351, 8, 0, 10, 0, 12, 0, 354, 9, 0, 1, 0, 1, 0, 1, 1, 3, 1, 359,
    8, 1, 1, 1, 5, 1, 362, 8, 1, 10, 1, 12, 1, 365, 9, 1, 1, 1, 5, 1, 368, 8, 1, 10, 1, 12, 1, 371, 9, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 378, 8, 1, 10, 1, 12, 1, 381, 9, 1, 1, 1, 1, 1, 1, 2, 1, 2, 5, 2, 387,
    8, 2, 10, 2, 12, 2, 390, 9, 2, 1, 2, 1, 2, 5, 2, 394, 8, 2, 10, 2, 12, 2, 397, 9, 2, 1, 2, 1, 2, 4, 2,
    401, 8, 2, 11, 2, 12, 2, 402, 1, 2, 1, 2, 1, 2, 3, 2, 408, 8, 2, 1, 2, 5, 2, 411, 8, 2, 10, 2, 12, 2,
    414, 9, 2, 1, 3, 1, 3, 1, 3, 3, 3, 419, 8, 3, 3, 3, 421, 8, 3, 1, 4, 5, 4, 424, 8, 4, 10, 4, 12, 4, 427,
    9, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 3, 5, 434, 8, 5, 1, 5, 3, 5, 437, 8, 5, 1, 6, 1, 6, 1, 6, 1, 7, 1, 7,
    3, 7, 444, 8, 7, 1, 8, 3, 8, 447, 8, 8, 1, 8, 1, 8, 5, 8, 451, 8, 8, 10, 8, 12, 8, 454, 9, 8, 1, 8, 1,
    8, 5, 8, 458, 8, 8, 10, 8, 12, 8, 461, 9, 8, 1, 8, 3, 8, 464, 8, 8, 1, 8, 5, 8, 467, 8, 8, 10, 8, 12,
    8, 470, 9, 8, 1, 8, 3, 8, 473, 8, 8, 1, 8, 5, 8, 476, 8, 8, 10, 8, 12, 8, 479, 9, 8, 1, 8, 1, 8, 5, 8,
    483, 8, 8, 10, 8, 12, 8, 486, 9, 8, 1, 8, 3, 8, 489, 8, 8, 1, 8, 5, 8, 492, 8, 8, 10, 8, 12, 8, 495,
    9, 8, 1, 8, 3, 8, 498, 8, 8, 1, 8, 5, 8, 501, 8, 8, 10, 8, 12, 8, 504, 9, 8, 1, 8, 1, 8, 5, 8, 508, 8,
    8, 10, 8, 12, 8, 511, 9, 8, 1, 8, 3, 8, 514, 8, 8, 1, 9, 3, 9, 517, 8, 9, 1, 9, 1, 9, 5, 9, 521, 8, 9,
    10, 9, 12, 9, 524, 9, 9, 3, 9, 526, 8, 9, 1, 9, 1, 9, 1, 10, 1, 10, 5, 10, 532, 8, 10, 10, 10, 12, 10,
    535, 9, 10, 1, 10, 1, 10, 5, 10, 539, 8, 10, 10, 10, 12, 10, 542, 9, 10, 1, 10, 1, 10, 5, 10, 546,
    8, 10, 10, 10, 12, 10, 549, 9, 10, 1, 10, 5, 10, 552, 8, 10, 10, 10, 12, 10, 555, 9, 10, 3, 10, 557,
    8, 10, 1, 10, 5, 10, 560, 8, 10, 10, 10, 12, 10, 563, 9, 10, 1, 10, 3, 10, 566, 8, 10, 1, 10, 1, 10,
    1, 11, 3, 11, 571, 8, 11, 1, 11, 3, 11, 574, 8, 11, 1, 11, 5, 11, 577, 8, 11, 10, 11, 12, 11, 580,
    9, 11, 1, 11, 1, 11, 1, 11, 5, 11, 585, 8, 11, 10, 11, 12, 11, 588, 9, 11, 1, 11, 1, 11, 5, 11, 592,
    8, 11, 10, 11, 12, 11, 595, 9, 11, 1, 11, 1, 11, 5, 11, 599, 8, 11, 10, 11, 12, 11, 602, 9, 11, 1,
    11, 3, 11, 605, 8, 11, 1, 12, 1, 12, 5, 12, 609, 8, 12, 10, 12, 12, 12, 612, 9, 12, 1, 12, 1, 12,
    5, 12, 616, 8, 12, 10, 12, 12, 12, 619, 9, 12, 1, 12, 5, 12, 622, 8, 12, 10, 12, 12, 12, 625, 9,
    12, 1, 13, 5, 13, 628, 8, 13, 10, 13, 12, 13, 631, 9, 13, 1, 13, 5, 13, 634, 8, 13, 10, 13, 12, 13,
    637, 9, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 14, 3, 14, 645, 8, 14, 1, 15, 1, 15, 1, 15, 1, 16,
    1, 16, 3, 16, 652, 8, 16, 1, 16, 5, 16, 655, 8, 16, 10, 16, 12, 16, 658, 9, 16, 1, 16, 1, 16, 5, 16,
    662, 8, 16, 10, 16, 12, 16, 665, 9, 16, 1, 16, 1, 16, 1, 17, 1, 17, 5, 17, 671, 8, 17, 10, 17, 12,
    17, 674, 9, 17, 1, 17, 1, 17, 5, 17, 678, 8, 17, 10, 17, 12, 17, 681, 9, 17, 1, 17, 1, 17, 1, 18,
    1, 18, 3, 18, 687, 8, 18, 5, 18, 689, 8, 18, 10, 18, 12, 18, 692, 9, 18, 1, 19, 1, 19, 1, 19, 1, 19,
    3, 19, 698, 8, 19, 1, 20, 1, 20, 5, 20, 702, 8, 20, 10, 20, 12, 20, 705, 9, 20, 1, 20, 1, 20, 1, 21,
    3, 21, 710, 8, 21, 1, 21, 1, 21, 5, 21, 714, 8, 21, 10, 21, 12, 21, 717, 9, 21, 1, 21, 1, 21, 5, 21,
    721, 8, 21, 10, 21, 12, 21, 724, 9, 21, 1, 21, 1, 21, 5, 21, 728, 8, 21, 10, 21, 12, 21, 731, 9,
    21, 1, 21, 3, 21, 734, 8, 21, 1, 21, 5, 21, 737, 8, 21, 10, 21, 12, 21, 740, 9, 21, 1, 21, 3, 21,
    743, 8, 21, 1, 22, 1, 22, 5, 22, 747, 8, 22, 10, 22, 12, 22, 750, 9, 22, 1, 22, 1, 22, 1, 22, 5, 22,
    755, 8, 22, 10, 22, 12, 22, 758, 9, 22, 1, 22, 3, 22, 761, 8, 22, 1, 23, 1, 23, 5, 23, 765, 8, 23,
    10, 23, 12, 23, 768, 9, 23, 1, 23, 3, 23, 771, 8, 23, 1, 23, 5, 23, 774, 8, 23, 10, 23, 12, 23, 777,
    9, 23, 1, 23, 1, 23, 5, 23, 781, 8, 23, 10, 23, 12, 23, 784, 9, 23, 1, 23, 3, 23, 787, 8, 23, 1, 23,
    5, 23, 790, 8, 23, 10, 23, 12, 23, 793, 9, 23, 1, 23, 1, 23, 1, 24, 1, 24, 5, 24, 799, 8, 24, 10,
    24, 12, 24, 802, 9, 24, 1, 24, 1, 24, 5, 24, 806, 8, 24, 10, 24, 12, 24, 809, 9, 24, 1, 24, 5, 24,
    812, 8, 24, 10, 24, 12, 24, 815, 9, 24, 1, 24, 5, 24, 818, 8, 24, 10, 24, 12, 24, 821, 9, 24, 1,
    24, 3, 24, 824, 8, 24, 1, 25, 1, 25, 5, 25, 828, 8, 25, 10, 25, 12, 25, 831, 9, 25, 3, 25, 833, 8,
    25, 1, 25, 1, 25, 5, 25, 837, 8, 25, 10, 25, 12, 25, 840, 9, 25, 1, 25, 3, 25, 843, 8, 25, 1, 25,
    5, 25, 846, 8, 25, 10, 25, 12, 25, 849, 9, 25, 1, 25, 3, 25, 852, 8, 25, 1, 26, 3, 26, 855, 8, 26,
    1, 26, 1, 26, 5, 26, 859, 8, 26, 10, 26, 12, 26, 862, 9, 26, 1, 26, 3, 26, 865, 8, 26, 1, 26, 5, 26,
    868, 8, 26, 10, 26, 12, 26, 871, 9, 26, 1, 26, 1, 26, 5, 26, 875, 8, 26, 10, 26, 12, 26, 878, 9,
    26, 1, 26, 1, 26, 3, 26, 882, 8, 26, 1, 26, 5, 26, 885, 8, 26, 10, 26, 12, 26, 888, 9, 26, 1, 26,
    1, 26, 5, 26, 892, 8, 26, 10, 26, 12, 26, 895, 9, 26, 1, 26, 1, 26, 5, 26, 899, 8, 26, 10, 26, 12,
    26, 902, 9, 26, 1, 26, 1, 26, 5, 26, 906, 8, 26, 10, 26, 12, 26, 909, 9, 26, 1, 26, 3, 26, 912, 8,
    26, 1, 26, 5, 26, 915, 8, 26, 10, 26, 12, 26, 918, 9, 26, 1, 26, 3, 26, 921, 8, 26, 1, 26, 5, 26,
    924, 8, 26, 10, 26, 12, 26, 927, 9, 26, 1, 26, 3, 26, 930, 8, 26, 1, 27, 1, 27, 5, 27, 934, 8, 27,
    10, 27, 12, 27, 937, 9, 27, 1, 27, 1, 27, 5, 27, 941, 8, 27, 10, 27, 12, 27, 944, 9, 27, 1, 27, 1,
    27, 5, 27, 948, 8, 27, 10, 27, 12, 27, 951, 9, 27, 1, 27, 5, 27, 954, 8, 27, 10, 27, 12, 27, 957,
    9, 27, 3, 27, 959, 8, 27, 1, 27, 5, 27, 962, 8, 27, 10, 27, 12, 27, 965, 9, 27, 1, 27, 3, 27, 968,
    8, 27, 1, 27, 1, 27, 1, 28, 3, 28, 973, 8, 28, 1, 28, 1, 28, 5, 28, 977, 8, 28, 10, 28, 12, 28, 980,
    9, 28, 1, 28, 1, 28, 5, 28, 984, 8, 28, 10, 28, 12, 28, 987, 9, 28, 1, 28, 3, 28, 990, 8, 28, 1, 29,
    1, 29, 5, 29, 994, 8, 29, 10, 29, 12, 29, 997, 9, 29, 1, 29, 1, 29, 5, 29, 1001, 8, 29, 10, 29, 12,
    29, 1004, 9, 29, 1, 29, 1, 29, 1, 30, 1, 30, 5, 30, 1010, 8, 30, 10, 30, 12, 30, 1013, 9, 30, 1,
    30, 1, 30, 5, 30, 1017, 8, 30, 10, 30, 12, 30, 1020, 9, 30, 1, 30, 3, 30, 1023, 8, 30, 1, 31, 1,
    31, 1, 31, 5, 31, 1028, 8, 31, 10, 31, 12, 31, 1031, 9, 31, 1, 31, 3, 31, 1034, 8, 31, 1, 32, 3,
    32, 1037, 8, 32, 1, 32, 1, 32, 5, 32, 1041, 8, 32, 10, 32, 12, 32, 1044, 9, 32, 1, 32, 1, 32, 5,
    32, 1048, 8, 32, 10, 32, 12, 32, 1051, 9, 32, 1, 32, 1, 32, 5, 32, 1055, 8, 32, 10, 32, 12, 32,
    1058, 9, 32, 1, 32, 3, 32, 1061, 8, 32, 1, 32, 5, 32, 1064, 8, 32, 10, 32, 12, 32, 1067, 9, 32,
    1, 32, 3, 32, 1070, 8, 32, 1, 33, 3, 33, 1073, 8, 33, 1, 33, 1, 33, 5, 33, 1077, 8, 33, 10, 33, 12,
    33, 1080, 9, 33, 1, 33, 1, 33, 5, 33, 1084, 8, 33, 10, 33, 12, 33, 1087, 9, 33, 1, 33, 3, 33, 1090,
    8, 33, 1, 33, 5, 33, 1093, 8, 33, 10, 33, 12, 33, 1096, 9, 33, 1, 33, 1, 33, 5, 33, 1100, 8, 33,
    10, 33, 12, 33, 1103, 9, 33, 1, 33, 3, 33, 1106, 8, 33, 1, 33, 5, 33, 1109, 8, 33, 10, 33, 12, 33,
    1112, 9, 33, 1, 33, 3, 33, 1115, 8, 33, 1, 34, 3, 34, 1118, 8, 34, 1, 34, 1, 34, 5, 34, 1122, 8,
    34, 10, 34, 12, 34, 1125, 9, 34, 1, 34, 3, 34, 1128, 8, 34, 1, 34, 5, 34, 1131, 8, 34, 10, 34, 12,
    34, 1134, 9, 34, 1, 34, 1, 34, 5, 34, 1138, 8, 34, 10, 34, 12, 34, 1141, 9, 34, 1, 34, 1, 34, 3,
    34, 1145, 8, 34, 1, 34, 5, 34, 1148, 8, 34, 10, 34, 12, 34, 1151, 9, 34, 1, 34, 1, 34, 3, 34, 1155,
    8, 34, 1, 34, 5, 34, 1158, 8, 34, 10, 34, 12, 34, 1161, 9, 34, 1, 34, 3, 34, 1164, 8, 34, 1, 34,
    5, 34, 1167, 8, 34, 10, 34, 12, 34, 1170, 9, 34, 1, 34, 1, 34, 5, 34, 1174, 8, 34, 10, 34, 12, 34,
    1177, 9, 34, 1, 34, 1, 34, 3, 34, 1181, 8, 34, 3, 34, 1183, 8, 34, 1, 34, 4, 34, 1186, 8, 34, 11,
    34, 12, 34, 1187, 1, 34, 3, 34, 1191, 8, 34, 1, 34, 5, 34, 1194, 8, 34, 10, 34, 12, 34, 1197, 9,
    34, 1, 34, 3, 34, 1200, 8, 34, 1, 34, 5, 34, 1203, 8, 34, 10, 34, 12, 34, 1206, 9, 34, 1, 34, 3,
    34, 1209, 8, 34, 1, 34, 3, 34, 1212, 8, 34, 1, 34, 3, 34, 1215, 8, 34, 1, 34, 5, 34, 1218, 8, 34,
    10, 34, 12, 34, 1221, 9, 34, 1, 34, 3, 34, 1224, 8, 34, 1, 34, 3, 34, 1227, 8, 34, 3, 34, 1229,
    8, 34, 1, 35, 1, 35, 5, 35, 1233, 8, 35, 10, 35, 12, 35, 1236, 9, 35, 1, 35, 1, 35, 5, 35, 1240,
    8, 35, 10, 35, 12, 35, 1243, 9, 35, 1, 35, 1, 35, 5, 35, 1247, 8, 35, 10, 35, 12, 35, 1250, 9, 35,
    1, 35, 5, 35, 1253, 8, 35, 10, 35, 12, 35, 1256, 9, 35, 1, 35, 5, 35, 1259, 8, 35, 10, 35, 12, 35,
    1262, 9, 35, 1, 35, 1, 35, 1, 36, 5, 36, 1267, 8, 36, 10, 36, 12, 36, 1270, 9, 36, 1, 36, 5, 36,
    1273, 8, 36, 10, 36, 12, 36, 1276, 9, 36, 1, 36, 1, 36, 5, 36, 1280, 8, 36, 10, 36, 12, 36, 1283,
    9, 36, 1, 36, 1, 36, 5, 36, 1287, 8, 36, 10, 36, 12, 36, 1290, 9, 36, 1, 36, 3, 36, 1293, 8, 36,
    1, 37, 1, 37, 5, 37, 1297, 8, 37, 10, 37, 12, 37, 1300, 9, 37, 1, 37, 1, 37, 1, 38, 3, 38, 1305,
    8, 38, 1, 38, 1, 38, 3, 38, 1309, 8, 38, 1, 38, 1, 38, 5, 38, 1313, 8, 38, 10, 38, 12, 38, 1316,
    9, 38, 1, 38, 1, 38, 5, 38, 1320, 8, 38, 10, 38, 12, 38, 1323, 9, 38, 1, 38, 1, 38, 5, 38, 1327,
    8, 38, 10, 38, 12, 38, 1330, 9, 38, 1, 38, 1, 38, 5, 38, 1334, 8, 38, 10, 38, 12, 38, 1337, 9, 38,
    1, 38, 3, 38, 1340, 8, 38, 1, 38, 5, 38, 1343, 8, 38, 10, 38, 12, 38, 1346, 9, 38, 1, 38, 3, 38,
    1349, 8, 38, 1, 39, 3, 39, 1352, 8, 39, 1, 39, 1, 39, 3, 39, 1356, 8, 39, 1, 39, 1, 39, 5, 39, 1360,
    8, 39, 10, 39, 12, 39, 1363, 9, 39, 1, 39, 1, 39, 1, 39, 5, 39, 1368, 8, 39, 10, 39, 12, 39, 1371,
    9, 39, 1, 39, 1, 39, 1, 39, 5, 39, 1376, 8, 39, 10, 39, 12, 39, 1379, 9, 39, 1, 39, 1, 39, 5, 39,
    1383, 8, 39, 10, 39, 12, 39, 1386, 9, 39, 1, 39, 3, 39, 1389, 8, 39, 1, 39, 5, 39, 1392, 8, 39,
    10, 39, 12, 39, 1395, 9, 39, 1, 39, 1, 39, 3, 39, 1399, 8, 39, 1, 40, 3, 40, 1402, 8, 40, 1, 40,
    1, 40, 5, 40, 1406, 8, 40, 10, 40, 12, 40, 1409, 9, 40, 1, 40, 1, 40, 5, 40, 1413, 8, 40, 10, 40,
    12, 40, 1416, 9, 40, 1, 40, 3, 40, 1419, 8, 40, 1, 40, 5, 40, 1422, 8, 40, 10, 40, 12, 40, 1425,
    9, 40, 1, 40, 1, 40, 5, 40, 1429, 8, 40, 10, 40, 12, 40, 1432, 9, 40, 1, 40, 1, 40, 1, 41, 1, 41,
    5, 41, 1438, 8, 41, 10, 41, 12, 41, 1441, 9, 41, 1, 41, 1, 41, 5, 41, 1445, 8, 41, 10, 41, 12, 41,
    1448, 9, 41, 1, 41, 1, 41, 5, 41, 1452, 8, 41, 10, 41, 12, 41, 1455, 9, 41, 1, 41, 5, 41, 1458,
    8, 41, 10, 41, 12, 41, 1461, 9, 41, 1, 41, 5, 41, 1464, 8, 41, 10, 41, 12, 41, 1467, 9, 41, 1, 41,
    3, 41, 1470, 8, 41, 1, 41, 1, 41, 1, 42, 3, 42, 1475, 8, 42, 1, 42, 5, 42, 1478, 8, 42, 10, 42, 12,
    42, 1481, 9, 42, 1, 42, 1, 42, 5, 42, 1485, 8, 42, 10, 42, 12, 42, 1488, 9, 42, 1, 42, 1, 42, 5,
    42, 1492, 8, 42, 10, 42, 12, 42, 1495, 9, 42, 1, 42, 3, 42, 1498, 8, 42, 1, 43, 4, 43, 1501, 8,
    43, 11, 43, 12, 43, 1502, 1, 44, 1, 44, 5, 44, 1507, 8, 44, 10, 44, 12, 44, 1510, 9, 44, 1, 44,
    1, 44, 5, 44, 1514, 8, 44, 10, 44, 12, 44, 1517, 9, 44, 1, 44, 3, 44, 1520, 8, 44, 1, 45, 3, 45,
    1523, 8, 45, 1, 45, 1, 45, 1, 45, 1, 45, 3, 45, 1529, 8, 45, 1, 46, 4, 46, 1532, 8, 46, 11, 46, 12,
    46, 1533, 1, 47, 1, 47, 1, 47, 5, 47, 1539, 8, 47, 10, 47, 12, 47, 1542, 9, 47, 3, 47, 1544, 8,
    47, 1, 48, 1, 48, 5, 48, 1548, 8, 48, 10, 48, 12, 48, 1551, 9, 48, 1, 48, 1, 48, 5, 48, 1555, 8,
    48, 10, 48, 12, 48, 1558, 9, 48, 1, 48, 1, 48, 1, 49, 1, 49, 3, 49, 1564, 8, 49, 1, 49, 5, 49, 1567,
    8, 49, 10, 49, 12, 49, 1570, 9, 49, 1, 49, 4, 49, 1573, 8, 49, 11, 49, 12, 49, 1574, 1, 50, 1, 50,
    3, 50, 1579, 8, 50, 1, 51, 1, 51, 5, 51, 1583, 8, 51, 10, 51, 12, 51, 1586, 9, 51, 1, 51, 1, 51,
    5, 51, 1590, 8, 51, 10, 51, 12, 51, 1593, 9, 51, 3, 51, 1595, 8, 51, 1, 51, 1, 51, 5, 51, 1599,
    8, 51, 10, 51, 12, 51, 1602, 9, 51, 1, 51, 1, 51, 5, 51, 1606, 8, 51, 10, 51, 12, 51, 1609, 9, 51,
    1, 51, 1, 51, 1, 52, 3, 52, 1614, 8, 52, 1, 52, 1, 52, 1, 52, 3, 52, 1619, 8, 52, 1, 53, 1, 53, 5,
    53, 1623, 8, 53, 10, 53, 12, 53, 1626, 9, 53, 1, 53, 1, 53, 5, 53, 1630, 8, 53, 10, 53, 12, 53,
    1633, 9, 53, 1, 53, 5, 53, 1636, 8, 53, 10, 53, 12, 53, 1639, 9, 53, 1, 54, 1, 54, 5, 54, 1643,
    8, 54, 10, 54, 12, 54, 1646, 9, 54, 1, 54, 1, 54, 5, 54, 1650, 8, 54, 10, 54, 12, 54, 1653, 9, 54,
    1, 54, 1, 54, 1, 54, 1, 54, 5, 54, 1659, 8, 54, 10, 54, 12, 54, 1662, 9, 54, 1, 54, 1, 54, 5, 54,
    1666, 8, 54, 10, 54, 12, 54, 1669, 9, 54, 1, 54, 1, 54, 3, 54, 1673, 8, 54, 1, 55, 1, 55, 5, 55,
    1677, 8, 55, 10, 55, 12, 55, 1680, 9, 55, 1, 55, 3, 55, 1683, 8, 55, 1, 56, 1, 56, 5, 56, 1687,
    8, 56, 10, 56, 12, 56, 1690, 9, 56, 1, 56, 1, 56, 3, 56, 1694, 8, 56, 1, 56, 5, 56, 1697, 8, 56,
    10, 56, 12, 56, 1700, 9, 56, 1, 56, 1, 56, 5, 56, 1704, 8, 56, 10, 56, 12, 56, 1707, 9, 56, 1, 56,
    1, 56, 3, 56, 1711, 8, 56, 5, 56, 1713, 8, 56, 10, 56, 12, 56, 1716, 9, 56, 1, 56, 5, 56, 1719,
    8, 56, 10, 56, 12, 56, 1722, 9, 56, 1, 56, 1, 56, 1, 57, 1, 57, 5, 57, 1728, 8, 57, 10, 57, 12, 57,
    1731, 9, 57, 1, 57, 1, 57, 5, 57, 1735, 8, 57, 10, 57, 12, 57, 1738, 9, 57, 1, 57, 1, 57, 5, 57,
    1742, 8, 57, 10, 57, 12, 57, 1745, 9, 57, 1, 57, 5, 57, 1748, 8, 57, 10, 57, 12, 57, 1751, 9, 57,
    1, 58, 5, 58, 1754, 8, 58, 10, 58, 12, 58, 1757, 9, 58, 1, 58, 1, 58, 5, 58, 1761, 8, 58, 10, 58,
    12, 58, 1764, 9, 58, 1, 58, 1, 58, 5, 58, 1768, 8, 58, 10, 58, 12, 58, 1771, 9, 58, 1, 58, 1, 58,
    1, 59, 1, 59, 5, 59, 1777, 8, 59, 10, 59, 12, 59, 1780, 9, 59, 1, 59, 1, 59, 5, 59, 1784, 8, 59,
    10, 59, 12, 59, 1787, 9, 59, 1, 59, 1, 59, 1, 60, 1, 60, 4, 60, 1793, 8, 60, 11, 60, 12, 60, 1794,
    1, 60, 5, 60, 1798, 8, 60, 10, 60, 12, 60, 1801, 9, 60, 1, 60, 3, 60, 1804, 8, 60, 3, 60, 1806,
    8, 60, 1, 61, 1, 61, 5, 61, 1810, 8, 61, 10, 61, 12, 61, 1813, 9, 61, 1, 61, 1, 61, 1, 61, 1, 61,
    3, 61, 1819, 8, 61, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 3, 62, 1826, 8, 62, 1, 63, 1, 63, 1, 63, 5,
    63, 1831, 8, 63, 10, 63, 12, 63, 1834, 9, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 5, 63, 1841, 8,
    63, 10, 63, 12, 63, 1844, 9, 63, 1, 63, 1, 63, 3, 63, 1848, 8, 63, 1, 64, 1, 64, 1, 65, 1, 65, 5,
    65, 1854, 8, 65, 10, 65, 12, 65, 1857, 9, 65, 1, 65, 1, 65, 5, 65, 1861, 8, 65, 10, 65, 12, 65,
    1864, 9, 65, 1, 65, 5, 65, 1867, 8, 65, 10, 65, 12, 65, 1870, 9, 65, 1, 66, 1, 66, 5, 66, 1874,
    8, 66, 10, 66, 12, 66, 1877, 9, 66, 1, 66, 1, 66, 5, 66, 1881, 8, 66, 10, 66, 12, 66, 1884, 9, 66,
    1, 66, 5, 66, 1887, 8, 66, 10, 66, 12, 66, 1890, 9, 66, 1, 67, 1, 67, 1, 67, 5, 67, 1895, 8, 67,
    10, 67, 12, 67, 1898, 9, 67, 1, 67, 1, 67, 5, 67, 1902, 8, 67, 10, 67, 12, 67, 1905, 9, 67, 1, 68,
    1, 68, 1, 68, 5, 68, 1910, 8, 68, 10, 68, 12, 68, 1913, 9, 68, 1, 68, 1, 68, 3, 68, 1917, 8, 68,
    1, 69, 1, 69, 1, 69, 5, 69, 1922, 8, 69, 10, 69, 12, 69, 1925, 9, 69, 1, 69, 1, 69, 1, 69, 1, 69,
    5, 69, 1931, 8, 69, 10, 69, 12, 69, 1934, 9, 69, 1, 69, 1, 69, 5, 69, 1938, 8, 69, 10, 69, 12, 69,
    1941, 9, 69, 1, 70, 1, 70, 5, 70, 1945, 8, 70, 10, 70, 12, 70, 1948, 9, 70, 1, 70, 1, 70, 5, 70,
    1952, 8, 70, 10, 70, 12, 70, 1955, 9, 70, 1, 70, 1, 70, 5, 70, 1959, 8, 70, 10, 70, 12, 70, 1962,
    9, 70, 1, 71, 1, 71, 1, 71, 5, 71, 1967, 8, 71, 10, 71, 12, 71, 1970, 9, 71, 1, 71, 1, 71, 5, 71,
    1974, 8, 71, 10, 71, 12, 71, 1977, 9, 71, 1, 72, 1, 72, 1, 72, 5, 72, 1982, 8, 72, 10, 72, 12, 72,
    1985, 9, 72, 1, 72, 5, 72, 1988, 8, 72, 10, 72, 12, 72, 1991, 9, 72, 1, 73, 1, 73, 1, 73, 5, 73,
    1996, 8, 73, 10, 73, 12, 73, 1999, 9, 73, 1, 73, 1, 73, 5, 73, 2003, 8, 73, 10, 73, 12, 73, 2006,
    9, 73, 1, 74, 1, 74, 1, 74, 5, 74, 2011, 8, 74, 10, 74, 12, 74, 2014, 9, 74, 1, 74, 1, 74, 5, 74,
    2018, 8, 74, 10, 74, 12, 74, 2021, 9, 74, 1, 75, 1, 75, 5, 75, 2025, 8, 75, 10, 75, 12, 75, 2028,
    9, 75, 1, 75, 1, 75, 5, 75, 2032, 8, 75, 10, 75, 12, 75, 2035, 9, 75, 1, 75, 1, 75, 3, 75, 2039,
    8, 75, 1, 76, 5, 76, 2042, 8, 76, 10, 76, 12, 76, 2045, 9, 76, 1, 76, 1, 76, 1, 77, 1, 77, 1, 77,
    1, 77, 5, 77, 2053, 8, 77, 10, 77, 12, 77, 2056, 9, 77, 3, 77, 2058, 8, 77, 1, 78, 1, 78, 1, 78,
    4, 78, 2063, 8, 78, 11, 78, 12, 78, 2064, 3, 78, 2067, 8, 78, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79,
    3, 79, 2074, 8, 79, 1, 80, 1, 80, 1, 80, 1, 80, 3, 80, 2080, 8, 80, 1, 81, 1, 81, 1, 82, 1, 82, 1,
    82, 3, 82, 2087, 8, 82, 1, 83, 1, 83, 5, 83, 2091, 8, 83, 10, 83, 12, 83, 2094, 9, 83, 1, 83, 1,
    83, 5, 83, 2098, 8, 83, 10, 83, 12, 83, 2101, 9, 83, 1, 83, 1, 83, 5, 83, 2105, 8, 83, 10, 83, 12,
    83, 2108, 9, 83, 1, 83, 5, 83, 2111, 8, 83, 10, 83, 12, 83, 2114, 9, 83, 1, 83, 5, 83, 2117, 8,
    83, 10, 83, 12, 83, 2120, 9, 83, 1, 83, 1, 83, 1, 84, 5, 84, 2125, 8, 84, 10, 84, 12, 84, 2128,
    9, 84, 1, 84, 1, 84, 5, 84, 2132, 8, 84, 10, 84, 12, 84, 2135, 9, 84, 1, 84, 1, 84, 1, 84, 3, 84,
    2140, 8, 84, 1, 85, 3, 85, 2143, 8, 85, 1, 85, 3, 85, 2146, 8, 85, 1, 85, 1, 85, 3, 85, 2150, 8,
    85, 1, 85, 3, 85, 2153, 8, 85, 1, 86, 5, 86, 2156, 8, 86, 10, 86, 12, 86, 2159, 9, 86, 1, 86, 3,
    86, 2162, 8, 86, 1, 86, 5, 86, 2165, 8, 86, 10, 86, 12, 86, 2168, 9, 86, 1, 86, 1, 86, 1, 87, 1,
    87, 5, 87, 2174, 8, 87, 10, 87, 12, 87, 2177, 9, 87, 1, 87, 1, 87, 1, 87, 5, 87, 2182, 8, 87, 10,
    87, 12, 87, 2185, 9, 87, 1, 87, 1, 87, 5, 87, 2189, 8, 87, 10, 87, 12, 87, 2192, 9, 87, 1, 87, 1,
    87, 5, 87, 2196, 8, 87, 10, 87, 12, 87, 2199, 9, 87, 1, 87, 5, 87, 2202, 8, 87, 10, 87, 12, 87,
    2205, 9, 87, 1, 87, 5, 87, 2208, 8, 87, 10, 87, 12, 87, 2211, 9, 87, 1, 87, 3, 87, 2214, 8, 87,
    1, 87, 1, 87, 3, 87, 2218, 8, 87, 1, 88, 1, 88, 5, 88, 2222, 8, 88, 10, 88, 12, 88, 2225, 9, 88,
    1, 88, 1, 88, 5, 88, 2229, 8, 88, 10, 88, 12, 88, 2232, 9, 88, 1, 88, 1, 88, 5, 88, 2236, 8, 88,
    10, 88, 12, 88, 2239, 9, 88, 1, 88, 5, 88, 2242, 8, 88, 10, 88, 12, 88, 2245, 9, 88, 1, 88, 5, 88,
    2248, 8, 88, 10, 88, 12, 88, 2251, 9, 88, 1, 88, 3, 88, 2254, 8, 88, 1, 88, 1, 88, 1, 89, 3, 89,
    2259, 8, 89, 1, 89, 1, 89, 3, 89, 2263, 8, 89, 1, 90, 4, 90, 2266, 8, 90, 11, 90, 12, 90, 2267,
    1, 91, 1, 91, 5, 91, 2272, 8, 91, 10, 91, 12, 91, 2275, 9, 91, 1, 91, 3, 91, 2278, 8, 91, 1, 92,
    3, 92, 2281, 8, 92, 1, 92, 5, 92, 2284, 8, 92, 10, 92, 12, 92, 2287, 9, 92, 1, 92, 1, 92, 5, 92,
    2291, 8, 92, 10, 92, 12, 92, 2294, 9, 92, 1, 92, 1, 92, 5, 92, 2298, 8, 92, 10, 92, 12, 92, 2301,
    9, 92, 3, 92, 2303, 8, 92, 1, 92, 3, 92, 2306, 8, 92, 1, 92, 5, 92, 2309, 8, 92, 10, 92, 12, 92,
    2312, 9, 92, 1, 92, 1, 92, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1,
    93, 1, 93, 1, 93, 1, 93, 3, 93, 2330, 8, 93, 1, 94, 1, 94, 5, 94, 2334, 8, 94, 10, 94, 12, 94, 2337,
    9, 94, 1, 94, 1, 94, 5, 94, 2341, 8, 94, 10, 94, 12, 94, 2344, 9, 94, 1, 94, 1, 94, 1, 95, 1, 95,
    5, 95, 2350, 8, 95, 10, 95, 12, 95, 2353, 9, 95, 1, 95, 1, 95, 5, 95, 2357, 8, 95, 10, 95, 12, 95,
    2360, 9, 95, 1, 95, 1, 95, 5, 95, 2364, 8, 95, 10, 95, 12, 95, 2367, 9, 95, 1, 95, 5, 95, 2370,
    8, 95, 10, 95, 12, 95, 2373, 9, 95, 1, 95, 5, 95, 2376, 8, 95, 10, 95, 12, 95, 2379, 9, 95, 1, 95,
    3, 95, 2382, 8, 95, 1, 95, 1, 95, 1, 95, 1, 95, 5, 95, 2388, 8, 95, 10, 95, 12, 95, 2391, 9, 95,
    1, 95, 3, 95, 2394, 8, 95, 1, 96, 1, 96, 1, 97, 1, 97, 3, 97, 2400, 8, 97, 1, 98, 1, 98, 1, 98, 5,
    98, 2405, 8, 98, 10, 98, 12, 98, 2408, 9, 98, 1, 98, 1, 98, 1, 99, 1, 99, 1, 99, 1, 99, 5, 99, 2416,
    8, 99, 10, 99, 12, 99, 2419, 9, 99, 1, 99, 1, 99, 1, 100, 1, 100, 1, 101, 1, 101, 1, 101, 1, 101,
    1, 102, 1, 102, 1, 103, 1, 103, 5, 103, 2433, 8, 103, 10, 103, 12, 103, 2436, 9, 103, 1, 103,
    1, 103, 5, 103, 2440, 8, 103, 10, 103, 12, 103, 2443, 9, 103, 1, 103, 1, 103, 1, 104, 1, 104,
    5, 104, 2449, 8, 104, 10, 104, 12, 104, 2452, 9, 104, 1, 104, 1, 104, 5, 104, 2456, 8, 104, 10,
    104, 12, 104, 2459, 9, 104, 1, 104, 1, 104, 1, 104, 1, 104, 5, 104, 2465, 8, 104, 10, 104, 12,
    104, 2468, 9, 104, 1, 104, 3, 104, 2471, 8, 104, 1, 104, 5, 104, 2474, 8, 104, 10, 104, 12, 104,
    2477, 9, 104, 1, 104, 1, 104, 5, 104, 2481, 8, 104, 10, 104, 12, 104, 2484, 9, 104, 1, 104, 1,
    104, 5, 104, 2488, 8, 104, 10, 104, 12, 104, 2491, 9, 104, 1, 104, 1, 104, 3, 104, 2495, 8, 104,
    1, 105, 1, 105, 5, 105, 2499, 8, 105, 10, 105, 12, 105, 2502, 9, 105, 1, 105, 1, 105, 5, 105,
    2506, 8, 105, 10, 105, 12, 105, 2509, 9, 105, 1, 105, 5, 105, 2512, 8, 105, 10, 105, 12, 105,
    2515, 9, 105, 1, 105, 3, 105, 2518, 8, 105, 1, 106, 1, 106, 1, 106, 5, 106, 2523, 8, 106, 10,
    106, 12, 106, 2526, 9, 106, 1, 106, 1, 106, 5, 106, 2530, 8, 106, 10, 106, 12, 106, 2533, 9,
    106, 1, 106, 3, 106, 2536, 8, 106, 3, 106, 2538, 8, 106, 1, 107, 1, 107, 5, 107, 2542, 8, 107,
    10, 107, 12, 107, 2545, 9, 107, 1, 107, 1, 107, 5, 107, 2549, 8, 107, 10, 107, 12, 107, 2552,
    9, 107, 1, 107, 1, 107, 3, 107, 2556, 8, 107, 1, 107, 5, 107, 2559, 8, 107, 10, 107, 12, 107,
    2562, 9, 107, 1, 107, 1, 107, 5, 107, 2566, 8, 107, 10, 107, 12, 107, 2569, 9, 107, 1, 107, 1,
    107, 5, 107, 2573, 8, 107, 10, 107, 12, 107, 2576, 9, 107, 1, 107, 3, 107, 2579, 8, 107, 1, 107,
    5, 107, 2582, 8, 107, 10, 107, 12, 107, 2585, 9, 107, 1, 107, 3, 107, 2588, 8, 107, 1, 107, 5,
    107, 2591, 8, 107, 10, 107, 12, 107, 2594, 9, 107, 1, 107, 3, 107, 2597, 8, 107, 1, 108, 1, 108,
    3, 108, 2601, 8, 108, 1, 109, 1, 109, 5, 109, 2605, 8, 109, 10, 109, 12, 109, 2608, 9, 109, 1,
    109, 1, 109, 5, 109, 2612, 8, 109, 10, 109, 12, 109, 2615, 9, 109, 1, 109, 1, 109, 5, 109, 2619,
    8, 109, 10, 109, 12, 109, 2622, 9, 109, 1, 109, 3, 109, 2625, 8, 109, 1, 109, 1, 109, 5, 109,
    2629, 8, 109, 10, 109, 12, 109, 2632, 9, 109, 1, 109, 3, 109, 2635, 8, 109, 1, 110, 1, 110, 1,
    111, 1, 111, 1, 111, 5, 111, 2642, 8, 111, 10, 111, 12, 111, 2645, 9, 111, 1, 111, 1, 111, 5,
    111, 2649, 8, 111, 10, 111, 12, 111, 2652, 9, 111, 1, 111, 1, 111, 3, 111, 2656, 8, 111, 1, 111,
    1, 111, 3, 111, 2660, 8, 111, 1, 111, 3, 111, 2663, 8, 111, 1, 112, 1, 112, 3, 112, 2667, 8, 112,
    1, 113, 1, 113, 5, 113, 2671, 8, 113, 10, 113, 12, 113, 2674, 9, 113, 1, 113, 1, 113, 5, 113,
    2678, 8, 113, 10, 113, 12, 113, 2681, 9, 113, 1, 113, 1, 113, 5, 113, 2685, 8, 113, 10, 113,
    12, 113, 2688, 9, 113, 1, 113, 1, 113, 5, 113, 2692, 8, 113, 10, 113, 12, 113, 2695, 9, 113,
    1, 113, 1, 113, 3, 113, 2699, 8, 113, 1, 113, 5, 113, 2702, 8, 113, 10, 113, 12, 113, 2705, 9,
    113, 1, 113, 1, 113, 5, 113, 2709, 8, 113, 10, 113, 12, 113, 2712, 9, 113, 1, 113, 3, 113, 2715,
    8, 113, 1, 113, 1, 113, 5, 113, 2719, 8, 113, 10, 113, 12, 113, 2722, 9, 113, 1, 113, 1, 113,
    5, 113, 2726, 8, 113, 10, 113, 12, 113, 2729, 9, 113, 1, 113, 1, 113, 5, 113, 2733, 8, 113, 10,
    113, 12, 113, 2736, 9, 113, 1, 113, 1, 113, 5, 113, 2740, 8, 113, 10, 113, 12, 113, 2743, 9,
    113, 1, 113, 1, 113, 5, 113, 2747, 8, 113, 10, 113, 12, 113, 2750, 9, 113, 3, 113, 2752, 8, 113,
    1, 113, 1, 113, 5, 113, 2756, 8, 113, 10, 113, 12, 113, 2759, 9, 113, 1, 113, 1, 113, 3, 113,
    2763, 8, 113, 1, 114, 1, 114, 5, 114, 2767, 8, 114, 10, 114, 12, 114, 2770, 9, 114, 1, 114, 1,
    114, 1, 114, 1, 114, 3, 114, 2776, 8, 114, 1, 114, 5, 114, 2779, 8, 114, 10, 114, 12, 114, 2782,
    9, 114, 1, 114, 1, 114, 5, 114, 2786, 8, 114, 10, 114, 12, 114, 2789, 9, 114, 1, 114, 1, 114,
    5, 114, 2793, 8, 114, 10, 114, 12, 114, 2796, 9, 114, 5, 114, 2798, 8, 114, 10, 114, 12, 114,
    2801, 9, 114, 1, 114, 5, 114, 2804, 8, 114, 10, 114, 12, 114, 2807, 9, 114, 1, 114, 1, 114, 1,
    115, 1, 115, 5, 115, 2813, 8, 115, 10, 115, 12, 115, 2816, 9, 115, 1, 115, 1, 115, 5, 115, 2820,
    8, 115, 10, 115, 12, 115, 2823, 9, 115, 1, 115, 5, 115, 2826, 8, 115, 10, 115, 12, 115, 2829,
    9, 115, 1, 115, 5, 115, 2832, 8, 115, 10, 115, 12, 115, 2835, 9, 115, 1, 115, 1, 115, 5, 115,
    2839, 8, 115, 10, 115, 12, 115, 2842, 9, 115, 1, 115, 1, 115, 3, 115, 2846, 8, 115, 1, 115, 1,
    115, 5, 115, 2850, 8, 115, 10, 115, 12, 115, 2853, 9, 115, 1, 115, 1, 115, 5, 115, 2857, 8, 115,
    10, 115, 12, 115, 2860, 9, 115, 1, 115, 1, 115, 3, 115, 2864, 8, 115, 3, 115, 2866, 8, 115, 1,
    116, 1, 116, 1, 116, 3, 116, 2871, 8, 116, 1, 117, 1, 117, 5, 117, 2875, 8, 117, 10, 117, 12,
    117, 2878, 9, 117, 1, 117, 1, 117, 1, 118, 1, 118, 5, 118, 2884, 8, 118, 10, 118, 12, 118, 2887,
    9, 118, 1, 118, 1, 118, 1, 119, 1, 119, 5, 119, 2893, 8, 119, 10, 119, 12, 119, 2896, 9, 119,
    1, 119, 1, 119, 5, 119, 2900, 8, 119, 10, 119, 12, 119, 2903, 9, 119, 1, 119, 4, 119, 2906, 8,
    119, 11, 119, 12, 119, 2907, 1, 119, 5, 119, 2911, 8, 119, 10, 119, 12, 119, 2914, 9, 119, 1,
    119, 3, 119, 2917, 8, 119, 1, 119, 5, 119, 2920, 8, 119, 10, 119, 12, 119, 2923, 9, 119, 1, 119,
    3, 119, 2926, 8, 119, 1, 120, 1, 120, 5, 120, 2930, 8, 120, 10, 120, 12, 120, 2933, 9, 120, 1,
    120, 1, 120, 5, 120, 2937, 8, 120, 10, 120, 12, 120, 2940, 9, 120, 1, 120, 1, 120, 1, 120, 1,
    120, 1, 120, 5, 120, 2947, 8, 120, 10, 120, 12, 120, 2950, 9, 120, 1, 120, 1, 120, 1, 121, 1,
    121, 5, 121, 2956, 8, 121, 10, 121, 12, 121, 2959, 9, 121, 1, 121, 1, 121, 1, 122, 1, 122, 1,
    122, 3, 122, 2966, 8, 122, 1, 123, 1, 123, 5, 123, 2970, 8, 123, 10, 123, 12, 123, 2973, 9, 123,
    1, 123, 1, 123, 5, 123, 2977, 8, 123, 10, 123, 12, 123, 2980, 9, 123, 1, 123, 1, 123, 3, 123,
    2984, 8, 123, 1, 123, 1, 123, 1, 123, 1, 123, 5, 123, 2990, 8, 123, 10, 123, 12, 123, 2993, 9,
    123, 1, 123, 3, 123, 2996, 8, 123, 1, 124, 1, 124, 5, 124, 3000, 8, 124, 10, 124, 12, 124, 3003,
    9, 124, 1, 124, 1, 124, 1, 124, 1, 124, 5, 124, 3009, 8, 124, 10, 124, 12, 124, 3012, 9, 124,
    1, 124, 1, 124, 1, 124, 1, 124, 5, 124, 3018, 8, 124, 10, 124, 12, 124, 3021, 9, 124, 1, 124,
    1, 124, 1, 124, 1, 124, 5, 124, 3027, 8, 124, 10, 124, 12, 124, 3030, 9, 124, 1, 124, 1, 124,
    3, 124, 3034, 8, 124, 1, 125, 1, 125, 5, 125, 3038, 8, 125, 10, 125, 12, 125, 3041, 9, 125, 1,
    125, 3, 125, 3044, 8, 125, 1, 125, 5, 125, 3047, 8, 125, 10, 125, 12, 125, 3050, 9, 125, 1, 125,
    1, 125, 5, 125, 3054, 8, 125, 10, 125, 12, 125, 3057, 9, 125, 1, 125, 1, 125, 1, 125, 1, 125,
    1, 126, 1, 126, 5, 126, 3065, 8, 126, 10, 126, 12, 126, 3068, 9, 126, 1, 126, 1, 126, 1, 126,
    3, 126, 3073, 8, 126, 1, 126, 1, 126, 1, 126, 1, 126, 3, 126, 3079, 8, 126, 1, 127, 3, 127, 3082,
    8, 127, 1, 127, 5, 127, 3085, 8, 127, 10, 127, 12, 127, 3088, 9, 127, 1, 127, 1, 127, 5, 127,
    3092, 8, 127, 10, 127, 12, 127, 3095, 9, 127, 1, 127, 1, 127, 3, 127, 3099, 8, 127, 1, 128, 1,
    128, 1, 129, 1, 129, 1, 130, 1, 130, 1, 131, 1, 131, 1, 132, 1, 132, 1, 133, 1, 133, 1, 134, 1,
    134, 1, 135, 1, 135, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 3, 136, 3122, 8, 136, 1, 137, 1, 137,
    1, 137, 1, 137, 3, 137, 3128, 8, 137, 1, 138, 1, 138, 1, 138, 3, 138, 3133, 8, 138, 1, 139, 1,
    139, 4, 139, 3137, 8, 139, 11, 139, 12, 139, 3138, 1, 140, 1, 140, 1, 140, 1, 140, 1, 140, 1,
    140, 1, 140, 1, 140, 3, 140, 3149, 8, 140, 1, 140, 5, 140, 3152, 8, 140, 10, 140, 12, 140, 3155,
    9, 140, 1, 141, 1, 141, 1, 142, 1, 142, 1, 143, 1, 143, 1, 144, 1, 144, 1, 145, 1, 145, 1, 146,
    1, 146, 1, 147, 1, 147, 1, 148, 1, 148, 1, 149, 1, 149, 1, 150, 1, 150, 1, 151, 1, 151, 5, 151,
    3179, 8, 151, 10, 151, 12, 151, 3182, 9, 151, 1, 152, 1, 152, 3, 152, 3186, 8, 152, 1, 152, 5,
    152, 3189, 8, 152, 10, 152, 12, 152, 3192, 9, 152, 1, 153, 1, 153, 5, 153, 3196, 8, 153, 10,
    153, 12, 153, 3199, 9, 153, 1, 153, 1, 153, 5, 153, 3203, 8, 153, 10, 153, 12, 153, 3206, 9,
    153, 1, 153, 1, 153, 1, 153, 1, 153, 3, 153, 3212, 8, 153, 1, 154, 1, 154, 5, 154, 3216, 8, 154,
    10, 154, 12, 154, 3219, 9, 154, 1, 154, 1, 154, 5, 154, 3223, 8, 154, 10, 154, 12, 154, 3226,
    9, 154, 1, 154, 1, 154, 4, 154, 3230, 8, 154, 11, 154, 12, 154, 3231, 1, 154, 1, 154, 1, 154,
    1, 154, 1, 154, 4, 154, 3239, 8, 154, 11, 154, 12, 154, 3240, 1, 154, 1, 154, 3, 154, 3245, 8,
    154, 1, 155, 1, 155, 1, 156, 1, 156, 3, 156, 3251, 8, 156, 1, 157, 1, 157, 1, 158, 1, 158, 5, 158,
    3257, 8, 158, 10, 158, 12, 158, 3260, 9, 158, 1, 158, 1, 158, 5, 158, 3264, 8, 158, 10, 158,
    12, 158, 3267, 9, 158, 1, 159, 1, 159, 4, 159, 3271, 8, 159, 11, 159, 12, 159, 3272, 1, 160,
    1, 160, 1, 161, 1, 161, 1, 161, 1, 162, 1, 162, 1, 162, 1, 163, 1, 163, 1, 164, 1, 164, 5, 164,
    3287, 8, 164, 10, 164, 12, 164, 3290, 9, 164, 1, 164, 3, 164, 3293, 8, 164, 1, 165, 4, 165, 3296,
    8, 165, 11, 165, 12, 165, 3297, 1, 165, 3, 165, 3301, 8, 165, 1, 165, 0, 0, 166, 0, 2, 4, 6, 8,
    10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56,
    58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104,
    106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140,
    142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176,
    178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212,
    214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248,
    250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284,
    286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320,
    322, 324, 326, 328, 330, 0, 28, 1, 0, 61, 62, 1, 0, 65, 66, 2, 0, 5, 5, 27, 27, 3, 0, 136, 136, 139,
    144, 148, 148, 1, 0, 161, 163, 1, 0, 166, 168, 2, 0, 57, 57, 72, 72, 2, 0, 54, 54, 86, 86, 1, 0,
    29, 33, 2, 0, 48, 49, 51, 52, 1, 0, 44, 47, 2, 0, 91, 91, 93, 93, 2, 0, 90, 90, 92, 92, 1, 0, 18, 19,
    1, 0, 15, 17, 2, 0, 50, 50, 89, 89, 1, 0, 111, 115, 2, 0, 122, 122, 127, 127, 1, 0, 107, 110, 2,
    0, 91, 91, 94, 94, 1, 0, 116, 121, 1, 0, 123, 125, 1, 0, 128, 130, 1, 0, 132, 133, 1, 0, 99, 106,
    7, 0, 60, 60, 68, 71, 75, 75, 80, 81, 94, 97, 107, 133, 145, 145, 1, 0, 42, 43, 1, 0, 24, 25, 3691,
    0, 333, 1, 0, 0, 0, 2, 358, 1, 0, 0, 0, 4, 384, 1, 0, 0, 0, 6, 420, 1, 0, 0, 0, 8, 425, 1, 0, 0, 0, 10,
    428, 1, 0, 0, 0, 12, 438, 1, 0, 0, 0, 14, 441, 1, 0, 0, 0, 16, 446, 1, 0, 0, 0, 18, 525, 1, 0, 0, 0,
    20, 529, 1, 0, 0, 0, 22, 570, 1, 0, 0, 0, 24, 606, 1, 0, 0, 0, 26, 629, 1, 0, 0, 0, 28, 644, 1, 0, 0,
    0, 30, 646, 1, 0, 0, 0, 32, 651, 1, 0, 0, 0, 34, 668, 1, 0, 0, 0, 36, 690, 1, 0, 0, 0, 38, 697, 1, 0,
    0, 0, 40, 699, 1, 0, 0, 0, 42, 709, 1, 0, 0, 0, 44, 760, 1, 0, 0, 0, 46, 762, 1, 0, 0, 0, 48, 796, 1,
    0, 0, 0, 50, 832, 1, 0, 0, 0, 52, 854, 1, 0, 0, 0, 54, 931, 1, 0, 0, 0, 56, 972, 1, 0, 0, 0, 58, 991,
    1, 0, 0, 0, 60, 1007, 1, 0, 0, 0, 62, 1033, 1, 0, 0, 0, 64, 1036, 1, 0, 0, 0, 66, 1072, 1, 0, 0, 0,
    68, 1117, 1, 0, 0, 0, 70, 1230, 1, 0, 0, 0, 72, 1268, 1, 0, 0, 0, 74, 1294, 1, 0, 0, 0, 76, 1348,
    1, 0, 0, 0, 78, 1398, 1, 0, 0, 0, 80, 1401, 1, 0, 0, 0, 82, 1435, 1, 0, 0, 0, 84, 1474, 1, 0, 0, 0,
    86, 1500, 1, 0, 0, 0, 88, 1519, 1, 0, 0, 0, 90, 1522, 1, 0, 0, 0, 92, 1531, 1, 0, 0, 0, 94, 1543,
    1, 0, 0, 0, 96, 1545, 1, 0, 0, 0, 98, 1563, 1, 0, 0, 0, 100, 1578, 1, 0, 0, 0, 102, 1594, 1, 0, 0,
    0, 104, 1613, 1, 0, 0, 0, 106, 1620, 1, 0, 0, 0, 108, 1672, 1, 0, 0, 0, 110, 1674, 1, 0, 0, 0, 112,
    1684, 1, 0, 0, 0, 114, 1725, 1, 0, 0, 0, 116, 1755, 1, 0, 0, 0, 118, 1774, 1, 0, 0, 0, 120, 1805,
    1, 0, 0, 0, 122, 1811, 1, 0, 0, 0, 124, 1825, 1, 0, 0, 0, 126, 1847, 1, 0, 0, 0, 128, 1849, 1, 0,
    0, 0, 130, 1851, 1, 0, 0, 0, 132, 1871, 1, 0, 0, 0, 134, 1891, 1, 0, 0, 0, 136, 1906, 1, 0, 0, 0,
    138, 1918, 1, 0, 0, 0, 140, 1942, 1, 0, 0, 0, 142, 1963, 1, 0, 0, 0, 144, 1978, 1, 0, 0, 0, 146,
    1992, 1, 0, 0, 0, 148, 2007, 1, 0, 0, 0, 150, 2022, 1, 0, 0, 0, 152, 2043, 1, 0, 0, 0, 154, 2057,
    1, 0, 0, 0, 156, 2066, 1, 0, 0, 0, 158, 2073, 1, 0, 0, 0, 160, 2079, 1, 0, 0, 0, 162, 2081, 1, 0,
    0, 0, 164, 2086, 1, 0, 0, 0, 166, 2088, 1, 0, 0, 0, 168, 2126, 1, 0, 0, 0, 170, 2152, 1, 0, 0, 0,
    172, 2157, 1, 0, 0, 0, 174, 2217, 1, 0, 0, 0, 176, 2219, 1, 0, 0, 0, 178, 2262, 1, 0, 0, 0, 180,
    2265, 1, 0, 0, 0, 182, 2277, 1, 0, 0, 0, 184, 2280, 1, 0, 0, 0, 186, 2329, 1, 0, 0, 0, 188, 2331,
    1, 0, 0, 0, 190, 2393, 1, 0, 0, 0, 192, 2395, 1, 0, 0, 0, 194, 2399, 1, 0, 0, 0, 196, 2401, 1, 0,
    0, 0, 198, 2411, 1, 0, 0, 0, 200, 2422, 1, 0, 0, 0, 202, 2424, 1, 0, 0, 0, 204, 2428, 1, 0, 0, 0,
    206, 2430, 1, 0, 0, 0, 208, 2494, 1, 0, 0, 0, 210, 2496, 1, 0, 0, 0, 212, 2537, 1, 0, 0, 0, 214,
    2539, 1, 0, 0, 0, 216, 2600, 1, 0, 0, 0, 218, 2634, 1, 0, 0, 0, 220, 2636, 1, 0, 0, 0, 222, 2662,
    1, 0, 0, 0, 224, 2666, 1, 0, 0, 0, 226, 2762, 1, 0, 0, 0, 228, 2764, 1, 0, 0, 0, 230, 2865, 1, 0,
    0, 0, 232, 2870, 1, 0, 0, 0, 234, 2872, 1, 0, 0, 0, 236, 2881, 1, 0, 0, 0, 238, 2890, 1, 0, 0, 0,
    240, 2927, 1, 0, 0, 0, 242, 2953, 1, 0, 0, 0, 244, 2965, 1, 0, 0, 0, 246, 2967, 1, 0, 0, 0, 248,
    3033, 1, 0, 0, 0, 250, 3035, 1, 0, 0, 0, 252, 3078, 1, 0, 0, 0, 254, 3081, 1, 0, 0, 0, 256, 3100,
    1, 0, 0, 0, 258, 3102, 1, 0, 0, 0, 260, 3104, 1, 0, 0, 0, 262, 3106, 1, 0, 0, 0, 264, 3108, 1, 0,
    0, 0, 266, 3110, 1, 0, 0, 0, 268, 3112, 1, 0, 0, 0, 270, 3114, 1, 0, 0, 0, 272, 3121, 1, 0, 0, 0,
    274, 3127, 1, 0, 0, 0, 276, 3132, 1, 0, 0, 0, 278, 3136, 1, 0, 0, 0, 280, 3148, 1, 0, 0, 0, 282,
    3156, 1, 0, 0, 0, 284, 3158, 1, 0, 0, 0, 286, 3160, 1, 0, 0, 0, 288, 3162, 1, 0, 0, 0, 290, 3164,
    1, 0, 0, 0, 292, 3166, 1, 0, 0, 0, 294, 3168, 1, 0, 0, 0, 296, 3170, 1, 0, 0, 0, 298, 3172, 1, 0,
    0, 0, 300, 3174, 1, 0, 0, 0, 302, 3176, 1, 0, 0, 0, 304, 3185, 1, 0, 0, 0, 306, 3211, 1, 0, 0, 0,
    308, 3244, 1, 0, 0, 0, 310, 3246, 1, 0, 0, 0, 312, 3250, 1, 0, 0, 0, 314, 3252, 1, 0, 0, 0, 316,
    3254, 1, 0, 0, 0, 318, 3268, 1, 0, 0, 0, 320, 3274, 1, 0, 0, 0, 322, 3276, 1, 0, 0, 0, 324, 3279,
    1, 0, 0, 0, 326, 3282, 1, 0, 0, 0, 328, 3292, 1, 0, 0, 0, 330, 3300, 1, 0, 0, 0, 332, 334, 3, 318,
    159, 0, 333, 332, 1, 0, 0, 0, 333, 334, 1, 0, 0, 0, 334, 338, 1, 0, 0, 0, 335, 337, 5, 5, 0, 0, 336,
    335, 1, 0, 0, 0, 337, 340, 1, 0, 0, 0, 338, 336, 1, 0, 0, 0, 338, 339, 1, 0, 0, 0, 339, 344, 1, 0,
    0, 0, 340, 338, 1, 0, 0, 0, 341, 343, 3, 4, 2, 0, 342, 341, 1, 0, 0, 0, 343, 346, 1, 0, 0, 0, 344,
    342, 1, 0, 0, 0, 344, 345, 1, 0, 0, 0, 345, 347, 1, 0, 0, 0, 346, 344, 1, 0, 0, 0, 347, 348, 3, 6,
    3, 0, 348, 352, 3, 8, 4, 0, 349, 351, 3, 14, 7, 0, 350, 349, 1, 0, 0, 0, 351, 354, 1, 0, 0, 0, 352,
    350, 1, 0, 0, 0, 352, 353, 1, 0, 0, 0, 353, 355, 1, 0, 0, 0, 354, 352, 1, 0, 0, 0, 355, 356, 5, 0,
    0, 1, 356, 1, 1, 0, 0, 0, 357, 359, 3, 318, 159, 0, 358, 357, 1, 0, 0, 0, 358, 359, 1, 0, 0, 0, 359,
    363, 1, 0, 0, 0, 360, 362, 5, 5, 0, 0, 361, 360, 1, 0, 0, 0, 362, 365, 1, 0, 0, 0, 363, 361, 1, 0,
    0, 0, 363, 364, 1, 0, 0, 0, 364, 369, 1, 0, 0, 0, 365, 363, 1, 0, 0, 0, 366, 368, 3, 4, 2, 0, 367,
    366, 1, 0, 0, 0, 368, 371, 1, 0, 0, 0, 369, 367, 1, 0, 0, 0, 369, 370, 1, 0, 0, 0, 370, 372, 1, 0,
    0, 0, 371, 369, 1, 0, 0, 0, 372, 373, 3, 6, 3, 0, 373, 379, 3, 8, 4, 0, 374, 375, 3, 122, 61, 0, 375,
    376, 3, 328, 164, 0, 376, 378, 1, 0, 0, 0, 377, 374, 1, 0, 0, 0, 378, 381, 1, 0, 0, 0, 379, 377,
    1, 0, 0, 0, 379, 380, 1, 0, 0, 0, 380, 382, 1, 0, 0, 0, 381, 379, 1, 0, 0, 0, 382, 383, 5, 0, 0, 1,
    383, 3, 1, 0, 0, 0, 384, 388, 5, 98, 0, 0, 385, 387, 5, 5, 0, 0, 386, 385, 1, 0, 0, 0, 387, 390, 1,
    0, 0, 0, 388, 386, 1, 0, 0, 0, 388, 389, 1, 0, 0, 0, 389, 391, 1, 0, 0, 0, 390, 388, 1, 0, 0, 0, 391,
    395, 5, 26, 0, 0, 392, 394, 5, 5, 0, 0, 393, 392, 1, 0, 0, 0, 394, 397, 1, 0, 0, 0, 395, 393, 1, 0,
    0, 0, 395, 396, 1, 0, 0, 0, 396, 407, 1, 0, 0, 0, 397, 395, 1, 0, 0, 0, 398, 400, 5, 11, 0, 0, 399,
    401, 3, 312, 156, 0, 400, 399, 1, 0, 0, 0, 401, 402, 1, 0, 0, 0, 402, 400, 1, 0, 0, 0, 402, 403,
    1, 0, 0, 0, 403, 404, 1, 0, 0, 0, 404, 405, 5, 12, 0, 0, 405, 408, 1, 0, 0, 0, 406, 408, 3, 312, 156,
    0, 407, 398, 1, 0, 0, 0, 407, 406, 1, 0, 0, 0, 408, 412, 1, 0, 0, 0, 409, 411, 5, 5, 0, 0, 410, 409,
    1, 0, 0, 0, 411, 414, 1, 0, 0, 0, 412, 410, 1, 0, 0, 0, 412, 413, 1, 0, 0, 0, 413, 5, 1, 0, 0, 0, 414,
    412, 1, 0, 0, 0, 415, 416, 5, 59, 0, 0, 416, 418, 3, 316, 158, 0, 417, 419, 3, 328, 164, 0, 418,
    417, 1, 0, 0, 0, 418, 419, 1, 0, 0, 0, 419, 421, 1, 0, 0, 0, 420, 415, 1, 0, 0, 0, 420, 421, 1, 0,
    0, 0, 421, 7, 1, 0, 0, 0, 422, 424, 3, 10, 5, 0, 423, 422, 1, 0, 0, 0, 424, 427, 1, 0, 0, 0, 425, 423,
    1, 0, 0, 0, 425, 426, 1, 0, 0, 0, 426, 9, 1, 0, 0, 0, 427, 425, 1, 0, 0, 0, 428, 429, 5, 60, 0, 0, 429,
    433, 3, 316, 158, 0, 430, 431, 5, 7, 0, 0, 431, 434, 5, 15, 0, 0, 432, 434, 3, 12, 6, 0, 433, 430,
    1, 0, 0, 0, 433, 432, 1, 0, 0, 0, 433, 434, 1, 0, 0, 0, 434, 436, 1, 0, 0, 0, 435, 437, 3, 328, 164,
    0, 436, 435, 1, 0, 0, 0, 436, 437, 1, 0, 0, 0, 437, 11, 1, 0, 0, 0, 438, 439, 5, 89, 0, 0, 439, 440,
    3, 314, 157, 0, 440, 13, 1, 0, 0, 0, 441, 443, 3, 124, 62, 0, 442, 444, 3, 330, 165, 0, 443, 442,
    1, 0, 0, 0, 443, 444, 1, 0, 0, 0, 444, 15, 1, 0, 0, 0, 445, 447, 3, 278, 139, 0, 446, 445, 1, 0, 0,
    0, 446, 447, 1, 0, 0, 0, 447, 448, 1, 0, 0, 0, 448, 452, 7, 0, 0, 0, 449, 451, 5, 5, 0, 0, 450, 449,
    1, 0, 0, 0, 451, 454, 1, 0, 0, 0, 452, 450, 1, 0, 0, 0, 452, 453, 1, 0, 0, 0, 453, 455, 1, 0, 0, 0,
    454, 452, 1, 0, 0, 0, 455, 463, 3, 314, 157, 0, 456, 458, 5, 5, 0, 0, 457, 456, 1, 0, 0, 0, 458,
    461, 1, 0, 0, 0, 459, 457, 1, 0, 0, 0, 459, 460, 1, 0, 0, 0, 460, 462, 1, 0, 0, 0, 461, 459, 1, 0,
    0, 0, 462, 464, 3, 82, 41, 0, 463, 459, 1, 0, 0, 0, 463, 464, 1, 0, 0, 0, 464, 472, 1, 0, 0, 0, 465,
    467, 5, 5, 0, 0, 466, 465, 1, 0, 0, 0, 467, 470, 1, 0, 0, 0, 468, 466, 1, 0, 0, 0, 468, 469, 1, 0,
    0, 0, 469, 471, 1, 0, 0, 0, 470, 468, 1, 0, 0, 0, 471, 473, 3, 18, 9, 0, 472, 468, 1, 0, 0, 0, 472,
    473, 1, 0, 0, 0, 473, 488, 1, 0, 0, 0, 474, 476, 5, 5, 0, 0, 475, 474, 1, 0, 0, 0, 476, 479, 1, 0,
    0, 0, 477, 475, 1, 0, 0, 0, 477, 478, 1, 0, 0, 0, 478, 480, 1, 0, 0, 0, 479, 477, 1, 0, 0, 0, 480,
    484, 5, 26, 0, 0, 481, 483, 5, 5, 0, 0, 482, 481, 1, 0, 0, 0, 483, 486, 1, 0, 0, 0, 484, 482, 1, 0,
    0, 0, 484, 485, 1, 0, 0, 0, 485, 487, 1, 0, 0, 0, 486, 484, 1, 0, 0, 0, 487, 489, 3, 24, 12, 0, 488,
    477, 1, 0, 0, 0, 488, 489, 1, 0, 0, 0, 489, 497, 1, 0, 0, 0, 490, 492, 5, 5, 0, 0, 491, 490, 1, 0,
    0, 0, 492, 495, 1, 0, 0, 0, 493, 491, 1, 0, 0, 0, 493, 494, 1, 0, 0, 0, 494, 496, 1, 0, 0, 0, 495,
    493, 1, 0, 0, 0, 496, 498, 3, 114, 57, 0, 497, 493, 1, 0, 0, 0, 497, 498, 1, 0, 0, 0, 498, 513, 1,
    0, 0, 0, 499, 501, 5, 5, 0, 0, 500, 499, 1, 0, 0, 0, 501, 504, 1, 0, 0, 0, 502, 500, 1, 0, 0, 0, 502,
    503, 1, 0, 0, 0, 503, 505, 1, 0, 0, 0, 504, 502, 1, 0, 0, 0, 505, 514, 3, 34, 17, 0, 506, 508, 5,
    5, 0, 0, 507, 506, 1, 0, 0, 0, 508, 511, 1, 0, 0, 0, 509, 507, 1, 0, 0, 0, 509, 510, 1, 0, 0, 0, 510,
    512, 1, 0, 0, 0, 511, 509, 1, 0, 0, 0, 512, 514, 3, 46, 23, 0, 513, 502, 1, 0, 0, 0, 513, 509, 1,
    0, 0, 0, 513, 514, 1, 0, 0, 0, 514, 17, 1, 0, 0, 0, 515, 517, 3, 278, 139, 0, 516, 515, 1, 0, 0, 0,
    516, 517, 1, 0, 0, 0, 517, 518, 1, 0, 0, 0, 518, 522, 5, 68, 0, 0, 519, 521, 5, 5, 0, 0, 520, 519,
    1, 0, 0, 0, 521, 524, 1, 0, 0, 0, 522, 520, 1, 0, 0, 0, 522, 523, 1, 0, 0, 0, 523, 526, 1, 0, 0, 0,
    524, 522, 1, 0, 0, 0, 525, 516, 1, 0, 0, 0, 525, 526, 1, 0, 0, 0, 526, 527, 1, 0, 0, 0, 527, 528,
    3, 20, 10, 0, 528, 19, 1, 0, 0, 0, 529, 533, 5, 9, 0, 0, 530, 532, 5, 5, 0, 0, 531, 530, 1, 0, 0, 0,
    532, 535, 1, 0, 0, 0, 533, 531, 1, 0, 0, 0, 533, 534, 1, 0, 0, 0, 534, 556, 1, 0, 0, 0, 535, 533,
    1, 0, 0, 0, 536, 553, 3, 22, 11, 0, 537, 539, 5, 5, 0, 0, 538, 537, 1, 0, 0, 0, 539, 542, 1, 0, 0,
    0, 540, 538, 1, 0, 0, 0, 540, 541, 1, 0, 0, 0, 541, 543, 1, 0, 0, 0, 542, 540, 1, 0, 0, 0, 543, 547,
    5, 8, 0, 0, 544, 546, 5, 5, 0, 0, 545, 544, 1, 0, 0, 0, 546, 549, 1, 0, 0, 0, 547, 545, 1, 0, 0, 0,
    547, 548, 1, 0, 0, 0, 548, 550, 1, 0, 0, 0, 549, 547, 1, 0, 0, 0, 550, 552, 3, 22, 11, 0, 551, 540,
    1, 0, 0, 0, 552, 555, 1, 0, 0, 0, 553, 551, 1, 0, 0, 0, 553, 554, 1, 0, 0, 0, 554, 557, 1, 0, 0, 0,
    555, 553, 1, 0, 0, 0, 556, 536, 1, 0, 0, 0, 556, 557, 1, 0, 0, 0, 557, 561, 1, 0, 0, 0, 558, 560,
    5, 5, 0, 0, 559, 558, 1, 0, 0, 0, 560, 563, 1, 0, 0, 0, 561, 559, 1, 0, 0, 0, 561, 562, 1, 0, 0, 0,
    562, 565, 1, 0, 0, 0, 563, 561, 1, 0, 0, 0, 564, 566, 5, 8, 0, 0, 565, 564, 1, 0, 0, 0, 565, 566,
    1, 0, 0, 0, 566, 567, 1, 0, 0, 0, 567, 568, 5, 10, 0, 0, 568, 21, 1, 0, 0, 0, 569, 571, 3, 278, 139,
    0, 570, 569, 1, 0, 0, 0, 570, 571, 1, 0, 0, 0, 571, 573, 1, 0, 0, 0, 572, 574, 7, 1, 0, 0, 573, 572,
    1, 0, 0, 0, 573, 574, 1, 0, 0, 0, 574, 578, 1, 0, 0, 0, 575, 577, 5, 5, 0, 0, 576, 575, 1, 0, 0, 0,
    577, 580, 1, 0, 0, 0, 578, 576, 1, 0, 0, 0, 578, 579, 1, 0, 0, 0, 579, 581, 1, 0, 0, 0, 580, 578,
    1, 0, 0, 0, 581, 582, 3, 314, 157, 0, 582, 586, 5, 26, 0, 0, 583, 585, 5, 5, 0, 0, 584, 583, 1, 0,
    0, 0, 585, 588, 1, 0, 0, 0, 586, 584, 1, 0, 0, 0, 586, 587, 1, 0, 0, 0, 587, 589, 1, 0, 0, 0, 588,
    586, 1, 0, 0, 0, 589, 604, 3, 90, 45, 0, 590, 592, 5, 5, 0, 0, 591, 590, 1, 0, 0, 0, 592, 595, 1,
    0, 0, 0, 593, 591, 1, 0, 0, 0, 593, 594, 1, 0, 0, 0, 594, 596, 1, 0, 0, 0, 595, 593, 1, 0, 0, 0, 596,
    600, 5, 28, 0, 0, 597, 599, 5, 5, 0, 0, 598, 597, 1, 0, 0, 0, 599, 602, 1, 0, 0, 0, 600, 598, 1, 0,
    0, 0, 600, 601, 1, 0, 0, 0, 601, 603, 1, 0, 0, 0, 602, 600, 1, 0, 0, 0, 603, 605, 3, 128, 64, 0, 604,
    593, 1, 0, 0, 0, 604, 605, 1, 0, 0, 0, 605, 23, 1, 0, 0, 0, 606, 623, 3, 26, 13, 0, 607, 609, 5, 5,
    0, 0, 608, 607, 1, 0, 0, 0, 609, 612, 1, 0, 0, 0, 610, 608, 1, 0, 0, 0, 610, 611, 1, 0, 0, 0, 611,
    613, 1, 0, 0, 0, 612, 610, 1, 0, 0, 0, 613, 617, 5, 8, 0, 0, 614, 616, 5, 5, 0, 0, 615, 614, 1, 0,
    0, 0, 616, 619, 1, 0, 0, 0, 617, 615, 1, 0, 0, 0, 617, 618, 1, 0, 0, 0, 618, 620, 1, 0, 0, 0, 619,
    617, 1, 0, 0, 0, 620, 622, 3, 26, 13, 0, 621, 610, 1, 0, 0, 0, 622, 625, 1, 0, 0, 0, 623, 621, 1,
    0, 0, 0, 623, 624, 1, 0, 0, 0, 624, 25, 1, 0, 0, 0, 625, 623, 1, 0, 0, 0, 626, 628, 3, 304, 152, 0,
    627, 626, 1, 0, 0, 0, 628, 631, 1, 0, 0, 0, 629, 627, 1, 0, 0, 0, 629, 630, 1, 0, 0, 0, 630, 635,
    1, 0, 0, 0, 631, 629, 1, 0, 0, 0, 632, 634, 5, 5, 0, 0, 633, 632, 1, 0, 0, 0, 634, 637, 1, 0, 0, 0,
    635, 633, 1, 0, 0, 0, 635, 636, 1, 0, 0, 0, 636, 638, 1, 0, 0, 0, 637, 635, 1, 0, 0, 0, 638, 639,
    3, 28, 14, 0, 639, 27, 1, 0, 0, 0, 640, 645, 3, 30, 15, 0, 641, 645, 3, 32, 16, 0, 642, 645, 3, 106,
    53, 0, 643, 645, 3, 102, 51, 0, 644, 640, 1, 0, 0, 0, 644, 641, 1, 0, 0, 0, 644, 642, 1, 0, 0, 0,
    644, 643, 1, 0, 0, 0, 645, 29, 1, 0, 0, 0, 646, 647, 3, 106, 53, 0, 647, 648, 3, 174, 87, 0, 648,
    31, 1, 0, 0, 0, 649, 652, 3, 106, 53, 0, 650, 652, 3, 102, 51, 0, 651, 649, 1, 0, 0, 0, 651, 650,
    1, 0, 0, 0, 652, 656, 1, 0, 0, 0, 653, 655, 5, 5, 0, 0, 654, 653, 1, 0, 0, 0, 655, 658, 1, 0, 0, 0,
    656, 654, 1, 0, 0, 0, 656, 657, 1, 0, 0, 0, 657, 659, 1, 0, 0, 0, 658, 656, 1, 0, 0, 0, 659, 663,
    5, 69, 0, 0, 660, 662, 5, 5, 0, 0, 661, 660, 1, 0, 0, 0, 662, 665, 1, 0, 0, 0, 663, 661, 1, 0, 0, 0,
    663, 664, 1, 0, 0, 0, 664, 666, 1, 0, 0, 0, 665, 663, 1, 0, 0, 0, 666, 667, 3, 128, 64, 0, 667, 33,
    1, 0, 0, 0, 668, 672, 5, 13, 0, 0, 669, 671, 5, 5, 0, 0, 670, 669, 1, 0, 0, 0, 671, 674, 1, 0, 0, 0,
    672, 670, 1, 0, 0, 0, 672, 673, 1, 0, 0, 0, 673, 675, 1, 0, 0, 0, 674, 672, 1, 0, 0, 0, 675, 679,
    3, 36, 18, 0, 676, 678, 5, 5, 0, 0, 677, 676, 1, 0, 0, 0, 678, 681, 1, 0, 0, 0, 679, 677, 1, 0, 0,
    0, 679, 680, 1, 0, 0, 0, 680, 682, 1, 0, 0, 0, 681, 679, 1, 0, 0, 0, 682, 683, 5, 14, 0, 0, 683, 35,
    1, 0, 0, 0, 684, 686, 3, 38, 19, 0, 685, 687, 3, 330, 165, 0, 686, 685, 1, 0, 0, 0, 686, 687, 1,
    0, 0, 0, 687, 689, 1, 0, 0, 0, 688, 684, 1, 0, 0, 0, 689, 692, 1, 0, 0, 0, 690, 688, 1, 0, 0, 0, 690,
    691, 1, 0, 0, 0, 691, 37, 1, 0, 0, 0, 692, 690, 1, 0, 0, 0, 693, 698, 3, 124, 62, 0, 694, 698, 3,
    66, 33, 0, 695, 698, 3, 40, 20, 0, 696, 698, 3, 42, 21, 0, 697, 693, 1, 0, 0, 0, 697, 694, 1, 0,
    0, 0, 697, 695, 1, 0, 0, 0, 697, 696, 1, 0, 0, 0, 698, 39, 1, 0, 0, 0, 699, 703, 5, 71, 0, 0, 700,
    702, 5, 5, 0, 0, 701, 700, 1, 0, 0, 0, 702, 705, 1, 0, 0, 0, 703, 701, 1, 0, 0, 0, 703, 704, 1, 0,
    0, 0, 704, 706, 1, 0, 0, 0, 705, 703, 1, 0, 0, 0, 706, 707, 3, 118, 59, 0, 707, 41, 1, 0, 0, 0, 708,
    710, 3, 278, 139, 0, 709, 708, 1, 0, 0, 0, 709, 710, 1, 0, 0, 0, 710, 711, 1, 0, 0, 0, 711, 715,
    5, 68, 0, 0, 712, 714, 5, 5, 0, 0, 713, 712, 1, 0, 0, 0, 714, 717, 1, 0, 0, 0, 715, 713, 1, 0, 0, 0,
    715, 716, 1, 0, 0, 0, 716, 718, 1, 0, 0, 0, 717, 715, 1, 0, 0, 0, 718, 733, 3, 54, 27, 0, 719, 721,
    5, 5, 0, 0, 720, 719, 1, 0, 0, 0, 721, 724, 1, 0, 0, 0, 722, 720, 1, 0, 0, 0, 722, 723, 1, 0, 0, 0,
    723, 725, 1, 0, 0, 0, 724, 722, 1, 0, 0, 0, 725, 729, 5, 26, 0, 0, 726, 728, 5, 5, 0, 0, 727, 726,
    1, 0, 0, 0, 728, 731, 1, 0, 0, 0, 729, 727, 1, 0, 0, 0, 729, 730, 1, 0, 0, 0, 730, 732, 1, 0, 0, 0,
    731, 729, 1, 0, 0, 0, 732, 734, 3, 44, 22, 0, 733, 722, 1, 0, 0, 0, 733, 734, 1, 0, 0, 0, 734, 738,
    1, 0, 0, 0, 735, 737, 5, 5, 0, 0, 736, 735, 1, 0, 0, 0, 737, 740, 1, 0, 0, 0, 738, 736, 1, 0, 0, 0,
    738, 739, 1, 0, 0, 0, 739, 742, 1, 0, 0, 0, 740, 738, 1, 0, 0, 0, 741, 743, 3, 118, 59, 0, 742, 741,
    1, 0, 0, 0, 742, 743, 1, 0, 0, 0, 743, 43, 1, 0, 0, 0, 744, 748, 5, 72, 0, 0, 745, 747, 5, 5, 0, 0,
    746, 745, 1, 0, 0, 0, 747, 750, 1, 0, 0, 0, 748, 746, 1, 0, 0, 0, 748, 749, 1, 0, 0, 0, 749, 751,
    1, 0, 0, 0, 750, 748, 1, 0, 0, 0, 751, 761, 3, 174, 87, 0, 752, 756, 5, 73, 0, 0, 753, 755, 5, 5,
    0, 0, 754, 753, 1, 0, 0, 0, 755, 758, 1, 0, 0, 0, 756, 754, 1, 0, 0, 0, 756, 757, 1, 0, 0, 0, 757,
    759, 1, 0, 0, 0, 758, 756, 1, 0, 0, 0, 759, 761, 3, 174, 87, 0, 760, 744, 1, 0, 0, 0, 760, 752, 1,
    0, 0, 0, 761, 45, 1, 0, 0, 0, 762, 766, 5, 13, 0, 0, 763, 765, 5, 5, 0, 0, 764, 763, 1, 0, 0, 0, 765,
    768, 1, 0, 0, 0, 766, 764, 1, 0, 0, 0, 766, 767, 1, 0, 0, 0, 767, 770, 1, 0, 0, 0, 768, 766, 1, 0,
    0, 0, 769, 771, 3, 48, 24, 0, 770, 769, 1, 0, 0, 0, 770, 771, 1, 0, 0, 0, 771, 786, 1, 0, 0, 0, 772,
    774, 5, 5, 0, 0, 773, 772, 1, 0, 0, 0, 774, 777, 1, 0, 0, 0, 775, 773, 1, 0, 0, 0, 775, 776, 1, 0,
    0, 0, 776, 778, 1, 0, 0, 0, 777, 775, 1, 0, 0, 0, 778, 782, 5, 27, 0, 0, 779, 781, 5, 5, 0, 0, 780,
    779, 1, 0, 0, 0, 781, 784, 1, 0, 0, 0, 782, 780, 1, 0, 0, 0, 782, 783, 1, 0, 0, 0, 783, 785, 1, 0,
    0, 0, 784, 782, 1, 0, 0, 0, 785, 787, 3, 36, 18, 0, 786, 775, 1, 0, 0, 0, 786, 787, 1, 0, 0, 0, 787,
    791, 1, 0, 0, 0, 788, 790, 5, 5, 0, 0, 789, 788, 1, 0, 0, 0, 790, 793, 1, 0, 0, 0, 791, 789, 1, 0,
    0, 0, 791, 792, 1, 0, 0, 0, 792, 794, 1, 0, 0, 0, 793, 791, 1, 0, 0, 0, 794, 795, 5, 14, 0, 0, 795,
    47, 1, 0, 0, 0, 796, 813, 3, 50, 25, 0, 797, 799, 5, 5, 0, 0, 798, 797, 1, 0, 0, 0, 799, 802, 1, 0,
    0, 0, 800, 798, 1, 0, 0, 0, 800, 801, 1, 0, 0, 0, 801, 803, 1, 0, 0, 0, 802, 800, 1, 0, 0, 0, 803,
    807, 5, 8, 0, 0, 804, 806, 5, 5, 0, 0, 805, 804, 1, 0, 0, 0, 806, 809, 1, 0, 0, 0, 807, 805, 1, 0,
    0, 0, 807, 808, 1, 0, 0, 0, 808, 810, 1, 0, 0, 0, 809, 807, 1, 0, 0, 0, 810, 812, 3, 50, 25, 0, 811,
    800, 1, 0, 0, 0, 812, 815, 1, 0, 0, 0, 813, 811, 1, 0, 0, 0, 813, 814, 1, 0, 0, 0, 814, 819, 1, 0,
    0, 0, 815, 813, 1, 0, 0, 0, 816, 818, 5, 5, 0, 0, 817, 816, 1, 0, 0, 0, 818, 821, 1, 0, 0, 0, 819,
    817, 1, 0, 0, 0, 819, 820, 1, 0, 0, 0, 820, 823, 1, 0, 0, 0, 821, 819, 1, 0, 0, 0, 822, 824, 5, 8,
    0, 0, 823, 822, 1, 0, 0, 0, 823, 824, 1, 0, 0, 0, 824, 49, 1, 0, 0, 0, 825, 829, 3, 278, 139, 0, 826,
    828, 5, 5, 0, 0, 827, 826, 1, 0, 0, 0, 828, 831, 1, 0, 0, 0, 829, 827, 1, 0, 0, 0, 829, 830, 1, 0,
    0, 0, 830, 833, 1, 0, 0, 0, 831, 829, 1, 0, 0, 0, 832, 825, 1, 0, 0, 0, 832, 833, 1, 0, 0, 0, 833,
    834, 1, 0, 0, 0, 834, 842, 3, 314, 157, 0, 835, 837, 5, 5, 0, 0, 836, 835, 1, 0, 0, 0, 837, 840,
    1, 0, 0, 0, 838, 836, 1, 0, 0, 0, 838, 839, 1, 0, 0, 0, 839, 841, 1, 0, 0, 0, 840, 838, 1, 0, 0, 0,
    841, 843, 3, 174, 87, 0, 842, 838, 1, 0, 0, 0, 842, 843, 1, 0, 0, 0, 843, 851, 1, 0, 0, 0, 844, 846,
    5, 5, 0, 0, 845, 844, 1, 0, 0, 0, 846, 849, 1, 0, 0, 0, 847, 845, 1, 0, 0, 0, 847, 848, 1, 0, 0, 0,
    848, 850, 1, 0, 0, 0, 849, 847, 1, 0, 0, 0, 850, 852, 3, 34, 17, 0, 851, 847, 1, 0, 0, 0, 851, 852,
    1, 0, 0, 0, 852, 51, 1, 0, 0, 0, 853, 855, 3, 278, 139, 0, 854, 853, 1, 0, 0, 0, 854, 855, 1, 0, 0,
    0, 855, 856, 1, 0, 0, 0, 856, 864, 5, 63, 0, 0, 857, 859, 5, 5, 0, 0, 858, 857, 1, 0, 0, 0, 859, 862,
    1, 0, 0, 0, 860, 858, 1, 0, 0, 0, 860, 861, 1, 0, 0, 0, 861, 863, 1, 0, 0, 0, 862, 860, 1, 0, 0, 0,
    863, 865, 3, 82, 41, 0, 864, 860, 1, 0, 0, 0, 864, 865, 1, 0, 0, 0, 865, 881, 1, 0, 0, 0, 866, 868,
    5, 5, 0, 0, 867, 866, 1, 0, 0, 0, 868, 871, 1, 0, 0, 0, 869, 867, 1, 0, 0, 0, 869, 870, 1, 0, 0, 0,
    870, 872, 1, 0, 0, 0, 871, 869, 1, 0, 0, 0, 872, 876, 3, 104, 52, 0, 873, 875, 5, 5, 0, 0, 874, 873,
    1, 0, 0, 0, 875, 878, 1, 0, 0, 0, 876, 874, 1, 0, 0, 0, 876, 877, 1, 0, 0, 0, 877, 879, 1, 0, 0, 0,
    878, 876, 1, 0, 0, 0, 879, 880, 5, 7, 0, 0, 880, 882, 1, 0, 0, 0, 881, 869, 1, 0, 0, 0, 881, 882,
    1, 0, 0, 0, 882, 886, 1, 0, 0, 0, 883, 885, 5, 5, 0, 0, 884, 883, 1, 0, 0, 0, 885, 888, 1, 0, 0, 0,
    886, 884, 1, 0, 0, 0, 886, 887, 1, 0, 0, 0, 887, 889, 1, 0, 0, 0, 888, 886, 1, 0, 0, 0, 889, 893,
    3, 314, 157, 0, 890, 892, 5, 5, 0, 0, 891, 890, 1, 0, 0, 0, 892, 895, 1, 0, 0, 0, 893, 891, 1, 0,
    0, 0, 893, 894, 1, 0, 0, 0, 894, 896, 1, 0, 0, 0, 895, 893, 1, 0, 0, 0, 896, 911, 3, 54, 27, 0, 897,
    899, 5, 5, 0, 0, 898, 897, 1, 0, 0, 0, 899, 902, 1, 0, 0, 0, 900, 898, 1, 0, 0, 0, 900, 901, 1, 0,
    0, 0, 901, 903, 1, 0, 0, 0, 902, 900, 1, 0, 0, 0, 903, 907, 5, 26, 0, 0, 904, 906, 5, 5, 0, 0, 905,
    904, 1, 0, 0, 0, 906, 909, 1, 0, 0, 0, 907, 905, 1, 0, 0, 0, 907, 908, 1, 0, 0, 0, 908, 910, 1, 0,
    0, 0, 909, 907, 1, 0, 0, 0, 910, 912, 3, 90, 45, 0, 911, 900, 1, 0, 0, 0, 911, 912, 1, 0, 0, 0, 912,
    920, 1, 0, 0, 0, 913, 915, 5, 5, 0, 0, 914, 913, 1, 0, 0, 0, 915, 918, 1, 0, 0, 0, 916, 914, 1, 0,
    0, 0, 916, 917, 1, 0, 0, 0, 917, 919, 1, 0, 0, 0, 918, 916, 1, 0, 0, 0, 919, 921, 3, 114, 57, 0, 920,
    916, 1, 0, 0, 0, 920, 921, 1, 0, 0, 0, 921, 929, 1, 0, 0, 0, 922, 924, 5, 5, 0, 0, 923, 922, 1, 0,
    0, 0, 924, 927, 1, 0, 0, 0, 925, 923, 1, 0, 0, 0, 925, 926, 1, 0, 0, 0, 926, 928, 1, 0, 0, 0, 927,
    925, 1, 0, 0, 0, 928, 930, 3, 62, 31, 0, 929, 925, 1, 0, 0, 0, 929, 930, 1, 0, 0, 0, 930, 53, 1, 0,
    0, 0, 931, 935, 5, 9, 0, 0, 932, 934, 5, 5, 0, 0, 933, 932, 1, 0, 0, 0, 934, 937, 1, 0, 0, 0, 935,
    933, 1, 0, 0, 0, 935, 936, 1, 0, 0, 0, 936, 958, 1, 0, 0, 0, 937, 935, 1, 0, 0, 0, 938, 955, 3, 56,
    28, 0, 939, 941, 5, 5, 0, 0, 940, 939, 1, 0, 0, 0, 941, 944, 1, 0, 0, 0, 942, 940, 1, 0, 0, 0, 942,
    943, 1, 0, 0, 0, 943, 945, 1, 0, 0, 0, 944, 942, 1, 0, 0, 0, 945, 949, 5, 8, 0, 0, 946, 948, 5, 5,
    0, 0, 947, 946, 1, 0, 0, 0, 948, 951, 1, 0, 0, 0, 949, 947, 1, 0, 0, 0, 949, 950, 1, 0, 0, 0, 950,
    952, 1, 0, 0, 0, 951, 949, 1, 0, 0, 0, 952, 954, 3, 56, 28, 0, 953, 942, 1, 0, 0, 0, 954, 957, 1,
    0, 0, 0, 955, 953, 1, 0, 0, 0, 955, 956, 1, 0, 0, 0, 956, 959, 1, 0, 0, 0, 957, 955, 1, 0, 0, 0, 958,
    938, 1, 0, 0, 0, 958, 959, 1, 0, 0, 0, 959, 963, 1, 0, 0, 0, 960, 962, 5, 5, 0, 0, 961, 960, 1, 0,
    0, 0, 962, 965, 1, 0, 0, 0, 963, 961, 1, 0, 0, 0, 963, 964, 1, 0, 0, 0, 964, 967, 1, 0, 0, 0, 965,
    963, 1, 0, 0, 0, 966, 968, 5, 8, 0, 0, 967, 966, 1, 0, 0, 0, 967, 968, 1, 0, 0, 0, 968, 969, 1, 0,
    0, 0, 969, 970, 5, 10, 0, 0, 970, 55, 1, 0, 0, 0, 971, 973, 3, 278, 139, 0, 972, 971, 1, 0, 0, 0,
    972, 973, 1, 0, 0, 0, 973, 974, 1, 0, 0, 0, 974, 989, 3, 58, 29, 0, 975, 977, 5, 5, 0, 0, 976, 975,
    1, 0, 0, 0, 977, 980, 1, 0, 0, 0, 978, 976, 1, 0, 0, 0, 978, 979, 1, 0, 0, 0, 979, 981, 1, 0, 0, 0,
    980, 978, 1, 0, 0, 0, 981, 985, 5, 28, 0, 0, 982, 984, 5, 5, 0, 0, 983, 982, 1, 0, 0, 0, 984, 987,
    1, 0, 0, 0, 985, 983, 1, 0, 0, 0, 985, 986, 1, 0, 0, 0, 986, 988, 1, 0, 0, 0, 987, 985, 1, 0, 0, 0,
    988, 990, 3, 128, 64, 0, 989, 978, 1, 0, 0, 0, 989, 990, 1, 0, 0, 0, 990, 57, 1, 0, 0, 0, 991, 995,
    3, 314, 157, 0, 992, 994, 5, 5, 0, 0, 993, 992, 1, 0, 0, 0, 994, 997, 1, 0, 0, 0, 995, 993, 1, 0,
    0, 0, 995, 996, 1, 0, 0, 0, 996, 998, 1, 0, 0, 0, 997, 995, 1, 0, 0, 0, 998, 1002, 5, 26, 0, 0, 999,
    1001, 5, 5, 0, 0, 1000, 999, 1, 0, 0, 0, 1001, 1004, 1, 0, 0, 0, 1002, 1000, 1, 0, 0, 0, 1002, 1003,
    1, 0, 0, 0, 1003, 1005, 1, 0, 0, 0, 1004, 1002, 1, 0, 0, 0, 1005, 1006, 3, 90, 45, 0, 1006, 59,
    1, 0, 0, 0, 1007, 1011, 3, 314, 157, 0, 1008, 1010, 5, 5, 0, 0, 1009, 1008, 1, 0, 0, 0, 1010, 1013,
    1, 0, 0, 0, 1011, 1009, 1, 0, 0, 0, 1011, 1012, 1, 0, 0, 0, 1012, 1022, 1, 0, 0, 0, 1013, 1011,
    1, 0, 0, 0, 1014, 1018, 5, 26, 0, 0, 1015, 1017, 5, 5, 0, 0, 1016, 1015, 1, 0, 0, 0, 1017, 1020,
    1, 0, 0, 0, 1018, 1016, 1, 0, 0, 0, 1018, 1019, 1, 0, 0, 0, 1019, 1021, 1, 0, 0, 0, 1020, 1018,
    1, 0, 0, 0, 1021, 1023, 3, 90, 45, 0, 1022, 1014, 1, 0, 0, 0, 1022, 1023, 1, 0, 0, 0, 1023, 61,
    1, 0, 0, 0, 1024, 1034, 3, 118, 59, 0, 1025, 1029, 5, 28, 0, 0, 1026, 1028, 5, 5, 0, 0, 1027, 1026,
    1, 0, 0, 0, 1028, 1031, 1, 0, 0, 0, 1029, 1027, 1, 0, 0, 0, 1029, 1030, 1, 0, 0, 0, 1030, 1032,
    1, 0, 0, 0, 1031, 1029, 1, 0, 0, 0, 1032, 1034, 3, 128, 64, 0, 1033, 1024, 1, 0, 0, 0, 1033, 1025,
    1, 0, 0, 0, 1034, 63, 1, 0, 0, 0, 1035, 1037, 3, 278, 139, 0, 1036, 1035, 1, 0, 0, 0, 1036, 1037,
    1, 0, 0, 0, 1037, 1038, 1, 0, 0, 0, 1038, 1042, 5, 64, 0, 0, 1039, 1041, 5, 5, 0, 0, 1040, 1039,
    1, 0, 0, 0, 1041, 1044, 1, 0, 0, 0, 1042, 1040, 1, 0, 0, 0, 1042, 1043, 1, 0, 0, 0, 1043, 1045,
    1, 0, 0, 0, 1044, 1042, 1, 0, 0, 0, 1045, 1060, 3, 314, 157, 0, 1046, 1048, 5, 5, 0, 0, 1047, 1046,
    1, 0, 0, 0, 1048, 1051, 1, 0, 0, 0, 1049, 1047, 1, 0, 0, 0, 1049, 1050, 1, 0, 0, 0, 1050, 1052,
    1, 0, 0, 0, 1051, 1049, 1, 0, 0, 0, 1052, 1056, 5, 26, 0, 0, 1053, 1055, 5, 5, 0, 0, 1054, 1053,
    1, 0, 0, 0, 1055, 1058, 1, 0, 0, 0, 1056, 1054, 1, 0, 0, 0, 1056, 1057, 1, 0, 0, 0, 1057, 1059,
    1, 0, 0, 0, 1058, 1056, 1, 0, 0, 0, 1059, 1061, 3, 24, 12, 0, 1060, 1049, 1, 0, 0, 0, 1060, 1061,
    1, 0, 0, 0, 1061, 1069, 1, 0, 0, 0, 1062, 1064, 5, 5, 0, 0, 1063, 1062, 1, 0, 0, 0, 1064, 1067,
    1, 0, 0, 0, 1065, 1063, 1, 0, 0, 0, 1065, 1066, 1, 0, 0, 0, 1066, 1068, 1, 0, 0, 0, 1067, 1065,
    1, 0, 0, 0, 1068, 1070, 3, 34, 17, 0, 1069, 1065, 1, 0, 0, 0, 1069, 1070, 1, 0, 0, 0, 1070, 65,
    1, 0, 0, 0, 1071, 1073, 3, 278, 139, 0, 1072, 1071, 1, 0, 0, 0, 1072, 1073, 1, 0, 0, 0, 1073, 1074,
    1, 0, 0, 0, 1074, 1078, 5, 70, 0, 0, 1075, 1077, 5, 5, 0, 0, 1076, 1075, 1, 0, 0, 0, 1077, 1080,
    1, 0, 0, 0, 1078, 1076, 1, 0, 0, 0, 1078, 1079, 1, 0, 0, 0, 1079, 1081, 1, 0, 0, 0, 1080, 1078,
    1, 0, 0, 0, 1081, 1089, 5, 64, 0, 0, 1082, 1084, 5, 5, 0, 0, 1083, 1082, 1, 0, 0, 0, 1084, 1087,
    1, 0, 0, 0, 1085, 1083, 1, 0, 0, 0, 1085, 1086, 1, 0, 0, 0, 1086, 1088, 1, 0, 0, 0, 1087, 1085,
    1, 0, 0, 0, 1088, 1090, 3, 314, 157, 0, 1089, 1085, 1, 0, 0, 0, 1089, 1090, 1, 0, 0, 0, 1090, 1105,
    1, 0, 0, 0, 1091, 1093, 5, 5, 0, 0, 1092, 1091, 1, 0, 0, 0, 1093, 1096, 1, 0, 0, 0, 1094, 1092,
    1, 0, 0, 0, 1094, 1095, 1, 0, 0, 0, 1095, 1097, 1, 0, 0, 0, 1096, 1094, 1, 0, 0, 0, 1097, 1101,
    5, 26, 0, 0, 1098, 1100, 5, 5, 0, 0, 1099, 1098, 1, 0, 0, 0, 1100, 1103, 1, 0, 0, 0, 1101, 1099,
    1, 0, 0, 0, 1101, 1102, 1, 0, 0, 0, 1102, 1104, 1, 0, 0, 0, 1103, 1101, 1, 0, 0, 0, 1104, 1106,
    3, 24, 12, 0, 1105, 1094, 1, 0, 0, 0, 1105, 1106, 1, 0, 0, 0, 1106, 1114, 1, 0, 0, 0, 1107, 1109,
    5, 5, 0, 0, 1108, 1107, 1, 0, 0, 0, 1109, 1112, 1, 0, 0, 0, 1110, 1108, 1, 0, 0, 0, 1110, 1111,
    1, 0, 0, 0, 1111, 1113, 1, 0, 0, 0, 1112, 1110, 1, 0, 0, 0, 1113, 1115, 3, 34, 17, 0, 1114, 1110,
    1, 0, 0, 0, 1114, 1115, 1, 0, 0, 0, 1115, 67, 1, 0, 0, 0, 1116, 1118, 3, 278, 139, 0, 1117, 1116,
    1, 0, 0, 0, 1117, 1118, 1, 0, 0, 0, 1118, 1119, 1, 0, 0, 0, 1119, 1127, 7, 1, 0, 0, 1120, 1122,
    5, 5, 0, 0, 1121, 1120, 1, 0, 0, 0, 1122, 1125, 1, 0, 0, 0, 1123, 1121, 1, 0, 0, 0, 1123, 1124,
    1, 0, 0, 0, 1124, 1126, 1, 0, 0, 0, 1125, 1123, 1, 0, 0, 0, 1126, 1128, 3, 82, 41, 0, 1127, 1123,
    1, 0, 0, 0, 1127, 1128, 1, 0, 0, 0, 1128, 1144, 1, 0, 0, 0, 1129, 1131, 5, 5, 0, 0, 1130, 1129,
    1, 0, 0, 0, 1131, 1134, 1, 0, 0, 0, 1132, 1130, 1, 0, 0, 0, 1132, 1133, 1, 0, 0, 0, 1133, 1135,
    1, 0, 0, 0, 1134, 1132, 1, 0, 0, 0, 1135, 1139, 3, 104, 52, 0, 1136, 1138, 5, 5, 0, 0, 1137, 1136,
    1, 0, 0, 0, 1138, 1141, 1, 0, 0, 0, 1139, 1137, 1, 0, 0, 0, 1139, 1140, 1, 0, 0, 0, 1140, 1142,
    1, 0, 0, 0, 1141, 1139, 1, 0, 0, 0, 1142, 1143, 5, 7, 0, 0, 1143, 1145, 1, 0, 0, 0, 1144, 1132,
    1, 0, 0, 0, 1144, 1145, 1, 0, 0, 0, 1145, 1149, 1, 0, 0, 0, 1146, 1148, 5, 5, 0, 0, 1147, 1146,
    1, 0, 0, 0, 1148, 1151, 1, 0, 0, 0, 1149, 1147, 1, 0, 0, 0, 1149, 1150, 1, 0, 0, 0, 1150, 1154,
    1, 0, 0, 0, 1151, 1149, 1, 0, 0, 0, 1152, 1155, 3, 70, 35, 0, 1153, 1155, 3, 72, 36, 0, 1154, 1152,
    1, 0, 0, 0, 1154, 1153, 1, 0, 0, 0, 1155, 1163, 1, 0, 0, 0, 1156, 1158, 5, 5, 0, 0, 1157, 1156,
    1, 0, 0, 0, 1158, 1161, 1, 0, 0, 0, 1159, 1157, 1, 0, 0, 0, 1159, 1160, 1, 0, 0, 0, 1160, 1162,
    1, 0, 0, 0, 1161, 1159, 1, 0, 0, 0, 1162, 1164, 3, 114, 57, 0, 1163, 1159, 1, 0, 0, 0, 1163, 1164,
    1, 0, 0, 0, 1164, 1182, 1, 0, 0, 0, 1165, 1167, 5, 5, 0, 0, 1166, 1165, 1, 0, 0, 0, 1167, 1170,
    1, 0, 0, 0, 1168, 1166, 1, 0, 0, 0, 1168, 1169, 1, 0, 0, 0, 1169, 1180, 1, 0, 0, 0, 1170, 1168,
    1, 0, 0, 0, 1171, 1175, 5, 28, 0, 0, 1172, 1174, 5, 5, 0, 0, 1173, 1172, 1, 0, 0, 0, 1174, 1177,
    1, 0, 0, 0, 1175, 1173, 1, 0, 0, 0, 1175, 1176, 1, 0, 0, 0, 1176, 1178, 1, 0, 0, 0, 1177, 1175,
    1, 0, 0, 0, 1178, 1181, 3, 128, 64, 0, 1179, 1181, 3, 74, 37, 0, 1180, 1171, 1, 0, 0, 0, 1180,
    1179, 1, 0, 0, 0, 1181, 1183, 1, 0, 0, 0, 1182, 1168, 1, 0, 0, 0, 1182, 1183, 1, 0, 0, 0, 1183,
    1190, 1, 0, 0, 0, 1184, 1186, 5, 5, 0, 0, 1185, 1184, 1, 0, 0, 0, 1186, 1187, 1, 0, 0, 0, 1187,
    1185, 1, 0, 0, 0, 1187, 1188, 1, 0, 0, 0, 1188, 1189, 1, 0, 0, 0, 1189, 1191, 5, 27, 0, 0, 1190,
    1185, 1, 0, 0, 0, 1190, 1191, 1, 0, 0, 0, 1191, 1195, 1, 0, 0, 0, 1192, 1194, 5, 5, 0, 0, 1193,
    1192, 1, 0, 0, 0, 1194, 1197, 1, 0, 0, 0, 1195, 1193, 1, 0, 0, 0, 1195, 1196, 1, 0, 0, 0, 1196,
    1228, 1, 0, 0, 0, 1197, 1195, 1, 0, 0, 0, 1198, 1200, 3, 76, 38, 0, 1199, 1198, 1, 0, 0, 0, 1199,
    1200, 1, 0, 0, 0, 1200, 1211, 1, 0, 0, 0, 1201, 1203, 5, 5, 0, 0, 1202, 1201, 1, 0, 0, 0, 1203,
    1206, 1, 0, 0, 0, 1204, 1202, 1, 0, 0, 0, 1204, 1205, 1, 0, 0, 0, 1205, 1208, 1, 0, 0, 0, 1206,
    1204, 1, 0, 0, 0, 1207, 1209, 3, 328, 164, 0, 1208, 1207, 1, 0, 0, 0, 1208, 1209, 1, 0, 0, 0, 1209,
    1210, 1, 0, 0, 0, 1210, 1212, 3, 78, 39, 0, 1211, 1204, 1, 0, 0, 0, 1211, 1212, 1, 0, 0, 0, 1212,
    1229, 1, 0, 0, 0, 1213, 1215, 3, 78, 39, 0, 1214, 1213, 1, 0, 0, 0, 1214, 1215, 1, 0, 0, 0, 1215,
    1226, 1, 0, 0, 0, 1216, 1218, 5, 5, 0, 0, 1217, 1216, 1, 0, 0, 0, 1218, 1221, 1, 0, 0, 0, 1219,
    1217, 1, 0, 0, 0, 1219, 1220, 1, 0, 0, 0, 1220, 1223, 1, 0, 0, 0, 1221, 1219, 1, 0, 0, 0, 1222,
    1224, 3, 328, 164, 0, 1223, 1222, 1, 0, 0, 0, 1223, 1224, 1, 0, 0, 0, 1224, 1225, 1, 0, 0, 0, 1225,
    1227, 3, 76, 38, 0, 1226, 1219, 1, 0, 0, 0, 1226, 1227, 1, 0, 0, 0, 1227, 1229, 1, 0, 0, 0, 1228,
    1199, 1, 0, 0, 0, 1228, 1214, 1, 0, 0, 0, 1229, 69, 1, 0, 0, 0, 1230, 1234, 5, 9, 0, 0, 1231, 1233,
    5, 5, 0, 0, 1232, 1231, 1, 0, 0, 0, 1233, 1236, 1, 0, 0, 0, 1234, 1232, 1, 0, 0, 0, 1234, 1235,
    1, 0, 0, 0, 1235, 1237, 1, 0, 0, 0, 1236, 1234, 1, 0, 0, 0, 1237, 1254, 3, 72, 36, 0, 1238, 1240,
    5, 5, 0, 0, 1239, 1238, 1, 0, 0, 0, 1240, 1243, 1, 0, 0, 0, 1241, 1239, 1, 0, 0, 0, 1241, 1242,
    1, 0, 0, 0, 1242, 1244, 1, 0, 0, 0, 1243, 1241, 1, 0, 0, 0, 1244, 1248, 5, 8, 0, 0, 1245, 1247,
    5, 5, 0, 0, 1246, 1245, 1, 0, 0, 0, 1247, 1250, 1, 0, 0, 0, 1248, 1246, 1, 0, 0, 0, 1248, 1249,
    1, 0, 0, 0, 1249, 1251, 1, 0, 0, 0, 1250, 1248, 1, 0, 0, 0, 1251, 1253, 3, 72, 36, 0, 1252, 1241,
    1, 0, 0, 0, 1253, 1256, 1, 0, 0, 0, 1254, 1252, 1, 0, 0, 0, 1254, 1255, 1, 0, 0, 0, 1255, 1260,
    1, 0, 0, 0, 1256, 1254, 1, 0, 0, 0, 1257, 1259, 5, 5, 0, 0, 1258, 1257, 1, 0, 0, 0, 1259, 1262,
    1, 0, 0, 0, 1260, 1258, 1, 0, 0, 0, 1260, 1261, 1, 0, 0, 0, 1261, 1263, 1, 0, 0, 0, 1262, 1260,
    1, 0, 0, 0, 1263, 1264, 5, 10, 0, 0, 1264, 71, 1, 0, 0, 0, 1265, 1267, 3, 304, 152, 0, 1266, 1265,
    1, 0, 0, 0, 1267, 1270, 1, 0, 0, 0, 1268, 1266, 1, 0, 0, 0, 1268, 1269, 1, 0, 0, 0, 1269, 1274,
    1, 0, 0, 0, 1270, 1268, 1, 0, 0, 0, 1271, 1273, 5, 5, 0, 0, 1272, 1271, 1, 0, 0, 0, 1273, 1276,
    1, 0, 0, 0, 1274, 1272, 1, 0, 0, 0, 1274, 1275, 1, 0, 0, 0, 1275, 1277, 1, 0, 0, 0, 1276, 1274,
    1, 0, 0, 0, 1277, 1292, 3, 314, 157, 0, 1278, 1280, 5, 5, 0, 0, 1279, 1278, 1, 0, 0, 0, 1280, 1283,
    1, 0, 0, 0, 1281, 1279, 1, 0, 0, 0, 1281, 1282, 1, 0, 0, 0, 1282, 1284, 1, 0, 0, 0, 1283, 1281,
    1, 0, 0, 0, 1284, 1288, 5, 26, 0, 0, 1285, 1287, 5, 5, 0, 0, 1286, 1285, 1, 0, 0, 0, 1287, 1290,
    1, 0, 0, 0, 1288, 1286, 1, 0, 0, 0, 1288, 1289, 1, 0, 0, 0, 1289, 1291, 1, 0, 0, 0, 1290, 1288,
    1, 0, 0, 0, 1291, 1293, 3, 90, 45, 0, 1292, 1281, 1, 0, 0, 0, 1292, 1293, 1, 0, 0, 0, 1293, 73,
    1, 0, 0, 0, 1294, 1298, 5, 69, 0, 0, 1295, 1297, 5, 5, 0, 0, 1296, 1295, 1, 0, 0, 0, 1297, 1300,
    1, 0, 0, 0, 1298, 1296, 1, 0, 0, 0, 1298, 1299, 1, 0, 0, 0, 1299, 1301, 1, 0, 0, 0, 1300, 1298,
    1, 0, 0, 0, 1301, 1302, 3, 128, 64, 0, 1302, 75, 1, 0, 0, 0, 1303, 1305, 3, 278, 139, 0, 1304,
    1303, 1, 0, 0, 0, 1304, 1305, 1, 0, 0, 0, 1305, 1306, 1, 0, 0, 0, 1306, 1349, 5, 95, 0, 0, 1307,
    1309, 3, 278, 139, 0, 1308, 1307, 1, 0, 0, 0, 1308, 1309, 1, 0, 0, 0, 1309, 1310, 1, 0, 0, 0, 1310,
    1314, 5, 95, 0, 0, 1311, 1313, 5, 5, 0, 0, 1312, 1311, 1, 0, 0, 0, 1313, 1316, 1, 0, 0, 0, 1314,
    1312, 1, 0, 0, 0, 1314, 1315, 1, 0, 0, 0, 1315, 1317, 1, 0, 0, 0, 1316, 1314, 1, 0, 0, 0, 1317,
    1321, 5, 9, 0, 0, 1318, 1320, 5, 5, 0, 0, 1319, 1318, 1, 0, 0, 0, 1320, 1323, 1, 0, 0, 0, 1321,
    1319, 1, 0, 0, 0, 1321, 1322, 1, 0, 0, 0, 1322, 1324, 1, 0, 0, 0, 1323, 1321, 1, 0, 0, 0, 1324,
    1339, 5, 10, 0, 0, 1325, 1327, 5, 5, 0, 0, 1326, 1325, 1, 0, 0, 0, 1327, 1330, 1, 0, 0, 0, 1328,
    1326, 1, 0, 0, 0, 1328, 1329, 1, 0, 0, 0, 1329, 1331, 1, 0, 0, 0, 1330, 1328, 1, 0, 0, 0, 1331,
    1335, 5, 26, 0, 0, 1332, 1334, 5, 5, 0, 0, 1333, 1332, 1, 0, 0, 0, 1334, 1337, 1, 0, 0, 0, 1335,
    1333, 1, 0, 0, 0, 1335, 1336, 1, 0, 0, 0, 1336, 1338, 1, 0, 0, 0, 1337, 1335, 1, 0, 0, 0, 1338,
    1340, 3, 90, 45, 0, 1339, 1328, 1, 0, 0, 0, 1339, 1340, 1, 0, 0, 0, 1340, 1344, 1, 0, 0, 0, 1341,
    1343, 5, 5, 0, 0, 1342, 1341, 1, 0, 0, 0, 1343, 1346, 1, 0, 0, 0, 1344, 1342, 1, 0, 0, 0, 1344,
    1345, 1, 0, 0, 0, 1345, 1347, 1, 0, 0, 0, 1346, 1344, 1, 0, 0, 0, 1347, 1349, 3, 62, 31, 0, 1348,
    1304, 1, 0, 0, 0, 1348, 1308, 1, 0, 0, 0, 1349, 77, 1, 0, 0, 0, 1350, 1352, 3, 278, 139, 0, 1351,
    1350, 1, 0, 0, 0, 1351, 1352, 1, 0, 0, 0, 1352, 1353, 1, 0, 0, 0, 1353, 1399, 5, 96, 0, 0, 1354,
    1356, 3, 278, 139, 0, 1355, 1354, 1, 0, 0, 0, 1355, 1356, 1, 0, 0, 0, 1356, 1357, 1, 0, 0, 0, 1357,
    1361, 5, 96, 0, 0, 1358, 1360, 5, 5, 0, 0, 1359, 1358, 1, 0, 0, 0, 1360, 1363, 1, 0, 0, 0, 1361,
    1359, 1, 0, 0, 0, 1361, 1362, 1, 0, 0, 0, 1362, 1364, 1, 0, 0, 0, 1363, 1361, 1, 0, 0, 0, 1364,
    1369, 5, 9, 0, 0, 1365, 1368, 3, 304, 152, 0, 1366, 1368, 3, 296, 148, 0, 1367, 1365, 1, 0, 0,
    0, 1367, 1366, 1, 0, 0, 0, 1368, 1371, 1, 0, 0, 0, 1369, 1367, 1, 0, 0, 0, 1369, 1370, 1, 0, 0,
    0, 1370, 1372, 1, 0, 0, 0, 1371, 1369, 1, 0, 0, 0, 1372, 1373, 3, 60, 30, 0, 1373, 1388, 5, 10,
    0, 0, 1374, 1376, 5, 5, 0, 0, 1375, 1374, 1, 0, 0, 0, 1376, 1379, 1, 0, 0, 0, 1377, 1375, 1, 0,
    0, 0, 1377, 1378, 1, 0, 0, 0, 1378, 1380, 1, 0, 0, 0, 1379, 1377, 1, 0, 0, 0, 1380, 1384, 5, 26,
    0, 0, 1381, 1383, 5, 5, 0, 0, 1382, 1381, 1, 0, 0, 0, 1383, 1386, 1, 0, 0, 0, 1384, 1382, 1, 0,
    0, 0, 1384, 1385, 1, 0, 0, 0, 1385, 1387, 1, 0, 0, 0, 1386, 1384, 1, 0, 0, 0, 1387, 1389, 3, 90,
    45, 0, 1388, 1377, 1, 0, 0, 0, 1388, 1389, 1, 0, 0, 0, 1389, 1393, 1, 0, 0, 0, 1390, 1392, 5, 5,
    0, 0, 1391, 1390, 1, 0, 0, 0, 1392, 1395, 1, 0, 0, 0, 1393, 1391, 1, 0, 0, 0, 1393, 1394, 1, 0,
    0, 0, 1394, 1396, 1, 0, 0, 0, 1395, 1393, 1, 0, 0, 0, 1396, 1397, 3, 62, 31, 0, 1397, 1399, 1,
    0, 0, 0, 1398, 1351, 1, 0, 0, 0, 1398, 1355, 1, 0, 0, 0, 1399, 79, 1, 0, 0, 0, 1400, 1402, 3, 278,
    139, 0, 1401, 1400, 1, 0, 0, 0, 1401, 1402, 1, 0, 0, 0, 1402, 1403, 1, 0, 0, 0, 1403, 1407, 5,
    67, 0, 0, 1404, 1406, 5, 5, 0, 0, 1405, 1404, 1, 0, 0, 0, 1406, 1409, 1, 0, 0, 0, 1407, 1405, 1,
    0, 0, 0, 1407, 1408, 1, 0, 0, 0, 1408, 1410, 1, 0, 0, 0, 1409, 1407, 1, 0, 0, 0, 1410, 1418, 3,
    314, 157, 0, 1411, 1413, 5, 5, 0, 0, 1412, 1411, 1, 0, 0, 0, 1413, 1416, 1, 0, 0, 0, 1414, 1412,
    1, 0, 0, 0, 1414, 1415, 1, 0, 0, 0, 1415, 1417, 1, 0, 0, 0, 1416, 1414, 1, 0, 0, 0, 1417, 1419,
    3, 82, 41, 0, 1418, 1414, 1, 0, 0, 0, 1418, 1419, 1, 0, 0, 0, 1419, 1423, 1, 0, 0, 0, 1420, 1422,
    5, 5, 0, 0, 1421, 1420, 1, 0, 0, 0, 1422, 1425, 1, 0, 0, 0, 1423, 1421, 1, 0, 0, 0, 1423, 1424,
    1, 0, 0, 0, 1424, 1426, 1, 0, 0, 0, 1425, 1423, 1, 0, 0, 0, 1426, 1430, 5, 28, 0, 0, 1427, 1429,
    5, 5, 0, 0, 1428, 1427, 1, 0, 0, 0, 1429, 1432, 1, 0, 0, 0, 1430, 1428, 1, 0, 0, 0, 1430, 1431,
    1, 0, 0, 0, 1431, 1433, 1, 0, 0, 0, 1432, 1430, 1, 0, 0, 0, 1433, 1434, 3, 90, 45, 0, 1434, 81,
    1, 0, 0, 0, 1435, 1439, 5, 44, 0, 0, 1436, 1438, 5, 5, 0, 0, 1437, 1436, 1, 0, 0, 0, 1438, 1441,
    1, 0, 0, 0, 1439, 1437, 1, 0, 0, 0, 1439, 1440, 1, 0, 0, 0, 1440, 1442, 1, 0, 0, 0, 1441, 1439,
    1, 0, 0, 0, 1442, 1459, 3, 84, 42, 0, 1443, 1445, 5, 5, 0, 0, 1444, 1443, 1, 0, 0, 0, 1445, 1448,
    1, 0, 0, 0, 1446, 1444, 1, 0, 0, 0, 1446, 1447, 1, 0, 0, 0, 1447, 1449, 1, 0, 0, 0, 1448, 1446,
    1, 0, 0, 0, 1449, 1453, 5, 8, 0, 0, 1450, 1452, 5, 5, 0, 0, 1451, 1450, 1, 0, 0, 0, 1452, 1455,
    1, 0, 0, 0, 1453, 1451, 1, 0, 0, 0, 1453, 1454, 1, 0, 0, 0, 1454, 1456, 1, 0, 0, 0, 1455, 1453,
    1, 0, 0, 0, 1456, 1458, 3, 84, 42, 0, 1457, 1446, 1, 0, 0, 0, 1458, 1461, 1, 0, 0, 0, 1459, 1457,
    1, 0, 0, 0, 1459, 1460, 1, 0, 0, 0, 1460, 1465, 1, 0, 0, 0, 1461, 1459, 1, 0, 0, 0, 1462, 1464,
    5, 5, 0, 0, 1463, 1462, 1, 0, 0, 0, 1464, 1467, 1, 0, 0, 0, 1465, 1463, 1, 0, 0, 0, 1465, 1466,
    1, 0, 0, 0, 1466, 1469, 1, 0, 0, 0, 1467, 1465, 1, 0, 0, 0, 1468, 1470, 5, 8, 0, 0, 1469, 1468,
    1, 0, 0, 0, 1469, 1470, 1, 0, 0, 0, 1470, 1471, 1, 0, 0, 0, 1471, 1472, 5, 45, 0, 0, 1472, 83, 1,
    0, 0, 0, 1473, 1475, 3, 86, 43, 0, 1474, 1473, 1, 0, 0, 0, 1474, 1475, 1, 0, 0, 0, 1475, 1479,
    1, 0, 0, 0, 1476, 1478, 5, 5, 0, 0, 1477, 1476, 1, 0, 0, 0, 1478, 1481, 1, 0, 0, 0, 1479, 1477,
    1, 0, 0, 0, 1479, 1480, 1, 0, 0, 0, 1480, 1482, 1, 0, 0, 0, 1481, 1479, 1, 0, 0, 0, 1482, 1497,
    3, 314, 157, 0, 1483, 1485, 5, 5, 0, 0, 1484, 1483, 1, 0, 0, 0, 1485, 1488, 1, 0, 0, 0, 1486, 1484,
    1, 0, 0, 0, 1486, 1487, 1, 0, 0, 0, 1487, 1489, 1, 0, 0, 0, 1488, 1486, 1, 0, 0, 0, 1489, 1493,
    5, 26, 0, 0, 1490, 1492, 5, 5, 0, 0, 1491, 1490, 1, 0, 0, 0, 1492, 1495, 1, 0, 0, 0, 1493, 1491,
    1, 0, 0, 0, 1493, 1494, 1, 0, 0, 0, 1494, 1496, 1, 0, 0, 0, 1495, 1493, 1, 0, 0, 0, 1496, 1498,
    3, 90, 45, 0, 1497, 1486, 1, 0, 0, 0, 1497, 1498, 1, 0, 0, 0, 1498, 85, 1, 0, 0, 0, 1499, 1501,
    3, 88, 44, 0, 1500, 1499, 1, 0, 0, 0, 1501, 1502, 1, 0, 0, 0, 1502, 1500, 1, 0, 0, 0, 1502, 1503,
    1, 0, 0, 0, 1503, 87, 1, 0, 0, 0, 1504, 1508, 3, 298, 149, 0, 1505, 1507, 5, 5, 0, 0, 1506, 1505,
    1, 0, 0, 0, 1507, 1510, 1, 0, 0, 0, 1508, 1506, 1, 0, 0, 0, 1508, 1509, 1, 0, 0, 0, 1509, 1520,
    1, 0, 0, 0, 1510, 1508, 1, 0, 0, 0, 1511, 1515, 3, 288, 144, 0, 1512, 1514, 5, 5, 0, 0, 1513, 1512,
    1, 0, 0, 0, 1514, 1517, 1, 0, 0, 0, 1515, 1513, 1, 0, 0, 0, 1515, 1516, 1, 0, 0, 0, 1516, 1520,
    1, 0, 0, 0, 1517, 1515, 1, 0, 0, 0, 1518, 1520, 3, 304, 152, 0, 1519, 1504, 1, 0, 0, 0, 1519, 1511,
    1, 0, 0, 0, 1519, 1518, 1, 0, 0, 0, 1520, 89, 1, 0, 0, 0, 1521, 1523, 3, 92, 46, 0, 1522, 1521,
    1, 0, 0, 0, 1522, 1523, 1, 0, 0, 0, 1523, 1528, 1, 0, 0, 0, 1524, 1529, 3, 96, 48, 0, 1525, 1529,
    3, 98, 49, 0, 1526, 1529, 3, 100, 50, 0, 1527, 1529, 3, 102, 51, 0, 1528, 1524, 1, 0, 0, 0, 1528,
    1525, 1, 0, 0, 0, 1528, 1526, 1, 0, 0, 0, 1528, 1527, 1, 0, 0, 0, 1529, 91, 1, 0, 0, 0, 1530, 1532,
    3, 94, 47, 0, 1531, 1530, 1, 0, 0, 0, 1532, 1533, 1, 0, 0, 0, 1533, 1531, 1, 0, 0, 0, 1533, 1534,
    1, 0, 0, 0, 1534, 93, 1, 0, 0, 0, 1535, 1544, 3, 304, 152, 0, 1536, 1540, 5, 121, 0, 0, 1537, 1539,
    5, 5, 0, 0, 1538, 1537, 1, 0, 0, 0, 1539, 1542, 1, 0, 0, 0, 1540, 1538, 1, 0, 0, 0, 1540, 1541,
    1, 0, 0, 0, 1541, 1544, 1, 0, 0, 0, 1542, 1540, 1, 0, 0, 0, 1543, 1535, 1, 0, 0, 0, 1543, 1536,
    1, 0, 0, 0, 1544, 95, 1, 0, 0, 0, 1545, 1549, 5, 9, 0, 0, 1546, 1548, 5, 5, 0, 0, 1547, 1546, 1,
    0, 0, 0, 1548, 1551, 1, 0, 0, 0, 1549, 1547, 1, 0, 0, 0, 1549, 1550, 1, 0, 0, 0, 1550, 1552, 1,
    0, 0, 0, 1551, 1549, 1, 0, 0, 0, 1552, 1556, 3, 90, 45, 0, 1553, 1555, 5, 5, 0, 0, 1554, 1553,
    1, 0, 0, 0, 1555, 1558, 1, 0, 0, 0, 1556, 1554, 1, 0, 0, 0, 1556, 1557, 1, 0, 0, 0, 1557, 1559,
    1, 0, 0, 0, 1558, 1556, 1, 0, 0, 0, 1559, 1560, 5, 10, 0, 0, 1560, 97, 1, 0, 0, 0, 1561, 1564, 3,
    100, 50, 0, 1562, 1564, 3, 96, 48, 0, 1563, 1561, 1, 0, 0, 0, 1563, 1562, 1, 0, 0, 0, 1564, 1568,
    1, 0, 0, 0, 1565, 1567, 5, 5, 0, 0, 1566, 1565, 1, 0, 0, 0, 1567, 1570, 1, 0, 0, 0, 1568, 1566,
    1, 0, 0, 0, 1568, 1569, 1, 0, 0, 0, 1569, 1572, 1, 0, 0, 0, 1570, 1568, 1, 0, 0, 0, 1571, 1573,
    3, 320, 160, 0, 1572, 1571, 1, 0, 0, 0, 1573, 1574, 1, 0, 0, 0, 1574, 1572, 1, 0, 0, 0, 1574, 1575,
    1, 0, 0, 0, 1575, 99, 1, 0, 0, 0, 1576, 1579, 3, 106, 53, 0, 1577, 1579, 5, 97, 0, 0, 1578, 1576,
    1, 0, 0, 0, 1578, 1577, 1, 0, 0, 0, 1579, 101, 1, 0, 0, 0, 1580, 1584, 3, 104, 52, 0, 1581, 1583,
    5, 5, 0, 0, 1582, 1581, 1, 0, 0, 0, 1583, 1586, 1, 0, 0, 0, 1584, 1582, 1, 0, 0, 0, 1584, 1585,
    1, 0, 0, 0, 1585, 1587, 1, 0, 0, 0, 1586, 1584, 1, 0, 0, 0, 1587, 1591, 5, 7, 0, 0, 1588, 1590,
    5, 5, 0, 0, 1589, 1588, 1, 0, 0, 0, 1590, 1593, 1, 0, 0, 0, 1591, 1589, 1, 0, 0, 0, 1591, 1592,
    1, 0, 0, 0, 1592, 1595, 1, 0, 0, 0, 1593, 1591, 1, 0, 0, 0, 1594, 1580, 1, 0, 0, 0, 1594, 1595,
    1, 0, 0, 0, 1595, 1596, 1, 0, 0, 0, 1596, 1600, 3, 112, 56, 0, 1597, 1599, 5, 5, 0, 0, 1598, 1597,
    1, 0, 0, 0, 1599, 1602, 1, 0, 0, 0, 1600, 1598, 1, 0, 0, 0, 1600, 1601, 1, 0, 0, 0, 1601, 1603,
    1, 0, 0, 0, 1602, 1600, 1, 0, 0, 0, 1603, 1607, 5, 34, 0, 0, 1604, 1606, 5, 5, 0, 0, 1605, 1604,
    1, 0, 0, 0, 1606, 1609, 1, 0, 0, 0, 1607, 1605, 1, 0, 0, 0, 1607, 1608, 1, 0, 0, 0, 1608, 1610,
    1, 0, 0, 0, 1609, 1607, 1, 0, 0, 0, 1610, 1611, 3, 90, 45, 0, 1611, 103, 1, 0, 0, 0, 1612, 1614,
    3, 92, 46, 0, 1613, 1612, 1, 0, 0, 0, 1613, 1614, 1, 0, 0, 0, 1614, 1618, 1, 0, 0, 0, 1615, 1619,
    3, 96, 48, 0, 1616, 1619, 3, 98, 49, 0, 1617, 1619, 3, 100, 50, 0, 1618, 1615, 1, 0, 0, 0, 1618,
    1616, 1, 0, 0, 0, 1618, 1617, 1, 0, 0, 0, 1619, 105, 1, 0, 0, 0, 1620, 1637, 3, 110, 55, 0, 1621,
    1623, 5, 5, 0, 0, 1622, 1621, 1, 0, 0, 0, 1623, 1626, 1, 0, 0, 0, 1624, 1622, 1, 0, 0, 0, 1624,
    1625, 1, 0, 0, 0, 1625, 1627, 1, 0, 0, 0, 1626, 1624, 1, 0, 0, 0, 1627, 1631, 5, 7, 0, 0, 1628,
    1630, 5, 5, 0, 0, 1629, 1628, 1, 0, 0, 0, 1630, 1633, 1, 0, 0, 0, 1631, 1629, 1, 0, 0, 0, 1631,
    1632, 1, 0, 0, 0, 1632, 1634, 1, 0, 0, 0, 1633, 1631, 1, 0, 0, 0, 1634, 1636, 3, 110, 55, 0, 1635,
    1624, 1, 0, 0, 0, 1636, 1639, 1, 0, 0, 0, 1637, 1635, 1, 0, 0, 0, 1637, 1638, 1, 0, 0, 0, 1638,
    107, 1, 0, 0, 0, 1639, 1637, 1, 0, 0, 0, 1640, 1644, 5, 9, 0, 0, 1641, 1643, 5, 5, 0, 0, 1642, 1641,
    1, 0, 0, 0, 1643, 1646, 1, 0, 0, 0, 1644, 1642, 1, 0, 0, 0, 1644, 1645, 1, 0, 0, 0, 1645, 1647,
    1, 0, 0, 0, 1646, 1644, 1, 0, 0, 0, 1647, 1651, 3, 106, 53, 0, 1648, 1650, 5, 5, 0, 0, 1649, 1648,
    1, 0, 0, 0, 1650, 1653, 1, 0, 0, 0, 1651, 1649, 1, 0, 0, 0, 1651, 1652, 1, 0, 0, 0, 1652, 1654,
    1, 0, 0, 0, 1653, 1651, 1, 0, 0, 0, 1654, 1655, 5, 10, 0, 0, 1655, 1673, 1, 0, 0, 0, 1656, 1660,
    5, 9, 0, 0, 1657, 1659, 5, 5, 0, 0, 1658, 1657, 1, 0, 0, 0, 1659, 1662, 1, 0, 0, 0, 1660, 1658,
    1, 0, 0, 0, 1660, 1661, 1, 0, 0, 0, 1661, 1663, 1, 0, 0, 0, 1662, 1660, 1, 0, 0, 0, 1663, 1667,
    3, 108, 54, 0, 1664, 1666, 5, 5, 0, 0, 1665, 1664, 1, 0, 0, 0, 1666, 1669, 1, 0, 0, 0, 1667, 1665,
    1, 0, 0, 0, 1667, 1668, 1, 0, 0, 0, 1668, 1670, 1, 0, 0, 0, 1669, 1667, 1, 0, 0, 0, 1670, 1671,
    5, 10, 0, 0, 1671, 1673, 1, 0, 0, 0, 1672, 1640, 1, 0, 0, 0, 1672, 1656, 1, 0, 0, 0, 1673, 109,
    1, 0, 0, 0, 1674, 1682, 3, 314, 157, 0, 1675, 1677, 5, 5, 0, 0, 1676, 1675, 1, 0, 0, 0, 1677, 1680,
    1, 0, 0, 0, 1678, 1676, 1, 0, 0, 0, 1678, 1679, 1, 0, 0, 0, 1679, 1681, 1, 0, 0, 0, 1680, 1678,
    1, 0, 0, 0, 1681, 1683, 3, 176, 88, 0, 1682, 1678, 1, 0, 0, 0, 1682, 1683, 1, 0, 0, 0, 1683, 111,
    1, 0, 0, 0, 1684, 1688, 5, 9, 0, 0, 1685, 1687, 5, 5, 0, 0, 1686, 1685, 1, 0, 0, 0, 1687, 1690,
    1, 0, 0, 0, 1688, 1686, 1, 0, 0, 0, 1688, 1689, 1, 0, 0, 0, 1689, 1693, 1, 0, 0, 0, 1690, 1688,
    1, 0, 0, 0, 1691, 1694, 3, 58, 29, 0, 1692, 1694, 3, 90, 45, 0, 1693, 1691, 1, 0, 0, 0, 1693, 1692,
    1, 0, 0, 0, 1693, 1694, 1, 0, 0, 0, 1694, 1714, 1, 0, 0, 0, 1695, 1697, 5, 5, 0, 0, 1696, 1695,
    1, 0, 0, 0, 1697, 1700, 1, 0, 0, 0, 1698, 1696, 1, 0, 0, 0, 1698, 1699, 1, 0, 0, 0, 1699, 1701,
    1, 0, 0, 0, 1700, 1698, 1, 0, 0, 0, 1701, 1705, 5, 8, 0, 0, 1702, 1704, 5, 5, 0, 0, 1703, 1702,
    1, 0, 0, 0, 1704, 1707, 1, 0, 0, 0, 1705, 1703, 1, 0, 0, 0, 1705, 1706, 1, 0, 0, 0, 1706, 1710,
    1, 0, 0, 0, 1707, 1705, 1, 0, 0, 0, 1708, 1711, 3, 58, 29, 0, 1709, 1711, 3, 90, 45, 0, 1710, 1708,
    1, 0, 0, 0, 1710, 1709, 1, 0, 0, 0, 1711, 1713, 1, 0, 0, 0, 1712, 1698, 1, 0, 0, 0, 1713, 1716,
    1, 0, 0, 0, 1714, 1712, 1, 0, 0, 0, 1714, 1715, 1, 0, 0, 0, 1715, 1720, 1, 0, 0, 0, 1716, 1714,
    1, 0, 0, 0, 1717, 1719, 5, 5, 0, 0, 1718, 1717, 1, 0, 0, 0, 1719, 1722, 1, 0, 0, 0, 1720, 1718,
    1, 0, 0, 0, 1720, 1721, 1, 0, 0, 0, 1721, 1723, 1, 0, 0, 0, 1722, 1720, 1, 0, 0, 0, 1723, 1724,
    5, 10, 0, 0, 1724, 113, 1, 0, 0, 0, 1725, 1729, 5, 75, 0, 0, 1726, 1728, 5, 5, 0, 0, 1727, 1726,
    1, 0, 0, 0, 1728, 1731, 1, 0, 0, 0, 1729, 1727, 1, 0, 0, 0, 1729, 1730, 1, 0, 0, 0, 1730, 1732,
    1, 0, 0, 0, 1731, 1729, 1, 0, 0, 0, 1732, 1749, 3, 116, 58, 0, 1733, 1735, 5, 5, 0, 0, 1734, 1733,
    1, 0, 0, 0, 1735, 1738, 1, 0, 0, 0, 1736, 1734, 1, 0, 0, 0, 1736, 1737, 1, 0, 0, 0, 1737, 1739,
    1, 0, 0, 0, 1738, 1736, 1, 0, 0, 0, 1739, 1743, 5, 8, 0, 0, 1740, 1742, 5, 5, 0, 0, 1741, 1740,
    1, 0, 0, 0, 1742, 1745, 1, 0, 0, 0, 1743, 1741, 1, 0, 0, 0, 1743, 1744, 1, 0, 0, 0, 1744, 1746,
    1, 0, 0, 0, 1745, 1743, 1, 0, 0, 0, 1746, 1748, 3, 116, 58, 0, 1747, 1736, 1, 0, 0, 0, 1748, 1751,
    1, 0, 0, 0, 1749, 1747, 1, 0, 0, 0, 1749, 1750, 1, 0, 0, 0, 1750, 115, 1, 0, 0, 0, 1751, 1749, 1,
    0, 0, 0, 1752, 1754, 3, 304, 152, 0, 1753, 1752, 1, 0, 0, 0, 1754, 1757, 1, 0, 0, 0, 1755, 1753,
    1, 0, 0, 0, 1755, 1756, 1, 0, 0, 0, 1756, 1758, 1, 0, 0, 0, 1757, 1755, 1, 0, 0, 0, 1758, 1762,
    3, 314, 157, 0, 1759, 1761, 5, 5, 0, 0, 1760, 1759, 1, 0, 0, 0, 1761, 1764, 1, 0, 0, 0, 1762, 1760,
    1, 0, 0, 0, 1762, 1763, 1, 0, 0, 0, 1763, 1765, 1, 0, 0, 0, 1764, 1762, 1, 0, 0, 0, 1765, 1769,
    5, 26, 0, 0, 1766, 1768, 5, 5, 0, 0, 1767, 1766, 1, 0, 0, 0, 1768, 1771, 1, 0, 0, 0, 1769, 1767,
    1, 0, 0, 0, 1769, 1770, 1, 0, 0, 0, 1770, 1772, 1, 0, 0, 0, 1771, 1769, 1, 0, 0, 0, 1772, 1773,
    3, 90, 45, 0, 1773, 117, 1, 0, 0, 0, 1774, 1778, 5, 13, 0, 0, 1775, 1777, 5, 5, 0, 0, 1776, 1775,
    1, 0, 0, 0, 1777, 1780, 1, 0, 0, 0, 1778, 1776, 1, 0, 0, 0, 1778, 1779, 1, 0, 0, 0, 1779, 1781,
    1, 0, 0, 0, 1780, 1778, 1, 0, 0, 0, 1781, 1785, 3, 120, 60, 0, 1782, 1784, 5, 5, 0, 0, 1783, 1782,
    1, 0, 0, 0, 1784, 1787, 1, 0, 0, 0, 1785, 1783, 1, 0, 0, 0, 1785, 1786, 1, 0, 0, 0, 1786, 1788,
    1, 0, 0, 0, 1787, 1785, 1, 0, 0, 0, 1788, 1789, 5, 14, 0, 0, 1789, 119, 1, 0, 0, 0, 1790, 1799,
    3, 122, 61, 0, 1791, 1793, 7, 2, 0, 0, 1792, 1791, 1, 0, 0, 0, 1793, 1794, 1, 0, 0, 0, 1794, 1792,
    1, 0, 0, 0, 1794, 1795, 1, 0, 0, 0, 1795, 1796, 1, 0, 0, 0, 1796, 1798, 3, 122, 61, 0, 1797, 1792,
    1, 0, 0, 0, 1798, 1801, 1, 0, 0, 0, 1799, 1797, 1, 0, 0, 0, 1799, 1800, 1, 0, 0, 0, 1800, 1803,
    1, 0, 0, 0, 1801, 1799, 1, 0, 0, 0, 1802, 1804, 3, 330, 165, 0, 1803, 1802, 1, 0, 0, 0, 1803, 1804,
    1, 0, 0, 0, 1804, 1806, 1, 0, 0, 0, 1805, 1790, 1, 0, 0, 0, 1805, 1806, 1, 0, 0, 0, 1806, 121, 1,
    0, 0, 0, 1807, 1810, 3, 302, 151, 0, 1808, 1810, 3, 304, 152, 0, 1809, 1807, 1, 0, 0, 0, 1809,
    1808, 1, 0, 0, 0, 1810, 1813, 1, 0, 0, 0, 1811, 1809, 1, 0, 0, 0, 1811, 1812, 1, 0, 0, 0, 1812,
    1818, 1, 0, 0, 0, 1813, 1811, 1, 0, 0, 0, 1814, 1819, 3, 124, 62, 0, 1815, 1819, 3, 126, 63, 0,
    1816, 1819, 3, 244, 122, 0, 1817, 1819, 3, 128, 64, 0, 1818, 1814, 1, 0, 0, 0, 1818, 1815, 1,
    0, 0, 0, 1818, 1816, 1, 0, 0, 0, 1818, 1817, 1, 0, 0, 0, 1819, 123, 1, 0, 0, 0, 1820, 1826, 3, 16,
    8, 0, 1821, 1826, 3, 64, 32, 0, 1822, 1826, 3, 52, 26, 0, 1823, 1826, 3, 68, 34, 0, 1824, 1826,
    3, 80, 40, 0, 1825, 1820, 1, 0, 0, 0, 1825, 1821, 1, 0, 0, 0, 1825, 1822, 1, 0, 0, 0, 1825, 1823,
    1, 0, 0, 0, 1825, 1824, 1, 0, 0, 0, 1826, 125, 1, 0, 0, 0, 1827, 1828, 3, 160, 80, 0, 1828, 1832,
    5, 28, 0, 0, 1829, 1831, 5, 5, 0, 0, 1830, 1829, 1, 0, 0, 0, 1831, 1834, 1, 0, 0, 0, 1832, 1830,
    1, 0, 0, 0, 1832, 1833, 1, 0, 0, 0, 1833, 1835, 1, 0, 0, 0, 1834, 1832, 1, 0, 0, 0, 1835, 1836,
    3, 128, 64, 0, 1836, 1848, 1, 0, 0, 0, 1837, 1838, 3, 162, 81, 0, 1838, 1842, 3, 256, 128, 0,
    1839, 1841, 5, 5, 0, 0, 1840, 1839, 1, 0, 0, 0, 1841, 1844, 1, 0, 0, 0, 1842, 1840, 1, 0, 0, 0,
    1842, 1843, 1, 0, 0, 0, 1843, 1845, 1, 0, 0, 0, 1844, 1842, 1, 0, 0, 0, 1845, 1846, 3, 128, 64,
    0, 1846, 1848, 1, 0, 0, 0, 1847, 1827, 1, 0, 0, 0, 1847, 1837, 1, 0, 0, 0, 1848, 127, 1, 0, 0, 0,
    1849, 1850, 3, 130, 65, 0, 1850, 129, 1, 0, 0, 0, 1851, 1868, 3, 132, 66, 0, 1852, 1854, 5, 5,
    0, 0, 1853, 1852, 1, 0, 0, 0, 1854, 1857, 1, 0, 0, 0, 1855, 1853, 1, 0, 0, 0, 1855, 1856, 1, 0,
    0, 0, 1856, 1858, 1, 0, 0, 0, 1857, 1855, 1, 0, 0, 0, 1858, 1862, 5, 23, 0, 0, 1859, 1861, 5, 5,
    0, 0, 1860, 1859, 1, 0, 0, 0, 1861, 1864, 1, 0, 0, 0, 1862, 1860, 1, 0, 0, 0, 1862, 1863, 1, 0,
    0, 0, 1863, 1865, 1, 0, 0, 0, 1864, 1862, 1, 0, 0, 0, 1865, 1867, 3, 132, 66, 0, 1866, 1855, 1,
    0, 0, 0, 1867, 1870, 1, 0, 0, 0, 1868, 1866, 1, 0, 0, 0, 1868, 1869, 1, 0, 0, 0, 1869, 131, 1, 0,
    0, 0, 1870, 1868, 1, 0, 0, 0, 1871, 1888, 3, 134, 67, 0, 1872, 1874, 5, 5, 0, 0, 1873, 1872, 1,
    0, 0, 0, 1874, 1877, 1, 0, 0, 0, 1875, 1873, 1, 0, 0, 0, 1875, 1876, 1, 0, 0, 0, 1876, 1878, 1,
    0, 0, 0, 1877, 1875, 1, 0, 0, 0, 1878, 1882, 5, 22, 0, 0, 1879, 1881, 5, 5, 0, 0, 1880, 1879, 1,
    0, 0, 0, 1881, 1884, 1, 0, 0, 0, 1882, 1880, 1, 0, 0, 0, 1882, 1883, 1, 0, 0, 0, 1883, 1885, 1,
    0, 0, 0, 1884, 1882, 1, 0, 0, 0, 1885, 1887, 3, 134, 67, 0, 1886, 1875, 1, 0, 0, 0, 1887, 1890,
    1, 0, 0, 0, 1888, 1886, 1, 0, 0, 0, 1888, 1889, 1, 0, 0, 0, 1889, 133, 1, 0, 0, 0, 1890, 1888, 1,
    0, 0, 0, 1891, 1903, 3, 136, 68, 0, 1892, 1896, 3, 258, 129, 0, 1893, 1895, 5, 5, 0, 0, 1894,
    1893, 1, 0, 0, 0, 1895, 1898, 1, 0, 0, 0, 1896, 1894, 1, 0, 0, 0, 1896, 1897, 1, 0, 0, 0, 1897,
    1899, 1, 0, 0, 0, 1898, 1896, 1, 0, 0, 0, 1899, 1900, 3, 136, 68, 0, 1900, 1902, 1, 0, 0, 0, 1901,
    1892, 1, 0, 0, 0, 1902, 1905, 1, 0, 0, 0, 1903, 1901, 1, 0, 0, 0, 1903, 1904, 1, 0, 0, 0, 1904,
    135, 1, 0, 0, 0, 1905, 1903, 1, 0, 0, 0, 1906, 1916, 3, 138, 69, 0, 1907, 1911, 3, 260, 130, 0,
    1908, 1910, 5, 5, 0, 0, 1909, 1908, 1, 0, 0, 0, 1910, 1913, 1, 0, 0, 0, 1911, 1909, 1, 0, 0, 0,
    1911, 1912, 1, 0, 0, 0, 1912, 1914, 1, 0, 0, 0, 1913, 1911, 1, 0, 0, 0, 1914, 1915, 3, 138, 69,
    0, 1915, 1917, 1, 0, 0, 0, 1916, 1907, 1, 0, 0, 0, 1916, 1917, 1, 0, 0, 0, 1917, 137, 1, 0, 0, 0,
    1918, 1939, 3, 140, 70, 0, 1919, 1923, 3, 262, 131, 0, 1920, 1922, 5, 5, 0, 0, 1921, 1920, 1,
    0, 0, 0, 1922, 1925, 1, 0, 0, 0, 1923, 1921, 1, 0, 0, 0, 1923, 1924, 1, 0, 0, 0, 1924, 1926, 1,
    0, 0, 0, 1925, 1923, 1, 0, 0, 0, 1926, 1927, 3, 140, 70, 0, 1927, 1938, 1, 0, 0, 0, 1928, 1932,
    3, 264, 132, 0, 1929, 1931, 5, 5, 0, 0, 1930, 1929, 1, 0, 0, 0, 1931, 1934, 1, 0, 0, 0, 1932, 1930,
    1, 0, 0, 0, 1932, 1933, 1, 0, 0, 0, 1933, 1935, 1, 0, 0, 0, 1934, 1932, 1, 0, 0, 0, 1935, 1936,
    3, 90, 45, 0, 1936, 1938, 1, 0, 0, 0, 1937, 1919, 1, 0, 0, 0, 1937, 1928, 1, 0, 0, 0, 1938, 1941,
    1, 0, 0, 0, 1939, 1937, 1, 0, 0, 0, 1939, 1940, 1, 0, 0, 0, 1940, 139, 1, 0, 0, 0, 1941, 1939, 1,
    0, 0, 0, 1942, 1960, 3, 142, 71, 0, 1943, 1945, 5, 5, 0, 0, 1944, 1943, 1, 0, 0, 0, 1945, 1948,
    1, 0, 0, 0, 1946, 1944, 1, 0, 0, 0, 1946, 1947, 1, 0, 0, 0, 1947, 1949, 1, 0, 0, 0, 1948, 1946,
    1, 0, 0, 0, 1949, 1953, 3, 322, 161, 0, 1950, 1952, 5, 5, 0, 0, 1951, 1950, 1, 0, 0, 0, 1952, 1955,
    1, 0, 0, 0, 1953, 1951, 1, 0, 0, 0, 1953, 1954, 1, 0, 0, 0, 1954, 1956, 1, 0, 0, 0, 1955, 1953,
    1, 0, 0, 0, 1956, 1957, 3, 142, 71, 0, 1957, 1959, 1, 0, 0, 0, 1958, 1946, 1, 0, 0, 0, 1959, 1962,
    1, 0, 0, 0, 1960, 1958, 1, 0, 0, 0, 1960, 1961, 1, 0, 0, 0, 1961, 141, 1, 0, 0, 0, 1962, 1960, 1,
    0, 0, 0, 1963, 1975, 3, 144, 72, 0, 1964, 1968, 3, 314, 157, 0, 1965, 1967, 5, 5, 0, 0, 1966,
    1965, 1, 0, 0, 0, 1967, 1970, 1, 0, 0, 0, 1968, 1966, 1, 0, 0, 0, 1968, 1969, 1, 0, 0, 0, 1969,
    1971, 1, 0, 0, 0, 1970, 1968, 1, 0, 0, 0, 1971, 1972, 3, 144, 72, 0, 1972, 1974, 1, 0, 0, 0, 1973,
    1964, 1, 0, 0, 0, 1974, 1977, 1, 0, 0, 0, 1975, 1973, 1, 0, 0, 0, 1975, 1976, 1, 0, 0, 0, 1976,
    143, 1, 0, 0, 0, 1977, 1975, 1, 0, 0, 0, 1978, 1989, 3, 146, 73, 0, 1979, 1983, 5, 36, 0, 0, 1980,
    1982, 5, 5, 0, 0, 1981, 1980, 1, 0, 0, 0, 1982, 1985, 1, 0, 0, 0, 1983, 1981, 1, 0, 0, 0, 1983,
    1984, 1, 0, 0, 0, 1984, 1986, 1, 0, 0, 0, 1985, 1983, 1, 0, 0, 0, 1986, 1988, 3, 146, 73, 0, 1987,
    1979, 1, 0, 0, 0, 1988, 1991, 1, 0, 0, 0, 1989, 1987, 1, 0, 0, 0, 1989, 1990, 1, 0, 0, 0, 1990,
    145, 1, 0, 0, 0, 1991, 1989, 1, 0, 0, 0, 1992, 2004, 3, 148, 74, 0, 1993, 1997, 3, 266, 133, 0,
    1994, 1996, 5, 5, 0, 0, 1995, 1994, 1, 0, 0, 0, 1996, 1999, 1, 0, 0, 0, 1997, 1995, 1, 0, 0, 0,
    1997, 1998, 1, 0, 0, 0, 1998, 2000, 1, 0, 0, 0, 1999, 1997, 1, 0, 0, 0, 2000, 2001, 3, 148, 74,
    0, 2001, 2003, 1, 0, 0, 0, 2002, 1993, 1, 0, 0, 0, 2003, 2006, 1, 0, 0, 0, 2004, 2002, 1, 0, 0,
    0, 2004, 2005, 1, 0, 0, 0, 2005, 147, 1, 0, 0, 0, 2006, 2004, 1, 0, 0, 0, 2007, 2019, 3, 150, 75,
    0, 2008, 2012, 3, 268, 134, 0, 2009, 2011, 5, 5, 0, 0, 2010, 2009, 1, 0, 0, 0, 2011, 2014, 1,
    0, 0, 0, 2012, 2010, 1, 0, 0, 0, 2012, 2013, 1, 0, 0, 0, 2013, 2015, 1, 0, 0, 0, 2014, 2012, 1,
    0, 0, 0, 2015, 2016, 3, 150, 75, 0, 2016, 2018, 1, 0, 0, 0, 2017, 2008, 1, 0, 0, 0, 2018, 2021,
    1, 0, 0, 0, 2019, 2017, 1, 0, 0, 0, 2019, 2020, 1, 0, 0, 0, 2020, 149, 1, 0, 0, 0, 2021, 2019, 1,
    0, 0, 0, 2022, 2038, 3, 152, 76, 0, 2023, 2025, 5, 5, 0, 0, 2024, 2023, 1, 0, 0, 0, 2025, 2028,
    1, 0, 0, 0, 2026, 2024, 1, 0, 0, 0, 2026, 2027, 1, 0, 0, 0, 2027, 2029, 1, 0, 0, 0, 2028, 2026,
    1, 0, 0, 0, 2029, 2033, 3, 270, 135, 0, 2030, 2032, 5, 5, 0, 0, 2031, 2030, 1, 0, 0, 0, 2032, 2035,
    1, 0, 0, 0, 2033, 2031, 1, 0, 0, 0, 2033, 2034, 1, 0, 0, 0, 2034, 2036, 1, 0, 0, 0, 2035, 2033,
    1, 0, 0, 0, 2036, 2037, 3, 90, 45, 0, 2037, 2039, 1, 0, 0, 0, 2038, 2026, 1, 0, 0, 0, 2038, 2039,
    1, 0, 0, 0, 2039, 151, 1, 0, 0, 0, 2040, 2042, 3, 154, 77, 0, 2041, 2040, 1, 0, 0, 0, 2042, 2045,
    1, 0, 0, 0, 2043, 2041, 1, 0, 0, 0, 2043, 2044, 1, 0, 0, 0, 2044, 2046, 1, 0, 0, 0, 2045, 2043,
    1, 0, 0, 0, 2046, 2047, 3, 156, 78, 0, 2047, 153, 1, 0, 0, 0, 2048, 2058, 3, 304, 152, 0, 2049,
    2058, 3, 302, 151, 0, 2050, 2054, 3, 272, 136, 0, 2051, 2053, 5, 5, 0, 0, 2052, 2051, 1, 0, 0,
    0, 2053, 2056, 1, 0, 0, 0, 2054, 2052, 1, 0, 0, 0, 2054, 2055, 1, 0, 0, 0, 2055, 2058, 1, 0, 0,
    0, 2056, 2054, 1, 0, 0, 0, 2057, 2048, 1, 0, 0, 0, 2057, 2049, 1, 0, 0, 0, 2057, 2050, 1, 0, 0,
    0, 2058, 155, 1, 0, 0, 0, 2059, 2067, 3, 186, 93, 0, 2060, 2062, 3, 186, 93, 0, 2061, 2063, 3,
    158, 79, 0, 2062, 2061, 1, 0, 0, 0, 2063, 2064, 1, 0, 0, 0, 2064, 2062, 1, 0, 0, 0, 2064, 2065,
    1, 0, 0, 0, 2065, 2067, 1, 0, 0, 0, 2066, 2059, 1, 0, 0, 0, 2066, 2060, 1, 0, 0, 0, 2067, 157, 1,
    0, 0, 0, 2068, 2074, 3, 274, 137, 0, 2069, 2074, 3, 176, 88, 0, 2070, 2074, 3, 170, 85, 0, 2071,
    2074, 3, 166, 83, 0, 2072, 2074, 3, 168, 84, 0, 2073, 2068, 1, 0, 0, 0, 2073, 2069, 1, 0, 0, 0,
    2073, 2070, 1, 0, 0, 0, 2073, 2071, 1, 0, 0, 0, 2073, 2072, 1, 0, 0, 0, 2074, 159, 1, 0, 0, 0, 2075,
    2076, 3, 156, 78, 0, 2076, 2077, 3, 164, 82, 0, 2077, 2080, 1, 0, 0, 0, 2078, 2080, 3, 314, 157,
    0, 2079, 2075, 1, 0, 0, 0, 2079, 2078, 1, 0, 0, 0, 2080, 161, 1, 0, 0, 0, 2081, 2082, 3, 152, 76,
    0, 2082, 163, 1, 0, 0, 0, 2083, 2087, 3, 176, 88, 0, 2084, 2087, 3, 166, 83, 0, 2085, 2087, 3,
    168, 84, 0, 2086, 2083, 1, 0, 0, 0, 2086, 2084, 1, 0, 0, 0, 2086, 2085, 1, 0, 0, 0, 2087, 165,
    1, 0, 0, 0, 2088, 2092, 5, 11, 0, 0, 2089, 2091, 5, 5, 0, 0, 2090, 2089, 1, 0, 0, 0, 2091, 2094,
    1, 0, 0, 0, 2092, 2090, 1, 0, 0, 0, 2092, 2093, 1, 0, 0, 0, 2093, 2095, 1, 0, 0, 0, 2094, 2092,
    1, 0, 0, 0, 2095, 2112, 3, 128, 64, 0, 2096, 2098, 5, 5, 0, 0, 2097, 2096, 1, 0, 0, 0, 2098, 2101,
    1, 0, 0, 0, 2099, 2097, 1, 0, 0, 0, 2099, 2100, 1, 0, 0, 0, 2100, 2102, 1, 0, 0, 0, 2101, 2099,
    1, 0, 0, 0, 2102, 2106, 5, 8, 0, 0, 2103, 2105, 5, 5, 0, 0, 2104, 2103, 1, 0, 0, 0, 2105, 2108,
    1, 0, 0, 0, 2106, 2104, 1, 0, 0, 0, 2106, 2107, 1, 0, 0, 0, 2107, 2109, 1, 0, 0, 0, 2108, 2106,
    1, 0, 0, 0, 2109, 2111, 3, 128, 64, 0, 2110, 2099, 1, 0, 0, 0, 2111, 2114, 1, 0, 0, 0, 2112, 2110,
    1, 0, 0, 0, 2112, 2113, 1, 0, 0, 0, 2113, 2118, 1, 0, 0, 0, 2114, 2112, 1, 0, 0, 0, 2115, 2117,
    5, 5, 0, 0, 2116, 2115, 1, 0, 0, 0, 2117, 2120, 1, 0, 0, 0, 2118, 2116, 1, 0, 0, 0, 2118, 2119,
    1, 0, 0, 0, 2119, 2121, 1, 0, 0, 0, 2120, 2118, 1, 0, 0, 0, 2121, 2122, 5, 12, 0, 0, 2122, 167,
    1, 0, 0, 0, 2123, 2125, 5, 5, 0, 0, 2124, 2123, 1, 0, 0, 0, 2125, 2128, 1, 0, 0, 0, 2126, 2124,
    1, 0, 0, 0, 2126, 2127, 1, 0, 0, 0, 2127, 2129, 1, 0, 0, 0, 2128, 2126, 1, 0, 0, 0, 2129, 2133,
    3, 276, 138, 0, 2130, 2132, 5, 5, 0, 0, 2131, 2130, 1, 0, 0, 0, 2132, 2135, 1, 0, 0, 0, 2133, 2131,
    1, 0, 0, 0, 2133, 2134, 1, 0, 0, 0, 2134, 2139, 1, 0, 0, 0, 2135, 2133, 1, 0, 0, 0, 2136, 2140,
    3, 314, 157, 0, 2137, 2140, 3, 188, 94, 0, 2138, 2140, 5, 61, 0, 0, 2139, 2136, 1, 0, 0, 0, 2139,
    2137, 1, 0, 0, 0, 2139, 2138, 1, 0, 0, 0, 2140, 169, 1, 0, 0, 0, 2141, 2143, 3, 176, 88, 0, 2142,
    2141, 1, 0, 0, 0, 2142, 2143, 1, 0, 0, 0, 2143, 2145, 1, 0, 0, 0, 2144, 2146, 3, 174, 87, 0, 2145,
    2144, 1, 0, 0, 0, 2145, 2146, 1, 0, 0, 0, 2146, 2147, 1, 0, 0, 0, 2147, 2153, 3, 172, 86, 0, 2148,
    2150, 3, 176, 88, 0, 2149, 2148, 1, 0, 0, 0, 2149, 2150, 1, 0, 0, 0, 2150, 2151, 1, 0, 0, 0, 2151,
    2153, 3, 174, 87, 0, 2152, 2142, 1, 0, 0, 0, 2152, 2149, 1, 0, 0, 0, 2153, 171, 1, 0, 0, 0, 2154,
    2156, 3, 304, 152, 0, 2155, 2154, 1, 0, 0, 0, 2156, 2159, 1, 0, 0, 0, 2157, 2155, 1, 0, 0, 0, 2157,
    2158, 1, 0, 0, 0, 2158, 2161, 1, 0, 0, 0, 2159, 2157, 1, 0, 0, 0, 2160, 2162, 3, 302, 151, 0, 2161,
    2160, 1, 0, 0, 0, 2161, 2162, 1, 0, 0, 0, 2162, 2166, 1, 0, 0, 0, 2163, 2165, 5, 5, 0, 0, 2164,
    2163, 1, 0, 0, 0, 2165, 2168, 1, 0, 0, 0, 2166, 2164, 1, 0, 0, 0, 2166, 2167, 1, 0, 0, 0, 2167,
    2169, 1, 0, 0, 0, 2168, 2166, 1, 0, 0, 0, 2169, 2170, 3, 208, 104, 0, 2170, 173, 1, 0, 0, 0, 2171,
    2175, 5, 9, 0, 0, 2172, 2174, 5, 5, 0, 0, 2173, 2172, 1, 0, 0, 0, 2174, 2177, 1, 0, 0, 0, 2175,
    2173, 1, 0, 0, 0, 2175, 2176, 1, 0, 0, 0, 2176, 2178, 1, 0, 0, 0, 2177, 2175, 1, 0, 0, 0, 2178,
    2218, 5, 10, 0, 0, 2179, 2183, 5, 9, 0, 0, 2180, 2182, 5, 5, 0, 0, 2181, 2180, 1, 0, 0, 0, 2182,
    2185, 1, 0, 0, 0, 2183, 2181, 1, 0, 0, 0, 2183, 2184, 1, 0, 0, 0, 2184, 2186, 1, 0, 0, 0, 2185,
    2183, 1, 0, 0, 0, 2186, 2203, 3, 184, 92, 0, 2187, 2189, 5, 5, 0, 0, 2188, 2187, 1, 0, 0, 0, 2189,
    2192, 1, 0, 0, 0, 2190, 2188, 1, 0, 0, 0, 2190, 2191, 1, 0, 0, 0, 2191, 2193, 1, 0, 0, 0, 2192,
    2190, 1, 0, 0, 0, 2193, 2197, 5, 8, 0, 0, 2194, 2196, 5, 5, 0, 0, 2195, 2194, 1, 0, 0, 0, 2196,
    2199, 1, 0, 0, 0, 2197, 2195, 1, 0, 0, 0, 2197, 2198, 1, 0, 0, 0, 2198, 2200, 1, 0, 0, 0, 2199,
    2197, 1, 0, 0, 0, 2200, 2202, 3, 184, 92, 0, 2201, 2190, 1, 0, 0, 0, 2202, 2205, 1, 0, 0, 0, 2203,
    2201, 1, 0, 0, 0, 2203, 2204, 1, 0, 0, 0, 2204, 2209, 1, 0, 0, 0, 2205, 2203, 1, 0, 0, 0, 2206,
    2208, 5, 5, 0, 0, 2207, 2206, 1, 0, 0, 0, 2208, 2211, 1, 0, 0, 0, 2209, 2207, 1, 0, 0, 0, 2209,
    2210, 1, 0, 0, 0, 2210, 2213, 1, 0, 0, 0, 2211, 2209, 1, 0, 0, 0, 2212, 2214, 5, 8, 0, 0, 2213,
    2212, 1, 0, 0, 0, 2213, 2214, 1, 0, 0, 0, 2214, 2215, 1, 0, 0, 0, 2215, 2216, 5, 10, 0, 0, 2216,
    2218, 1, 0, 0, 0, 2217, 2171, 1, 0, 0, 0, 2217, 2179, 1, 0, 0, 0, 2218, 175, 1, 0, 0, 0, 2219, 2223,
    5, 44, 0, 0, 2220, 2222, 5, 5, 0, 0, 2221, 2220, 1, 0, 0, 0, 2222, 2225, 1, 0, 0, 0, 2223, 2221,
    1, 0, 0, 0, 2223, 2224, 1, 0, 0, 0, 2224, 2226, 1, 0, 0, 0, 2225, 2223, 1, 0, 0, 0, 2226, 2243,
    3, 178, 89, 0, 2227, 2229, 5, 5, 0, 0, 2228, 2227, 1, 0, 0, 0, 2229, 2232, 1, 0, 0, 0, 2230, 2228,
    1, 0, 0, 0, 2230, 2231, 1, 0, 0, 0, 2231, 2233, 1, 0, 0, 0, 2232, 2230, 1, 0, 0, 0, 2233, 2237,
    5, 8, 0, 0, 2234, 2236, 5, 5, 0, 0, 2235, 2234, 1, 0, 0, 0, 2236, 2239, 1, 0, 0, 0, 2237, 2235,
    1, 0, 0, 0, 2237, 2238, 1, 0, 0, 0, 2238, 2240, 1, 0, 0, 0, 2239, 2237, 1, 0, 0, 0, 2240, 2242,
    3, 178, 89, 0, 2241, 2230, 1, 0, 0, 0, 2242, 2245, 1, 0, 0, 0, 2243, 2241, 1, 0, 0, 0, 2243, 2244,
    1, 0, 0, 0, 2244, 2249, 1, 0, 0, 0, 2245, 2243, 1, 0, 0, 0, 2246, 2248, 5, 5, 0, 0, 2247, 2246,
    1, 0, 0, 0, 2248, 2251, 1, 0, 0, 0, 2249, 2247, 1, 0, 0, 0, 2249, 2250, 1, 0, 0, 0, 2250, 2253,
    1, 0, 0, 0, 2251, 2249, 1, 0, 0, 0, 2252, 2254, 5, 8, 0, 0, 2253, 2252, 1, 0, 0, 0, 2253, 2254,
    1, 0, 0, 0, 2254, 2255, 1, 0, 0, 0, 2255, 2256, 5, 45, 0, 0, 2256, 177, 1, 0, 0, 0, 2257, 2259,
    3, 180, 90, 0, 2258, 2257, 1, 0, 0, 0, 2258, 2259, 1, 0, 0, 0, 2259, 2260, 1, 0, 0, 0, 2260, 2263,
    3, 90, 45, 0, 2261, 2263, 5, 15, 0, 0, 2262, 2258, 1, 0, 0, 0, 2262, 2261, 1, 0, 0, 0, 2263, 179,
    1, 0, 0, 0, 2264, 2266, 3, 182, 91, 0, 2265, 2264, 1, 0, 0, 0, 2266, 2267, 1, 0, 0, 0, 2267, 2265,
    1, 0, 0, 0, 2267, 2268, 1, 0, 0, 0, 2268, 181, 1, 0, 0, 0, 2269, 2273, 3, 288, 144, 0, 2270, 2272,
    5, 5, 0, 0, 2271, 2270, 1, 0, 0, 0, 2272, 2275, 1, 0, 0, 0, 2273, 2271, 1, 0, 0, 0, 2273, 2274,
    1, 0, 0, 0, 2274, 2278, 1, 0, 0, 0, 2275, 2273, 1, 0, 0, 0, 2276, 2278, 3, 304, 152, 0, 2277, 2269,
    1, 0, 0, 0, 2277, 2276, 1, 0, 0, 0, 2278, 183, 1, 0, 0, 0, 2279, 2281, 3, 304, 152, 0, 2280, 2279,
    1, 0, 0, 0, 2280, 2281, 1, 0, 0, 0, 2281, 2285, 1, 0, 0, 0, 2282, 2284, 5, 5, 0, 0, 2283, 2282,
    1, 0, 0, 0, 2284, 2287, 1, 0, 0, 0, 2285, 2283, 1, 0, 0, 0, 2285, 2286, 1, 0, 0, 0, 2286, 2302,
    1, 0, 0, 0, 2287, 2285, 1, 0, 0, 0, 2288, 2292, 3, 314, 157, 0, 2289, 2291, 5, 5, 0, 0, 2290, 2289,
    1, 0, 0, 0, 2291, 2294, 1, 0, 0, 0, 2292, 2290, 1, 0, 0, 0, 2292, 2293, 1, 0, 0, 0, 2293, 2295,
    1, 0, 0, 0, 2294, 2292, 1, 0, 0, 0, 2295, 2299, 5, 28, 0, 0, 2296, 2298, 5, 5, 0, 0, 2297, 2296,
    1, 0, 0, 0, 2298, 2301, 1, 0, 0, 0, 2299, 2297, 1, 0, 0, 0, 2299, 2300, 1, 0, 0, 0, 2300, 2303,
    1, 0, 0, 0, 2301, 2299, 1, 0, 0, 0, 2302, 2288, 1, 0, 0, 0, 2302, 2303, 1, 0, 0, 0, 2303, 2305,
    1, 0, 0, 0, 2304, 2306, 5, 15, 0, 0, 2305, 2304, 1, 0, 0, 0, 2305, 2306, 1, 0, 0, 0, 2306, 2310,
    1, 0, 0, 0, 2307, 2309, 5, 5, 0, 0, 2308, 2307, 1, 0, 0, 0, 2309, 2312, 1, 0, 0, 0, 2310, 2308,
    1, 0, 0, 0, 2310, 2311, 1, 0, 0, 0, 2311, 2313, 1, 0, 0, 0, 2312, 2310, 1, 0, 0, 0, 2313, 2314,
    3, 128, 64, 0, 2314, 185, 1, 0, 0, 0, 2315, 2330, 3, 188, 94, 0, 2316, 2330, 3, 192, 96, 0, 2317,
    2330, 3, 194, 97, 0, 2318, 2330, 3, 314, 157, 0, 2319, 2330, 3, 254, 127, 0, 2320, 2330, 3,
    216, 108, 0, 2321, 2330, 3, 218, 109, 0, 2322, 2330, 3, 190, 95, 0, 2323, 2330, 3, 220, 110,
    0, 2324, 2330, 3, 222, 111, 0, 2325, 2330, 3, 226, 113, 0, 2326, 2330, 3, 228, 114, 0, 2327,
    2330, 3, 238, 119, 0, 2328, 2330, 3, 252, 126, 0, 2329, 2315, 1, 0, 0, 0, 2329, 2316, 1, 0, 0,
    0, 2329, 2317, 1, 0, 0, 0, 2329, 2318, 1, 0, 0, 0, 2329, 2319, 1, 0, 0, 0, 2329, 2320, 1, 0, 0,
    0, 2329, 2321, 1, 0, 0, 0, 2329, 2322, 1, 0, 0, 0, 2329, 2323, 1, 0, 0, 0, 2329, 2324, 1, 0, 0,
    0, 2329, 2325, 1, 0, 0, 0, 2329, 2326, 1, 0, 0, 0, 2329, 2327, 1, 0, 0, 0, 2329, 2328, 1, 0, 0,
    0, 2330, 187, 1, 0, 0, 0, 2331, 2335, 5, 9, 0, 0, 2332, 2334, 5, 5, 0, 0, 2333, 2332, 1, 0, 0, 0,
    2334, 2337, 1, 0, 0, 0, 2335, 2333, 1, 0, 0, 0, 2335, 2336, 1, 0, 0, 0, 2336, 2338, 1, 0, 0, 0,
    2337, 2335, 1, 0, 0, 0, 2338, 2342, 3, 128, 64, 0, 2339, 2341, 5, 5, 0, 0, 2340, 2339, 1, 0, 0,
    0, 2341, 2344, 1, 0, 0, 0, 2342, 2340, 1, 0, 0, 0, 2342, 2343, 1, 0, 0, 0, 2343, 2345, 1, 0, 0,
    0, 2344, 2342, 1, 0, 0, 0, 2345, 2346, 5, 10, 0, 0, 2346, 189, 1, 0, 0, 0, 2347, 2351, 5, 11, 0,
    0, 2348, 2350, 5, 5, 0, 0, 2349, 2348, 1, 0, 0, 0, 2350, 2353, 1, 0, 0, 0, 2351, 2349, 1, 0, 0,
    0, 2351, 2352, 1, 0, 0, 0, 2352, 2354, 1, 0, 0, 0, 2353, 2351, 1, 0, 0, 0, 2354, 2371, 3, 128,
    64, 0, 2355, 2357, 5, 5, 0, 0, 2356, 2355, 1, 0, 0, 0, 2357, 2360, 1, 0, 0, 0, 2358, 2356, 1, 0,
    0, 0, 2358, 2359, 1, 0, 0, 0, 2359, 2361, 1, 0, 0, 0, 2360, 2358, 1, 0, 0, 0, 2361, 2365, 5, 8,
    0, 0, 2362, 2364, 5, 5, 0, 0, 2363, 2362, 1, 0, 0, 0, 2364, 2367, 1, 0, 0, 0, 2365, 2363, 1, 0,
    0, 0, 2365, 2366, 1, 0, 0, 0, 2366, 2368, 1, 0, 0, 0, 2367, 2365, 1, 0, 0, 0, 2368, 2370, 3, 128,
    64, 0, 2369, 2358, 1, 0, 0, 0, 2370, 2373, 1, 0, 0, 0, 2371, 2369, 1, 0, 0, 0, 2371, 2372, 1, 0,
    0, 0, 2372, 2377, 1, 0, 0, 0, 2373, 2371, 1, 0, 0, 0, 2374, 2376, 5, 5, 0, 0, 2375, 2374, 1, 0,
    0, 0, 2376, 2379, 1, 0, 0, 0, 2377, 2375, 1, 0, 0, 0, 2377, 2378, 1, 0, 0, 0, 2378, 2381, 1, 0,
    0, 0, 2379, 2377, 1, 0, 0, 0, 2380, 2382, 5, 8, 0, 0, 2381, 2380, 1, 0, 0, 0, 2381, 2382, 1, 0,
    0, 0, 2382, 2383, 1, 0, 0, 0, 2383, 2384, 5, 12, 0, 0, 2384, 2394, 1, 0, 0, 0, 2385, 2389, 5, 11,
    0, 0, 2386, 2388, 5, 5, 0, 0, 2387, 2386, 1, 0, 0, 0, 2388, 2391, 1, 0, 0, 0, 2389, 2387, 1, 0,
    0, 0, 2389, 2390, 1, 0, 0, 0, 2390, 2392, 1, 0, 0, 0, 2391, 2389, 1, 0, 0, 0, 2392, 2394, 5, 12,
    0, 0, 2393, 2347, 1, 0, 0, 0, 2393, 2385, 1, 0, 0, 0, 2394, 191, 1, 0, 0, 0, 2395, 2396, 7, 3, 0,
    0, 2396, 193, 1, 0, 0, 0, 2397, 2400, 3, 196, 98, 0, 2398, 2400, 3, 198, 99, 0, 2399, 2397, 1,
    0, 0, 0, 2399, 2398, 1, 0, 0, 0, 2400, 195, 1, 0, 0, 0, 2401, 2406, 5, 134, 0, 0, 2402, 2405, 3,
    200, 100, 0, 2403, 2405, 3, 202, 101, 0, 2404, 2402, 1, 0, 0, 0, 2404, 2403, 1, 0, 0, 0, 2405,
    2408, 1, 0, 0, 0, 2406, 2404, 1, 0, 0, 0, 2406, 2407, 1, 0, 0, 0, 2407, 2409, 1, 0, 0, 0, 2408,
    2406, 1, 0, 0, 0, 2409, 2410, 5, 160, 0, 0, 2410, 197, 1, 0, 0, 0, 2411, 2417, 5, 135, 0, 0, 2412,
    2416, 3, 204, 102, 0, 2413, 2416, 3, 206, 103, 0, 2414, 2416, 5, 166, 0, 0, 2415, 2412, 1, 0,
    0, 0, 2415, 2413, 1, 0, 0, 0, 2415, 2414, 1, 0, 0, 0, 2416, 2419, 1, 0, 0, 0, 2417, 2415, 1, 0,
    0, 0, 2417, 2418, 1, 0, 0, 0, 2418, 2420, 1, 0, 0, 0, 2419, 2417, 1, 0, 0, 0, 2420, 2421, 5, 165,
    0, 0, 2421, 199, 1, 0, 0, 0, 2422, 2423, 7, 4, 0, 0, 2423, 201, 1, 0, 0, 0, 2424, 2425, 5, 164,
    0, 0, 2425, 2426, 3, 128, 64, 0, 2426, 2427, 5, 14, 0, 0, 2427, 203, 1, 0, 0, 0, 2428, 2429, 7,
    5, 0, 0, 2429, 205, 1, 0, 0, 0, 2430, 2434, 5, 169, 0, 0, 2431, 2433, 5, 5, 0, 0, 2432, 2431, 1,
    0, 0, 0, 2433, 2436, 1, 0, 0, 0, 2434, 2432, 1, 0, 0, 0, 2434, 2435, 1, 0, 0, 0, 2435, 2437, 1,
    0, 0, 0, 2436, 2434, 1, 0, 0, 0, 2437, 2441, 3, 128, 64, 0, 2438, 2440, 5, 5, 0, 0, 2439, 2438,
    1, 0, 0, 0, 2440, 2443, 1, 0, 0, 0, 2441, 2439, 1, 0, 0, 0, 2441, 2442, 1, 0, 0, 0, 2442, 2444,
    1, 0, 0, 0, 2443, 2441, 1, 0, 0, 0, 2444, 2445, 5, 14, 0, 0, 2445, 207, 1, 0, 0, 0, 2446, 2450,
    5, 13, 0, 0, 2447, 2449, 5, 5, 0, 0, 2448, 2447, 1, 0, 0, 0, 2449, 2452, 1, 0, 0, 0, 2450, 2448,
    1, 0, 0, 0, 2450, 2451, 1, 0, 0, 0, 2451, 2453, 1, 0, 0, 0, 2452, 2450, 1, 0, 0, 0, 2453, 2457,
    3, 120, 60, 0, 2454, 2456, 5, 5, 0, 0, 2455, 2454, 1, 0, 0, 0, 2456, 2459, 1, 0, 0, 0, 2457, 2455,
    1, 0, 0, 0, 2457, 2458, 1, 0, 0, 0, 2458, 2460, 1, 0, 0, 0, 2459, 2457, 1, 0, 0, 0, 2460, 2461,
    5, 14, 0, 0, 2461, 2495, 1, 0, 0, 0, 2462, 2466, 5, 13, 0, 0, 2463, 2465, 5, 5, 0, 0, 2464, 2463,
    1, 0, 0, 0, 2465, 2468, 1, 0, 0, 0, 2466, 2464, 1, 0, 0, 0, 2466, 2467, 1, 0, 0, 0, 2467, 2470,
    1, 0, 0, 0, 2468, 2466, 1, 0, 0, 0, 2469, 2471, 3, 210, 105, 0, 2470, 2469, 1, 0, 0, 0, 2470, 2471,
    1, 0, 0, 0, 2471, 2475, 1, 0, 0, 0, 2472, 2474, 5, 5, 0, 0, 2473, 2472, 1, 0, 0, 0, 2474, 2477,
    1, 0, 0, 0, 2475, 2473, 1, 0, 0, 0, 2475, 2476, 1, 0, 0, 0, 2476, 2478, 1, 0, 0, 0, 2477, 2475,
    1, 0, 0, 0, 2478, 2482, 5, 34, 0, 0, 2479, 2481, 5, 5, 0, 0, 2480, 2479, 1, 0, 0, 0, 2481, 2484,
    1, 0, 0, 0, 2482, 2480, 1, 0, 0, 0, 2482, 2483, 1, 0, 0, 0, 2483, 2485, 1, 0, 0, 0, 2484, 2482,
    1, 0, 0, 0, 2485, 2489, 3, 120, 60, 0, 2486, 2488, 5, 5, 0, 0, 2487, 2486, 1, 0, 0, 0, 2488, 2491,
    1, 0, 0, 0, 2489, 2487, 1, 0, 0, 0, 2489, 2490, 1, 0, 0, 0, 2490, 2492, 1, 0, 0, 0, 2491, 2489,
    1, 0, 0, 0, 2492, 2493, 5, 14, 0, 0, 2493, 2495, 1, 0, 0, 0, 2494, 2446, 1, 0, 0, 0, 2494, 2462,
    1, 0, 0, 0, 2495, 209, 1, 0, 0, 0, 2496, 2513, 3, 212, 106, 0, 2497, 2499, 5, 5, 0, 0, 2498, 2497,
    1, 0, 0, 0, 2499, 2502, 1, 0, 0, 0, 2500, 2498, 1, 0, 0, 0, 2500, 2501, 1, 0, 0, 0, 2501, 2503,
    1, 0, 0, 0, 2502, 2500, 1, 0, 0, 0, 2503, 2507, 5, 8, 0, 0, 2504, 2506, 5, 5, 0, 0, 2505, 2504,
    1, 0, 0, 0, 2506, 2509, 1, 0, 0, 0, 2507, 2505, 1, 0, 0, 0, 2507, 2508, 1, 0, 0, 0, 2508, 2510,
    1, 0, 0, 0, 2509, 2507, 1, 0, 0, 0, 2510, 2512, 3, 212, 106, 0, 2511, 2500, 1, 0, 0, 0, 2512, 2515,
    1, 0, 0, 0, 2513, 2511, 1, 0, 0, 0, 2513, 2514, 1, 0, 0, 0, 2514, 2517, 1, 0, 0, 0, 2515, 2513,
    1, 0, 0, 0, 2516, 2518, 5, 8, 0, 0, 2517, 2516, 1, 0, 0, 0, 2517, 2518, 1, 0, 0, 0, 2518, 211, 1,
    0, 0, 0, 2519, 2538, 3, 72, 36, 0, 2520, 2535, 3, 70, 35, 0, 2521, 2523, 5, 5, 0, 0, 2522, 2521,
    1, 0, 0, 0, 2523, 2526, 1, 0, 0, 0, 2524, 2522, 1, 0, 0, 0, 2524, 2525, 1, 0, 0, 0, 2525, 2527,
    1, 0, 0, 0, 2526, 2524, 1, 0, 0, 0, 2527, 2531, 5, 26, 0, 0, 2528, 2530, 5, 5, 0, 0, 2529, 2528,
    1, 0, 0, 0, 2530, 2533, 1, 0, 0, 0, 2531, 2529, 1, 0, 0, 0, 2531, 2532, 1, 0, 0, 0, 2532, 2534,
    1, 0, 0, 0, 2533, 2531, 1, 0, 0, 0, 2534, 2536, 3, 90, 45, 0, 2535, 2524, 1, 0, 0, 0, 2535, 2536,
    1, 0, 0, 0, 2536, 2538, 1, 0, 0, 0, 2537, 2519, 1, 0, 0, 0, 2537, 2520, 1, 0, 0, 0, 2538, 213, 1,
    0, 0, 0, 2539, 2555, 5, 63, 0, 0, 2540, 2542, 5, 5, 0, 0, 2541, 2540, 1, 0, 0, 0, 2542, 2545, 1,
    0, 0, 0, 2543, 2541, 1, 0, 0, 0, 2543, 2544, 1, 0, 0, 0, 2544, 2546, 1, 0, 0, 0, 2545, 2543, 1,
    0, 0, 0, 2546, 2550, 3, 90, 45, 0, 2547, 2549, 5, 5, 0, 0, 2548, 2547, 1, 0, 0, 0, 2549, 2552,
    1, 0, 0, 0, 2550, 2548, 1, 0, 0, 0, 2550, 2551, 1, 0, 0, 0, 2551, 2553, 1, 0, 0, 0, 2552, 2550,
    1, 0, 0, 0, 2553, 2554, 5, 7, 0, 0, 2554, 2556, 1, 0, 0, 0, 2555, 2543, 1, 0, 0, 0, 2555, 2556,
    1, 0, 0, 0, 2556, 2560, 1, 0, 0, 0, 2557, 2559, 5, 5, 0, 0, 2558, 2557, 1, 0, 0, 0, 2559, 2562,
    1, 0, 0, 0, 2560, 2558, 1, 0, 0, 0, 2560, 2561, 1, 0, 0, 0, 2561, 2563, 1, 0, 0, 0, 2562, 2560,
    1, 0, 0, 0, 2563, 2578, 3, 54, 27, 0, 2564, 2566, 5, 5, 0, 0, 2565, 2564, 1, 0, 0, 0, 2566, 2569,
    1, 0, 0, 0, 2567, 2565, 1, 0, 0, 0, 2567, 2568, 1, 0, 0, 0, 2568, 2570, 1, 0, 0, 0, 2569, 2567,
    1, 0, 0, 0, 2570, 2574, 5, 26, 0, 0, 2571, 2573, 5, 5, 0, 0, 2572, 2571, 1, 0, 0, 0, 2573, 2576,
    1, 0, 0, 0, 2574, 2572, 1, 0, 0, 0, 2574, 2575, 1, 0, 0, 0, 2575, 2577, 1, 0, 0, 0, 2576, 2574,
    1, 0, 0, 0, 2577, 2579, 3, 90, 45, 0, 2578, 2567, 1, 0, 0, 0, 2578, 2579, 1, 0, 0, 0, 2579, 2587,
    1, 0, 0, 0, 2580, 2582, 5, 5, 0, 0, 2581, 2580, 1, 0, 0, 0, 2582, 2585, 1, 0, 0, 0, 2583, 2581,
    1, 0, 0, 0, 2583, 2584, 1, 0, 0, 0, 2584, 2586, 1, 0, 0, 0, 2585, 2583, 1, 0, 0, 0, 2586, 2588,
    3, 114, 57, 0, 2587, 2583, 1, 0, 0, 0, 2587, 2588, 1, 0, 0, 0, 2588, 2596, 1, 0, 0, 0, 2589, 2591,
    5, 5, 0, 0, 2590, 2589, 1, 0, 0, 0, 2591, 2594, 1, 0, 0, 0, 2592, 2590, 1, 0, 0, 0, 2592, 2593,
    1, 0, 0, 0, 2593, 2595, 1, 0, 0, 0, 2594, 2592, 1, 0, 0, 0, 2595, 2597, 3, 62, 31, 0, 2596, 2592,
    1, 0, 0, 0, 2596, 2597, 1, 0, 0, 0, 2597, 215, 1, 0, 0, 0, 2598, 2601, 3, 208, 104, 0, 2599, 2601,
    3, 214, 107, 0, 2600, 2598, 1, 0, 0, 0, 2600, 2599, 1, 0, 0, 0, 2601, 217, 1, 0, 0, 0, 2602, 2606,
    5, 64, 0, 0, 2603, 2605, 5, 5, 0, 0, 2604, 2603, 1, 0, 0, 0, 2605, 2608, 1, 0, 0, 0, 2606, 2604,
    1, 0, 0, 0, 2606, 2607, 1, 0, 0, 0, 2607, 2609, 1, 0, 0, 0, 2608, 2606, 1, 0, 0, 0, 2609, 2613,
    5, 26, 0, 0, 2610, 2612, 5, 5, 0, 0, 2611, 2610, 1, 0, 0, 0, 2612, 2615, 1, 0, 0, 0, 2613, 2611,
    1, 0, 0, 0, 2613, 2614, 1, 0, 0, 0, 2614, 2616, 1, 0, 0, 0, 2615, 2613, 1, 0, 0, 0, 2616, 2624,
    3, 24, 12, 0, 2617, 2619, 5, 5, 0, 0, 2618, 2617, 1, 0, 0, 0, 2619, 2622, 1, 0, 0, 0, 2620, 2618,
    1, 0, 0, 0, 2620, 2621, 1, 0, 0, 0, 2621, 2623, 1, 0, 0, 0, 2622, 2620, 1, 0, 0, 0, 2623, 2625,
    3, 34, 17, 0, 2624, 2620, 1, 0, 0, 0, 2624, 2625, 1, 0, 0, 0, 2625, 2635, 1, 0, 0, 0, 2626, 2630,
    5, 64, 0, 0, 2627, 2629, 5, 5, 0, 0, 2628, 2627, 1, 0, 0, 0, 2629, 2632, 1, 0, 0, 0, 2630, 2628,
    1, 0, 0, 0, 2630, 2631, 1, 0, 0, 0, 2631, 2633, 1, 0, 0, 0, 2632, 2630, 1, 0, 0, 0, 2633, 2635,
    3, 34, 17, 0, 2634, 2602, 1, 0, 0, 0, 2634, 2626, 1, 0, 0, 0, 2635, 219, 1, 0, 0, 0, 2636, 2637,
    7, 6, 0, 0, 2637, 221, 1, 0, 0, 0, 2638, 2655, 5, 73, 0, 0, 2639, 2643, 5, 44, 0, 0, 2640, 2642,
    5, 5, 0, 0, 2641, 2640, 1, 0, 0, 0, 2642, 2645, 1, 0, 0, 0, 2643, 2641, 1, 0, 0, 0, 2643, 2644,
    1, 0, 0, 0, 2644, 2646, 1, 0, 0, 0, 2645, 2643, 1, 0, 0, 0, 2646, 2650, 3, 90, 45, 0, 2647, 2649,
    5, 5, 0, 0, 2648, 2647, 1, 0, 0, 0, 2649, 2652, 1, 0, 0, 0, 2650, 2648, 1, 0, 0, 0, 2650, 2651,
    1, 0, 0, 0, 2651, 2653, 1, 0, 0, 0, 2652, 2650, 1, 0, 0, 0, 2653, 2654, 5, 45, 0, 0, 2654, 2656,
    1, 0, 0, 0, 2655, 2639, 1, 0, 0, 0, 2655, 2656, 1, 0, 0, 0, 2656, 2659, 1, 0, 0, 0, 2657, 2658,
    5, 40, 0, 0, 2658, 2660, 3, 314, 157, 0, 2659, 2657, 1, 0, 0, 0, 2659, 2660, 1, 0, 0, 0, 2660,
    2663, 1, 0, 0, 0, 2661, 2663, 5, 58, 0, 0, 2662, 2638, 1, 0, 0, 0, 2662, 2661, 1, 0, 0, 0, 2663,
    223, 1, 0, 0, 0, 2664, 2667, 3, 118, 59, 0, 2665, 2667, 3, 122, 61, 0, 2666, 2664, 1, 0, 0, 0,
    2666, 2665, 1, 0, 0, 0, 2667, 225, 1, 0, 0, 0, 2668, 2672, 5, 76, 0, 0, 2669, 2671, 5, 5, 0, 0,
    2670, 2669, 1, 0, 0, 0, 2671, 2674, 1, 0, 0, 0, 2672, 2670, 1, 0, 0, 0, 2672, 2673, 1, 0, 0, 0,
    2673, 2675, 1, 0, 0, 0, 2674, 2672, 1, 0, 0, 0, 2675, 2679, 5, 9, 0, 0, 2676, 2678, 5, 5, 0, 0,
    2677, 2676, 1, 0, 0, 0, 2678, 2681, 1, 0, 0, 0, 2679, 2677, 1, 0, 0, 0, 2679, 2680, 1, 0, 0, 0,
    2680, 2682, 1, 0, 0, 0, 2681, 2679, 1, 0, 0, 0, 2682, 2686, 3, 128, 64, 0, 2683, 2685, 5, 5, 0,
    0, 2684, 2683, 1, 0, 0, 0, 2685, 2688, 1, 0, 0, 0, 2686, 2684, 1, 0, 0, 0, 2686, 2687, 1, 0, 0,
    0, 2687, 2689, 1, 0, 0, 0, 2688, 2686, 1, 0, 0, 0, 2689, 2693, 5, 10, 0, 0, 2690, 2692, 5, 5, 0,
    0, 2691, 2690, 1, 0, 0, 0, 2692, 2695, 1, 0, 0, 0, 2693, 2691, 1, 0, 0, 0, 2693, 2694, 1, 0, 0,
    0, 2694, 2696, 1, 0, 0, 0, 2695, 2693, 1, 0, 0, 0, 2696, 2714, 3, 224, 112, 0, 2697, 2699, 5,
    27, 0, 0, 2698, 2697, 1, 0, 0, 0, 2698, 2699, 1, 0, 0, 0, 2699, 2703, 1, 0, 0, 0, 2700, 2702, 5,
    5, 0, 0, 2701, 2700, 1, 0, 0, 0, 2702, 2705, 1, 0, 0, 0, 2703, 2701, 1, 0, 0, 0, 2703, 2704, 1,
    0, 0, 0, 2704, 2706, 1, 0, 0, 0, 2705, 2703, 1, 0, 0, 0, 2706, 2710, 5, 77, 0, 0, 2707, 2709, 5,
    5, 0, 0, 2708, 2707, 1, 0, 0, 0, 2709, 2712, 1, 0, 0, 0, 2710, 2708, 1, 0, 0, 0, 2710, 2711, 1,
    0, 0, 0, 2711, 2713, 1, 0, 0, 0, 2712, 2710, 1, 0, 0, 0, 2713, 2715, 3, 224, 112, 0, 2714, 2698,
    1, 0, 0, 0, 2714, 2715, 1, 0, 0, 0, 2715, 2763, 1, 0, 0, 0, 2716, 2720, 5, 76, 0, 0, 2717, 2719,
    5, 5, 0, 0, 2718, 2717, 1, 0, 0, 0, 2719, 2722, 1, 0, 0, 0, 2720, 2718, 1, 0, 0, 0, 2720, 2721,
    1, 0, 0, 0, 2721, 2723, 1, 0, 0, 0, 2722, 2720, 1, 0, 0, 0, 2723, 2727, 5, 9, 0, 0, 2724, 2726,
    5, 5, 0, 0, 2725, 2724, 1, 0, 0, 0, 2726, 2729, 1, 0, 0, 0, 2727, 2725, 1, 0, 0, 0, 2727, 2728,
    1, 0, 0, 0, 2728, 2730, 1, 0, 0, 0, 2729, 2727, 1, 0, 0, 0, 2730, 2734, 3, 128, 64, 0, 2731, 2733,
    5, 5, 0, 0, 2732, 2731, 1, 0, 0, 0, 2733, 2736, 1, 0, 0, 0, 2734, 2732, 1, 0, 0, 0, 2734, 2735,
    1, 0, 0, 0, 2735, 2737, 1, 0, 0, 0, 2736, 2734, 1, 0, 0, 0, 2737, 2741, 5, 10, 0, 0, 2738, 2740,
    5, 5, 0, 0, 2739, 2738, 1, 0, 0, 0, 2740, 2743, 1, 0, 0, 0, 2741, 2739, 1, 0, 0, 0, 2741, 2742,
    1, 0, 0, 0, 2742, 2751, 1, 0, 0, 0, 2743, 2741, 1, 0, 0, 0, 2744, 2748, 5, 27, 0, 0, 2745, 2747,
    5, 5, 0, 0, 2746, 2745, 1, 0, 0, 0, 2747, 2750, 1, 0, 0, 0, 2748, 2746, 1, 0, 0, 0, 2748, 2749,
    1, 0, 0, 0, 2749, 2752, 1, 0, 0, 0, 2750, 2748, 1, 0, 0, 0, 2751, 2744, 1, 0, 0, 0, 2751, 2752,
    1, 0, 0, 0, 2752, 2753, 1, 0, 0, 0, 2753, 2757, 5, 77, 0, 0, 2754, 2756, 5, 5, 0, 0, 2755, 2754,
    1, 0, 0, 0, 2756, 2759, 1, 0, 0, 0, 2757, 2755, 1, 0, 0, 0, 2757, 2758, 1, 0, 0, 0, 2758, 2760,
    1, 0, 0, 0, 2759, 2757, 1, 0, 0, 0, 2760, 2761, 3, 224, 112, 0, 2761, 2763, 1, 0, 0, 0, 2762, 2668,
    1, 0, 0, 0, 2762, 2716, 1, 0, 0, 0, 2763, 227, 1, 0, 0, 0, 2764, 2768, 5, 78, 0, 0, 2765, 2767,
    5, 5, 0, 0, 2766, 2765, 1, 0, 0, 0, 2767, 2770, 1, 0, 0, 0, 2768, 2766, 1, 0, 0, 0, 2768, 2769,
    1, 0, 0, 0, 2769, 2775, 1, 0, 0, 0, 2770, 2768, 1, 0, 0, 0, 2771, 2772, 5, 9, 0, 0, 2772, 2773,
    3, 128, 64, 0, 2773, 2774, 5, 10, 0, 0, 2774, 2776, 1, 0, 0, 0, 2775, 2771, 1, 0, 0, 0, 2775, 2776,
    1, 0, 0, 0, 2776, 2780, 1, 0, 0, 0, 2777, 2779, 5, 5, 0, 0, 2778, 2777, 1, 0, 0, 0, 2779, 2782,
    1, 0, 0, 0, 2780, 2778, 1, 0, 0, 0, 2780, 2781, 1, 0, 0, 0, 2781, 2783, 1, 0, 0, 0, 2782, 2780,
    1, 0, 0, 0, 2783, 2787, 5, 13, 0, 0, 2784, 2786, 5, 5, 0, 0, 2785, 2784, 1, 0, 0, 0, 2786, 2789,
    1, 0, 0, 0, 2787, 2785, 1, 0, 0, 0, 2787, 2788, 1, 0, 0, 0, 2788, 2799, 1, 0, 0, 0, 2789, 2787,
    1, 0, 0, 0, 2790, 2794, 3, 230, 115, 0, 2791, 2793, 5, 5, 0, 0, 2792, 2791, 1, 0, 0, 0, 2793, 2796,
    1, 0, 0, 0, 2794, 2792, 1, 0, 0, 0, 2794, 2795, 1, 0, 0, 0, 2795, 2798, 1, 0, 0, 0, 2796, 2794,
    1, 0, 0, 0, 2797, 2790, 1, 0, 0, 0, 2798, 2801, 1, 0, 0, 0, 2799, 2797, 1, 0, 0, 0, 2799, 2800,
    1, 0, 0, 0, 2800, 2805, 1, 0, 0, 0, 2801, 2799, 1, 0, 0, 0, 2802, 2804, 5, 5, 0, 0, 2803, 2802,
    1, 0, 0, 0, 2804, 2807, 1, 0, 0, 0, 2805, 2803, 1, 0, 0, 0, 2805, 2806, 1, 0, 0, 0, 2806, 2808,
    1, 0, 0, 0, 2807, 2805, 1, 0, 0, 0, 2808, 2809, 5, 14, 0, 0, 2809, 229, 1, 0, 0, 0, 2810, 2827,
    3, 232, 116, 0, 2811, 2813, 5, 5, 0, 0, 2812, 2811, 1, 0, 0, 0, 2813, 2816, 1, 0, 0, 0, 2814, 2812,
    1, 0, 0, 0, 2814, 2815, 1, 0, 0, 0, 2815, 2817, 1, 0, 0, 0, 2816, 2814, 1, 0, 0, 0, 2817, 2821,
    5, 8, 0, 0, 2818, 2820, 5, 5, 0, 0, 2819, 2818, 1, 0, 0, 0, 2820, 2823, 1, 0, 0, 0, 2821, 2819,
    1, 0, 0, 0, 2821, 2822, 1, 0, 0, 0, 2822, 2824, 1, 0, 0, 0, 2823, 2821, 1, 0, 0, 0, 2824, 2826,
    3, 232, 116, 0, 2825, 2814, 1, 0, 0, 0, 2826, 2829, 1, 0, 0, 0, 2827, 2825, 1, 0, 0, 0, 2827, 2828,
    1, 0, 0, 0, 2828, 2833, 1, 0, 0, 0, 2829, 2827, 1, 0, 0, 0, 2830, 2832, 5, 5, 0, 0, 2831, 2830,
    1, 0, 0, 0, 2832, 2835, 1, 0, 0, 0, 2833, 2831, 1, 0, 0, 0, 2833, 2834, 1, 0, 0, 0, 2834, 2836,
    1, 0, 0, 0, 2835, 2833, 1, 0, 0, 0, 2836, 2840, 5, 34, 0, 0, 2837, 2839, 5, 5, 0, 0, 2838, 2837,
    1, 0, 0, 0, 2839, 2842, 1, 0, 0, 0, 2840, 2838, 1, 0, 0, 0, 2840, 2841, 1, 0, 0, 0, 2841, 2843,
    1, 0, 0, 0, 2842, 2840, 1, 0, 0, 0, 2843, 2845, 3, 224, 112, 0, 2844, 2846, 3, 328, 164, 0, 2845,
    2844, 1, 0, 0, 0, 2845, 2846, 1, 0, 0, 0, 2846, 2866, 1, 0, 0, 0, 2847, 2851, 5, 77, 0, 0, 2848,
    2850, 5, 5, 0, 0, 2849, 2848, 1, 0, 0, 0, 2850, 2853, 1, 0, 0, 0, 2851, 2849, 1, 0, 0, 0, 2851,
    2852, 1, 0, 0, 0, 2852, 2854, 1, 0, 0, 0, 2853, 2851, 1, 0, 0, 0, 2854, 2858, 5, 34, 0, 0, 2855,
    2857, 5, 5, 0, 0, 2856, 2855, 1, 0, 0, 0, 2857, 2860, 1, 0, 0, 0, 2858, 2856, 1, 0, 0, 0, 2858,
    2859, 1, 0, 0, 0, 2859, 2861, 1, 0, 0, 0, 2860, 2858, 1, 0, 0, 0, 2861, 2863, 3, 224, 112, 0, 2862,
    2864, 3, 328, 164, 0, 2863, 2862, 1, 0, 0, 0, 2863, 2864, 1, 0, 0, 0, 2864, 2866, 1, 0, 0, 0, 2865,
    2810, 1, 0, 0, 0, 2865, 2847, 1, 0, 0, 0, 2866, 231, 1, 0, 0, 0, 2867, 2871, 3, 128, 64, 0, 2868,
    2871, 3, 234, 117, 0, 2869, 2871, 3, 236, 118, 0, 2870, 2867, 1, 0, 0, 0, 2870, 2868, 1, 0, 0,
    0, 2870, 2869, 1, 0, 0, 0, 2871, 233, 1, 0, 0, 0, 2872, 2876, 3, 262, 131, 0, 2873, 2875, 5, 5,
    0, 0, 2874, 2873, 1, 0, 0, 0, 2875, 2878, 1, 0, 0, 0, 2876, 2874, 1, 0, 0, 0, 2876, 2877, 1, 0,
    0, 0, 2877, 2879, 1, 0, 0, 0, 2878, 2876, 1, 0, 0, 0, 2879, 2880, 3, 128, 64, 0, 2880, 235, 1,
    0, 0, 0, 2881, 2885, 3, 264, 132, 0, 2882, 2884, 5, 5, 0, 0, 2883, 2882, 1, 0, 0, 0, 2884, 2887,
    1, 0, 0, 0, 2885, 2883, 1, 0, 0, 0, 2885, 2886, 1, 0, 0, 0, 2886, 2888, 1, 0, 0, 0, 2887, 2885,
    1, 0, 0, 0, 2888, 2889, 3, 90, 45, 0, 2889, 237, 1, 0, 0, 0, 2890, 2894, 5, 79, 0, 0, 2891, 2893,
    5, 5, 0, 0, 2892, 2891, 1, 0, 0, 0, 2893, 2896, 1, 0, 0, 0, 2894, 2892, 1, 0, 0, 0, 2894, 2895,
    1, 0, 0, 0, 2895, 2897, 1, 0, 0, 0, 2896, 2894, 1, 0, 0, 0, 2897, 2925, 3, 118, 59, 0, 2898, 2900,
    5, 5, 0, 0, 2899, 2898, 1, 0, 0, 0, 2900, 2903, 1, 0, 0, 0, 2901, 2899, 1, 0, 0, 0, 2901, 2902,
    1, 0, 0, 0, 2902, 2904, 1, 0, 0, 0, 2903, 2901, 1, 0, 0, 0, 2904, 2906, 3, 240, 120, 0, 2905, 2901,
    1, 0, 0, 0, 2906, 2907, 1, 0, 0, 0, 2907, 2905, 1, 0, 0, 0, 2907, 2908, 1, 0, 0, 0, 2908, 2916,
    1, 0, 0, 0, 2909, 2911, 5, 5, 0, 0, 2910, 2909, 1, 0, 0, 0, 2911, 2914, 1, 0, 0, 0, 2912, 2910,
    1, 0, 0, 0, 2912, 2913, 1, 0, 0, 0, 2913, 2915, 1, 0, 0, 0, 2914, 2912, 1, 0, 0, 0, 2915, 2917,
    3, 242, 121, 0, 2916, 2912, 1, 0, 0, 0, 2916, 2917, 1, 0, 0, 0, 2917, 2926, 1, 0, 0, 0, 2918, 2920,
    5, 5, 0, 0, 2919, 2918, 1, 0, 0, 0, 2920, 2923, 1, 0, 0, 0, 2921, 2919, 1, 0, 0, 0, 2921, 2922,
    1, 0, 0, 0, 2922, 2924, 1, 0, 0, 0, 2923, 2921, 1, 0, 0, 0, 2924, 2926, 3, 242, 121, 0, 2925, 2905,
    1, 0, 0, 0, 2925, 2921, 1, 0, 0, 0, 2926, 239, 1, 0, 0, 0, 2927, 2931, 5, 80, 0, 0, 2928, 2930,
    5, 5, 0, 0, 2929, 2928, 1, 0, 0, 0, 2930, 2933, 1, 0, 0, 0, 2931, 2929, 1, 0, 0, 0, 2931, 2932,
    1, 0, 0, 0, 2932, 2934, 1, 0, 0, 0, 2933, 2931, 1, 0, 0, 0, 2934, 2938, 5, 9, 0, 0, 2935, 2937,
    3, 304, 152, 0, 2936, 2935, 1, 0, 0, 0, 2937, 2940, 1, 0, 0, 0, 2938, 2936, 1, 0, 0, 0, 2938, 2939,
    1, 0, 0, 0, 2939, 2941, 1, 0, 0, 0, 2940, 2938, 1, 0, 0, 0, 2941, 2942, 3, 314, 157, 0, 2942, 2943,
    5, 26, 0, 0, 2943, 2944, 3, 106, 53, 0, 2944, 2948, 5, 10, 0, 0, 2945, 2947, 5, 5, 0, 0, 2946,
    2945, 1, 0, 0, 0, 2947, 2950, 1, 0, 0, 0, 2948, 2946, 1, 0, 0, 0, 2948, 2949, 1, 0, 0, 0, 2949,
    2951, 1, 0, 0, 0, 2950, 2948, 1, 0, 0, 0, 2951, 2952, 3, 118, 59, 0, 2952, 241, 1, 0, 0, 0, 2953,
    2957, 5, 81, 0, 0, 2954, 2956, 5, 5, 0, 0, 2955, 2954, 1, 0, 0, 0, 2956, 2959, 1, 0, 0, 0, 2957,
    2955, 1, 0, 0, 0, 2957, 2958, 1, 0, 0, 0, 2958, 2960, 1, 0, 0, 0, 2959, 2957, 1, 0, 0, 0, 2960,
    2961, 3, 118, 59, 0, 2961, 243, 1, 0, 0, 0, 2962, 2966, 3, 246, 123, 0, 2963, 2966, 3, 248, 124,
    0, 2964, 2966, 3, 250, 125, 0, 2965, 2962, 1, 0, 0, 0, 2965, 2963, 1, 0, 0, 0, 2965, 2964, 1,
    0, 0, 0, 2966, 245, 1, 0, 0, 0, 2967, 2971, 5, 82, 0, 0, 2968, 2970, 5, 5, 0, 0, 2969, 2968, 1,
    0, 0, 0, 2970, 2973, 1, 0, 0, 0, 2971, 2969, 1, 0, 0, 0, 2971, 2972, 1, 0, 0, 0, 2972, 2974, 1,
    0, 0, 0, 2973, 2971, 1, 0, 0, 0, 2974, 2978, 5, 9, 0, 0, 2975, 2977, 3, 304, 152, 0, 2976, 2975,
    1, 0, 0, 0, 2977, 2980, 1, 0, 0, 0, 2978, 2976, 1, 0, 0, 0, 2978, 2979, 1, 0, 0, 0, 2979, 2983,
    1, 0, 0, 0, 2980, 2978, 1, 0, 0, 0, 2981, 2984, 3, 72, 36, 0, 2982, 2984, 3, 70, 35, 0, 2983, 2981,
    1, 0, 0, 0, 2983, 2982, 1, 0, 0, 0, 2984, 2985, 1, 0, 0, 0, 2985, 2986, 5, 91, 0, 0, 2986, 2987,
    3, 128, 64, 0, 2987, 2991, 5, 10, 0, 0, 2988, 2990, 5, 5, 0, 0, 2989, 2988, 1, 0, 0, 0, 2990, 2993,
    1, 0, 0, 0, 2991, 2989, 1, 0, 0, 0, 2991, 2992, 1, 0, 0, 0, 2992, 2995, 1, 0, 0, 0, 2993, 2991,
    1, 0, 0, 0, 2994, 2996, 3, 224, 112, 0, 2995, 2994, 1, 0, 0, 0, 2995, 2996, 1, 0, 0, 0, 2996, 247,
    1, 0, 0, 0, 2997, 3001, 5, 84, 0, 0, 2998, 3000, 5, 5, 0, 0, 2999, 2998, 1, 0, 0, 0, 3000, 3003,
    1, 0, 0, 0, 3001, 2999, 1, 0, 0, 0, 3001, 3002, 1, 0, 0, 0, 3002, 3004, 1, 0, 0, 0, 3003, 3001,
    1, 0, 0, 0, 3004, 3005, 5, 9, 0, 0, 3005, 3006, 3, 128, 64, 0, 3006, 3010, 5, 10, 0, 0, 3007, 3009,
    5, 5, 0, 0, 3008, 3007, 1, 0, 0, 0, 3009, 3012, 1, 0, 0, 0, 3010, 3008, 1, 0, 0, 0, 3010, 3011,
    1, 0, 0, 0, 3011, 3013, 1, 0, 0, 0, 3012, 3010, 1, 0, 0, 0, 3013, 3014, 3, 224, 112, 0, 3014, 3034,
    1, 0, 0, 0, 3015, 3019, 5, 84, 0, 0, 3016, 3018, 5, 5, 0, 0, 3017, 3016, 1, 0, 0, 0, 3018, 3021,
    1, 0, 0, 0, 3019, 3017, 1, 0, 0, 0, 3019, 3020, 1, 0, 0, 0, 3020, 3022, 1, 0, 0, 0, 3021, 3019,
    1, 0, 0, 0, 3022, 3023, 5, 9, 0, 0, 3023, 3024, 3, 128, 64, 0, 3024, 3028, 5, 10, 0, 0, 3025, 3027,
    5, 5, 0, 0, 3026, 3025, 1, 0, 0, 0, 3027, 3030, 1, 0, 0, 0, 3028, 3026, 1, 0, 0, 0, 3028, 3029,
    1, 0, 0, 0, 3029, 3031, 1, 0, 0, 0, 3030, 3028, 1, 0, 0, 0, 3031, 3032, 5, 27, 0, 0, 3032, 3034,
    1, 0, 0, 0, 3033, 2997, 1, 0, 0, 0, 3033, 3015, 1, 0, 0, 0, 3034, 249, 1, 0, 0, 0, 3035, 3039, 5,
    83, 0, 0, 3036, 3038, 5, 5, 0, 0, 3037, 3036, 1, 0, 0, 0, 3038, 3041, 1, 0, 0, 0, 3039, 3037, 1,
    0, 0, 0, 3039, 3040, 1, 0, 0, 0, 3040, 3043, 1, 0, 0, 0, 3041, 3039, 1, 0, 0, 0, 3042, 3044, 3,
    224, 112, 0, 3043, 3042, 1, 0, 0, 0, 3043, 3044, 1, 0, 0, 0, 3044, 3048, 1, 0, 0, 0, 3045, 3047,
    5, 5, 0, 0, 3046, 3045, 1, 0, 0, 0, 3047, 3050, 1, 0, 0, 0, 3048, 3046, 1, 0, 0, 0, 3048, 3049,
    1, 0, 0, 0, 3049, 3051, 1, 0, 0, 0, 3050, 3048, 1, 0, 0, 0, 3051, 3055, 5, 84, 0, 0, 3052, 3054,
    5, 5, 0, 0, 3053, 3052, 1, 0, 0, 0, 3054, 3057, 1, 0, 0, 0, 3055, 3053, 1, 0, 0, 0, 3055, 3056,
    1, 0, 0, 0, 3056, 3058, 1, 0, 0, 0, 3057, 3055, 1, 0, 0, 0, 3058, 3059, 5, 9, 0, 0, 3059, 3060,
    3, 128, 64, 0, 3060, 3061, 5, 10, 0, 0, 3061, 251, 1, 0, 0, 0, 3062, 3066, 5, 85, 0, 0, 3063, 3065,
    5, 5, 0, 0, 3064, 3063, 1, 0, 0, 0, 3065, 3068, 1, 0, 0, 0, 3066, 3064, 1, 0, 0, 0, 3066, 3067,
    1, 0, 0, 0, 3067, 3069, 1, 0, 0, 0, 3068, 3066, 1, 0, 0, 0, 3069, 3079, 3, 128, 64, 0, 3070, 3072,
    7, 7, 0, 0, 3071, 3073, 3, 128, 64, 0, 3072, 3071, 1, 0, 0, 0, 3072, 3073, 1, 0, 0, 0, 3073, 3079,
    1, 0, 0, 0, 3074, 3079, 5, 87, 0, 0, 3075, 3079, 5, 55, 0, 0, 3076, 3079, 5, 88, 0, 0, 3077, 3079,
    5, 56, 0, 0, 3078, 3062, 1, 0, 0, 0, 3078, 3070, 1, 0, 0, 0, 3078, 3074, 1, 0, 0, 0, 3078, 3075,
    1, 0, 0, 0, 3078, 3076, 1, 0, 0, 0, 3078, 3077, 1, 0, 0, 0, 3079, 253, 1, 0, 0, 0, 3080, 3082, 3,
    104, 52, 0, 3081, 3080, 1, 0, 0, 0, 3081, 3082, 1, 0, 0, 0, 3082, 3086, 1, 0, 0, 0, 3083, 3085,
    5, 5, 0, 0, 3084, 3083, 1, 0, 0, 0, 3085, 3088, 1, 0, 0, 0, 3086, 3084, 1, 0, 0, 0, 3086, 3087,
    1, 0, 0, 0, 3087, 3089, 1, 0, 0, 0, 3088, 3086, 1, 0, 0, 0, 3089, 3093, 5, 37, 0, 0, 3090, 3092,
    5, 5, 0, 0, 3091, 3090, 1, 0, 0, 0, 3092, 3095, 1, 0, 0, 0, 3093, 3091, 1, 0, 0, 0, 3093, 3094,
    1, 0, 0, 0, 3094, 3098, 1, 0, 0, 0, 3095, 3093, 1, 0, 0, 0, 3096, 3099, 3, 314, 157, 0, 3097, 3099,
    5, 61, 0, 0, 3098, 3096, 1, 0, 0, 0, 3098, 3097, 1, 0, 0, 0, 3099, 255, 1, 0, 0, 0, 3100, 3101,
    7, 8, 0, 0, 3101, 257, 1, 0, 0, 0, 3102, 3103, 7, 9, 0, 0, 3103, 259, 1, 0, 0, 0, 3104, 3105, 7,
    10, 0, 0, 3105, 261, 1, 0, 0, 0, 3106, 3107, 7, 11, 0, 0, 3107, 263, 1, 0, 0, 0, 3108, 3109, 7,
    12, 0, 0, 3109, 265, 1, 0, 0, 0, 3110, 3111, 7, 13, 0, 0, 3111, 267, 1, 0, 0, 0, 3112, 3113, 7,
    14, 0, 0, 3113, 269, 1, 0, 0, 0, 3114, 3115, 7, 15, 0, 0, 3115, 271, 1, 0, 0, 0, 3116, 3122, 5,
    20, 0, 0, 3117, 3122, 5, 21, 0, 0, 3118, 3122, 5, 19, 0, 0, 3119, 3122, 5, 18, 0, 0, 3120, 3122,
    3, 326, 163, 0, 3121, 3116, 1, 0, 0, 0, 3121, 3117, 1, 0, 0, 0, 3121, 3118, 1, 0, 0, 0, 3121, 3119,
    1, 0, 0, 0, 3121, 3120, 1, 0, 0, 0, 3122, 273, 1, 0, 0, 0, 3123, 3128, 5, 20, 0, 0, 3124, 3128,
    5, 21, 0, 0, 3125, 3126, 5, 25, 0, 0, 3126, 3128, 3, 326, 163, 0, 3127, 3123, 1, 0, 0, 0, 3127,
    3124, 1, 0, 0, 0, 3127, 3125, 1, 0, 0, 0, 3128, 275, 1, 0, 0, 0, 3129, 3133, 5, 7, 0, 0, 3130, 3133,
    3, 324, 162, 0, 3131, 3133, 5, 37, 0, 0, 3132, 3129, 1, 0, 0, 0, 3132, 3130, 1, 0, 0, 0, 3132,
    3131, 1, 0, 0, 0, 3133, 277, 1, 0, 0, 0, 3134, 3137, 3, 304, 152, 0, 3135, 3137, 3, 280, 140,
    0, 3136, 3134, 1, 0, 0, 0, 3136, 3135, 1, 0, 0, 0, 3137, 3138, 1, 0, 0, 0, 3138, 3136, 1, 0, 0,
    0, 3138, 3139, 1, 0, 0, 0, 3139, 279, 1, 0, 0, 0, 3140, 3149, 3, 282, 141, 0, 3141, 3149, 3, 284,
    142, 0, 3142, 3149, 3, 286, 143, 0, 3143, 3149, 3, 290, 145, 0, 3144, 3149, 3, 292, 146, 0,
    3145, 3149, 3, 294, 147, 0, 3146, 3149, 3, 296, 148, 0, 3147, 3149, 3, 300, 150, 0, 3148, 3140,
    1, 0, 0, 0, 3148, 3141, 1, 0, 0, 0, 3148, 3142, 1, 0, 0, 0, 3148, 3143, 1, 0, 0, 0, 3148, 3144,
    1, 0, 0, 0, 3148, 3145, 1, 0, 0, 0, 3148, 3146, 1, 0, 0, 0, 3148, 3147, 1, 0, 0, 0, 3149, 3153,
    1, 0, 0, 0, 3150, 3152, 5, 5, 0, 0, 3151, 3150, 1, 0, 0, 0, 3152, 3155, 1, 0, 0, 0, 3153, 3151,
    1, 0, 0, 0, 3153, 3154, 1, 0, 0, 0, 3154, 281, 1, 0, 0, 0, 3155, 3153, 1, 0, 0, 0, 3156, 3157, 7,
    16, 0, 0, 3157, 283, 1, 0, 0, 0, 3158, 3159, 7, 17, 0, 0, 3159, 285, 1, 0, 0, 0, 3160, 3161, 7,
    18, 0, 0, 3161, 287, 1, 0, 0, 0, 3162, 3163, 7, 19, 0, 0, 3163, 289, 1, 0, 0, 0, 3164, 3165, 7,
    20, 0, 0, 3165, 291, 1, 0, 0, 0, 3166, 3167, 5, 126, 0, 0, 3167, 293, 1, 0, 0, 0, 3168, 3169, 7,
    21, 0, 0, 3169, 295, 1, 0, 0, 0, 3170, 3171, 7, 22, 0, 0, 3171, 297, 1, 0, 0, 0, 3172, 3173, 5,
    131, 0, 0, 3173, 299, 1, 0, 0, 0, 3174, 3175, 7, 23, 0, 0, 3175, 301, 1, 0, 0, 0, 3176, 3180, 5,
    146, 0, 0, 3177, 3179, 5, 5, 0, 0, 3178, 3177, 1, 0, 0, 0, 3179, 3182, 1, 0, 0, 0, 3180, 3178,
    1, 0, 0, 0, 3180, 3181, 1, 0, 0, 0, 3181, 303, 1, 0, 0, 0, 3182, 3180, 1, 0, 0, 0, 3183, 3186, 3,
    306, 153, 0, 3184, 3186, 3, 308, 154, 0, 3185, 3183, 1, 0, 0, 0, 3185, 3184, 1, 0, 0, 0, 3186,
    3190, 1, 0, 0, 0, 3187, 3189, 5, 5, 0, 0, 3188, 3187, 1, 0, 0, 0, 3189, 3192, 1, 0, 0, 0, 3190,
    3188, 1, 0, 0, 0, 3190, 3191, 1, 0, 0, 0, 3191, 305, 1, 0, 0, 0, 3192, 3190, 1, 0, 0, 0, 3193, 3197,
    3, 310, 155, 0, 3194, 3196, 5, 5, 0, 0, 3195, 3194, 1, 0, 0, 0, 3196, 3199, 1, 0, 0, 0, 3197, 3195,
    1, 0, 0, 0, 3197, 3198, 1, 0, 0, 0, 3198, 3200, 1, 0, 0, 0, 3199, 3197, 1, 0, 0, 0, 3200, 3204,
    5, 26, 0, 0, 3201, 3203, 5, 5, 0, 0, 3202, 3201, 1, 0, 0, 0, 3203, 3206, 1, 0, 0, 0, 3204, 3202,
    1, 0, 0, 0, 3204, 3205, 1, 0, 0, 0, 3205, 3207, 1, 0, 0, 0, 3206, 3204, 1, 0, 0, 0, 3207, 3208,
    3, 312, 156, 0, 3208, 3212, 1, 0, 0, 0, 3209, 3210, 5, 40, 0, 0, 3210, 3212, 3, 312, 156, 0, 3211,
    3193, 1, 0, 0, 0, 3211, 3209, 1, 0, 0, 0, 3212, 307, 1, 0, 0, 0, 3213, 3217, 3, 310, 155, 0, 3214,
    3216, 5, 5, 0, 0, 3215, 3214, 1, 0, 0, 0, 3216, 3219, 1, 0, 0, 0, 3217, 3215, 1, 0, 0, 0, 3217,
    3218, 1, 0, 0, 0, 3218, 3220, 1, 0, 0, 0, 3219, 3217, 1, 0, 0, 0, 3220, 3224, 5, 26, 0, 0, 3221,
    3223, 5, 5, 0, 0, 3222, 3221, 1, 0, 0, 0, 3223, 3226, 1, 0, 0, 0, 3224, 3222, 1, 0, 0, 0, 3224,
    3225, 1, 0, 0, 0, 3225, 3227, 1, 0, 0, 0, 3226, 3224, 1, 0, 0, 0, 3227, 3229, 5, 11, 0, 0, 3228,
    3230, 3, 312, 156, 0, 3229, 3228, 1, 0, 0, 0, 3230, 3231, 1, 0, 0, 0, 3231, 3229, 1, 0, 0, 0, 3231,
    3232, 1, 0, 0, 0, 3232, 3233, 1, 0, 0, 0, 3233, 3234, 5, 12, 0, 0, 3234, 3245, 1, 0, 0, 0, 3235,
    3236, 5, 40, 0, 0, 3236, 3238, 5, 11, 0, 0, 3237, 3239, 3, 312, 156, 0, 3238, 3237, 1, 0, 0, 0,
    3239, 3240, 1, 0, 0, 0, 3240, 3238, 1, 0, 0, 0, 3240, 3241, 1, 0, 0, 0, 3241, 3242, 1, 0, 0, 0,
    3242, 3243, 5, 12, 0, 0, 3243, 3245, 1, 0, 0, 0, 3244, 3213, 1, 0, 0, 0, 3244, 3235, 1, 0, 0, 0,
    3245, 309, 1, 0, 0, 0, 3246, 3247, 7, 24, 0, 0, 3247, 311, 1, 0, 0, 0, 3248, 3251, 3, 30, 15, 0,
    3249, 3251, 3, 106, 53, 0, 3250, 3248, 1, 0, 0, 0, 3250, 3249, 1, 0, 0, 0, 3251, 313, 1, 0, 0,
    0, 3252, 3253, 7, 25, 0, 0, 3253, 315, 1, 0, 0, 0, 3254, 3265, 3, 314, 157, 0, 3255, 3257, 5,
    5, 0, 0, 3256, 3255, 1, 0, 0, 0, 3257, 3260, 1, 0, 0, 0, 3258, 3256, 1, 0, 0, 0, 3258, 3259, 1,
    0, 0, 0, 3259, 3261, 1, 0, 0, 0, 3260, 3258, 1, 0, 0, 0, 3261, 3262, 5, 7, 0, 0, 3262, 3264, 3,
    314, 157, 0, 3263, 3258, 1, 0, 0, 0, 3264, 3267, 1, 0, 0, 0, 3265, 3263, 1, 0, 0, 0, 3265, 3266,
    1, 0, 0, 0, 3266, 317, 1, 0, 0, 0, 3267, 3265, 1, 0, 0, 0, 3268, 3270, 5, 1, 0, 0, 3269, 3271, 5,
    5, 0, 0, 3270, 3269, 1, 0, 0, 0, 3271, 3272, 1, 0, 0, 0, 3272, 3270, 1, 0, 0, 0, 3272, 3273, 1,
    0, 0, 0, 3273, 319, 1, 0, 0, 0, 3274, 3275, 7, 26, 0, 0, 3275, 321, 1, 0, 0, 0, 3276, 3277, 5, 43,
    0, 0, 3277, 3278, 5, 26, 0, 0, 3278, 323, 1, 0, 0, 0, 3279, 3280, 5, 43, 0, 0, 3280, 3281, 5, 7,
    0, 0, 3281, 325, 1, 0, 0, 0, 3282, 3283, 7, 27, 0, 0, 3283, 327, 1, 0, 0, 0, 3284, 3288, 7, 2, 0,
    0, 3285, 3287, 5, 5, 0, 0, 3286, 3285, 1, 0, 0, 0, 3287, 3290, 1, 0, 0, 0, 3288, 3286, 1, 0, 0,
    0, 3288, 3289, 1, 0, 0, 0, 3289, 3293, 1, 0, 0, 0, 3290, 3288, 1, 0, 0, 0, 3291, 3293, 5, 0, 0,
    1, 3292, 3284, 1, 0, 0, 0, 3292, 3291, 1, 0, 0, 0, 3293, 329, 1, 0, 0, 0, 3294, 3296, 7, 2, 0, 0,
    3295, 3294, 1, 0, 0, 0, 3296, 3297, 1, 0, 0, 0, 3297, 3295, 1, 0, 0, 0, 3297, 3298, 1, 0, 0, 0,
    3298, 3301, 1, 0, 0, 0, 3299, 3301, 5, 0, 0, 1, 3300, 3295, 1, 0, 0, 0, 3300, 3299, 1, 0, 0, 0,
    3301, 331, 1, 0, 0, 0, 503, 333, 338, 344, 352, 358, 363, 369, 379, 388, 395, 402, 407, 412,
    418, 420, 425, 433, 436, 443, 446, 452, 459, 463, 468, 472, 477, 484, 488, 493, 497, 502,
    509, 513, 516, 522, 525, 533, 540, 547, 553, 556, 561, 565, 570, 573, 578, 586, 593, 600,
    604, 610, 617, 623, 629, 635, 644, 651, 656, 663, 672, 679, 686, 690, 697, 703, 709, 715,
    722, 729, 733, 738, 742, 748, 756, 760, 766, 770, 775, 782, 786, 791, 800, 807, 813, 819,
    823, 829, 832, 838, 842, 847, 851, 854, 860, 864, 869, 876, 881, 886, 893, 900, 907, 911,
    916, 920, 925, 929, 935, 942, 949, 955, 958, 963, 967, 972, 978, 985, 989, 995, 1002, 1011,
    1018, 1022, 1029, 1033, 1036, 1042, 1049, 1056, 1060, 1065, 1069, 1072, 1078, 1085, 1089,
    1094, 1101, 1105, 1110, 1114, 1117, 1123, 1127, 1132, 1139, 1144, 1149, 1154, 1159, 1163,
    1168, 1175, 1180, 1182, 1187, 1190, 1195, 1199, 1204, 1208, 1211, 1214, 1219, 1223, 1226,
    1228, 1234, 1241, 1248, 1254, 1260, 1268, 1274, 1281, 1288, 1292, 1298, 1304, 1308, 1314,
    1321, 1328, 1335, 1339, 1344, 1348, 1351, 1355, 1361, 1367, 1369, 1377, 1384, 1388, 1393,
    1398, 1401, 1407, 1414, 1418, 1423, 1430, 1439, 1446, 1453, 1459, 1465, 1469, 1474, 1479,
    1486, 1493, 1497, 1502, 1508, 1515, 1519, 1522, 1528, 1533, 1540, 1543, 1549, 1556, 1563,
    1568, 1574, 1578, 1584, 1591, 1594, 1600, 1607, 1613, 1618, 1624, 1631, 1637, 1644, 1651,
    1660, 1667, 1672, 1678, 1682, 1688, 1693, 1698, 1705, 1710, 1714, 1720, 1729, 1736, 1743,
    1749, 1755, 1762, 1769, 1778, 1785, 1794, 1799, 1803, 1805, 1809, 1811, 1818, 1825, 1832,
    1842, 1847, 1855, 1862, 1868, 1875, 1882, 1888, 1896, 1903, 1911, 1916, 1923, 1932, 1937,
    1939, 1946, 1953, 1960, 1968, 1975, 1983, 1989, 1997, 2004, 2012, 2019, 2026, 2033, 2038,
    2043, 2054, 2057, 2064, 2066, 2073, 2079, 2086, 2092, 2099, 2106, 2112, 2118, 2126, 2133,
    2139, 2142, 2145, 2149, 2152, 2157, 2161, 2166, 2175, 2183, 2190, 2197, 2203, 2209, 2213,
    2217, 2223, 2230, 2237, 2243, 2249, 2253, 2258, 2262, 2267, 2273, 2277, 2280, 2285, 2292,
    2299, 2302, 2305, 2310, 2329, 2335, 2342, 2351, 2358, 2365, 2371, 2377, 2381, 2389, 2393,
    2399, 2404, 2406, 2415, 2417, 2434, 2441, 2450, 2457, 2466, 2470, 2475, 2482, 2489, 2494,
    2500, 2507, 2513, 2517, 2524, 2531, 2535, 2537, 2543, 2550, 2555, 2560, 2567, 2574, 2578,
    2583, 2587, 2592, 2596, 2600, 2606, 2613, 2620, 2624, 2630, 2634, 2643, 2650, 2655, 2659,
    2662, 2666, 2672, 2679, 2686, 2693, 2698, 2703, 2710, 2714, 2720, 2727, 2734, 2741, 2748,
    2751, 2757, 2762, 2768, 2775, 2780, 2787, 2794, 2799, 2805, 2814, 2821, 2827, 2833, 2840,
    2845, 2851, 2858, 2863, 2865, 2870, 2876, 2885, 2894, 2901, 2907, 2912, 2916, 2921, 2925,
    2931, 2938, 2948, 2957, 2965, 2971, 2978, 2983, 2991, 2995, 3001, 3010, 3019, 3028, 3033,
    3039, 3043, 3048, 3055, 3066, 3072, 3078, 3081, 3086, 3093, 3098, 3121, 3127, 3132, 3136,
    3138, 3148, 3153, 3180, 3185, 3190, 3197, 3204, 3211, 3217, 3224, 3231, 3240, 3244, 3250,
    3258, 3265, 3272, 3288, 3292, 3297, 3300];
const atn = new antlr4_1.default.atn.ATNDeserializer().deserialize(serializedATN);
const decisionsToDFA = atn.decisionToState.map((ds, index) => new antlr4_1.default.dfa.DFA(ds, index));
const sharedContextCache = new antlr4_1.default.PredictionContextCache();
class KotlinParser extends antlr4_1.default.Parser {
    static grammarFileName = "KotlinParser.g4";
    static literalNames = [null, null, null, null, null, null, "'...'",
        "'.'", "','", "'('", "')'", "'['", "']'", "'{'",
        "'}'", "'*'", "'%'", "'/'", "'+'", "'-'", "'++'",
        "'--'", "'&&'", "'||'", null, "'!'", "':'",
        "';'", "'='", "'+='", "'-='", "'*='", "'/='",
        "'%='", "'->'", "'=>'", "'..'", "'::'", "';;'",
        "'#'", "'@'", null, null, "'?'", "'<'", "'>'",
        "'<='", "'>='", "'!='", "'!=='", "'as?'", "'=='",
        "'==='", "'''", null, null, null, null, null,
        "'package'", "'import'", "'class'", "'interface'",
        "'fun'", "'object'", "'val'", "'var'", "'typealias'",
        "'constructor'", "'by'", "'companion'", "'init'",
        "'this'", "'super'", "'typeof'", "'where'",
        "'if'", "'else'", "'when'", "'try'", "'catch'",
        "'finally'", "'for'", "'do'", "'while'", "'throw'",
        "'return'", "'continue'", "'break'", "'as'",
        "'is'", "'in'", null, null, "'out'", "'get'",
        "'set'", "'dynamic'", "'@file'", "'@field'",
        "'@property'", "'@get'", "'@set'", "'@receiver'",
        "'@param'", "'@setparam'", "'@delegate'", "'public'",
        "'private'", "'protected'", "'internal'", "'enum'",
        "'sealed'", "'annotation'", "'data'", "'inner'",
        "'tailrec'", "'operator'", "'inline'", "'infix'",
        "'external'", "'suspend'", "'override'", "'abstract'",
        "'final'", "'open'", "'const'", "'lateinit'",
        "'vararg'", "'noinline'", "'crossinline'", "'reified'",
        "'expect'", "'actual'", null, "'\"\"\"'", null,
        null, null, null, null, null, null, null, "'null'"];
    static symbolicNames = [null, "ShebangLine", "DelimitedComment", "LineComment",
        "WS", "NL", "RESERVED", "DOT", "COMMA", "LPAREN",
        "RPAREN", "LSQUARE", "RSQUARE", "LCURL", "RCURL",
        "MULT", "MOD", "DIV", "ADD", "SUB", "INCR",
        "DECR", "CONJ", "DISJ", "EXCL_WS", "EXCL_NO_WS",
        "COLON", "SEMICOLON", "ASSIGNMENT", "ADD_ASSIGNMENT",
        "SUB_ASSIGNMENT", "MULT_ASSIGNMENT", "DIV_ASSIGNMENT",
        "MOD_ASSIGNMENT", "ARROW", "DOUBLE_ARROW",
        "RANGE", "COLONCOLON", "DOUBLE_SEMICOLON",
        "HASH", "AT", "AT_WS", "QUEST_WS", "QUEST_NO_WS",
        "LANGLE", "RANGLE", "LE", "GE", "EXCL_EQ",
        "EXCL_EQEQ", "AS_SAFE", "EQEQ", "EQEQEQ", "SINGLE_QUOTE",
        "RETURN_AT", "CONTINUE_AT", "BREAK_AT", "THIS_AT",
        "SUPER_AT", "PACKAGE", "IMPORT", "CLASS", "INTERFACE",
        "FUN", "OBJECT", "VAL", "VAR", "TYPE_ALIAS",
        "CONSTRUCTOR", "BY", "COMPANION", "INIT", "THIS",
        "SUPER", "TYPEOF", "WHERE", "IF", "ELSE", "WHEN",
        "TRY", "CATCH", "FINALLY", "FOR", "DO", "WHILE",
        "THROW", "RETURN", "CONTINUE", "BREAK", "AS",
        "IS", "IN", "NOT_IS", "NOT_IN", "OUT", "GETTER",
        "SETTER", "DYNAMIC", "AT_FILE", "AT_FIELD",
        "AT_PROPERTY", "AT_GET", "AT_SET", "AT_RECEIVER",
        "AT_PARAM", "AT_SETPARAM", "AT_DELEGATE", "PUBLIC",
        "PRIVATE", "PROTECTED", "INTERNAL", "ENUM",
        "SEALED", "ANNOTATION", "DATA", "INNER", "TAILREC",
        "OPERATOR", "INLINE", "INFIX", "EXTERNAL",
        "SUSPEND", "OVERRIDE", "ABSTRACT", "FINAL",
        "OPEN", "CONST", "LATEINIT", "VARARG", "NOINLINE",
        "CROSSINLINE", "REIFIED", "EXPECT", "ACTUAL",
        "QUOTE_OPEN", "TRIPLE_QUOTE_OPEN", "RealLiteral",
        "FloatLiteral", "DoubleLiteral", "LongLiteral",
        "IntegerLiteral", "HexLiteral", "BinLiteral",
        "BooleanLiteral", "NullLiteral", "Identifier",
        "IdentifierAt", "FieldIdentifier", "CharacterLiteral",
        "ErrorCharacter", "UNICODE_CLASS_LL", "UNICODE_CLASS_LM",
        "UNICODE_CLASS_LO", "UNICODE_CLASS_LT", "UNICODE_CLASS_LU",
        "UNICODE_CLASS_ND", "UNICODE_CLASS_NL", "Inside_Comment",
        "Inside_WS", "Inside_NL", "QUOTE_CLOSE", "LineStrRef",
        "LineStrText", "LineStrEscapedChar", "LineStrExprStart",
        "TRIPLE_QUOTE_CLOSE", "MultiLineStringQuote",
        "MultiLineStrRef", "MultiLineStrText", "MultiLineStrExprStart"];
    static ruleNames = ["kotlinFile", "script", "fileAnnotation", "packageHeader",
        "importList", "importHeader", "importAlias", "topLevelObject",
        "classDeclaration", "primaryConstructor", "classParameters",
        "classParameter", "delegationSpecifiers", "annotatedDelegationSpecifier",
        "delegationSpecifier", "constructorInvocation",
        "explicitDelegation", "classBody", "classMemberDeclarations",
        "classMemberDeclaration", "anonymousInitializer",
        "secondaryConstructor", "constructorDelegationCall",
        "enumClassBody", "enumEntries", "enumEntry", "functionDeclaration",
        "functionValueParameters", "functionValueParameter",
        "parameter", "setterParameter", "functionBody",
        "objectDeclaration", "companionObject", "propertyDeclaration",
        "multiVariableDeclaration", "variableDeclaration",
        "propertyDelegate", "getter", "setter", "typeAlias",
        "typeParameters", "typeParameter", "typeParameterModifiers",
        "typeParameterModifier", "type_", "typeModifiers",
        "typeModifier", "parenthesizedType", "nullableType",
        "typeReference", "functionType", "receiverType",
        "userType", "parenthesizedUserType", "simpleUserType",
        "functionTypeParameters", "typeConstraints", "typeConstraint",
        "block", "statements", "statement", "declaration",
        "assignment", "expression", "disjunction", "conjunction",
        "equality", "comparison", "infixOperation", "elvisExpression",
        "infixFunctionCall", "rangeExpression", "additiveExpression",
        "multiplicativeExpression", "asExpression", "prefixUnaryExpression",
        "unaryPrefix", "postfixUnaryExpression", "postfixUnarySuffix",
        "directlyAssignableExpression", "assignableExpression",
        "assignableSuffix", "indexingSuffix", "navigationSuffix",
        "callSuffix", "annotatedLambda", "valueArguments",
        "typeArguments", "typeProjection", "typeProjectionModifiers",
        "typeProjectionModifier", "valueArgument", "primaryExpression",
        "parenthesizedExpression", "collectionLiteral",
        "literalConstant", "stringLiteral", "lineStringLiteral",
        "multiLineStringLiteral", "lineStringContent",
        "lineStringExpression", "multiLineStringContent",
        "multiLineStringExpression", "lambdaLiteral", "lambdaParameters",
        "lambdaParameter", "anonymousFunction", "functionLiteral",
        "objectLiteral", "thisExpression", "superExpression",
        "controlStructureBody", "ifExpression", "whenExpression",
        "whenEntry", "whenCondition", "rangeTest", "typeTest",
        "tryExpression", "catchBlock", "finallyBlock",
        "loopStatement", "forStatement", "whileStatement",
        "doWhileStatement", "jumpExpression", "callableReference",
        "assignmentAndOperator", "equalityOperator", "comparisonOperator",
        "inOperator", "isOperator", "additiveOperator",
        "multiplicativeOperator", "asOperator", "prefixUnaryOperator",
        "postfixUnaryOperator", "memberAccessOperator",
        "modifiers", "modifier", "classModifier", "memberModifier",
        "visibilityModifier", "varianceModifier", "functionModifier",
        "propertyModifier", "inheritanceModifier", "parameterModifier",
        "reificationModifier", "platformModifier", "label",
        "annotation", "singleAnnotation", "multiAnnotation",
        "annotationUseSiteTarget", "unescapedAnnotation",
        "simpleIdentifier", "identifier", "shebangLine",
        "quest", "elvis", "safeNav", "excl", "semi", "semis"];
    constructor(input) {
        super(input);
        this._interp = new antlr4_1.default.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = KotlinParser.ruleNames;
        this.literalNames = KotlinParser.literalNames;
        this.symbolicNames = KotlinParser.symbolicNames;
    }
    get atn() {
        return atn;
    }
    kotlinFile() {
        let localctx = new KotlinFileContext(this, this._ctx, this.state);
        this.enterRule(localctx, 0, KotlinParser.RULE_kotlinFile);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 333;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === KotlinParser.ShebangLine) {
                this.state = 332;
                this.shebangLine();
            }
            this.state = 338;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 335;
                this.match(KotlinParser.NL);
                this.state = 340;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 344;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.AT_FILE) {
                this.state = 341;
                this.fileAnnotation();
                this.state = 346;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 347;
            this.packageHeader();
            this.state = 348;
            this.importList();
            this.state = 352;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (KotlinParser.AT - 40)) | (1 << (KotlinParser.CLASS - 40)) | (1 << (KotlinParser.INTERFACE - 40)) | (1 << (KotlinParser.FUN - 40)) | (1 << (KotlinParser.OBJECT - 40)) | (1 << (KotlinParser.VAL - 40)) | (1 << (KotlinParser.VAR - 40)) | (1 << (KotlinParser.TYPE_ALIAS - 40)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (KotlinParser.AT_FIELD - 99)) | (1 << (KotlinParser.AT_PROPERTY - 99)) | (1 << (KotlinParser.AT_GET - 99)) | (1 << (KotlinParser.AT_SET - 99)) | (1 << (KotlinParser.AT_RECEIVER - 99)) | (1 << (KotlinParser.AT_PARAM - 99)) | (1 << (KotlinParser.AT_SETPARAM - 99)) | (1 << (KotlinParser.AT_DELEGATE - 99)) | (1 << (KotlinParser.PUBLIC - 99)) | (1 << (KotlinParser.PRIVATE - 99)) | (1 << (KotlinParser.PROTECTED - 99)) | (1 << (KotlinParser.INTERNAL - 99)) | (1 << (KotlinParser.ENUM - 99)) | (1 << (KotlinParser.SEALED - 99)) | (1 << (KotlinParser.ANNOTATION - 99)) | (1 << (KotlinParser.DATA - 99)) | (1 << (KotlinParser.INNER - 99)) | (1 << (KotlinParser.TAILREC - 99)) | (1 << (KotlinParser.OPERATOR - 99)) | (1 << (KotlinParser.INLINE - 99)) | (1 << (KotlinParser.INFIX - 99)) | (1 << (KotlinParser.EXTERNAL - 99)) | (1 << (KotlinParser.SUSPEND - 99)) | (1 << (KotlinParser.OVERRIDE - 99)) | (1 << (KotlinParser.ABSTRACT - 99)) | (1 << (KotlinParser.FINAL - 99)) | (1 << (KotlinParser.OPEN - 99)) | (1 << (KotlinParser.CONST - 99)) | (1 << (KotlinParser.LATEINIT - 99)) | (1 << (KotlinParser.VARARG - 99)) | (1 << (KotlinParser.NOINLINE - 99)) | (1 << (KotlinParser.CROSSINLINE - 99)))) !== 0) || _la === KotlinParser.EXPECT || _la === KotlinParser.ACTUAL) {
                this.state = 349;
                this.topLevelObject();
                this.state = 354;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 355;
            this.match(KotlinParser.EOF);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    script() {
        let localctx = new ScriptContext(this, this._ctx, this.state);
        this.enterRule(localctx, 2, KotlinParser.RULE_script);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 358;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === KotlinParser.ShebangLine) {
                this.state = 357;
                this.shebangLine();
            }
            this.state = 363;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 5, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 360;
                    this.match(KotlinParser.NL);
                }
                this.state = 365;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 5, this._ctx);
            }
            this.state = 369;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.AT_FILE) {
                this.state = 366;
                this.fileAnnotation();
                this.state = 371;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 372;
            this.packageHeader();
            this.state = 373;
            this.importList();
            this.state = 379;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << KotlinParser.NL) | (1 << KotlinParser.LPAREN) | (1 << KotlinParser.LSQUARE) | (1 << KotlinParser.LCURL) | (1 << KotlinParser.ADD) | (1 << KotlinParser.SUB) | (1 << KotlinParser.INCR) | (1 << KotlinParser.DECR) | (1 << KotlinParser.EXCL_WS) | (1 << KotlinParser.EXCL_NO_WS))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (KotlinParser.COLONCOLON - 37)) | (1 << (KotlinParser.AT - 37)) | (1 << (KotlinParser.RETURN_AT - 37)) | (1 << (KotlinParser.CONTINUE_AT - 37)) | (1 << (KotlinParser.BREAK_AT - 37)) | (1 << (KotlinParser.THIS_AT - 37)) | (1 << (KotlinParser.SUPER_AT - 37)) | (1 << (KotlinParser.IMPORT - 37)) | (1 << (KotlinParser.CLASS - 37)) | (1 << (KotlinParser.INTERFACE - 37)) | (1 << (KotlinParser.FUN - 37)) | (1 << (KotlinParser.OBJECT - 37)) | (1 << (KotlinParser.VAL - 37)) | (1 << (KotlinParser.VAR - 37)) | (1 << (KotlinParser.TYPE_ALIAS - 37)) | (1 << (KotlinParser.CONSTRUCTOR - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (KotlinParser.BY - 69)) | (1 << (KotlinParser.COMPANION - 69)) | (1 << (KotlinParser.INIT - 69)) | (1 << (KotlinParser.THIS - 69)) | (1 << (KotlinParser.SUPER - 69)) | (1 << (KotlinParser.WHERE - 69)) | (1 << (KotlinParser.IF - 69)) | (1 << (KotlinParser.WHEN - 69)) | (1 << (KotlinParser.TRY - 69)) | (1 << (KotlinParser.CATCH - 69)) | (1 << (KotlinParser.FINALLY - 69)) | (1 << (KotlinParser.FOR - 69)) | (1 << (KotlinParser.DO - 69)) | (1 << (KotlinParser.WHILE - 69)) | (1 << (KotlinParser.THROW - 69)) | (1 << (KotlinParser.RETURN - 69)) | (1 << (KotlinParser.CONTINUE - 69)) | (1 << (KotlinParser.BREAK - 69)) | (1 << (KotlinParser.OUT - 69)) | (1 << (KotlinParser.GETTER - 69)) | (1 << (KotlinParser.SETTER - 69)) | (1 << (KotlinParser.DYNAMIC - 69)) | (1 << (KotlinParser.AT_FIELD - 69)) | (1 << (KotlinParser.AT_PROPERTY - 69)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (KotlinParser.AT_GET - 101)) | (1 << (KotlinParser.AT_SET - 101)) | (1 << (KotlinParser.AT_RECEIVER - 101)) | (1 << (KotlinParser.AT_PARAM - 101)) | (1 << (KotlinParser.AT_SETPARAM - 101)) | (1 << (KotlinParser.AT_DELEGATE - 101)) | (1 << (KotlinParser.PUBLIC - 101)) | (1 << (KotlinParser.PRIVATE - 101)) | (1 << (KotlinParser.PROTECTED - 101)) | (1 << (KotlinParser.INTERNAL - 101)) | (1 << (KotlinParser.ENUM - 101)) | (1 << (KotlinParser.SEALED - 101)) | (1 << (KotlinParser.ANNOTATION - 101)) | (1 << (KotlinParser.DATA - 101)) | (1 << (KotlinParser.INNER - 101)) | (1 << (KotlinParser.TAILREC - 101)) | (1 << (KotlinParser.OPERATOR - 101)) | (1 << (KotlinParser.INLINE - 101)) | (1 << (KotlinParser.INFIX - 101)) | (1 << (KotlinParser.EXTERNAL - 101)) | (1 << (KotlinParser.SUSPEND - 101)) | (1 << (KotlinParser.OVERRIDE - 101)) | (1 << (KotlinParser.ABSTRACT - 101)) | (1 << (KotlinParser.FINAL - 101)) | (1 << (KotlinParser.OPEN - 101)) | (1 << (KotlinParser.CONST - 101)) | (1 << (KotlinParser.LATEINIT - 101)) | (1 << (KotlinParser.VARARG - 101)) | (1 << (KotlinParser.NOINLINE - 101)) | (1 << (KotlinParser.CROSSINLINE - 101)) | (1 << (KotlinParser.REIFIED - 101)) | (1 << (KotlinParser.EXPECT - 101)))) !== 0) || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (KotlinParser.ACTUAL - 133)) | (1 << (KotlinParser.QUOTE_OPEN - 133)) | (1 << (KotlinParser.TRIPLE_QUOTE_OPEN - 133)) | (1 << (KotlinParser.RealLiteral - 133)) | (1 << (KotlinParser.LongLiteral - 133)) | (1 << (KotlinParser.IntegerLiteral - 133)) | (1 << (KotlinParser.HexLiteral - 133)) | (1 << (KotlinParser.BinLiteral - 133)) | (1 << (KotlinParser.BooleanLiteral - 133)) | (1 << (KotlinParser.NullLiteral - 133)) | (1 << (KotlinParser.Identifier - 133)) | (1 << (KotlinParser.IdentifierAt - 133)) | (1 << (KotlinParser.CharacterLiteral - 133)))) !== 0)) {
                this.state = 374;
                this.statement();
                this.state = 375;
                this.semi();
                this.state = 381;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 382;
            this.match(KotlinParser.EOF);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    fileAnnotation() {
        let localctx = new FileAnnotationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 4, KotlinParser.RULE_fileAnnotation);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 384;
            this.match(KotlinParser.AT_FILE);
            this.state = 388;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 385;
                this.match(KotlinParser.NL);
                this.state = 390;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 391;
            this.match(KotlinParser.COLON);
            this.state = 395;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 392;
                this.match(KotlinParser.NL);
                this.state = 397;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 407;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.LSQUARE:
                    this.state = 398;
                    this.match(KotlinParser.LSQUARE);
                    this.state = 400;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        this.state = 399;
                        this.unescapedAnnotation();
                        this.state = 402;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while (((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (KotlinParser.IMPORT - 60)) | (1 << (KotlinParser.CONSTRUCTOR - 60)) | (1 << (KotlinParser.BY - 60)) | (1 << (KotlinParser.COMPANION - 60)) | (1 << (KotlinParser.INIT - 60)) | (1 << (KotlinParser.WHERE - 60)) | (1 << (KotlinParser.CATCH - 60)) | (1 << (KotlinParser.FINALLY - 60)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (KotlinParser.OUT - 94)) | (1 << (KotlinParser.GETTER - 94)) | (1 << (KotlinParser.SETTER - 94)) | (1 << (KotlinParser.DYNAMIC - 94)) | (1 << (KotlinParser.PUBLIC - 94)) | (1 << (KotlinParser.PRIVATE - 94)) | (1 << (KotlinParser.PROTECTED - 94)) | (1 << (KotlinParser.INTERNAL - 94)) | (1 << (KotlinParser.ENUM - 94)) | (1 << (KotlinParser.SEALED - 94)) | (1 << (KotlinParser.ANNOTATION - 94)) | (1 << (KotlinParser.DATA - 94)) | (1 << (KotlinParser.INNER - 94)) | (1 << (KotlinParser.TAILREC - 94)) | (1 << (KotlinParser.OPERATOR - 94)) | (1 << (KotlinParser.INLINE - 94)) | (1 << (KotlinParser.INFIX - 94)) | (1 << (KotlinParser.EXTERNAL - 94)) | (1 << (KotlinParser.SUSPEND - 94)) | (1 << (KotlinParser.OVERRIDE - 94)) | (1 << (KotlinParser.ABSTRACT - 94)) | (1 << (KotlinParser.FINAL - 94)) | (1 << (KotlinParser.OPEN - 94)))) !== 0) || ((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (KotlinParser.CONST - 126)) | (1 << (KotlinParser.LATEINIT - 126)) | (1 << (KotlinParser.VARARG - 126)) | (1 << (KotlinParser.NOINLINE - 126)) | (1 << (KotlinParser.CROSSINLINE - 126)) | (1 << (KotlinParser.REIFIED - 126)) | (1 << (KotlinParser.EXPECT - 126)) | (1 << (KotlinParser.ACTUAL - 126)) | (1 << (KotlinParser.Identifier - 126)))) !== 0));
                    this.state = 404;
                    this.match(KotlinParser.RSQUARE);
                    break;
                case KotlinParser.IMPORT:
                case KotlinParser.CONSTRUCTOR:
                case KotlinParser.BY:
                case KotlinParser.COMPANION:
                case KotlinParser.INIT:
                case KotlinParser.WHERE:
                case KotlinParser.CATCH:
                case KotlinParser.FINALLY:
                case KotlinParser.OUT:
                case KotlinParser.GETTER:
                case KotlinParser.SETTER:
                case KotlinParser.DYNAMIC:
                case KotlinParser.PUBLIC:
                case KotlinParser.PRIVATE:
                case KotlinParser.PROTECTED:
                case KotlinParser.INTERNAL:
                case KotlinParser.ENUM:
                case KotlinParser.SEALED:
                case KotlinParser.ANNOTATION:
                case KotlinParser.DATA:
                case KotlinParser.INNER:
                case KotlinParser.TAILREC:
                case KotlinParser.OPERATOR:
                case KotlinParser.INLINE:
                case KotlinParser.INFIX:
                case KotlinParser.EXTERNAL:
                case KotlinParser.SUSPEND:
                case KotlinParser.OVERRIDE:
                case KotlinParser.ABSTRACT:
                case KotlinParser.FINAL:
                case KotlinParser.OPEN:
                case KotlinParser.CONST:
                case KotlinParser.LATEINIT:
                case KotlinParser.VARARG:
                case KotlinParser.NOINLINE:
                case KotlinParser.CROSSINLINE:
                case KotlinParser.REIFIED:
                case KotlinParser.EXPECT:
                case KotlinParser.ACTUAL:
                case KotlinParser.Identifier:
                    this.state = 406;
                    this.unescapedAnnotation();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this.state = 412;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 12, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 409;
                    this.match(KotlinParser.NL);
                }
                this.state = 414;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 12, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    packageHeader() {
        let localctx = new PackageHeaderContext(this, this._ctx, this.state);
        this.enterRule(localctx, 6, KotlinParser.RULE_packageHeader);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 420;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === KotlinParser.PACKAGE) {
                this.state = 415;
                this.match(KotlinParser.PACKAGE);
                this.state = 416;
                this.identifier();
                this.state = 418;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 13, this._ctx);
                if (la_ === 1) {
                    this.state = 417;
                    this.semi();
                }
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    importList() {
        let localctx = new ImportListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 8, KotlinParser.RULE_importList);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 425;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 15, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 422;
                    this.importHeader();
                }
                this.state = 427;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 15, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    importHeader() {
        let localctx = new ImportHeaderContext(this, this._ctx, this.state);
        this.enterRule(localctx, 10, KotlinParser.RULE_importHeader);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 428;
            this.match(KotlinParser.IMPORT);
            this.state = 429;
            this.identifier();
            this.state = 433;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.DOT:
                    this.state = 430;
                    this.match(KotlinParser.DOT);
                    this.state = 431;
                    this.match(KotlinParser.MULT);
                    break;
                case KotlinParser.AS:
                    this.state = 432;
                    this.importAlias();
                    break;
                case KotlinParser.EOF:
                case KotlinParser.NL:
                case KotlinParser.LPAREN:
                case KotlinParser.LSQUARE:
                case KotlinParser.LCURL:
                case KotlinParser.ADD:
                case KotlinParser.SUB:
                case KotlinParser.INCR:
                case KotlinParser.DECR:
                case KotlinParser.EXCL_WS:
                case KotlinParser.EXCL_NO_WS:
                case KotlinParser.SEMICOLON:
                case KotlinParser.COLONCOLON:
                case KotlinParser.AT:
                case KotlinParser.RETURN_AT:
                case KotlinParser.CONTINUE_AT:
                case KotlinParser.BREAK_AT:
                case KotlinParser.THIS_AT:
                case KotlinParser.SUPER_AT:
                case KotlinParser.IMPORT:
                case KotlinParser.CLASS:
                case KotlinParser.INTERFACE:
                case KotlinParser.FUN:
                case KotlinParser.OBJECT:
                case KotlinParser.VAL:
                case KotlinParser.VAR:
                case KotlinParser.TYPE_ALIAS:
                case KotlinParser.CONSTRUCTOR:
                case KotlinParser.BY:
                case KotlinParser.COMPANION:
                case KotlinParser.INIT:
                case KotlinParser.THIS:
                case KotlinParser.SUPER:
                case KotlinParser.WHERE:
                case KotlinParser.IF:
                case KotlinParser.WHEN:
                case KotlinParser.TRY:
                case KotlinParser.CATCH:
                case KotlinParser.FINALLY:
                case KotlinParser.FOR:
                case KotlinParser.DO:
                case KotlinParser.WHILE:
                case KotlinParser.THROW:
                case KotlinParser.RETURN:
                case KotlinParser.CONTINUE:
                case KotlinParser.BREAK:
                case KotlinParser.OUT:
                case KotlinParser.GETTER:
                case KotlinParser.SETTER:
                case KotlinParser.DYNAMIC:
                case KotlinParser.AT_FIELD:
                case KotlinParser.AT_PROPERTY:
                case KotlinParser.AT_GET:
                case KotlinParser.AT_SET:
                case KotlinParser.AT_RECEIVER:
                case KotlinParser.AT_PARAM:
                case KotlinParser.AT_SETPARAM:
                case KotlinParser.AT_DELEGATE:
                case KotlinParser.PUBLIC:
                case KotlinParser.PRIVATE:
                case KotlinParser.PROTECTED:
                case KotlinParser.INTERNAL:
                case KotlinParser.ENUM:
                case KotlinParser.SEALED:
                case KotlinParser.ANNOTATION:
                case KotlinParser.DATA:
                case KotlinParser.INNER:
                case KotlinParser.TAILREC:
                case KotlinParser.OPERATOR:
                case KotlinParser.INLINE:
                case KotlinParser.INFIX:
                case KotlinParser.EXTERNAL:
                case KotlinParser.SUSPEND:
                case KotlinParser.OVERRIDE:
                case KotlinParser.ABSTRACT:
                case KotlinParser.FINAL:
                case KotlinParser.OPEN:
                case KotlinParser.CONST:
                case KotlinParser.LATEINIT:
                case KotlinParser.VARARG:
                case KotlinParser.NOINLINE:
                case KotlinParser.CROSSINLINE:
                case KotlinParser.REIFIED:
                case KotlinParser.EXPECT:
                case KotlinParser.ACTUAL:
                case KotlinParser.QUOTE_OPEN:
                case KotlinParser.TRIPLE_QUOTE_OPEN:
                case KotlinParser.RealLiteral:
                case KotlinParser.LongLiteral:
                case KotlinParser.IntegerLiteral:
                case KotlinParser.HexLiteral:
                case KotlinParser.BinLiteral:
                case KotlinParser.BooleanLiteral:
                case KotlinParser.NullLiteral:
                case KotlinParser.Identifier:
                case KotlinParser.IdentifierAt:
                case KotlinParser.CharacterLiteral:
                    break;
                default:
                    break;
            }
            this.state = 436;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 17, this._ctx);
            if (la_ === 1) {
                this.state = 435;
                this.semi();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    importAlias() {
        let localctx = new ImportAliasContext(this, this._ctx, this.state);
        this.enterRule(localctx, 12, KotlinParser.RULE_importAlias);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 438;
            this.match(KotlinParser.AS);
            this.state = 439;
            this.simpleIdentifier();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    topLevelObject() {
        let localctx = new TopLevelObjectContext(this, this._ctx, this.state);
        this.enterRule(localctx, 14, KotlinParser.RULE_topLevelObject);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 441;
            this.declaration();
            this.state = 443;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 18, this._ctx);
            if (la_ === 1) {
                this.state = 442;
                this.semis();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    classDeclaration() {
        let localctx = new ClassDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 16, KotlinParser.RULE_classDeclaration);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 446;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === KotlinParser.AT || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (KotlinParser.AT_FIELD - 99)) | (1 << (KotlinParser.AT_PROPERTY - 99)) | (1 << (KotlinParser.AT_GET - 99)) | (1 << (KotlinParser.AT_SET - 99)) | (1 << (KotlinParser.AT_RECEIVER - 99)) | (1 << (KotlinParser.AT_PARAM - 99)) | (1 << (KotlinParser.AT_SETPARAM - 99)) | (1 << (KotlinParser.AT_DELEGATE - 99)) | (1 << (KotlinParser.PUBLIC - 99)) | (1 << (KotlinParser.PRIVATE - 99)) | (1 << (KotlinParser.PROTECTED - 99)) | (1 << (KotlinParser.INTERNAL - 99)) | (1 << (KotlinParser.ENUM - 99)) | (1 << (KotlinParser.SEALED - 99)) | (1 << (KotlinParser.ANNOTATION - 99)) | (1 << (KotlinParser.DATA - 99)) | (1 << (KotlinParser.INNER - 99)) | (1 << (KotlinParser.TAILREC - 99)) | (1 << (KotlinParser.OPERATOR - 99)) | (1 << (KotlinParser.INLINE - 99)) | (1 << (KotlinParser.INFIX - 99)) | (1 << (KotlinParser.EXTERNAL - 99)) | (1 << (KotlinParser.SUSPEND - 99)) | (1 << (KotlinParser.OVERRIDE - 99)) | (1 << (KotlinParser.ABSTRACT - 99)) | (1 << (KotlinParser.FINAL - 99)) | (1 << (KotlinParser.OPEN - 99)) | (1 << (KotlinParser.CONST - 99)) | (1 << (KotlinParser.LATEINIT - 99)) | (1 << (KotlinParser.VARARG - 99)) | (1 << (KotlinParser.NOINLINE - 99)) | (1 << (KotlinParser.CROSSINLINE - 99)))) !== 0) || _la === KotlinParser.EXPECT || _la === KotlinParser.ACTUAL) {
                this.state = 445;
                this.modifiers();
            }
            this.state = 448;
            _la = this._input.LA(1);
            if (!(_la === KotlinParser.CLASS || _la === KotlinParser.INTERFACE)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 452;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 449;
                this.match(KotlinParser.NL);
                this.state = 454;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 455;
            this.simpleIdentifier();
            this.state = 463;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 22, this._ctx);
            if (la_ === 1) {
                this.state = 459;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 456;
                    this.match(KotlinParser.NL);
                    this.state = 461;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 462;
                this.typeParameters();
            }
            this.state = 472;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 24, this._ctx);
            if (la_ === 1) {
                this.state = 468;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 465;
                    this.match(KotlinParser.NL);
                    this.state = 470;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 471;
                this.primaryConstructor();
            }
            this.state = 488;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 27, this._ctx);
            if (la_ === 1) {
                this.state = 477;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 474;
                    this.match(KotlinParser.NL);
                    this.state = 479;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 480;
                this.match(KotlinParser.COLON);
                this.state = 484;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input, 26, this._ctx);
                while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        this.state = 481;
                        this.match(KotlinParser.NL);
                    }
                    this.state = 486;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input, 26, this._ctx);
                }
                this.state = 487;
                this.delegationSpecifiers();
            }
            this.state = 497;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 29, this._ctx);
            if (la_ === 1) {
                this.state = 493;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 490;
                    this.match(KotlinParser.NL);
                    this.state = 495;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 496;
                this.typeConstraints();
            }
            this.state = 513;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 32, this._ctx);
            if (la_ === 1) {
                this.state = 502;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 499;
                    this.match(KotlinParser.NL);
                    this.state = 504;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 505;
                this.classBody();
            }
            else if (la_ === 2) {
                this.state = 509;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 506;
                    this.match(KotlinParser.NL);
                    this.state = 511;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 512;
                this.enumClassBody();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    primaryConstructor() {
        let localctx = new PrimaryConstructorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 18, KotlinParser.RULE_primaryConstructor);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 525;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === KotlinParser.AT || _la === KotlinParser.CONSTRUCTOR || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (KotlinParser.AT_FIELD - 99)) | (1 << (KotlinParser.AT_PROPERTY - 99)) | (1 << (KotlinParser.AT_GET - 99)) | (1 << (KotlinParser.AT_SET - 99)) | (1 << (KotlinParser.AT_RECEIVER - 99)) | (1 << (KotlinParser.AT_PARAM - 99)) | (1 << (KotlinParser.AT_SETPARAM - 99)) | (1 << (KotlinParser.AT_DELEGATE - 99)) | (1 << (KotlinParser.PUBLIC - 99)) | (1 << (KotlinParser.PRIVATE - 99)) | (1 << (KotlinParser.PROTECTED - 99)) | (1 << (KotlinParser.INTERNAL - 99)) | (1 << (KotlinParser.ENUM - 99)) | (1 << (KotlinParser.SEALED - 99)) | (1 << (KotlinParser.ANNOTATION - 99)) | (1 << (KotlinParser.DATA - 99)) | (1 << (KotlinParser.INNER - 99)) | (1 << (KotlinParser.TAILREC - 99)) | (1 << (KotlinParser.OPERATOR - 99)) | (1 << (KotlinParser.INLINE - 99)) | (1 << (KotlinParser.INFIX - 99)) | (1 << (KotlinParser.EXTERNAL - 99)) | (1 << (KotlinParser.SUSPEND - 99)) | (1 << (KotlinParser.OVERRIDE - 99)) | (1 << (KotlinParser.ABSTRACT - 99)) | (1 << (KotlinParser.FINAL - 99)) | (1 << (KotlinParser.OPEN - 99)) | (1 << (KotlinParser.CONST - 99)) | (1 << (KotlinParser.LATEINIT - 99)) | (1 << (KotlinParser.VARARG - 99)) | (1 << (KotlinParser.NOINLINE - 99)) | (1 << (KotlinParser.CROSSINLINE - 99)))) !== 0) || _la === KotlinParser.EXPECT || _la === KotlinParser.ACTUAL) {
                this.state = 516;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === KotlinParser.AT || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (KotlinParser.AT_FIELD - 99)) | (1 << (KotlinParser.AT_PROPERTY - 99)) | (1 << (KotlinParser.AT_GET - 99)) | (1 << (KotlinParser.AT_SET - 99)) | (1 << (KotlinParser.AT_RECEIVER - 99)) | (1 << (KotlinParser.AT_PARAM - 99)) | (1 << (KotlinParser.AT_SETPARAM - 99)) | (1 << (KotlinParser.AT_DELEGATE - 99)) | (1 << (KotlinParser.PUBLIC - 99)) | (1 << (KotlinParser.PRIVATE - 99)) | (1 << (KotlinParser.PROTECTED - 99)) | (1 << (KotlinParser.INTERNAL - 99)) | (1 << (KotlinParser.ENUM - 99)) | (1 << (KotlinParser.SEALED - 99)) | (1 << (KotlinParser.ANNOTATION - 99)) | (1 << (KotlinParser.DATA - 99)) | (1 << (KotlinParser.INNER - 99)) | (1 << (KotlinParser.TAILREC - 99)) | (1 << (KotlinParser.OPERATOR - 99)) | (1 << (KotlinParser.INLINE - 99)) | (1 << (KotlinParser.INFIX - 99)) | (1 << (KotlinParser.EXTERNAL - 99)) | (1 << (KotlinParser.SUSPEND - 99)) | (1 << (KotlinParser.OVERRIDE - 99)) | (1 << (KotlinParser.ABSTRACT - 99)) | (1 << (KotlinParser.FINAL - 99)) | (1 << (KotlinParser.OPEN - 99)) | (1 << (KotlinParser.CONST - 99)) | (1 << (KotlinParser.LATEINIT - 99)) | (1 << (KotlinParser.VARARG - 99)) | (1 << (KotlinParser.NOINLINE - 99)) | (1 << (KotlinParser.CROSSINLINE - 99)))) !== 0) || _la === KotlinParser.EXPECT || _la === KotlinParser.ACTUAL) {
                    this.state = 515;
                    this.modifiers();
                }
                this.state = 518;
                this.match(KotlinParser.CONSTRUCTOR);
                this.state = 522;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 519;
                    this.match(KotlinParser.NL);
                    this.state = 524;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
            this.state = 527;
            this.classParameters();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    classParameters() {
        let localctx = new ClassParametersContext(this, this._ctx, this.state);
        this.enterRule(localctx, 20, KotlinParser.RULE_classParameters);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 529;
            this.match(KotlinParser.LPAREN);
            this.state = 533;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 36, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 530;
                    this.match(KotlinParser.NL);
                }
                this.state = 535;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 36, this._ctx);
            }
            this.state = 556;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 40, this._ctx);
            if (la_ === 1) {
                this.state = 536;
                this.classParameter();
                this.state = 553;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input, 39, this._ctx);
                while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        this.state = 540;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === KotlinParser.NL) {
                            this.state = 537;
                            this.match(KotlinParser.NL);
                            this.state = 542;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 543;
                        this.match(KotlinParser.COMMA);
                        this.state = 547;
                        this._errHandler.sync(this);
                        var _alt = this._interp.adaptivePredict(this._input, 38, this._ctx);
                        while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                this.state = 544;
                                this.match(KotlinParser.NL);
                            }
                            this.state = 549;
                            this._errHandler.sync(this);
                            _alt = this._interp.adaptivePredict(this._input, 38, this._ctx);
                        }
                        this.state = 550;
                        this.classParameter();
                    }
                    this.state = 555;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input, 39, this._ctx);
                }
            }
            this.state = 561;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 558;
                this.match(KotlinParser.NL);
                this.state = 563;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 565;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === KotlinParser.COMMA) {
                this.state = 564;
                this.match(KotlinParser.COMMA);
            }
            this.state = 567;
            this.match(KotlinParser.RPAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    classParameter() {
        let localctx = new ClassParameterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 22, KotlinParser.RULE_classParameter);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 570;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 43, this._ctx);
            if (la_ === 1) {
                this.state = 569;
                this.modifiers();
            }
            this.state = 573;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === KotlinParser.VAL || _la === KotlinParser.VAR) {
                this.state = 572;
                _la = this._input.LA(1);
                if (!(_la === KotlinParser.VAL || _la === KotlinParser.VAR)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
            this.state = 578;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 575;
                this.match(KotlinParser.NL);
                this.state = 580;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 581;
            this.simpleIdentifier();
            this.state = 582;
            this.match(KotlinParser.COLON);
            this.state = 586;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 583;
                this.match(KotlinParser.NL);
                this.state = 588;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 589;
            this.type_();
            this.state = 604;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 49, this._ctx);
            if (la_ === 1) {
                this.state = 593;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 590;
                    this.match(KotlinParser.NL);
                    this.state = 595;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 596;
                this.match(KotlinParser.ASSIGNMENT);
                this.state = 600;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input, 48, this._ctx);
                while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        this.state = 597;
                        this.match(KotlinParser.NL);
                    }
                    this.state = 602;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input, 48, this._ctx);
                }
                this.state = 603;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    delegationSpecifiers() {
        let localctx = new DelegationSpecifiersContext(this, this._ctx, this.state);
        this.enterRule(localctx, 24, KotlinParser.RULE_delegationSpecifiers);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 606;
            this.annotatedDelegationSpecifier();
            this.state = 623;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 52, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 610;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 607;
                        this.match(KotlinParser.NL);
                        this.state = 612;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 613;
                    this.match(KotlinParser.COMMA);
                    this.state = 617;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 51, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 614;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 619;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 51, this._ctx);
                    }
                    this.state = 620;
                    this.annotatedDelegationSpecifier();
                }
                this.state = 625;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 52, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    annotatedDelegationSpecifier() {
        let localctx = new AnnotatedDelegationSpecifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 26, KotlinParser.RULE_annotatedDelegationSpecifier);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 629;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 53, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 626;
                    this.annotation();
                }
                this.state = 631;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 53, this._ctx);
            }
            this.state = 635;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 632;
                this.match(KotlinParser.NL);
                this.state = 637;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 638;
            this.delegationSpecifier();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    delegationSpecifier() {
        let localctx = new DelegationSpecifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 28, KotlinParser.RULE_delegationSpecifier);
        try {
            this.state = 644;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 55, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 640;
                    this.constructorInvocation();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 641;
                    this.explicitDelegation();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 642;
                    this.userType();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 643;
                    this.functionType();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    constructorInvocation() {
        let localctx = new ConstructorInvocationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 30, KotlinParser.RULE_constructorInvocation);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 646;
            this.userType();
            this.state = 647;
            this.valueArguments();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    explicitDelegation() {
        let localctx = new ExplicitDelegationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 32, KotlinParser.RULE_explicitDelegation);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 651;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 56, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 649;
                    this.userType();
                    break;
                case 2:
                    this.state = 650;
                    this.functionType();
                    break;
            }
            this.state = 656;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 653;
                this.match(KotlinParser.NL);
                this.state = 658;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 659;
            this.match(KotlinParser.BY);
            this.state = 663;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 58, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 660;
                    this.match(KotlinParser.NL);
                }
                this.state = 665;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 58, this._ctx);
            }
            this.state = 666;
            this.expression();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    classBody() {
        let localctx = new ClassBodyContext(this, this._ctx, this.state);
        this.enterRule(localctx, 34, KotlinParser.RULE_classBody);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 668;
            this.match(KotlinParser.LCURL);
            this.state = 672;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 59, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 669;
                    this.match(KotlinParser.NL);
                }
                this.state = 674;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 59, this._ctx);
            }
            this.state = 675;
            this.classMemberDeclarations();
            this.state = 679;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 676;
                this.match(KotlinParser.NL);
                this.state = 681;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 682;
            this.match(KotlinParser.RCURL);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    classMemberDeclarations() {
        let localctx = new ClassMemberDeclarationsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 36, KotlinParser.RULE_classMemberDeclarations);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 690;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (KotlinParser.AT - 40)) | (1 << (KotlinParser.CLASS - 40)) | (1 << (KotlinParser.INTERFACE - 40)) | (1 << (KotlinParser.FUN - 40)) | (1 << (KotlinParser.OBJECT - 40)) | (1 << (KotlinParser.VAL - 40)) | (1 << (KotlinParser.VAR - 40)) | (1 << (KotlinParser.TYPE_ALIAS - 40)) | (1 << (KotlinParser.CONSTRUCTOR - 40)) | (1 << (KotlinParser.COMPANION - 40)) | (1 << (KotlinParser.INIT - 40)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (KotlinParser.AT_FIELD - 99)) | (1 << (KotlinParser.AT_PROPERTY - 99)) | (1 << (KotlinParser.AT_GET - 99)) | (1 << (KotlinParser.AT_SET - 99)) | (1 << (KotlinParser.AT_RECEIVER - 99)) | (1 << (KotlinParser.AT_PARAM - 99)) | (1 << (KotlinParser.AT_SETPARAM - 99)) | (1 << (KotlinParser.AT_DELEGATE - 99)) | (1 << (KotlinParser.PUBLIC - 99)) | (1 << (KotlinParser.PRIVATE - 99)) | (1 << (KotlinParser.PROTECTED - 99)) | (1 << (KotlinParser.INTERNAL - 99)) | (1 << (KotlinParser.ENUM - 99)) | (1 << (KotlinParser.SEALED - 99)) | (1 << (KotlinParser.ANNOTATION - 99)) | (1 << (KotlinParser.DATA - 99)) | (1 << (KotlinParser.INNER - 99)) | (1 << (KotlinParser.TAILREC - 99)) | (1 << (KotlinParser.OPERATOR - 99)) | (1 << (KotlinParser.INLINE - 99)) | (1 << (KotlinParser.INFIX - 99)) | (1 << (KotlinParser.EXTERNAL - 99)) | (1 << (KotlinParser.SUSPEND - 99)) | (1 << (KotlinParser.OVERRIDE - 99)) | (1 << (KotlinParser.ABSTRACT - 99)) | (1 << (KotlinParser.FINAL - 99)) | (1 << (KotlinParser.OPEN - 99)) | (1 << (KotlinParser.CONST - 99)) | (1 << (KotlinParser.LATEINIT - 99)) | (1 << (KotlinParser.VARARG - 99)) | (1 << (KotlinParser.NOINLINE - 99)) | (1 << (KotlinParser.CROSSINLINE - 99)))) !== 0) || _la === KotlinParser.EXPECT || _la === KotlinParser.ACTUAL) {
                this.state = 684;
                this.classMemberDeclaration();
                this.state = 686;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 61, this._ctx);
                if (la_ === 1) {
                    this.state = 685;
                    this.semis();
                }
                this.state = 692;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    classMemberDeclaration() {
        let localctx = new ClassMemberDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 38, KotlinParser.RULE_classMemberDeclaration);
        try {
            this.state = 697;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 63, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 693;
                    this.declaration();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 694;
                    this.companionObject();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 695;
                    this.anonymousInitializer();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 696;
                    this.secondaryConstructor();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    anonymousInitializer() {
        let localctx = new AnonymousInitializerContext(this, this._ctx, this.state);
        this.enterRule(localctx, 40, KotlinParser.RULE_anonymousInitializer);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 699;
            this.match(KotlinParser.INIT);
            this.state = 703;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 700;
                this.match(KotlinParser.NL);
                this.state = 705;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 706;
            this.block();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    secondaryConstructor() {
        let localctx = new SecondaryConstructorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 42, KotlinParser.RULE_secondaryConstructor);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 709;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === KotlinParser.AT || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (KotlinParser.AT_FIELD - 99)) | (1 << (KotlinParser.AT_PROPERTY - 99)) | (1 << (KotlinParser.AT_GET - 99)) | (1 << (KotlinParser.AT_SET - 99)) | (1 << (KotlinParser.AT_RECEIVER - 99)) | (1 << (KotlinParser.AT_PARAM - 99)) | (1 << (KotlinParser.AT_SETPARAM - 99)) | (1 << (KotlinParser.AT_DELEGATE - 99)) | (1 << (KotlinParser.PUBLIC - 99)) | (1 << (KotlinParser.PRIVATE - 99)) | (1 << (KotlinParser.PROTECTED - 99)) | (1 << (KotlinParser.INTERNAL - 99)) | (1 << (KotlinParser.ENUM - 99)) | (1 << (KotlinParser.SEALED - 99)) | (1 << (KotlinParser.ANNOTATION - 99)) | (1 << (KotlinParser.DATA - 99)) | (1 << (KotlinParser.INNER - 99)) | (1 << (KotlinParser.TAILREC - 99)) | (1 << (KotlinParser.OPERATOR - 99)) | (1 << (KotlinParser.INLINE - 99)) | (1 << (KotlinParser.INFIX - 99)) | (1 << (KotlinParser.EXTERNAL - 99)) | (1 << (KotlinParser.SUSPEND - 99)) | (1 << (KotlinParser.OVERRIDE - 99)) | (1 << (KotlinParser.ABSTRACT - 99)) | (1 << (KotlinParser.FINAL - 99)) | (1 << (KotlinParser.OPEN - 99)) | (1 << (KotlinParser.CONST - 99)) | (1 << (KotlinParser.LATEINIT - 99)) | (1 << (KotlinParser.VARARG - 99)) | (1 << (KotlinParser.NOINLINE - 99)) | (1 << (KotlinParser.CROSSINLINE - 99)))) !== 0) || _la === KotlinParser.EXPECT || _la === KotlinParser.ACTUAL) {
                this.state = 708;
                this.modifiers();
            }
            this.state = 711;
            this.match(KotlinParser.CONSTRUCTOR);
            this.state = 715;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 712;
                this.match(KotlinParser.NL);
                this.state = 717;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 718;
            this.functionValueParameters();
            this.state = 733;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 69, this._ctx);
            if (la_ === 1) {
                this.state = 722;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 719;
                    this.match(KotlinParser.NL);
                    this.state = 724;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 725;
                this.match(KotlinParser.COLON);
                this.state = 729;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 726;
                    this.match(KotlinParser.NL);
                    this.state = 731;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 732;
                this.constructorDelegationCall();
            }
            this.state = 738;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 70, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 735;
                    this.match(KotlinParser.NL);
                }
                this.state = 740;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 70, this._ctx);
            }
            this.state = 742;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === KotlinParser.LCURL) {
                this.state = 741;
                this.block();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    constructorDelegationCall() {
        let localctx = new ConstructorDelegationCallContext(this, this._ctx, this.state);
        this.enterRule(localctx, 44, KotlinParser.RULE_constructorDelegationCall);
        var _la = 0; // Token type
        try {
            this.state = 760;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.THIS:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 744;
                    this.match(KotlinParser.THIS);
                    this.state = 748;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 745;
                        this.match(KotlinParser.NL);
                        this.state = 750;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 751;
                    this.valueArguments();
                    break;
                case KotlinParser.SUPER:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 752;
                    this.match(KotlinParser.SUPER);
                    this.state = 756;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 753;
                        this.match(KotlinParser.NL);
                        this.state = 758;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 759;
                    this.valueArguments();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    enumClassBody() {
        let localctx = new EnumClassBodyContext(this, this._ctx, this.state);
        this.enterRule(localctx, 46, KotlinParser.RULE_enumClassBody);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 762;
            this.match(KotlinParser.LCURL);
            this.state = 766;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 75, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 763;
                    this.match(KotlinParser.NL);
                }
                this.state = 768;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 75, this._ctx);
            }
            this.state = 770;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (KotlinParser.AT - 40)) | (1 << (KotlinParser.IMPORT - 40)) | (1 << (KotlinParser.CONSTRUCTOR - 40)) | (1 << (KotlinParser.BY - 40)) | (1 << (KotlinParser.COMPANION - 40)) | (1 << (KotlinParser.INIT - 40)))) !== 0) || ((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (KotlinParser.WHERE - 75)) | (1 << (KotlinParser.CATCH - 75)) | (1 << (KotlinParser.FINALLY - 75)) | (1 << (KotlinParser.OUT - 75)) | (1 << (KotlinParser.GETTER - 75)) | (1 << (KotlinParser.SETTER - 75)) | (1 << (KotlinParser.DYNAMIC - 75)) | (1 << (KotlinParser.AT_FIELD - 75)) | (1 << (KotlinParser.AT_PROPERTY - 75)) | (1 << (KotlinParser.AT_GET - 75)) | (1 << (KotlinParser.AT_SET - 75)) | (1 << (KotlinParser.AT_RECEIVER - 75)) | (1 << (KotlinParser.AT_PARAM - 75)) | (1 << (KotlinParser.AT_SETPARAM - 75)) | (1 << (KotlinParser.AT_DELEGATE - 75)))) !== 0) || ((((_la - 107)) & ~0x1f) == 0 && ((1 << (_la - 107)) & ((1 << (KotlinParser.PUBLIC - 107)) | (1 << (KotlinParser.PRIVATE - 107)) | (1 << (KotlinParser.PROTECTED - 107)) | (1 << (KotlinParser.INTERNAL - 107)) | (1 << (KotlinParser.ENUM - 107)) | (1 << (KotlinParser.SEALED - 107)) | (1 << (KotlinParser.ANNOTATION - 107)) | (1 << (KotlinParser.DATA - 107)) | (1 << (KotlinParser.INNER - 107)) | (1 << (KotlinParser.TAILREC - 107)) | (1 << (KotlinParser.OPERATOR - 107)) | (1 << (KotlinParser.INLINE - 107)) | (1 << (KotlinParser.INFIX - 107)) | (1 << (KotlinParser.EXTERNAL - 107)) | (1 << (KotlinParser.SUSPEND - 107)) | (1 << (KotlinParser.OVERRIDE - 107)) | (1 << (KotlinParser.ABSTRACT - 107)) | (1 << (KotlinParser.FINAL - 107)) | (1 << (KotlinParser.OPEN - 107)) | (1 << (KotlinParser.CONST - 107)) | (1 << (KotlinParser.LATEINIT - 107)) | (1 << (KotlinParser.VARARG - 107)) | (1 << (KotlinParser.NOINLINE - 107)) | (1 << (KotlinParser.CROSSINLINE - 107)) | (1 << (KotlinParser.REIFIED - 107)) | (1 << (KotlinParser.EXPECT - 107)) | (1 << (KotlinParser.ACTUAL - 107)))) !== 0) || _la === KotlinParser.Identifier) {
                this.state = 769;
                this.enumEntries();
            }
            this.state = 786;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 79, this._ctx);
            if (la_ === 1) {
                this.state = 775;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 772;
                    this.match(KotlinParser.NL);
                    this.state = 777;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 778;
                this.match(KotlinParser.SEMICOLON);
                this.state = 782;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input, 78, this._ctx);
                while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        this.state = 779;
                        this.match(KotlinParser.NL);
                    }
                    this.state = 784;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input, 78, this._ctx);
                }
                this.state = 785;
                this.classMemberDeclarations();
            }
            this.state = 791;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 788;
                this.match(KotlinParser.NL);
                this.state = 793;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 794;
            this.match(KotlinParser.RCURL);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    enumEntries() {
        let localctx = new EnumEntriesContext(this, this._ctx, this.state);
        this.enterRule(localctx, 48, KotlinParser.RULE_enumEntries);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 796;
            this.enumEntry();
            this.state = 813;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 83, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 800;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 797;
                        this.match(KotlinParser.NL);
                        this.state = 802;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 803;
                    this.match(KotlinParser.COMMA);
                    this.state = 807;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 804;
                        this.match(KotlinParser.NL);
                        this.state = 809;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 810;
                    this.enumEntry();
                }
                this.state = 815;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 83, this._ctx);
            }
            this.state = 819;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 84, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 816;
                    this.match(KotlinParser.NL);
                }
                this.state = 821;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 84, this._ctx);
            }
            this.state = 823;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === KotlinParser.COMMA) {
                this.state = 822;
                this.match(KotlinParser.COMMA);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    enumEntry() {
        let localctx = new EnumEntryContext(this, this._ctx, this.state);
        this.enterRule(localctx, 50, KotlinParser.RULE_enumEntry);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 832;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 87, this._ctx);
            if (la_ === 1) {
                this.state = 825;
                this.modifiers();
                this.state = 829;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 826;
                    this.match(KotlinParser.NL);
                    this.state = 831;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
            this.state = 834;
            this.simpleIdentifier();
            this.state = 842;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 89, this._ctx);
            if (la_ === 1) {
                this.state = 838;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 835;
                    this.match(KotlinParser.NL);
                    this.state = 840;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 841;
                this.valueArguments();
            }
            this.state = 851;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 91, this._ctx);
            if (la_ === 1) {
                this.state = 847;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 844;
                    this.match(KotlinParser.NL);
                    this.state = 849;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 850;
                this.classBody();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    functionDeclaration() {
        let localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 52, KotlinParser.RULE_functionDeclaration);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 854;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === KotlinParser.AT || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (KotlinParser.AT_FIELD - 99)) | (1 << (KotlinParser.AT_PROPERTY - 99)) | (1 << (KotlinParser.AT_GET - 99)) | (1 << (KotlinParser.AT_SET - 99)) | (1 << (KotlinParser.AT_RECEIVER - 99)) | (1 << (KotlinParser.AT_PARAM - 99)) | (1 << (KotlinParser.AT_SETPARAM - 99)) | (1 << (KotlinParser.AT_DELEGATE - 99)) | (1 << (KotlinParser.PUBLIC - 99)) | (1 << (KotlinParser.PRIVATE - 99)) | (1 << (KotlinParser.PROTECTED - 99)) | (1 << (KotlinParser.INTERNAL - 99)) | (1 << (KotlinParser.ENUM - 99)) | (1 << (KotlinParser.SEALED - 99)) | (1 << (KotlinParser.ANNOTATION - 99)) | (1 << (KotlinParser.DATA - 99)) | (1 << (KotlinParser.INNER - 99)) | (1 << (KotlinParser.TAILREC - 99)) | (1 << (KotlinParser.OPERATOR - 99)) | (1 << (KotlinParser.INLINE - 99)) | (1 << (KotlinParser.INFIX - 99)) | (1 << (KotlinParser.EXTERNAL - 99)) | (1 << (KotlinParser.SUSPEND - 99)) | (1 << (KotlinParser.OVERRIDE - 99)) | (1 << (KotlinParser.ABSTRACT - 99)) | (1 << (KotlinParser.FINAL - 99)) | (1 << (KotlinParser.OPEN - 99)) | (1 << (KotlinParser.CONST - 99)) | (1 << (KotlinParser.LATEINIT - 99)) | (1 << (KotlinParser.VARARG - 99)) | (1 << (KotlinParser.NOINLINE - 99)) | (1 << (KotlinParser.CROSSINLINE - 99)))) !== 0) || _la === KotlinParser.EXPECT || _la === KotlinParser.ACTUAL) {
                this.state = 853;
                this.modifiers();
            }
            this.state = 856;
            this.match(KotlinParser.FUN);
            this.state = 864;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 94, this._ctx);
            if (la_ === 1) {
                this.state = 860;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 857;
                    this.match(KotlinParser.NL);
                    this.state = 862;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 863;
                this.typeParameters();
            }
            this.state = 881;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 97, this._ctx);
            if (la_ === 1) {
                this.state = 869;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 866;
                    this.match(KotlinParser.NL);
                    this.state = 871;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 872;
                this.receiverType();
                this.state = 876;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 873;
                    this.match(KotlinParser.NL);
                    this.state = 878;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 879;
                this.match(KotlinParser.DOT);
            }
            this.state = 886;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 883;
                this.match(KotlinParser.NL);
                this.state = 888;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 889;
            this.simpleIdentifier();
            this.state = 893;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 890;
                this.match(KotlinParser.NL);
                this.state = 895;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 896;
            this.functionValueParameters();
            this.state = 911;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 102, this._ctx);
            if (la_ === 1) {
                this.state = 900;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 897;
                    this.match(KotlinParser.NL);
                    this.state = 902;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 903;
                this.match(KotlinParser.COLON);
                this.state = 907;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 904;
                    this.match(KotlinParser.NL);
                    this.state = 909;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 910;
                this.type_();
            }
            this.state = 920;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 104, this._ctx);
            if (la_ === 1) {
                this.state = 916;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 913;
                    this.match(KotlinParser.NL);
                    this.state = 918;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 919;
                this.typeConstraints();
            }
            this.state = 929;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 106, this._ctx);
            if (la_ === 1) {
                this.state = 925;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 922;
                    this.match(KotlinParser.NL);
                    this.state = 927;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 928;
                this.functionBody();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    functionValueParameters() {
        let localctx = new FunctionValueParametersContext(this, this._ctx, this.state);
        this.enterRule(localctx, 54, KotlinParser.RULE_functionValueParameters);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 931;
            this.match(KotlinParser.LPAREN);
            this.state = 935;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 107, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 932;
                    this.match(KotlinParser.NL);
                }
                this.state = 937;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 107, this._ctx);
            }
            this.state = 958;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (KotlinParser.AT - 40)) | (1 << (KotlinParser.IMPORT - 40)) | (1 << (KotlinParser.CONSTRUCTOR - 40)) | (1 << (KotlinParser.BY - 40)) | (1 << (KotlinParser.COMPANION - 40)) | (1 << (KotlinParser.INIT - 40)))) !== 0) || ((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (KotlinParser.WHERE - 75)) | (1 << (KotlinParser.CATCH - 75)) | (1 << (KotlinParser.FINALLY - 75)) | (1 << (KotlinParser.OUT - 75)) | (1 << (KotlinParser.GETTER - 75)) | (1 << (KotlinParser.SETTER - 75)) | (1 << (KotlinParser.DYNAMIC - 75)) | (1 << (KotlinParser.AT_FIELD - 75)) | (1 << (KotlinParser.AT_PROPERTY - 75)) | (1 << (KotlinParser.AT_GET - 75)) | (1 << (KotlinParser.AT_SET - 75)) | (1 << (KotlinParser.AT_RECEIVER - 75)) | (1 << (KotlinParser.AT_PARAM - 75)) | (1 << (KotlinParser.AT_SETPARAM - 75)) | (1 << (KotlinParser.AT_DELEGATE - 75)))) !== 0) || ((((_la - 107)) & ~0x1f) == 0 && ((1 << (_la - 107)) & ((1 << (KotlinParser.PUBLIC - 107)) | (1 << (KotlinParser.PRIVATE - 107)) | (1 << (KotlinParser.PROTECTED - 107)) | (1 << (KotlinParser.INTERNAL - 107)) | (1 << (KotlinParser.ENUM - 107)) | (1 << (KotlinParser.SEALED - 107)) | (1 << (KotlinParser.ANNOTATION - 107)) | (1 << (KotlinParser.DATA - 107)) | (1 << (KotlinParser.INNER - 107)) | (1 << (KotlinParser.TAILREC - 107)) | (1 << (KotlinParser.OPERATOR - 107)) | (1 << (KotlinParser.INLINE - 107)) | (1 << (KotlinParser.INFIX - 107)) | (1 << (KotlinParser.EXTERNAL - 107)) | (1 << (KotlinParser.SUSPEND - 107)) | (1 << (KotlinParser.OVERRIDE - 107)) | (1 << (KotlinParser.ABSTRACT - 107)) | (1 << (KotlinParser.FINAL - 107)) | (1 << (KotlinParser.OPEN - 107)) | (1 << (KotlinParser.CONST - 107)) | (1 << (KotlinParser.LATEINIT - 107)) | (1 << (KotlinParser.VARARG - 107)) | (1 << (KotlinParser.NOINLINE - 107)) | (1 << (KotlinParser.CROSSINLINE - 107)) | (1 << (KotlinParser.REIFIED - 107)) | (1 << (KotlinParser.EXPECT - 107)) | (1 << (KotlinParser.ACTUAL - 107)))) !== 0) || _la === KotlinParser.Identifier) {
                this.state = 938;
                this.functionValueParameter();
                this.state = 955;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input, 110, this._ctx);
                while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        this.state = 942;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === KotlinParser.NL) {
                            this.state = 939;
                            this.match(KotlinParser.NL);
                            this.state = 944;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 945;
                        this.match(KotlinParser.COMMA);
                        this.state = 949;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === KotlinParser.NL) {
                            this.state = 946;
                            this.match(KotlinParser.NL);
                            this.state = 951;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 952;
                        this.functionValueParameter();
                    }
                    this.state = 957;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input, 110, this._ctx);
                }
            }
            this.state = 963;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 960;
                this.match(KotlinParser.NL);
                this.state = 965;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 967;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === KotlinParser.COMMA) {
                this.state = 966;
                this.match(KotlinParser.COMMA);
            }
            this.state = 969;
            this.match(KotlinParser.RPAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    functionValueParameter() {
        let localctx = new FunctionValueParameterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 56, KotlinParser.RULE_functionValueParameter);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 972;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 114, this._ctx);
            if (la_ === 1) {
                this.state = 971;
                this.modifiers();
            }
            this.state = 974;
            this.parameter();
            this.state = 989;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 117, this._ctx);
            if (la_ === 1) {
                this.state = 978;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 975;
                    this.match(KotlinParser.NL);
                    this.state = 980;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 981;
                this.match(KotlinParser.ASSIGNMENT);
                this.state = 985;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input, 116, this._ctx);
                while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        this.state = 982;
                        this.match(KotlinParser.NL);
                    }
                    this.state = 987;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input, 116, this._ctx);
                }
                this.state = 988;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parameter() {
        let localctx = new ParameterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 58, KotlinParser.RULE_parameter);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 991;
            this.simpleIdentifier();
            this.state = 995;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 992;
                this.match(KotlinParser.NL);
                this.state = 997;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 998;
            this.match(KotlinParser.COLON);
            this.state = 1002;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 999;
                this.match(KotlinParser.NL);
                this.state = 1004;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1005;
            this.type_();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    setterParameter() {
        let localctx = new SetterParameterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 60, KotlinParser.RULE_setterParameter);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1007;
            this.simpleIdentifier();
            this.state = 1011;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 1008;
                this.match(KotlinParser.NL);
                this.state = 1013;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1022;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === KotlinParser.COLON) {
                this.state = 1014;
                this.match(KotlinParser.COLON);
                this.state = 1018;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 1015;
                    this.match(KotlinParser.NL);
                    this.state = 1020;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1021;
                this.type_();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    functionBody() {
        let localctx = new FunctionBodyContext(this, this._ctx, this.state);
        this.enterRule(localctx, 62, KotlinParser.RULE_functionBody);
        try {
            this.state = 1033;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.LCURL:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1024;
                    this.block();
                    break;
                case KotlinParser.ASSIGNMENT:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1025;
                    this.match(KotlinParser.ASSIGNMENT);
                    this.state = 1029;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 123, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 1026;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 1031;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 123, this._ctx);
                    }
                    this.state = 1032;
                    this.expression();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectDeclaration() {
        let localctx = new ObjectDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 64, KotlinParser.RULE_objectDeclaration);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1036;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === KotlinParser.AT || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (KotlinParser.AT_FIELD - 99)) | (1 << (KotlinParser.AT_PROPERTY - 99)) | (1 << (KotlinParser.AT_GET - 99)) | (1 << (KotlinParser.AT_SET - 99)) | (1 << (KotlinParser.AT_RECEIVER - 99)) | (1 << (KotlinParser.AT_PARAM - 99)) | (1 << (KotlinParser.AT_SETPARAM - 99)) | (1 << (KotlinParser.AT_DELEGATE - 99)) | (1 << (KotlinParser.PUBLIC - 99)) | (1 << (KotlinParser.PRIVATE - 99)) | (1 << (KotlinParser.PROTECTED - 99)) | (1 << (KotlinParser.INTERNAL - 99)) | (1 << (KotlinParser.ENUM - 99)) | (1 << (KotlinParser.SEALED - 99)) | (1 << (KotlinParser.ANNOTATION - 99)) | (1 << (KotlinParser.DATA - 99)) | (1 << (KotlinParser.INNER - 99)) | (1 << (KotlinParser.TAILREC - 99)) | (1 << (KotlinParser.OPERATOR - 99)) | (1 << (KotlinParser.INLINE - 99)) | (1 << (KotlinParser.INFIX - 99)) | (1 << (KotlinParser.EXTERNAL - 99)) | (1 << (KotlinParser.SUSPEND - 99)) | (1 << (KotlinParser.OVERRIDE - 99)) | (1 << (KotlinParser.ABSTRACT - 99)) | (1 << (KotlinParser.FINAL - 99)) | (1 << (KotlinParser.OPEN - 99)) | (1 << (KotlinParser.CONST - 99)) | (1 << (KotlinParser.LATEINIT - 99)) | (1 << (KotlinParser.VARARG - 99)) | (1 << (KotlinParser.NOINLINE - 99)) | (1 << (KotlinParser.CROSSINLINE - 99)))) !== 0) || _la === KotlinParser.EXPECT || _la === KotlinParser.ACTUAL) {
                this.state = 1035;
                this.modifiers();
            }
            this.state = 1038;
            this.match(KotlinParser.OBJECT);
            this.state = 1042;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 1039;
                this.match(KotlinParser.NL);
                this.state = 1044;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1045;
            this.simpleIdentifier();
            this.state = 1060;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 129, this._ctx);
            if (la_ === 1) {
                this.state = 1049;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 1046;
                    this.match(KotlinParser.NL);
                    this.state = 1051;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1052;
                this.match(KotlinParser.COLON);
                this.state = 1056;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input, 128, this._ctx);
                while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        this.state = 1053;
                        this.match(KotlinParser.NL);
                    }
                    this.state = 1058;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input, 128, this._ctx);
                }
                this.state = 1059;
                this.delegationSpecifiers();
            }
            this.state = 1069;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 131, this._ctx);
            if (la_ === 1) {
                this.state = 1065;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 1062;
                    this.match(KotlinParser.NL);
                    this.state = 1067;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1068;
                this.classBody();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    companionObject() {
        let localctx = new CompanionObjectContext(this, this._ctx, this.state);
        this.enterRule(localctx, 66, KotlinParser.RULE_companionObject);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1072;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === KotlinParser.AT || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (KotlinParser.AT_FIELD - 99)) | (1 << (KotlinParser.AT_PROPERTY - 99)) | (1 << (KotlinParser.AT_GET - 99)) | (1 << (KotlinParser.AT_SET - 99)) | (1 << (KotlinParser.AT_RECEIVER - 99)) | (1 << (KotlinParser.AT_PARAM - 99)) | (1 << (KotlinParser.AT_SETPARAM - 99)) | (1 << (KotlinParser.AT_DELEGATE - 99)) | (1 << (KotlinParser.PUBLIC - 99)) | (1 << (KotlinParser.PRIVATE - 99)) | (1 << (KotlinParser.PROTECTED - 99)) | (1 << (KotlinParser.INTERNAL - 99)) | (1 << (KotlinParser.ENUM - 99)) | (1 << (KotlinParser.SEALED - 99)) | (1 << (KotlinParser.ANNOTATION - 99)) | (1 << (KotlinParser.DATA - 99)) | (1 << (KotlinParser.INNER - 99)) | (1 << (KotlinParser.TAILREC - 99)) | (1 << (KotlinParser.OPERATOR - 99)) | (1 << (KotlinParser.INLINE - 99)) | (1 << (KotlinParser.INFIX - 99)) | (1 << (KotlinParser.EXTERNAL - 99)) | (1 << (KotlinParser.SUSPEND - 99)) | (1 << (KotlinParser.OVERRIDE - 99)) | (1 << (KotlinParser.ABSTRACT - 99)) | (1 << (KotlinParser.FINAL - 99)) | (1 << (KotlinParser.OPEN - 99)) | (1 << (KotlinParser.CONST - 99)) | (1 << (KotlinParser.LATEINIT - 99)) | (1 << (KotlinParser.VARARG - 99)) | (1 << (KotlinParser.NOINLINE - 99)) | (1 << (KotlinParser.CROSSINLINE - 99)))) !== 0) || _la === KotlinParser.EXPECT || _la === KotlinParser.ACTUAL) {
                this.state = 1071;
                this.modifiers();
            }
            this.state = 1074;
            this.match(KotlinParser.COMPANION);
            this.state = 1078;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 1075;
                this.match(KotlinParser.NL);
                this.state = 1080;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1081;
            this.match(KotlinParser.OBJECT);
            this.state = 1089;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 135, this._ctx);
            if (la_ === 1) {
                this.state = 1085;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 1082;
                    this.match(KotlinParser.NL);
                    this.state = 1087;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1088;
                this.simpleIdentifier();
            }
            this.state = 1105;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 138, this._ctx);
            if (la_ === 1) {
                this.state = 1094;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 1091;
                    this.match(KotlinParser.NL);
                    this.state = 1096;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1097;
                this.match(KotlinParser.COLON);
                this.state = 1101;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input, 137, this._ctx);
                while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        this.state = 1098;
                        this.match(KotlinParser.NL);
                    }
                    this.state = 1103;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input, 137, this._ctx);
                }
                this.state = 1104;
                this.delegationSpecifiers();
            }
            this.state = 1114;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 140, this._ctx);
            if (la_ === 1) {
                this.state = 1110;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 1107;
                    this.match(KotlinParser.NL);
                    this.state = 1112;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1113;
                this.classBody();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    propertyDeclaration() {
        let localctx = new PropertyDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 68, KotlinParser.RULE_propertyDeclaration);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1117;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === KotlinParser.AT || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (KotlinParser.AT_FIELD - 99)) | (1 << (KotlinParser.AT_PROPERTY - 99)) | (1 << (KotlinParser.AT_GET - 99)) | (1 << (KotlinParser.AT_SET - 99)) | (1 << (KotlinParser.AT_RECEIVER - 99)) | (1 << (KotlinParser.AT_PARAM - 99)) | (1 << (KotlinParser.AT_SETPARAM - 99)) | (1 << (KotlinParser.AT_DELEGATE - 99)) | (1 << (KotlinParser.PUBLIC - 99)) | (1 << (KotlinParser.PRIVATE - 99)) | (1 << (KotlinParser.PROTECTED - 99)) | (1 << (KotlinParser.INTERNAL - 99)) | (1 << (KotlinParser.ENUM - 99)) | (1 << (KotlinParser.SEALED - 99)) | (1 << (KotlinParser.ANNOTATION - 99)) | (1 << (KotlinParser.DATA - 99)) | (1 << (KotlinParser.INNER - 99)) | (1 << (KotlinParser.TAILREC - 99)) | (1 << (KotlinParser.OPERATOR - 99)) | (1 << (KotlinParser.INLINE - 99)) | (1 << (KotlinParser.INFIX - 99)) | (1 << (KotlinParser.EXTERNAL - 99)) | (1 << (KotlinParser.SUSPEND - 99)) | (1 << (KotlinParser.OVERRIDE - 99)) | (1 << (KotlinParser.ABSTRACT - 99)) | (1 << (KotlinParser.FINAL - 99)) | (1 << (KotlinParser.OPEN - 99)) | (1 << (KotlinParser.CONST - 99)) | (1 << (KotlinParser.LATEINIT - 99)) | (1 << (KotlinParser.VARARG - 99)) | (1 << (KotlinParser.NOINLINE - 99)) | (1 << (KotlinParser.CROSSINLINE - 99)))) !== 0) || _la === KotlinParser.EXPECT || _la === KotlinParser.ACTUAL) {
                this.state = 1116;
                this.modifiers();
            }
            this.state = 1119;
            _la = this._input.LA(1);
            if (!(_la === KotlinParser.VAL || _la === KotlinParser.VAR)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1127;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 143, this._ctx);
            if (la_ === 1) {
                this.state = 1123;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 1120;
                    this.match(KotlinParser.NL);
                    this.state = 1125;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1126;
                this.typeParameters();
            }
            this.state = 1144;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 146, this._ctx);
            if (la_ === 1) {
                this.state = 1132;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 1129;
                    this.match(KotlinParser.NL);
                    this.state = 1134;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1135;
                this.receiverType();
                this.state = 1139;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 1136;
                    this.match(KotlinParser.NL);
                    this.state = 1141;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1142;
                this.match(KotlinParser.DOT);
            }
            this.state = 1149;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 147, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1146;
                    this.match(KotlinParser.NL);
                }
                this.state = 1151;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 147, this._ctx);
            }
            this.state = 1154;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.LPAREN:
                    this.state = 1152;
                    this.multiVariableDeclaration();
                    break;
                case KotlinParser.NL:
                case KotlinParser.AT:
                case KotlinParser.IMPORT:
                case KotlinParser.CONSTRUCTOR:
                case KotlinParser.BY:
                case KotlinParser.COMPANION:
                case KotlinParser.INIT:
                case KotlinParser.WHERE:
                case KotlinParser.CATCH:
                case KotlinParser.FINALLY:
                case KotlinParser.OUT:
                case KotlinParser.GETTER:
                case KotlinParser.SETTER:
                case KotlinParser.DYNAMIC:
                case KotlinParser.AT_FIELD:
                case KotlinParser.AT_PROPERTY:
                case KotlinParser.AT_GET:
                case KotlinParser.AT_SET:
                case KotlinParser.AT_RECEIVER:
                case KotlinParser.AT_PARAM:
                case KotlinParser.AT_SETPARAM:
                case KotlinParser.AT_DELEGATE:
                case KotlinParser.PUBLIC:
                case KotlinParser.PRIVATE:
                case KotlinParser.PROTECTED:
                case KotlinParser.INTERNAL:
                case KotlinParser.ENUM:
                case KotlinParser.SEALED:
                case KotlinParser.ANNOTATION:
                case KotlinParser.DATA:
                case KotlinParser.INNER:
                case KotlinParser.TAILREC:
                case KotlinParser.OPERATOR:
                case KotlinParser.INLINE:
                case KotlinParser.INFIX:
                case KotlinParser.EXTERNAL:
                case KotlinParser.SUSPEND:
                case KotlinParser.OVERRIDE:
                case KotlinParser.ABSTRACT:
                case KotlinParser.FINAL:
                case KotlinParser.OPEN:
                case KotlinParser.CONST:
                case KotlinParser.LATEINIT:
                case KotlinParser.VARARG:
                case KotlinParser.NOINLINE:
                case KotlinParser.CROSSINLINE:
                case KotlinParser.REIFIED:
                case KotlinParser.EXPECT:
                case KotlinParser.ACTUAL:
                case KotlinParser.Identifier:
                    this.state = 1153;
                    this.variableDeclaration();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this.state = 1163;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 150, this._ctx);
            if (la_ === 1) {
                this.state = 1159;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 1156;
                    this.match(KotlinParser.NL);
                    this.state = 1161;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1162;
                this.typeConstraints();
            }
            this.state = 1182;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 154, this._ctx);
            if (la_ === 1) {
                this.state = 1168;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 1165;
                    this.match(KotlinParser.NL);
                    this.state = 1170;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1180;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case KotlinParser.ASSIGNMENT:
                        this.state = 1171;
                        this.match(KotlinParser.ASSIGNMENT);
                        this.state = 1175;
                        this._errHandler.sync(this);
                        var _alt = this._interp.adaptivePredict(this._input, 152, this._ctx);
                        while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                this.state = 1172;
                                this.match(KotlinParser.NL);
                            }
                            this.state = 1177;
                            this._errHandler.sync(this);
                            _alt = this._interp.adaptivePredict(this._input, 152, this._ctx);
                        }
                        this.state = 1178;
                        this.expression();
                        break;
                    case KotlinParser.BY:
                        this.state = 1179;
                        this.propertyDelegate();
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
            }
            this.state = 1190;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 156, this._ctx);
            if (la_ === 1) {
                this.state = 1185;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 1184;
                    this.match(KotlinParser.NL);
                    this.state = 1187;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === KotlinParser.NL);
                this.state = 1189;
                this.match(KotlinParser.SEMICOLON);
            }
            this.state = 1195;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 157, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1192;
                    this.match(KotlinParser.NL);
                }
                this.state = 1197;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 157, this._ctx);
            }
            this.state = 1228;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 166, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 1199;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 158, this._ctx);
                    if (la_ === 1) {
                        this.state = 1198;
                        this.getter();
                    }
                    this.state = 1211;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 161, this._ctx);
                    if (la_ === 1) {
                        this.state = 1204;
                        this._errHandler.sync(this);
                        var _alt = this._interp.adaptivePredict(this._input, 159, this._ctx);
                        while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                this.state = 1201;
                                this.match(KotlinParser.NL);
                            }
                            this.state = 1206;
                            this._errHandler.sync(this);
                            _alt = this._interp.adaptivePredict(this._input, 159, this._ctx);
                        }
                        this.state = 1208;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (((((_la - -1)) & ~0x1f) == 0 && ((1 << (_la - -1)) & ((1 << (KotlinParser.EOF - -1)) | (1 << (KotlinParser.NL - -1)) | (1 << (KotlinParser.SEMICOLON - -1)))) !== 0)) {
                            this.state = 1207;
                            this.semi();
                        }
                        this.state = 1210;
                        this.setter();
                    }
                    break;
                case 2:
                    this.state = 1214;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 162, this._ctx);
                    if (la_ === 1) {
                        this.state = 1213;
                        this.setter();
                    }
                    this.state = 1226;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 165, this._ctx);
                    if (la_ === 1) {
                        this.state = 1219;
                        this._errHandler.sync(this);
                        var _alt = this._interp.adaptivePredict(this._input, 163, this._ctx);
                        while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                this.state = 1216;
                                this.match(KotlinParser.NL);
                            }
                            this.state = 1221;
                            this._errHandler.sync(this);
                            _alt = this._interp.adaptivePredict(this._input, 163, this._ctx);
                        }
                        this.state = 1223;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (((((_la - -1)) & ~0x1f) == 0 && ((1 << (_la - -1)) & ((1 << (KotlinParser.EOF - -1)) | (1 << (KotlinParser.NL - -1)) | (1 << (KotlinParser.SEMICOLON - -1)))) !== 0)) {
                            this.state = 1222;
                            this.semi();
                        }
                        this.state = 1225;
                        this.getter();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    multiVariableDeclaration() {
        let localctx = new MultiVariableDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 70, KotlinParser.RULE_multiVariableDeclaration);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1230;
            this.match(KotlinParser.LPAREN);
            this.state = 1234;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 167, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1231;
                    this.match(KotlinParser.NL);
                }
                this.state = 1236;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 167, this._ctx);
            }
            this.state = 1237;
            this.variableDeclaration();
            this.state = 1254;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 170, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1241;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 1238;
                        this.match(KotlinParser.NL);
                        this.state = 1243;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1244;
                    this.match(KotlinParser.COMMA);
                    this.state = 1248;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 169, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 1245;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 1250;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 169, this._ctx);
                    }
                    this.state = 1251;
                    this.variableDeclaration();
                }
                this.state = 1256;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 170, this._ctx);
            }
            this.state = 1260;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 1257;
                this.match(KotlinParser.NL);
                this.state = 1262;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1263;
            this.match(KotlinParser.RPAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    variableDeclaration() {
        let localctx = new VariableDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 72, KotlinParser.RULE_variableDeclaration);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1268;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.AT || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (KotlinParser.AT_FIELD - 99)) | (1 << (KotlinParser.AT_PROPERTY - 99)) | (1 << (KotlinParser.AT_GET - 99)) | (1 << (KotlinParser.AT_SET - 99)) | (1 << (KotlinParser.AT_RECEIVER - 99)) | (1 << (KotlinParser.AT_PARAM - 99)) | (1 << (KotlinParser.AT_SETPARAM - 99)) | (1 << (KotlinParser.AT_DELEGATE - 99)))) !== 0)) {
                this.state = 1265;
                this.annotation();
                this.state = 1270;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1274;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 1271;
                this.match(KotlinParser.NL);
                this.state = 1276;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1277;
            this.simpleIdentifier();
            this.state = 1292;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 176, this._ctx);
            if (la_ === 1) {
                this.state = 1281;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 1278;
                    this.match(KotlinParser.NL);
                    this.state = 1283;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1284;
                this.match(KotlinParser.COLON);
                this.state = 1288;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 1285;
                    this.match(KotlinParser.NL);
                    this.state = 1290;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1291;
                this.type_();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    propertyDelegate() {
        let localctx = new PropertyDelegateContext(this, this._ctx, this.state);
        this.enterRule(localctx, 74, KotlinParser.RULE_propertyDelegate);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1294;
            this.match(KotlinParser.BY);
            this.state = 1298;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 177, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1295;
                    this.match(KotlinParser.NL);
                }
                this.state = 1300;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 177, this._ctx);
            }
            this.state = 1301;
            this.expression();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    getter() {
        let localctx = new GetterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 76, KotlinParser.RULE_getter);
        var _la = 0; // Token type
        try {
            this.state = 1348;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 186, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1304;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === KotlinParser.AT || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (KotlinParser.AT_FIELD - 99)) | (1 << (KotlinParser.AT_PROPERTY - 99)) | (1 << (KotlinParser.AT_GET - 99)) | (1 << (KotlinParser.AT_SET - 99)) | (1 << (KotlinParser.AT_RECEIVER - 99)) | (1 << (KotlinParser.AT_PARAM - 99)) | (1 << (KotlinParser.AT_SETPARAM - 99)) | (1 << (KotlinParser.AT_DELEGATE - 99)) | (1 << (KotlinParser.PUBLIC - 99)) | (1 << (KotlinParser.PRIVATE - 99)) | (1 << (KotlinParser.PROTECTED - 99)) | (1 << (KotlinParser.INTERNAL - 99)) | (1 << (KotlinParser.ENUM - 99)) | (1 << (KotlinParser.SEALED - 99)) | (1 << (KotlinParser.ANNOTATION - 99)) | (1 << (KotlinParser.DATA - 99)) | (1 << (KotlinParser.INNER - 99)) | (1 << (KotlinParser.TAILREC - 99)) | (1 << (KotlinParser.OPERATOR - 99)) | (1 << (KotlinParser.INLINE - 99)) | (1 << (KotlinParser.INFIX - 99)) | (1 << (KotlinParser.EXTERNAL - 99)) | (1 << (KotlinParser.SUSPEND - 99)) | (1 << (KotlinParser.OVERRIDE - 99)) | (1 << (KotlinParser.ABSTRACT - 99)) | (1 << (KotlinParser.FINAL - 99)) | (1 << (KotlinParser.OPEN - 99)) | (1 << (KotlinParser.CONST - 99)) | (1 << (KotlinParser.LATEINIT - 99)) | (1 << (KotlinParser.VARARG - 99)) | (1 << (KotlinParser.NOINLINE - 99)) | (1 << (KotlinParser.CROSSINLINE - 99)))) !== 0) || _la === KotlinParser.EXPECT || _la === KotlinParser.ACTUAL) {
                        this.state = 1303;
                        this.modifiers();
                    }
                    this.state = 1306;
                    this.match(KotlinParser.GETTER);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1308;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === KotlinParser.AT || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (KotlinParser.AT_FIELD - 99)) | (1 << (KotlinParser.AT_PROPERTY - 99)) | (1 << (KotlinParser.AT_GET - 99)) | (1 << (KotlinParser.AT_SET - 99)) | (1 << (KotlinParser.AT_RECEIVER - 99)) | (1 << (KotlinParser.AT_PARAM - 99)) | (1 << (KotlinParser.AT_SETPARAM - 99)) | (1 << (KotlinParser.AT_DELEGATE - 99)) | (1 << (KotlinParser.PUBLIC - 99)) | (1 << (KotlinParser.PRIVATE - 99)) | (1 << (KotlinParser.PROTECTED - 99)) | (1 << (KotlinParser.INTERNAL - 99)) | (1 << (KotlinParser.ENUM - 99)) | (1 << (KotlinParser.SEALED - 99)) | (1 << (KotlinParser.ANNOTATION - 99)) | (1 << (KotlinParser.DATA - 99)) | (1 << (KotlinParser.INNER - 99)) | (1 << (KotlinParser.TAILREC - 99)) | (1 << (KotlinParser.OPERATOR - 99)) | (1 << (KotlinParser.INLINE - 99)) | (1 << (KotlinParser.INFIX - 99)) | (1 << (KotlinParser.EXTERNAL - 99)) | (1 << (KotlinParser.SUSPEND - 99)) | (1 << (KotlinParser.OVERRIDE - 99)) | (1 << (KotlinParser.ABSTRACT - 99)) | (1 << (KotlinParser.FINAL - 99)) | (1 << (KotlinParser.OPEN - 99)) | (1 << (KotlinParser.CONST - 99)) | (1 << (KotlinParser.LATEINIT - 99)) | (1 << (KotlinParser.VARARG - 99)) | (1 << (KotlinParser.NOINLINE - 99)) | (1 << (KotlinParser.CROSSINLINE - 99)))) !== 0) || _la === KotlinParser.EXPECT || _la === KotlinParser.ACTUAL) {
                        this.state = 1307;
                        this.modifiers();
                    }
                    this.state = 1310;
                    this.match(KotlinParser.GETTER);
                    this.state = 1314;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 1311;
                        this.match(KotlinParser.NL);
                        this.state = 1316;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1317;
                    this.match(KotlinParser.LPAREN);
                    this.state = 1321;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 1318;
                        this.match(KotlinParser.NL);
                        this.state = 1323;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1324;
                    this.match(KotlinParser.RPAREN);
                    this.state = 1339;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 184, this._ctx);
                    if (la_ === 1) {
                        this.state = 1328;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === KotlinParser.NL) {
                            this.state = 1325;
                            this.match(KotlinParser.NL);
                            this.state = 1330;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1331;
                        this.match(KotlinParser.COLON);
                        this.state = 1335;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === KotlinParser.NL) {
                            this.state = 1332;
                            this.match(KotlinParser.NL);
                            this.state = 1337;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1338;
                        this.type_();
                    }
                    this.state = 1344;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 1341;
                        this.match(KotlinParser.NL);
                        this.state = 1346;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1347;
                    this.functionBody();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    setter() {
        let localctx = new SetterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 78, KotlinParser.RULE_setter);
        var _la = 0; // Token type
        try {
            this.state = 1398;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 196, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1351;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === KotlinParser.AT || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (KotlinParser.AT_FIELD - 99)) | (1 << (KotlinParser.AT_PROPERTY - 99)) | (1 << (KotlinParser.AT_GET - 99)) | (1 << (KotlinParser.AT_SET - 99)) | (1 << (KotlinParser.AT_RECEIVER - 99)) | (1 << (KotlinParser.AT_PARAM - 99)) | (1 << (KotlinParser.AT_SETPARAM - 99)) | (1 << (KotlinParser.AT_DELEGATE - 99)) | (1 << (KotlinParser.PUBLIC - 99)) | (1 << (KotlinParser.PRIVATE - 99)) | (1 << (KotlinParser.PROTECTED - 99)) | (1 << (KotlinParser.INTERNAL - 99)) | (1 << (KotlinParser.ENUM - 99)) | (1 << (KotlinParser.SEALED - 99)) | (1 << (KotlinParser.ANNOTATION - 99)) | (1 << (KotlinParser.DATA - 99)) | (1 << (KotlinParser.INNER - 99)) | (1 << (KotlinParser.TAILREC - 99)) | (1 << (KotlinParser.OPERATOR - 99)) | (1 << (KotlinParser.INLINE - 99)) | (1 << (KotlinParser.INFIX - 99)) | (1 << (KotlinParser.EXTERNAL - 99)) | (1 << (KotlinParser.SUSPEND - 99)) | (1 << (KotlinParser.OVERRIDE - 99)) | (1 << (KotlinParser.ABSTRACT - 99)) | (1 << (KotlinParser.FINAL - 99)) | (1 << (KotlinParser.OPEN - 99)) | (1 << (KotlinParser.CONST - 99)) | (1 << (KotlinParser.LATEINIT - 99)) | (1 << (KotlinParser.VARARG - 99)) | (1 << (KotlinParser.NOINLINE - 99)) | (1 << (KotlinParser.CROSSINLINE - 99)))) !== 0) || _la === KotlinParser.EXPECT || _la === KotlinParser.ACTUAL) {
                        this.state = 1350;
                        this.modifiers();
                    }
                    this.state = 1353;
                    this.match(KotlinParser.SETTER);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1355;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === KotlinParser.AT || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (KotlinParser.AT_FIELD - 99)) | (1 << (KotlinParser.AT_PROPERTY - 99)) | (1 << (KotlinParser.AT_GET - 99)) | (1 << (KotlinParser.AT_SET - 99)) | (1 << (KotlinParser.AT_RECEIVER - 99)) | (1 << (KotlinParser.AT_PARAM - 99)) | (1 << (KotlinParser.AT_SETPARAM - 99)) | (1 << (KotlinParser.AT_DELEGATE - 99)) | (1 << (KotlinParser.PUBLIC - 99)) | (1 << (KotlinParser.PRIVATE - 99)) | (1 << (KotlinParser.PROTECTED - 99)) | (1 << (KotlinParser.INTERNAL - 99)) | (1 << (KotlinParser.ENUM - 99)) | (1 << (KotlinParser.SEALED - 99)) | (1 << (KotlinParser.ANNOTATION - 99)) | (1 << (KotlinParser.DATA - 99)) | (1 << (KotlinParser.INNER - 99)) | (1 << (KotlinParser.TAILREC - 99)) | (1 << (KotlinParser.OPERATOR - 99)) | (1 << (KotlinParser.INLINE - 99)) | (1 << (KotlinParser.INFIX - 99)) | (1 << (KotlinParser.EXTERNAL - 99)) | (1 << (KotlinParser.SUSPEND - 99)) | (1 << (KotlinParser.OVERRIDE - 99)) | (1 << (KotlinParser.ABSTRACT - 99)) | (1 << (KotlinParser.FINAL - 99)) | (1 << (KotlinParser.OPEN - 99)) | (1 << (KotlinParser.CONST - 99)) | (1 << (KotlinParser.LATEINIT - 99)) | (1 << (KotlinParser.VARARG - 99)) | (1 << (KotlinParser.NOINLINE - 99)) | (1 << (KotlinParser.CROSSINLINE - 99)))) !== 0) || _la === KotlinParser.EXPECT || _la === KotlinParser.ACTUAL) {
                        this.state = 1354;
                        this.modifiers();
                    }
                    this.state = 1357;
                    this.match(KotlinParser.SETTER);
                    this.state = 1361;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 1358;
                        this.match(KotlinParser.NL);
                        this.state = 1363;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1364;
                    this.match(KotlinParser.LPAREN);
                    this.state = 1369;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 191, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 1367;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case KotlinParser.AT:
                                case KotlinParser.AT_FIELD:
                                case KotlinParser.AT_PROPERTY:
                                case KotlinParser.AT_GET:
                                case KotlinParser.AT_SET:
                                case KotlinParser.AT_RECEIVER:
                                case KotlinParser.AT_PARAM:
                                case KotlinParser.AT_SETPARAM:
                                case KotlinParser.AT_DELEGATE:
                                    this.state = 1365;
                                    this.annotation();
                                    break;
                                case KotlinParser.VARARG:
                                case KotlinParser.NOINLINE:
                                case KotlinParser.CROSSINLINE:
                                    this.state = 1366;
                                    this.parameterModifier();
                                    break;
                                default:
                                    throw new antlr4_1.default.error.NoViableAltException(this);
                            }
                        }
                        this.state = 1371;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 191, this._ctx);
                    }
                    this.state = 1372;
                    this.setterParameter();
                    this.state = 1373;
                    this.match(KotlinParser.RPAREN);
                    this.state = 1388;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 194, this._ctx);
                    if (la_ === 1) {
                        this.state = 1377;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === KotlinParser.NL) {
                            this.state = 1374;
                            this.match(KotlinParser.NL);
                            this.state = 1379;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1380;
                        this.match(KotlinParser.COLON);
                        this.state = 1384;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === KotlinParser.NL) {
                            this.state = 1381;
                            this.match(KotlinParser.NL);
                            this.state = 1386;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1387;
                        this.type_();
                    }
                    this.state = 1393;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 1390;
                        this.match(KotlinParser.NL);
                        this.state = 1395;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1396;
                    this.functionBody();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeAlias() {
        let localctx = new TypeAliasContext(this, this._ctx, this.state);
        this.enterRule(localctx, 80, KotlinParser.RULE_typeAlias);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1401;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === KotlinParser.AT || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (KotlinParser.AT_FIELD - 99)) | (1 << (KotlinParser.AT_PROPERTY - 99)) | (1 << (KotlinParser.AT_GET - 99)) | (1 << (KotlinParser.AT_SET - 99)) | (1 << (KotlinParser.AT_RECEIVER - 99)) | (1 << (KotlinParser.AT_PARAM - 99)) | (1 << (KotlinParser.AT_SETPARAM - 99)) | (1 << (KotlinParser.AT_DELEGATE - 99)) | (1 << (KotlinParser.PUBLIC - 99)) | (1 << (KotlinParser.PRIVATE - 99)) | (1 << (KotlinParser.PROTECTED - 99)) | (1 << (KotlinParser.INTERNAL - 99)) | (1 << (KotlinParser.ENUM - 99)) | (1 << (KotlinParser.SEALED - 99)) | (1 << (KotlinParser.ANNOTATION - 99)) | (1 << (KotlinParser.DATA - 99)) | (1 << (KotlinParser.INNER - 99)) | (1 << (KotlinParser.TAILREC - 99)) | (1 << (KotlinParser.OPERATOR - 99)) | (1 << (KotlinParser.INLINE - 99)) | (1 << (KotlinParser.INFIX - 99)) | (1 << (KotlinParser.EXTERNAL - 99)) | (1 << (KotlinParser.SUSPEND - 99)) | (1 << (KotlinParser.OVERRIDE - 99)) | (1 << (KotlinParser.ABSTRACT - 99)) | (1 << (KotlinParser.FINAL - 99)) | (1 << (KotlinParser.OPEN - 99)) | (1 << (KotlinParser.CONST - 99)) | (1 << (KotlinParser.LATEINIT - 99)) | (1 << (KotlinParser.VARARG - 99)) | (1 << (KotlinParser.NOINLINE - 99)) | (1 << (KotlinParser.CROSSINLINE - 99)))) !== 0) || _la === KotlinParser.EXPECT || _la === KotlinParser.ACTUAL) {
                this.state = 1400;
                this.modifiers();
            }
            this.state = 1403;
            this.match(KotlinParser.TYPE_ALIAS);
            this.state = 1407;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 1404;
                this.match(KotlinParser.NL);
                this.state = 1409;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1410;
            this.simpleIdentifier();
            this.state = 1418;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 200, this._ctx);
            if (la_ === 1) {
                this.state = 1414;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 1411;
                    this.match(KotlinParser.NL);
                    this.state = 1416;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1417;
                this.typeParameters();
            }
            this.state = 1423;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 1420;
                this.match(KotlinParser.NL);
                this.state = 1425;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1426;
            this.match(KotlinParser.ASSIGNMENT);
            this.state = 1430;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 1427;
                this.match(KotlinParser.NL);
                this.state = 1432;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1433;
            this.type_();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeParameters() {
        let localctx = new TypeParametersContext(this, this._ctx, this.state);
        this.enterRule(localctx, 82, KotlinParser.RULE_typeParameters);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1435;
            this.match(KotlinParser.LANGLE);
            this.state = 1439;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 203, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1436;
                    this.match(KotlinParser.NL);
                }
                this.state = 1441;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 203, this._ctx);
            }
            this.state = 1442;
            this.typeParameter();
            this.state = 1459;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 206, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1446;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 1443;
                        this.match(KotlinParser.NL);
                        this.state = 1448;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1449;
                    this.match(KotlinParser.COMMA);
                    this.state = 1453;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 205, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 1450;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 1455;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 205, this._ctx);
                    }
                    this.state = 1456;
                    this.typeParameter();
                }
                this.state = 1461;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 206, this._ctx);
            }
            this.state = 1465;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 1462;
                this.match(KotlinParser.NL);
                this.state = 1467;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1469;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === KotlinParser.COMMA) {
                this.state = 1468;
                this.match(KotlinParser.COMMA);
            }
            this.state = 1471;
            this.match(KotlinParser.RANGLE);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeParameter() {
        let localctx = new TypeParameterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 84, KotlinParser.RULE_typeParameter);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1474;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 209, this._ctx);
            if (la_ === 1) {
                this.state = 1473;
                this.typeParameterModifiers();
            }
            this.state = 1479;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 1476;
                this.match(KotlinParser.NL);
                this.state = 1481;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1482;
            this.simpleIdentifier();
            this.state = 1497;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 213, this._ctx);
            if (la_ === 1) {
                this.state = 1486;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 1483;
                    this.match(KotlinParser.NL);
                    this.state = 1488;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1489;
                this.match(KotlinParser.COLON);
                this.state = 1493;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 1490;
                    this.match(KotlinParser.NL);
                    this.state = 1495;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1496;
                this.type_();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeParameterModifiers() {
        let localctx = new TypeParameterModifiersContext(this, this._ctx, this.state);
        this.enterRule(localctx, 86, KotlinParser.RULE_typeParameterModifiers);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1500;
            this._errHandler.sync(this);
            var _alt = 1;
            do {
                switch (_alt) {
                    case 1:
                        this.state = 1499;
                        this.typeParameterModifier();
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 1502;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 214, this._ctx);
            } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeParameterModifier() {
        let localctx = new TypeParameterModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 88, KotlinParser.RULE_typeParameterModifier);
        try {
            this.state = 1519;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.REIFIED:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1504;
                    this.reificationModifier();
                    this.state = 1508;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 215, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 1505;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 1510;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 215, this._ctx);
                    }
                    break;
                case KotlinParser.IN:
                case KotlinParser.OUT:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1511;
                    this.varianceModifier();
                    this.state = 1515;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 216, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 1512;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 1517;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 216, this._ctx);
                    }
                    break;
                case KotlinParser.AT:
                case KotlinParser.AT_FIELD:
                case KotlinParser.AT_PROPERTY:
                case KotlinParser.AT_GET:
                case KotlinParser.AT_SET:
                case KotlinParser.AT_RECEIVER:
                case KotlinParser.AT_PARAM:
                case KotlinParser.AT_SETPARAM:
                case KotlinParser.AT_DELEGATE:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1518;
                    this.annotation();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    type_() {
        let localctx = new Type_Context(this, this._ctx, this.state);
        this.enterRule(localctx, 90, KotlinParser.RULE_type_);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1522;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 218, this._ctx);
            if (la_ === 1) {
                this.state = 1521;
                this.typeModifiers();
            }
            this.state = 1528;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 219, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 1524;
                    this.parenthesizedType();
                    break;
                case 2:
                    this.state = 1525;
                    this.nullableType();
                    break;
                case 3:
                    this.state = 1526;
                    this.typeReference();
                    break;
                case 4:
                    this.state = 1527;
                    this.functionType();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeModifiers() {
        let localctx = new TypeModifiersContext(this, this._ctx, this.state);
        this.enterRule(localctx, 92, KotlinParser.RULE_typeModifiers);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1531;
            this._errHandler.sync(this);
            var _alt = 1;
            do {
                switch (_alt) {
                    case 1:
                        this.state = 1530;
                        this.typeModifier();
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 1533;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 220, this._ctx);
            } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeModifier() {
        let localctx = new TypeModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 94, KotlinParser.RULE_typeModifier);
        var _la = 0; // Token type
        try {
            this.state = 1543;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.AT:
                case KotlinParser.AT_FIELD:
                case KotlinParser.AT_PROPERTY:
                case KotlinParser.AT_GET:
                case KotlinParser.AT_SET:
                case KotlinParser.AT_RECEIVER:
                case KotlinParser.AT_PARAM:
                case KotlinParser.AT_SETPARAM:
                case KotlinParser.AT_DELEGATE:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1535;
                    this.annotation();
                    break;
                case KotlinParser.SUSPEND:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1536;
                    this.match(KotlinParser.SUSPEND);
                    this.state = 1540;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 1537;
                        this.match(KotlinParser.NL);
                        this.state = 1542;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parenthesizedType() {
        let localctx = new ParenthesizedTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 96, KotlinParser.RULE_parenthesizedType);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1545;
            this.match(KotlinParser.LPAREN);
            this.state = 1549;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 1546;
                this.match(KotlinParser.NL);
                this.state = 1551;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1552;
            this.type_();
            this.state = 1556;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 1553;
                this.match(KotlinParser.NL);
                this.state = 1558;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1559;
            this.match(KotlinParser.RPAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    nullableType() {
        let localctx = new NullableTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 98, KotlinParser.RULE_nullableType);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1563;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.IMPORT:
                case KotlinParser.CONSTRUCTOR:
                case KotlinParser.BY:
                case KotlinParser.COMPANION:
                case KotlinParser.INIT:
                case KotlinParser.WHERE:
                case KotlinParser.CATCH:
                case KotlinParser.FINALLY:
                case KotlinParser.OUT:
                case KotlinParser.GETTER:
                case KotlinParser.SETTER:
                case KotlinParser.DYNAMIC:
                case KotlinParser.PUBLIC:
                case KotlinParser.PRIVATE:
                case KotlinParser.PROTECTED:
                case KotlinParser.INTERNAL:
                case KotlinParser.ENUM:
                case KotlinParser.SEALED:
                case KotlinParser.ANNOTATION:
                case KotlinParser.DATA:
                case KotlinParser.INNER:
                case KotlinParser.TAILREC:
                case KotlinParser.OPERATOR:
                case KotlinParser.INLINE:
                case KotlinParser.INFIX:
                case KotlinParser.EXTERNAL:
                case KotlinParser.SUSPEND:
                case KotlinParser.OVERRIDE:
                case KotlinParser.ABSTRACT:
                case KotlinParser.FINAL:
                case KotlinParser.OPEN:
                case KotlinParser.CONST:
                case KotlinParser.LATEINIT:
                case KotlinParser.VARARG:
                case KotlinParser.NOINLINE:
                case KotlinParser.CROSSINLINE:
                case KotlinParser.REIFIED:
                case KotlinParser.EXPECT:
                case KotlinParser.ACTUAL:
                case KotlinParser.Identifier:
                    this.state = 1561;
                    this.typeReference();
                    break;
                case KotlinParser.LPAREN:
                    this.state = 1562;
                    this.parenthesizedType();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this.state = 1568;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 1565;
                this.match(KotlinParser.NL);
                this.state = 1570;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1572;
            this._errHandler.sync(this);
            var _alt = 1;
            do {
                switch (_alt) {
                    case 1:
                        this.state = 1571;
                        this.quest();
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 1574;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 227, this._ctx);
            } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeReference() {
        let localctx = new TypeReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 100, KotlinParser.RULE_typeReference);
        try {
            this.state = 1578;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 228, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1576;
                    this.userType();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1577;
                    this.match(KotlinParser.DYNAMIC);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    functionType() {
        let localctx = new FunctionTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 102, KotlinParser.RULE_functionType);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1594;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 231, this._ctx);
            if (la_ === 1) {
                this.state = 1580;
                this.receiverType();
                this.state = 1584;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 1581;
                    this.match(KotlinParser.NL);
                    this.state = 1586;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1587;
                this.match(KotlinParser.DOT);
                this.state = 1591;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 1588;
                    this.match(KotlinParser.NL);
                    this.state = 1593;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
            this.state = 1596;
            this.functionTypeParameters();
            this.state = 1600;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 1597;
                this.match(KotlinParser.NL);
                this.state = 1602;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1603;
            this.match(KotlinParser.ARROW);
            this.state = 1607;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 1604;
                this.match(KotlinParser.NL);
                this.state = 1609;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1610;
            this.type_();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    receiverType() {
        let localctx = new ReceiverTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 104, KotlinParser.RULE_receiverType);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1613;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 234, this._ctx);
            if (la_ === 1) {
                this.state = 1612;
                this.typeModifiers();
            }
            this.state = 1618;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 235, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 1615;
                    this.parenthesizedType();
                    break;
                case 2:
                    this.state = 1616;
                    this.nullableType();
                    break;
                case 3:
                    this.state = 1617;
                    this.typeReference();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    userType() {
        let localctx = new UserTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 106, KotlinParser.RULE_userType);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1620;
            this.simpleUserType();
            this.state = 1637;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 238, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1624;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 1621;
                        this.match(KotlinParser.NL);
                        this.state = 1626;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1627;
                    this.match(KotlinParser.DOT);
                    this.state = 1631;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 1628;
                        this.match(KotlinParser.NL);
                        this.state = 1633;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1634;
                    this.simpleUserType();
                }
                this.state = 1639;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 238, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parenthesizedUserType() {
        let localctx = new ParenthesizedUserTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 108, KotlinParser.RULE_parenthesizedUserType);
        var _la = 0; // Token type
        try {
            this.state = 1672;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 243, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1640;
                    this.match(KotlinParser.LPAREN);
                    this.state = 1644;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 1641;
                        this.match(KotlinParser.NL);
                        this.state = 1646;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1647;
                    this.userType();
                    this.state = 1651;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 1648;
                        this.match(KotlinParser.NL);
                        this.state = 1653;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1654;
                    this.match(KotlinParser.RPAREN);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1656;
                    this.match(KotlinParser.LPAREN);
                    this.state = 1660;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 1657;
                        this.match(KotlinParser.NL);
                        this.state = 1662;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1663;
                    this.parenthesizedUserType();
                    this.state = 1667;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 1664;
                        this.match(KotlinParser.NL);
                        this.state = 1669;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1670;
                    this.match(KotlinParser.RPAREN);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    simpleUserType() {
        let localctx = new SimpleUserTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 110, KotlinParser.RULE_simpleUserType);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1674;
            this.simpleIdentifier();
            this.state = 1682;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 245, this._ctx);
            if (la_ === 1) {
                this.state = 1678;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 1675;
                    this.match(KotlinParser.NL);
                    this.state = 1680;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1681;
                this.typeArguments();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    functionTypeParameters() {
        let localctx = new FunctionTypeParametersContext(this, this._ctx, this.state);
        this.enterRule(localctx, 112, KotlinParser.RULE_functionTypeParameters);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1684;
            this.match(KotlinParser.LPAREN);
            this.state = 1688;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 246, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1685;
                    this.match(KotlinParser.NL);
                }
                this.state = 1690;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 246, this._ctx);
            }
            this.state = 1693;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 247, this._ctx);
            if (la_ === 1) {
                this.state = 1691;
                this.parameter();
            }
            else if (la_ === 2) {
                this.state = 1692;
                this.type_();
            }
            this.state = 1714;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 251, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1698;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 1695;
                        this.match(KotlinParser.NL);
                        this.state = 1700;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1701;
                    this.match(KotlinParser.COMMA);
                    this.state = 1705;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 1702;
                        this.match(KotlinParser.NL);
                        this.state = 1707;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1710;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 250, this._ctx);
                    switch (la_) {
                        case 1:
                            this.state = 1708;
                            this.parameter();
                            break;
                        case 2:
                            this.state = 1709;
                            this.type_();
                            break;
                    }
                }
                this.state = 1716;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 251, this._ctx);
            }
            this.state = 1720;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 1717;
                this.match(KotlinParser.NL);
                this.state = 1722;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1723;
            this.match(KotlinParser.RPAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeConstraints() {
        let localctx = new TypeConstraintsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 114, KotlinParser.RULE_typeConstraints);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1725;
            this.match(KotlinParser.WHERE);
            this.state = 1729;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 1726;
                this.match(KotlinParser.NL);
                this.state = 1731;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1732;
            this.typeConstraint();
            this.state = 1749;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 256, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1736;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 1733;
                        this.match(KotlinParser.NL);
                        this.state = 1738;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1739;
                    this.match(KotlinParser.COMMA);
                    this.state = 1743;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 1740;
                        this.match(KotlinParser.NL);
                        this.state = 1745;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1746;
                    this.typeConstraint();
                }
                this.state = 1751;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 256, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeConstraint() {
        let localctx = new TypeConstraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 116, KotlinParser.RULE_typeConstraint);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1755;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.AT || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (KotlinParser.AT_FIELD - 99)) | (1 << (KotlinParser.AT_PROPERTY - 99)) | (1 << (KotlinParser.AT_GET - 99)) | (1 << (KotlinParser.AT_SET - 99)) | (1 << (KotlinParser.AT_RECEIVER - 99)) | (1 << (KotlinParser.AT_PARAM - 99)) | (1 << (KotlinParser.AT_SETPARAM - 99)) | (1 << (KotlinParser.AT_DELEGATE - 99)))) !== 0)) {
                this.state = 1752;
                this.annotation();
                this.state = 1757;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1758;
            this.simpleIdentifier();
            this.state = 1762;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 1759;
                this.match(KotlinParser.NL);
                this.state = 1764;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1765;
            this.match(KotlinParser.COLON);
            this.state = 1769;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 1766;
                this.match(KotlinParser.NL);
                this.state = 1771;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1772;
            this.type_();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    block() {
        let localctx = new BlockContext(this, this._ctx, this.state);
        this.enterRule(localctx, 118, KotlinParser.RULE_block);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1774;
            this.match(KotlinParser.LCURL);
            this.state = 1778;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 260, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1775;
                    this.match(KotlinParser.NL);
                }
                this.state = 1780;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 260, this._ctx);
            }
            this.state = 1781;
            this.statements();
            this.state = 1785;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 1782;
                this.match(KotlinParser.NL);
                this.state = 1787;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1788;
            this.match(KotlinParser.RCURL);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    statements() {
        let localctx = new StatementsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 120, KotlinParser.RULE_statements);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1805;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 265, this._ctx);
            if (la_ === 1) {
                this.state = 1790;
                this.statement();
                this.state = 1799;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input, 263, this._ctx);
                while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        this.state = 1792;
                        this._errHandler.sync(this);
                        var _alt = 1;
                        do {
                            switch (_alt) {
                                case 1:
                                    this.state = 1791;
                                    _la = this._input.LA(1);
                                    if (!(_la === KotlinParser.NL || _la === KotlinParser.SEMICOLON)) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                    break;
                                default:
                                    throw new antlr4_1.default.error.NoViableAltException(this);
                            }
                            this.state = 1794;
                            this._errHandler.sync(this);
                            _alt = this._interp.adaptivePredict(this._input, 262, this._ctx);
                        } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
                        this.state = 1796;
                        this.statement();
                    }
                    this.state = 1801;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input, 263, this._ctx);
                }
                this.state = 1803;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 264, this._ctx);
                if (la_ === 1) {
                    this.state = 1802;
                    this.semis();
                }
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    statement() {
        let localctx = new StatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 122, KotlinParser.RULE_statement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1811;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 267, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1809;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case KotlinParser.IdentifierAt:
                            this.state = 1807;
                            this.label();
                            break;
                        case KotlinParser.AT:
                        case KotlinParser.AT_FIELD:
                        case KotlinParser.AT_PROPERTY:
                        case KotlinParser.AT_GET:
                        case KotlinParser.AT_SET:
                        case KotlinParser.AT_RECEIVER:
                        case KotlinParser.AT_PARAM:
                        case KotlinParser.AT_SETPARAM:
                        case KotlinParser.AT_DELEGATE:
                            this.state = 1808;
                            this.annotation();
                            break;
                        default:
                            throw new antlr4_1.default.error.NoViableAltException(this);
                    }
                }
                this.state = 1813;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 267, this._ctx);
            }
            this.state = 1818;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 268, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 1814;
                    this.declaration();
                    break;
                case 2:
                    this.state = 1815;
                    this.assignment();
                    break;
                case 3:
                    this.state = 1816;
                    this.loopStatement();
                    break;
                case 4:
                    this.state = 1817;
                    this.expression();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    declaration() {
        let localctx = new DeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 124, KotlinParser.RULE_declaration);
        try {
            this.state = 1825;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 269, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1820;
                    this.classDeclaration();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1821;
                    this.objectDeclaration();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1822;
                    this.functionDeclaration();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 1823;
                    this.propertyDeclaration();
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 1824;
                    this.typeAlias();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    assignment() {
        let localctx = new AssignmentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 126, KotlinParser.RULE_assignment);
        try {
            this.state = 1847;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 272, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1827;
                    this.directlyAssignableExpression();
                    this.state = 1828;
                    this.match(KotlinParser.ASSIGNMENT);
                    this.state = 1832;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 270, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 1829;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 1834;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 270, this._ctx);
                    }
                    this.state = 1835;
                    this.expression();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1837;
                    this.assignableExpression();
                    this.state = 1838;
                    this.assignmentAndOperator();
                    this.state = 1842;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 271, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 1839;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 1844;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 271, this._ctx);
                    }
                    this.state = 1845;
                    this.expression();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    expression() {
        let localctx = new ExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 128, KotlinParser.RULE_expression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1849;
            this.disjunction();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    disjunction() {
        let localctx = new DisjunctionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 130, KotlinParser.RULE_disjunction);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1851;
            this.conjunction();
            this.state = 1868;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 275, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1855;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 1852;
                        this.match(KotlinParser.NL);
                        this.state = 1857;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1858;
                    this.match(KotlinParser.DISJ);
                    this.state = 1862;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 274, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 1859;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 1864;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 274, this._ctx);
                    }
                    this.state = 1865;
                    this.conjunction();
                }
                this.state = 1870;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 275, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    conjunction() {
        let localctx = new ConjunctionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 132, KotlinParser.RULE_conjunction);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1871;
            this.equality();
            this.state = 1888;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 278, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1875;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 1872;
                        this.match(KotlinParser.NL);
                        this.state = 1877;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1878;
                    this.match(KotlinParser.CONJ);
                    this.state = 1882;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 277, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 1879;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 1884;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 277, this._ctx);
                    }
                    this.state = 1885;
                    this.equality();
                }
                this.state = 1890;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 278, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    equality() {
        let localctx = new EqualityContext(this, this._ctx, this.state);
        this.enterRule(localctx, 134, KotlinParser.RULE_equality);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1891;
            this.comparison();
            this.state = 1903;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 280, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1892;
                    this.equalityOperator();
                    this.state = 1896;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 279, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 1893;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 1898;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 279, this._ctx);
                    }
                    this.state = 1899;
                    this.comparison();
                }
                this.state = 1905;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 280, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    comparison() {
        let localctx = new ComparisonContext(this, this._ctx, this.state);
        this.enterRule(localctx, 136, KotlinParser.RULE_comparison);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1906;
            this.infixOperation();
            this.state = 1916;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 282, this._ctx);
            if (la_ === 1) {
                this.state = 1907;
                this.comparisonOperator();
                this.state = 1911;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input, 281, this._ctx);
                while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        this.state = 1908;
                        this.match(KotlinParser.NL);
                    }
                    this.state = 1913;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input, 281, this._ctx);
                }
                this.state = 1914;
                this.infixOperation();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    infixOperation() {
        let localctx = new InfixOperationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 138, KotlinParser.RULE_infixOperation);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1918;
            this.elvisExpression();
            this.state = 1939;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 286, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1937;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case KotlinParser.IN:
                        case KotlinParser.NOT_IN:
                            this.state = 1919;
                            this.inOperator();
                            this.state = 1923;
                            this._errHandler.sync(this);
                            var _alt = this._interp.adaptivePredict(this._input, 283, this._ctx);
                            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    this.state = 1920;
                                    this.match(KotlinParser.NL);
                                }
                                this.state = 1925;
                                this._errHandler.sync(this);
                                _alt = this._interp.adaptivePredict(this._input, 283, this._ctx);
                            }
                            this.state = 1926;
                            this.elvisExpression();
                            break;
                        case KotlinParser.IS:
                        case KotlinParser.NOT_IS:
                            this.state = 1928;
                            this.isOperator();
                            this.state = 1932;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === KotlinParser.NL) {
                                this.state = 1929;
                                this.match(KotlinParser.NL);
                                this.state = 1934;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 1935;
                            this.type_();
                            break;
                        default:
                            throw new antlr4_1.default.error.NoViableAltException(this);
                    }
                }
                this.state = 1941;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 286, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    elvisExpression() {
        let localctx = new ElvisExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 140, KotlinParser.RULE_elvisExpression);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1942;
            this.infixFunctionCall();
            this.state = 1960;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 289, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1946;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 1943;
                        this.match(KotlinParser.NL);
                        this.state = 1948;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1949;
                    this.elvis();
                    this.state = 1953;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 288, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 1950;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 1955;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 288, this._ctx);
                    }
                    this.state = 1956;
                    this.infixFunctionCall();
                }
                this.state = 1962;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 289, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    infixFunctionCall() {
        let localctx = new InfixFunctionCallContext(this, this._ctx, this.state);
        this.enterRule(localctx, 142, KotlinParser.RULE_infixFunctionCall);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1963;
            this.rangeExpression();
            this.state = 1975;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 291, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1964;
                    this.simpleIdentifier();
                    this.state = 1968;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 290, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 1965;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 1970;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 290, this._ctx);
                    }
                    this.state = 1971;
                    this.rangeExpression();
                }
                this.state = 1977;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 291, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    rangeExpression() {
        let localctx = new RangeExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 144, KotlinParser.RULE_rangeExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1978;
            this.additiveExpression();
            this.state = 1989;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 293, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1979;
                    this.match(KotlinParser.RANGE);
                    this.state = 1983;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 292, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 1980;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 1985;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 292, this._ctx);
                    }
                    this.state = 1986;
                    this.additiveExpression();
                }
                this.state = 1991;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 293, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    additiveExpression() {
        let localctx = new AdditiveExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 146, KotlinParser.RULE_additiveExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1992;
            this.multiplicativeExpression();
            this.state = 2004;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 295, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1993;
                    this.additiveOperator();
                    this.state = 1997;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 294, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 1994;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 1999;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 294, this._ctx);
                    }
                    this.state = 2000;
                    this.multiplicativeExpression();
                }
                this.state = 2006;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 295, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    multiplicativeExpression() {
        let localctx = new MultiplicativeExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 148, KotlinParser.RULE_multiplicativeExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2007;
            this.asExpression();
            this.state = 2019;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 297, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 2008;
                    this.multiplicativeOperator();
                    this.state = 2012;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 296, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 2009;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 2014;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 296, this._ctx);
                    }
                    this.state = 2015;
                    this.asExpression();
                }
                this.state = 2021;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 297, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    asExpression() {
        let localctx = new AsExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 150, KotlinParser.RULE_asExpression);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2022;
            this.prefixUnaryExpression();
            this.state = 2038;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 300, this._ctx);
            if (la_ === 1) {
                this.state = 2026;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 2023;
                    this.match(KotlinParser.NL);
                    this.state = 2028;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2029;
                this.asOperator();
                this.state = 2033;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 2030;
                    this.match(KotlinParser.NL);
                    this.state = 2035;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2036;
                this.type_();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    prefixUnaryExpression() {
        let localctx = new PrefixUnaryExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 152, KotlinParser.RULE_prefixUnaryExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2043;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 301, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 2040;
                    this.unaryPrefix();
                }
                this.state = 2045;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 301, this._ctx);
            }
            this.state = 2046;
            this.postfixUnaryExpression();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    unaryPrefix() {
        let localctx = new UnaryPrefixContext(this, this._ctx, this.state);
        this.enterRule(localctx, 154, KotlinParser.RULE_unaryPrefix);
        try {
            this.state = 2057;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.AT:
                case KotlinParser.AT_FIELD:
                case KotlinParser.AT_PROPERTY:
                case KotlinParser.AT_GET:
                case KotlinParser.AT_SET:
                case KotlinParser.AT_RECEIVER:
                case KotlinParser.AT_PARAM:
                case KotlinParser.AT_SETPARAM:
                case KotlinParser.AT_DELEGATE:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2048;
                    this.annotation();
                    break;
                case KotlinParser.IdentifierAt:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2049;
                    this.label();
                    break;
                case KotlinParser.ADD:
                case KotlinParser.SUB:
                case KotlinParser.INCR:
                case KotlinParser.DECR:
                case KotlinParser.EXCL_WS:
                case KotlinParser.EXCL_NO_WS:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2050;
                    this.prefixUnaryOperator();
                    this.state = 2054;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 302, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 2051;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 2056;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 302, this._ctx);
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    postfixUnaryExpression() {
        let localctx = new PostfixUnaryExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 156, KotlinParser.RULE_postfixUnaryExpression);
        try {
            this.state = 2066;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 305, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2059;
                    this.primaryExpression();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2060;
                    this.primaryExpression();
                    this.state = 2062;
                    this._errHandler.sync(this);
                    var _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                this.state = 2061;
                                this.postfixUnarySuffix();
                                break;
                            default:
                                throw new antlr4_1.default.error.NoViableAltException(this);
                        }
                        this.state = 2064;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 304, this._ctx);
                    } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    postfixUnarySuffix() {
        let localctx = new PostfixUnarySuffixContext(this, this._ctx, this.state);
        this.enterRule(localctx, 158, KotlinParser.RULE_postfixUnarySuffix);
        try {
            this.state = 2073;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 306, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2068;
                    this.postfixUnaryOperator();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2069;
                    this.typeArguments();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2070;
                    this.callSuffix();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 2071;
                    this.indexingSuffix();
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 2072;
                    this.navigationSuffix();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    directlyAssignableExpression() {
        let localctx = new DirectlyAssignableExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 160, KotlinParser.RULE_directlyAssignableExpression);
        try {
            this.state = 2079;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 307, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2075;
                    this.postfixUnaryExpression();
                    this.state = 2076;
                    this.assignableSuffix();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2078;
                    this.simpleIdentifier();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    assignableExpression() {
        let localctx = new AssignableExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 162, KotlinParser.RULE_assignableExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2081;
            this.prefixUnaryExpression();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    assignableSuffix() {
        let localctx = new AssignableSuffixContext(this, this._ctx, this.state);
        this.enterRule(localctx, 164, KotlinParser.RULE_assignableSuffix);
        try {
            this.state = 2086;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.LANGLE:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2083;
                    this.typeArguments();
                    break;
                case KotlinParser.LSQUARE:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2084;
                    this.indexingSuffix();
                    break;
                case KotlinParser.NL:
                case KotlinParser.DOT:
                case KotlinParser.COLONCOLON:
                case KotlinParser.QUEST_NO_WS:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2085;
                    this.navigationSuffix();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    indexingSuffix() {
        let localctx = new IndexingSuffixContext(this, this._ctx, this.state);
        this.enterRule(localctx, 166, KotlinParser.RULE_indexingSuffix);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2088;
            this.match(KotlinParser.LSQUARE);
            this.state = 2092;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 309, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 2089;
                    this.match(KotlinParser.NL);
                }
                this.state = 2094;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 309, this._ctx);
            }
            this.state = 2095;
            this.expression();
            this.state = 2112;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 312, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 2099;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 2096;
                        this.match(KotlinParser.NL);
                        this.state = 2101;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2102;
                    this.match(KotlinParser.COMMA);
                    this.state = 2106;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 311, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 2103;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 2108;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 311, this._ctx);
                    }
                    this.state = 2109;
                    this.expression();
                }
                this.state = 2114;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 312, this._ctx);
            }
            this.state = 2118;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 2115;
                this.match(KotlinParser.NL);
                this.state = 2120;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2121;
            this.match(KotlinParser.RSQUARE);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    navigationSuffix() {
        let localctx = new NavigationSuffixContext(this, this._ctx, this.state);
        this.enterRule(localctx, 168, KotlinParser.RULE_navigationSuffix);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2126;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 2123;
                this.match(KotlinParser.NL);
                this.state = 2128;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2129;
            this.memberAccessOperator();
            this.state = 2133;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 2130;
                this.match(KotlinParser.NL);
                this.state = 2135;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2139;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.IMPORT:
                case KotlinParser.CONSTRUCTOR:
                case KotlinParser.BY:
                case KotlinParser.COMPANION:
                case KotlinParser.INIT:
                case KotlinParser.WHERE:
                case KotlinParser.CATCH:
                case KotlinParser.FINALLY:
                case KotlinParser.OUT:
                case KotlinParser.GETTER:
                case KotlinParser.SETTER:
                case KotlinParser.DYNAMIC:
                case KotlinParser.PUBLIC:
                case KotlinParser.PRIVATE:
                case KotlinParser.PROTECTED:
                case KotlinParser.INTERNAL:
                case KotlinParser.ENUM:
                case KotlinParser.SEALED:
                case KotlinParser.ANNOTATION:
                case KotlinParser.DATA:
                case KotlinParser.INNER:
                case KotlinParser.TAILREC:
                case KotlinParser.OPERATOR:
                case KotlinParser.INLINE:
                case KotlinParser.INFIX:
                case KotlinParser.EXTERNAL:
                case KotlinParser.SUSPEND:
                case KotlinParser.OVERRIDE:
                case KotlinParser.ABSTRACT:
                case KotlinParser.FINAL:
                case KotlinParser.OPEN:
                case KotlinParser.CONST:
                case KotlinParser.LATEINIT:
                case KotlinParser.VARARG:
                case KotlinParser.NOINLINE:
                case KotlinParser.CROSSINLINE:
                case KotlinParser.REIFIED:
                case KotlinParser.EXPECT:
                case KotlinParser.ACTUAL:
                case KotlinParser.Identifier:
                    this.state = 2136;
                    this.simpleIdentifier();
                    break;
                case KotlinParser.LPAREN:
                    this.state = 2137;
                    this.parenthesizedExpression();
                    break;
                case KotlinParser.CLASS:
                    this.state = 2138;
                    this.match(KotlinParser.CLASS);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    callSuffix() {
        let localctx = new CallSuffixContext(this, this._ctx, this.state);
        this.enterRule(localctx, 170, KotlinParser.RULE_callSuffix);
        var _la = 0; // Token type
        try {
            this.state = 2152;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 320, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2142;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === KotlinParser.LANGLE) {
                        this.state = 2141;
                        this.typeArguments();
                    }
                    this.state = 2145;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === KotlinParser.LPAREN) {
                        this.state = 2144;
                        this.valueArguments();
                    }
                    this.state = 2147;
                    this.annotatedLambda();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2149;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === KotlinParser.LANGLE) {
                        this.state = 2148;
                        this.typeArguments();
                    }
                    this.state = 2151;
                    this.valueArguments();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    annotatedLambda() {
        let localctx = new AnnotatedLambdaContext(this, this._ctx, this.state);
        this.enterRule(localctx, 172, KotlinParser.RULE_annotatedLambda);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2157;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.AT || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (KotlinParser.AT_FIELD - 99)) | (1 << (KotlinParser.AT_PROPERTY - 99)) | (1 << (KotlinParser.AT_GET - 99)) | (1 << (KotlinParser.AT_SET - 99)) | (1 << (KotlinParser.AT_RECEIVER - 99)) | (1 << (KotlinParser.AT_PARAM - 99)) | (1 << (KotlinParser.AT_SETPARAM - 99)) | (1 << (KotlinParser.AT_DELEGATE - 99)))) !== 0)) {
                this.state = 2154;
                this.annotation();
                this.state = 2159;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2161;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === KotlinParser.IdentifierAt) {
                this.state = 2160;
                this.label();
            }
            this.state = 2166;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 2163;
                this.match(KotlinParser.NL);
                this.state = 2168;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2169;
            this.lambdaLiteral();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    valueArguments() {
        let localctx = new ValueArgumentsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 174, KotlinParser.RULE_valueArguments);
        var _la = 0; // Token type
        try {
            this.state = 2217;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 331, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2171;
                    this.match(KotlinParser.LPAREN);
                    this.state = 2175;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 2172;
                        this.match(KotlinParser.NL);
                        this.state = 2177;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2178;
                    this.match(KotlinParser.RPAREN);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2179;
                    this.match(KotlinParser.LPAREN);
                    this.state = 2183;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 325, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 2180;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 2185;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 325, this._ctx);
                    }
                    this.state = 2186;
                    this.valueArgument();
                    this.state = 2203;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 328, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 2190;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === KotlinParser.NL) {
                                this.state = 2187;
                                this.match(KotlinParser.NL);
                                this.state = 2192;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 2193;
                            this.match(KotlinParser.COMMA);
                            this.state = 2197;
                            this._errHandler.sync(this);
                            var _alt = this._interp.adaptivePredict(this._input, 327, this._ctx);
                            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    this.state = 2194;
                                    this.match(KotlinParser.NL);
                                }
                                this.state = 2199;
                                this._errHandler.sync(this);
                                _alt = this._interp.adaptivePredict(this._input, 327, this._ctx);
                            }
                            this.state = 2200;
                            this.valueArgument();
                        }
                        this.state = 2205;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 328, this._ctx);
                    }
                    this.state = 2209;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 2206;
                        this.match(KotlinParser.NL);
                        this.state = 2211;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2213;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === KotlinParser.COMMA) {
                        this.state = 2212;
                        this.match(KotlinParser.COMMA);
                    }
                    this.state = 2215;
                    this.match(KotlinParser.RPAREN);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeArguments() {
        let localctx = new TypeArgumentsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 176, KotlinParser.RULE_typeArguments);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2219;
            this.match(KotlinParser.LANGLE);
            this.state = 2223;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 2220;
                this.match(KotlinParser.NL);
                this.state = 2225;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2226;
            this.typeProjection();
            this.state = 2243;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 335, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 2230;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 2227;
                        this.match(KotlinParser.NL);
                        this.state = 2232;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2233;
                    this.match(KotlinParser.COMMA);
                    this.state = 2237;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 2234;
                        this.match(KotlinParser.NL);
                        this.state = 2239;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2240;
                    this.typeProjection();
                }
                this.state = 2245;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 335, this._ctx);
            }
            this.state = 2249;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 2246;
                this.match(KotlinParser.NL);
                this.state = 2251;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2253;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === KotlinParser.COMMA) {
                this.state = 2252;
                this.match(KotlinParser.COMMA);
            }
            this.state = 2255;
            this.match(KotlinParser.RANGLE);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeProjection() {
        let localctx = new TypeProjectionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 178, KotlinParser.RULE_typeProjection);
        try {
            this.state = 2262;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.LPAREN:
                case KotlinParser.AT:
                case KotlinParser.IMPORT:
                case KotlinParser.CONSTRUCTOR:
                case KotlinParser.BY:
                case KotlinParser.COMPANION:
                case KotlinParser.INIT:
                case KotlinParser.WHERE:
                case KotlinParser.CATCH:
                case KotlinParser.FINALLY:
                case KotlinParser.IN:
                case KotlinParser.OUT:
                case KotlinParser.GETTER:
                case KotlinParser.SETTER:
                case KotlinParser.DYNAMIC:
                case KotlinParser.AT_FIELD:
                case KotlinParser.AT_PROPERTY:
                case KotlinParser.AT_GET:
                case KotlinParser.AT_SET:
                case KotlinParser.AT_RECEIVER:
                case KotlinParser.AT_PARAM:
                case KotlinParser.AT_SETPARAM:
                case KotlinParser.AT_DELEGATE:
                case KotlinParser.PUBLIC:
                case KotlinParser.PRIVATE:
                case KotlinParser.PROTECTED:
                case KotlinParser.INTERNAL:
                case KotlinParser.ENUM:
                case KotlinParser.SEALED:
                case KotlinParser.ANNOTATION:
                case KotlinParser.DATA:
                case KotlinParser.INNER:
                case KotlinParser.TAILREC:
                case KotlinParser.OPERATOR:
                case KotlinParser.INLINE:
                case KotlinParser.INFIX:
                case KotlinParser.EXTERNAL:
                case KotlinParser.SUSPEND:
                case KotlinParser.OVERRIDE:
                case KotlinParser.ABSTRACT:
                case KotlinParser.FINAL:
                case KotlinParser.OPEN:
                case KotlinParser.CONST:
                case KotlinParser.LATEINIT:
                case KotlinParser.VARARG:
                case KotlinParser.NOINLINE:
                case KotlinParser.CROSSINLINE:
                case KotlinParser.REIFIED:
                case KotlinParser.EXPECT:
                case KotlinParser.ACTUAL:
                case KotlinParser.Identifier:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2258;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 338, this._ctx);
                    if (la_ === 1) {
                        this.state = 2257;
                        this.typeProjectionModifiers();
                    }
                    this.state = 2260;
                    this.type_();
                    break;
                case KotlinParser.MULT:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2261;
                    this.match(KotlinParser.MULT);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeProjectionModifiers() {
        let localctx = new TypeProjectionModifiersContext(this, this._ctx, this.state);
        this.enterRule(localctx, 180, KotlinParser.RULE_typeProjectionModifiers);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2265;
            this._errHandler.sync(this);
            var _alt = 1;
            do {
                switch (_alt) {
                    case 1:
                        this.state = 2264;
                        this.typeProjectionModifier();
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 2267;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 340, this._ctx);
            } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeProjectionModifier() {
        let localctx = new TypeProjectionModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 182, KotlinParser.RULE_typeProjectionModifier);
        var _la = 0; // Token type
        try {
            this.state = 2277;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.IN:
                case KotlinParser.OUT:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2269;
                    this.varianceModifier();
                    this.state = 2273;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 2270;
                        this.match(KotlinParser.NL);
                        this.state = 2275;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    break;
                case KotlinParser.AT:
                case KotlinParser.AT_FIELD:
                case KotlinParser.AT_PROPERTY:
                case KotlinParser.AT_GET:
                case KotlinParser.AT_SET:
                case KotlinParser.AT_RECEIVER:
                case KotlinParser.AT_PARAM:
                case KotlinParser.AT_SETPARAM:
                case KotlinParser.AT_DELEGATE:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2276;
                    this.annotation();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    valueArgument() {
        let localctx = new ValueArgumentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 184, KotlinParser.RULE_valueArgument);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2280;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 343, this._ctx);
            if (la_ === 1) {
                this.state = 2279;
                this.annotation();
            }
            this.state = 2285;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 344, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 2282;
                    this.match(KotlinParser.NL);
                }
                this.state = 2287;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 344, this._ctx);
            }
            this.state = 2302;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 347, this._ctx);
            if (la_ === 1) {
                this.state = 2288;
                this.simpleIdentifier();
                this.state = 2292;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 2289;
                    this.match(KotlinParser.NL);
                    this.state = 2294;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2295;
                this.match(KotlinParser.ASSIGNMENT);
                this.state = 2299;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input, 346, this._ctx);
                while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        this.state = 2296;
                        this.match(KotlinParser.NL);
                    }
                    this.state = 2301;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input, 346, this._ctx);
                }
            }
            this.state = 2305;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === KotlinParser.MULT) {
                this.state = 2304;
                this.match(KotlinParser.MULT);
            }
            this.state = 2310;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 349, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 2307;
                    this.match(KotlinParser.NL);
                }
                this.state = 2312;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 349, this._ctx);
            }
            this.state = 2313;
            this.expression();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    primaryExpression() {
        let localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 186, KotlinParser.RULE_primaryExpression);
        try {
            this.state = 2329;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 350, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2315;
                    this.parenthesizedExpression();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2316;
                    this.literalConstant();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2317;
                    this.stringLiteral();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 2318;
                    this.simpleIdentifier();
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 2319;
                    this.callableReference();
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 2320;
                    this.functionLiteral();
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    this.state = 2321;
                    this.objectLiteral();
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    this.state = 2322;
                    this.collectionLiteral();
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    this.state = 2323;
                    this.thisExpression();
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    this.state = 2324;
                    this.superExpression();
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    this.state = 2325;
                    this.ifExpression();
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    this.state = 2326;
                    this.whenExpression();
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    this.state = 2327;
                    this.tryExpression();
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    this.state = 2328;
                    this.jumpExpression();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parenthesizedExpression() {
        let localctx = new ParenthesizedExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 188, KotlinParser.RULE_parenthesizedExpression);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2331;
            this.match(KotlinParser.LPAREN);
            this.state = 2335;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 351, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 2332;
                    this.match(KotlinParser.NL);
                }
                this.state = 2337;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 351, this._ctx);
            }
            this.state = 2338;
            this.expression();
            this.state = 2342;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 2339;
                this.match(KotlinParser.NL);
                this.state = 2344;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2345;
            this.match(KotlinParser.RPAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    collectionLiteral() {
        let localctx = new CollectionLiteralContext(this, this._ctx, this.state);
        this.enterRule(localctx, 190, KotlinParser.RULE_collectionLiteral);
        var _la = 0; // Token type
        try {
            this.state = 2393;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 360, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2347;
                    this.match(KotlinParser.LSQUARE);
                    this.state = 2351;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 353, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 2348;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 2353;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 353, this._ctx);
                    }
                    this.state = 2354;
                    this.expression();
                    this.state = 2371;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 356, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 2358;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === KotlinParser.NL) {
                                this.state = 2355;
                                this.match(KotlinParser.NL);
                                this.state = 2360;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 2361;
                            this.match(KotlinParser.COMMA);
                            this.state = 2365;
                            this._errHandler.sync(this);
                            var _alt = this._interp.adaptivePredict(this._input, 355, this._ctx);
                            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    this.state = 2362;
                                    this.match(KotlinParser.NL);
                                }
                                this.state = 2367;
                                this._errHandler.sync(this);
                                _alt = this._interp.adaptivePredict(this._input, 355, this._ctx);
                            }
                            this.state = 2368;
                            this.expression();
                        }
                        this.state = 2373;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 356, this._ctx);
                    }
                    this.state = 2377;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 2374;
                        this.match(KotlinParser.NL);
                        this.state = 2379;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2381;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === KotlinParser.COMMA) {
                        this.state = 2380;
                        this.match(KotlinParser.COMMA);
                    }
                    this.state = 2383;
                    this.match(KotlinParser.RSQUARE);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2385;
                    this.match(KotlinParser.LSQUARE);
                    this.state = 2389;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 2386;
                        this.match(KotlinParser.NL);
                        this.state = 2391;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2392;
                    this.match(KotlinParser.RSQUARE);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    literalConstant() {
        let localctx = new LiteralConstantContext(this, this._ctx, this.state);
        this.enterRule(localctx, 192, KotlinParser.RULE_literalConstant);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2395;
            _la = this._input.LA(1);
            if (!(((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (KotlinParser.RealLiteral - 136)) | (1 << (KotlinParser.LongLiteral - 136)) | (1 << (KotlinParser.IntegerLiteral - 136)) | (1 << (KotlinParser.HexLiteral - 136)) | (1 << (KotlinParser.BinLiteral - 136)) | (1 << (KotlinParser.BooleanLiteral - 136)) | (1 << (KotlinParser.NullLiteral - 136)) | (1 << (KotlinParser.CharacterLiteral - 136)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    stringLiteral() {
        let localctx = new StringLiteralContext(this, this._ctx, this.state);
        this.enterRule(localctx, 194, KotlinParser.RULE_stringLiteral);
        try {
            this.state = 2399;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.QUOTE_OPEN:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2397;
                    this.lineStringLiteral();
                    break;
                case KotlinParser.TRIPLE_QUOTE_OPEN:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2398;
                    this.multiLineStringLiteral();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    lineStringLiteral() {
        let localctx = new LineStringLiteralContext(this, this._ctx, this.state);
        this.enterRule(localctx, 196, KotlinParser.RULE_lineStringLiteral);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2401;
            this.match(KotlinParser.QUOTE_OPEN);
            this.state = 2406;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (KotlinParser.LineStrRef - 161)) | (1 << (KotlinParser.LineStrText - 161)) | (1 << (KotlinParser.LineStrEscapedChar - 161)) | (1 << (KotlinParser.LineStrExprStart - 161)))) !== 0)) {
                this.state = 2404;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case KotlinParser.LineStrRef:
                    case KotlinParser.LineStrText:
                    case KotlinParser.LineStrEscapedChar:
                        this.state = 2402;
                        this.lineStringContent();
                        break;
                    case KotlinParser.LineStrExprStart:
                        this.state = 2403;
                        this.lineStringExpression();
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 2408;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2409;
            this.match(KotlinParser.QUOTE_CLOSE);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    multiLineStringLiteral() {
        let localctx = new MultiLineStringLiteralContext(this, this._ctx, this.state);
        this.enterRule(localctx, 198, KotlinParser.RULE_multiLineStringLiteral);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2411;
            this.match(KotlinParser.TRIPLE_QUOTE_OPEN);
            this.state = 2417;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (((((_la - 166)) & ~0x1f) == 0 && ((1 << (_la - 166)) & ((1 << (KotlinParser.MultiLineStringQuote - 166)) | (1 << (KotlinParser.MultiLineStrRef - 166)) | (1 << (KotlinParser.MultiLineStrText - 166)) | (1 << (KotlinParser.MultiLineStrExprStart - 166)))) !== 0)) {
                this.state = 2415;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 364, this._ctx);
                switch (la_) {
                    case 1:
                        this.state = 2412;
                        this.multiLineStringContent();
                        break;
                    case 2:
                        this.state = 2413;
                        this.multiLineStringExpression();
                        break;
                    case 3:
                        this.state = 2414;
                        this.match(KotlinParser.MultiLineStringQuote);
                        break;
                }
                this.state = 2419;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2420;
            this.match(KotlinParser.TRIPLE_QUOTE_CLOSE);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    lineStringContent() {
        let localctx = new LineStringContentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 200, KotlinParser.RULE_lineStringContent);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2422;
            _la = this._input.LA(1);
            if (!(((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (KotlinParser.LineStrRef - 161)) | (1 << (KotlinParser.LineStrText - 161)) | (1 << (KotlinParser.LineStrEscapedChar - 161)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    lineStringExpression() {
        let localctx = new LineStringExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 202, KotlinParser.RULE_lineStringExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2424;
            this.match(KotlinParser.LineStrExprStart);
            this.state = 2425;
            this.expression();
            this.state = 2426;
            this.match(KotlinParser.RCURL);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    multiLineStringContent() {
        let localctx = new MultiLineStringContentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 204, KotlinParser.RULE_multiLineStringContent);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2428;
            _la = this._input.LA(1);
            if (!(((((_la - 166)) & ~0x1f) == 0 && ((1 << (_la - 166)) & ((1 << (KotlinParser.MultiLineStringQuote - 166)) | (1 << (KotlinParser.MultiLineStrRef - 166)) | (1 << (KotlinParser.MultiLineStrText - 166)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    multiLineStringExpression() {
        let localctx = new MultiLineStringExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 206, KotlinParser.RULE_multiLineStringExpression);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2430;
            this.match(KotlinParser.MultiLineStrExprStart);
            this.state = 2434;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 366, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 2431;
                    this.match(KotlinParser.NL);
                }
                this.state = 2436;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 366, this._ctx);
            }
            this.state = 2437;
            this.expression();
            this.state = 2441;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 2438;
                this.match(KotlinParser.NL);
                this.state = 2443;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2444;
            this.match(KotlinParser.RCURL);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    lambdaLiteral() {
        let localctx = new LambdaLiteralContext(this, this._ctx, this.state);
        this.enterRule(localctx, 208, KotlinParser.RULE_lambdaLiteral);
        var _la = 0; // Token type
        try {
            this.state = 2494;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 375, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2446;
                    this.match(KotlinParser.LCURL);
                    this.state = 2450;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 368, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 2447;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 2452;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 368, this._ctx);
                    }
                    this.state = 2453;
                    this.statements();
                    this.state = 2457;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 2454;
                        this.match(KotlinParser.NL);
                        this.state = 2459;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2460;
                    this.match(KotlinParser.RCURL);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2462;
                    this.match(KotlinParser.LCURL);
                    this.state = 2466;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 370, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 2463;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 2468;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 370, this._ctx);
                    }
                    this.state = 2470;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 371, this._ctx);
                    if (la_ === 1) {
                        this.state = 2469;
                        this.lambdaParameters();
                    }
                    this.state = 2475;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 2472;
                        this.match(KotlinParser.NL);
                        this.state = 2477;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2478;
                    this.match(KotlinParser.ARROW);
                    this.state = 2482;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 373, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 2479;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 2484;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 373, this._ctx);
                    }
                    this.state = 2485;
                    this.statements();
                    this.state = 2489;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 2486;
                        this.match(KotlinParser.NL);
                        this.state = 2491;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2492;
                    this.match(KotlinParser.RCURL);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    lambdaParameters() {
        let localctx = new LambdaParametersContext(this, this._ctx, this.state);
        this.enterRule(localctx, 210, KotlinParser.RULE_lambdaParameters);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2496;
            this.lambdaParameter();
            this.state = 2513;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 378, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 2500;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 2497;
                        this.match(KotlinParser.NL);
                        this.state = 2502;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2503;
                    this.match(KotlinParser.COMMA);
                    this.state = 2507;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 377, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 2504;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 2509;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 377, this._ctx);
                    }
                    this.state = 2510;
                    this.lambdaParameter();
                }
                this.state = 2515;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 378, this._ctx);
            }
            this.state = 2517;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === KotlinParser.COMMA) {
                this.state = 2516;
                this.match(KotlinParser.COMMA);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    lambdaParameter() {
        let localctx = new LambdaParameterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 212, KotlinParser.RULE_lambdaParameter);
        var _la = 0; // Token type
        try {
            this.state = 2537;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.NL:
                case KotlinParser.AT:
                case KotlinParser.IMPORT:
                case KotlinParser.CONSTRUCTOR:
                case KotlinParser.BY:
                case KotlinParser.COMPANION:
                case KotlinParser.INIT:
                case KotlinParser.WHERE:
                case KotlinParser.CATCH:
                case KotlinParser.FINALLY:
                case KotlinParser.OUT:
                case KotlinParser.GETTER:
                case KotlinParser.SETTER:
                case KotlinParser.DYNAMIC:
                case KotlinParser.AT_FIELD:
                case KotlinParser.AT_PROPERTY:
                case KotlinParser.AT_GET:
                case KotlinParser.AT_SET:
                case KotlinParser.AT_RECEIVER:
                case KotlinParser.AT_PARAM:
                case KotlinParser.AT_SETPARAM:
                case KotlinParser.AT_DELEGATE:
                case KotlinParser.PUBLIC:
                case KotlinParser.PRIVATE:
                case KotlinParser.PROTECTED:
                case KotlinParser.INTERNAL:
                case KotlinParser.ENUM:
                case KotlinParser.SEALED:
                case KotlinParser.ANNOTATION:
                case KotlinParser.DATA:
                case KotlinParser.INNER:
                case KotlinParser.TAILREC:
                case KotlinParser.OPERATOR:
                case KotlinParser.INLINE:
                case KotlinParser.INFIX:
                case KotlinParser.EXTERNAL:
                case KotlinParser.SUSPEND:
                case KotlinParser.OVERRIDE:
                case KotlinParser.ABSTRACT:
                case KotlinParser.FINAL:
                case KotlinParser.OPEN:
                case KotlinParser.CONST:
                case KotlinParser.LATEINIT:
                case KotlinParser.VARARG:
                case KotlinParser.NOINLINE:
                case KotlinParser.CROSSINLINE:
                case KotlinParser.REIFIED:
                case KotlinParser.EXPECT:
                case KotlinParser.ACTUAL:
                case KotlinParser.Identifier:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2519;
                    this.variableDeclaration();
                    break;
                case KotlinParser.LPAREN:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2520;
                    this.multiVariableDeclaration();
                    this.state = 2535;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 382, this._ctx);
                    if (la_ === 1) {
                        this.state = 2524;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === KotlinParser.NL) {
                            this.state = 2521;
                            this.match(KotlinParser.NL);
                            this.state = 2526;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2527;
                        this.match(KotlinParser.COLON);
                        this.state = 2531;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === KotlinParser.NL) {
                            this.state = 2528;
                            this.match(KotlinParser.NL);
                            this.state = 2533;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2534;
                        this.type_();
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    anonymousFunction() {
        let localctx = new AnonymousFunctionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 214, KotlinParser.RULE_anonymousFunction);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2539;
            this.match(KotlinParser.FUN);
            this.state = 2555;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 386, this._ctx);
            if (la_ === 1) {
                this.state = 2543;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 2540;
                    this.match(KotlinParser.NL);
                    this.state = 2545;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2546;
                this.type_();
                this.state = 2550;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 2547;
                    this.match(KotlinParser.NL);
                    this.state = 2552;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2553;
                this.match(KotlinParser.DOT);
            }
            this.state = 2560;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 2557;
                this.match(KotlinParser.NL);
                this.state = 2562;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2563;
            this.functionValueParameters();
            this.state = 2578;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 390, this._ctx);
            if (la_ === 1) {
                this.state = 2567;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 2564;
                    this.match(KotlinParser.NL);
                    this.state = 2569;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2570;
                this.match(KotlinParser.COLON);
                this.state = 2574;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 2571;
                    this.match(KotlinParser.NL);
                    this.state = 2576;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2577;
                this.type_();
            }
            this.state = 2587;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 392, this._ctx);
            if (la_ === 1) {
                this.state = 2583;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 2580;
                    this.match(KotlinParser.NL);
                    this.state = 2585;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2586;
                this.typeConstraints();
            }
            this.state = 2596;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 394, this._ctx);
            if (la_ === 1) {
                this.state = 2592;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === KotlinParser.NL) {
                    this.state = 2589;
                    this.match(KotlinParser.NL);
                    this.state = 2594;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2595;
                this.functionBody();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    functionLiteral() {
        let localctx = new FunctionLiteralContext(this, this._ctx, this.state);
        this.enterRule(localctx, 216, KotlinParser.RULE_functionLiteral);
        try {
            this.state = 2600;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.LCURL:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2598;
                    this.lambdaLiteral();
                    break;
                case KotlinParser.FUN:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2599;
                    this.anonymousFunction();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectLiteral() {
        let localctx = new ObjectLiteralContext(this, this._ctx, this.state);
        this.enterRule(localctx, 218, KotlinParser.RULE_objectLiteral);
        var _la = 0; // Token type
        try {
            this.state = 2634;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 401, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2602;
                    this.match(KotlinParser.OBJECT);
                    this.state = 2606;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 2603;
                        this.match(KotlinParser.NL);
                        this.state = 2608;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2609;
                    this.match(KotlinParser.COLON);
                    this.state = 2613;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 397, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 2610;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 2615;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 397, this._ctx);
                    }
                    this.state = 2616;
                    this.delegationSpecifiers();
                    this.state = 2624;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 399, this._ctx);
                    if (la_ === 1) {
                        this.state = 2620;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === KotlinParser.NL) {
                            this.state = 2617;
                            this.match(KotlinParser.NL);
                            this.state = 2622;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2623;
                        this.classBody();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2626;
                    this.match(KotlinParser.OBJECT);
                    this.state = 2630;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 2627;
                        this.match(KotlinParser.NL);
                        this.state = 2632;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2633;
                    this.classBody();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    thisExpression() {
        let localctx = new ThisExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 220, KotlinParser.RULE_thisExpression);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2636;
            _la = this._input.LA(1);
            if (!(_la === KotlinParser.THIS_AT || _la === KotlinParser.THIS)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    superExpression() {
        let localctx = new SuperExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 222, KotlinParser.RULE_superExpression);
        var _la = 0; // Token type
        try {
            this.state = 2662;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.SUPER:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2638;
                    this.match(KotlinParser.SUPER);
                    this.state = 2655;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 404, this._ctx);
                    if (la_ === 1) {
                        this.state = 2639;
                        this.match(KotlinParser.LANGLE);
                        this.state = 2643;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === KotlinParser.NL) {
                            this.state = 2640;
                            this.match(KotlinParser.NL);
                            this.state = 2645;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2646;
                        this.type_();
                        this.state = 2650;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === KotlinParser.NL) {
                            this.state = 2647;
                            this.match(KotlinParser.NL);
                            this.state = 2652;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2653;
                        this.match(KotlinParser.RANGLE);
                    }
                    this.state = 2659;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 405, this._ctx);
                    if (la_ === 1) {
                        this.state = 2657;
                        this.match(KotlinParser.AT);
                        this.state = 2658;
                        this.simpleIdentifier();
                    }
                    break;
                case KotlinParser.SUPER_AT:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2661;
                    this.match(KotlinParser.SUPER_AT);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    controlStructureBody() {
        let localctx = new ControlStructureBodyContext(this, this._ctx, this.state);
        this.enterRule(localctx, 224, KotlinParser.RULE_controlStructureBody);
        try {
            this.state = 2666;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 407, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2664;
                    this.block();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2665;
                    this.statement();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    ifExpression() {
        let localctx = new IfExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 226, KotlinParser.RULE_ifExpression);
        var _la = 0; // Token type
        try {
            this.state = 2762;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 423, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2668;
                    this.match(KotlinParser.IF);
                    this.state = 2672;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 2669;
                        this.match(KotlinParser.NL);
                        this.state = 2674;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2675;
                    this.match(KotlinParser.LPAREN);
                    this.state = 2679;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 409, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 2676;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 2681;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 409, this._ctx);
                    }
                    this.state = 2682;
                    this.expression();
                    this.state = 2686;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 2683;
                        this.match(KotlinParser.NL);
                        this.state = 2688;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2689;
                    this.match(KotlinParser.RPAREN);
                    this.state = 2693;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 411, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 2690;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 2695;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 411, this._ctx);
                    }
                    this.state = 2696;
                    this.controlStructureBody();
                    this.state = 2714;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 415, this._ctx);
                    if (la_ === 1) {
                        this.state = 2698;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === KotlinParser.SEMICOLON) {
                            this.state = 2697;
                            this.match(KotlinParser.SEMICOLON);
                        }
                        this.state = 2703;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === KotlinParser.NL) {
                            this.state = 2700;
                            this.match(KotlinParser.NL);
                            this.state = 2705;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2706;
                        this.match(KotlinParser.ELSE);
                        this.state = 2710;
                        this._errHandler.sync(this);
                        var _alt = this._interp.adaptivePredict(this._input, 414, this._ctx);
                        while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                this.state = 2707;
                                this.match(KotlinParser.NL);
                            }
                            this.state = 2712;
                            this._errHandler.sync(this);
                            _alt = this._interp.adaptivePredict(this._input, 414, this._ctx);
                        }
                        this.state = 2713;
                        this.controlStructureBody();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2716;
                    this.match(KotlinParser.IF);
                    this.state = 2720;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 2717;
                        this.match(KotlinParser.NL);
                        this.state = 2722;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2723;
                    this.match(KotlinParser.LPAREN);
                    this.state = 2727;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 417, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 2724;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 2729;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 417, this._ctx);
                    }
                    this.state = 2730;
                    this.expression();
                    this.state = 2734;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 2731;
                        this.match(KotlinParser.NL);
                        this.state = 2736;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2737;
                    this.match(KotlinParser.RPAREN);
                    this.state = 2741;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 2738;
                        this.match(KotlinParser.NL);
                        this.state = 2743;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2751;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === KotlinParser.SEMICOLON) {
                        this.state = 2744;
                        this.match(KotlinParser.SEMICOLON);
                        this.state = 2748;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === KotlinParser.NL) {
                            this.state = 2745;
                            this.match(KotlinParser.NL);
                            this.state = 2750;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    this.state = 2753;
                    this.match(KotlinParser.ELSE);
                    this.state = 2757;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 422, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 2754;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 2759;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 422, this._ctx);
                    }
                    this.state = 2760;
                    this.controlStructureBody();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    whenExpression() {
        let localctx = new WhenExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 228, KotlinParser.RULE_whenExpression);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2764;
            this.match(KotlinParser.WHEN);
            this.state = 2768;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 424, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 2765;
                    this.match(KotlinParser.NL);
                }
                this.state = 2770;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 424, this._ctx);
            }
            this.state = 2775;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === KotlinParser.LPAREN) {
                this.state = 2771;
                this.match(KotlinParser.LPAREN);
                this.state = 2772;
                this.expression();
                this.state = 2773;
                this.match(KotlinParser.RPAREN);
            }
            this.state = 2780;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 2777;
                this.match(KotlinParser.NL);
                this.state = 2782;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2783;
            this.match(KotlinParser.LCURL);
            this.state = 2787;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 427, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 2784;
                    this.match(KotlinParser.NL);
                }
                this.state = 2789;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 427, this._ctx);
            }
            this.state = 2799;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 429, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 2790;
                    this.whenEntry();
                    this.state = 2794;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 428, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 2791;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 2796;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 428, this._ctx);
                    }
                }
                this.state = 2801;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 429, this._ctx);
            }
            this.state = 2805;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 2802;
                this.match(KotlinParser.NL);
                this.state = 2807;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2808;
            this.match(KotlinParser.RCURL);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    whenEntry() {
        let localctx = new WhenEntryContext(this, this._ctx, this.state);
        this.enterRule(localctx, 230, KotlinParser.RULE_whenEntry);
        var _la = 0; // Token type
        try {
            this.state = 2865;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.NL:
                case KotlinParser.LPAREN:
                case KotlinParser.LSQUARE:
                case KotlinParser.LCURL:
                case KotlinParser.ADD:
                case KotlinParser.SUB:
                case KotlinParser.INCR:
                case KotlinParser.DECR:
                case KotlinParser.EXCL_WS:
                case KotlinParser.EXCL_NO_WS:
                case KotlinParser.COLONCOLON:
                case KotlinParser.AT:
                case KotlinParser.RETURN_AT:
                case KotlinParser.CONTINUE_AT:
                case KotlinParser.BREAK_AT:
                case KotlinParser.THIS_AT:
                case KotlinParser.SUPER_AT:
                case KotlinParser.IMPORT:
                case KotlinParser.FUN:
                case KotlinParser.OBJECT:
                case KotlinParser.CONSTRUCTOR:
                case KotlinParser.BY:
                case KotlinParser.COMPANION:
                case KotlinParser.INIT:
                case KotlinParser.THIS:
                case KotlinParser.SUPER:
                case KotlinParser.WHERE:
                case KotlinParser.IF:
                case KotlinParser.WHEN:
                case KotlinParser.TRY:
                case KotlinParser.CATCH:
                case KotlinParser.FINALLY:
                case KotlinParser.THROW:
                case KotlinParser.RETURN:
                case KotlinParser.CONTINUE:
                case KotlinParser.BREAK:
                case KotlinParser.IS:
                case KotlinParser.IN:
                case KotlinParser.NOT_IS:
                case KotlinParser.NOT_IN:
                case KotlinParser.OUT:
                case KotlinParser.GETTER:
                case KotlinParser.SETTER:
                case KotlinParser.DYNAMIC:
                case KotlinParser.AT_FIELD:
                case KotlinParser.AT_PROPERTY:
                case KotlinParser.AT_GET:
                case KotlinParser.AT_SET:
                case KotlinParser.AT_RECEIVER:
                case KotlinParser.AT_PARAM:
                case KotlinParser.AT_SETPARAM:
                case KotlinParser.AT_DELEGATE:
                case KotlinParser.PUBLIC:
                case KotlinParser.PRIVATE:
                case KotlinParser.PROTECTED:
                case KotlinParser.INTERNAL:
                case KotlinParser.ENUM:
                case KotlinParser.SEALED:
                case KotlinParser.ANNOTATION:
                case KotlinParser.DATA:
                case KotlinParser.INNER:
                case KotlinParser.TAILREC:
                case KotlinParser.OPERATOR:
                case KotlinParser.INLINE:
                case KotlinParser.INFIX:
                case KotlinParser.EXTERNAL:
                case KotlinParser.SUSPEND:
                case KotlinParser.OVERRIDE:
                case KotlinParser.ABSTRACT:
                case KotlinParser.FINAL:
                case KotlinParser.OPEN:
                case KotlinParser.CONST:
                case KotlinParser.LATEINIT:
                case KotlinParser.VARARG:
                case KotlinParser.NOINLINE:
                case KotlinParser.CROSSINLINE:
                case KotlinParser.REIFIED:
                case KotlinParser.EXPECT:
                case KotlinParser.ACTUAL:
                case KotlinParser.QUOTE_OPEN:
                case KotlinParser.TRIPLE_QUOTE_OPEN:
                case KotlinParser.RealLiteral:
                case KotlinParser.LongLiteral:
                case KotlinParser.IntegerLiteral:
                case KotlinParser.HexLiteral:
                case KotlinParser.BinLiteral:
                case KotlinParser.BooleanLiteral:
                case KotlinParser.NullLiteral:
                case KotlinParser.Identifier:
                case KotlinParser.IdentifierAt:
                case KotlinParser.CharacterLiteral:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2810;
                    this.whenCondition();
                    this.state = 2827;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 433, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 2814;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === KotlinParser.NL) {
                                this.state = 2811;
                                this.match(KotlinParser.NL);
                                this.state = 2816;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 2817;
                            this.match(KotlinParser.COMMA);
                            this.state = 2821;
                            this._errHandler.sync(this);
                            var _alt = this._interp.adaptivePredict(this._input, 432, this._ctx);
                            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    this.state = 2818;
                                    this.match(KotlinParser.NL);
                                }
                                this.state = 2823;
                                this._errHandler.sync(this);
                                _alt = this._interp.adaptivePredict(this._input, 432, this._ctx);
                            }
                            this.state = 2824;
                            this.whenCondition();
                        }
                        this.state = 2829;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 433, this._ctx);
                    }
                    this.state = 2833;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 2830;
                        this.match(KotlinParser.NL);
                        this.state = 2835;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2836;
                    this.match(KotlinParser.ARROW);
                    this.state = 2840;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 435, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 2837;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 2842;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 435, this._ctx);
                    }
                    this.state = 2843;
                    this.controlStructureBody();
                    this.state = 2845;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 436, this._ctx);
                    if (la_ === 1) {
                        this.state = 2844;
                        this.semi();
                    }
                    break;
                case KotlinParser.ELSE:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2847;
                    this.match(KotlinParser.ELSE);
                    this.state = 2851;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 2848;
                        this.match(KotlinParser.NL);
                        this.state = 2853;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2854;
                    this.match(KotlinParser.ARROW);
                    this.state = 2858;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 438, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 2855;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 2860;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 438, this._ctx);
                    }
                    this.state = 2861;
                    this.controlStructureBody();
                    this.state = 2863;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 439, this._ctx);
                    if (la_ === 1) {
                        this.state = 2862;
                        this.semi();
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    whenCondition() {
        let localctx = new WhenConditionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 232, KotlinParser.RULE_whenCondition);
        try {
            this.state = 2870;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.NL:
                case KotlinParser.LPAREN:
                case KotlinParser.LSQUARE:
                case KotlinParser.LCURL:
                case KotlinParser.ADD:
                case KotlinParser.SUB:
                case KotlinParser.INCR:
                case KotlinParser.DECR:
                case KotlinParser.EXCL_WS:
                case KotlinParser.EXCL_NO_WS:
                case KotlinParser.COLONCOLON:
                case KotlinParser.AT:
                case KotlinParser.RETURN_AT:
                case KotlinParser.CONTINUE_AT:
                case KotlinParser.BREAK_AT:
                case KotlinParser.THIS_AT:
                case KotlinParser.SUPER_AT:
                case KotlinParser.IMPORT:
                case KotlinParser.FUN:
                case KotlinParser.OBJECT:
                case KotlinParser.CONSTRUCTOR:
                case KotlinParser.BY:
                case KotlinParser.COMPANION:
                case KotlinParser.INIT:
                case KotlinParser.THIS:
                case KotlinParser.SUPER:
                case KotlinParser.WHERE:
                case KotlinParser.IF:
                case KotlinParser.WHEN:
                case KotlinParser.TRY:
                case KotlinParser.CATCH:
                case KotlinParser.FINALLY:
                case KotlinParser.THROW:
                case KotlinParser.RETURN:
                case KotlinParser.CONTINUE:
                case KotlinParser.BREAK:
                case KotlinParser.OUT:
                case KotlinParser.GETTER:
                case KotlinParser.SETTER:
                case KotlinParser.DYNAMIC:
                case KotlinParser.AT_FIELD:
                case KotlinParser.AT_PROPERTY:
                case KotlinParser.AT_GET:
                case KotlinParser.AT_SET:
                case KotlinParser.AT_RECEIVER:
                case KotlinParser.AT_PARAM:
                case KotlinParser.AT_SETPARAM:
                case KotlinParser.AT_DELEGATE:
                case KotlinParser.PUBLIC:
                case KotlinParser.PRIVATE:
                case KotlinParser.PROTECTED:
                case KotlinParser.INTERNAL:
                case KotlinParser.ENUM:
                case KotlinParser.SEALED:
                case KotlinParser.ANNOTATION:
                case KotlinParser.DATA:
                case KotlinParser.INNER:
                case KotlinParser.TAILREC:
                case KotlinParser.OPERATOR:
                case KotlinParser.INLINE:
                case KotlinParser.INFIX:
                case KotlinParser.EXTERNAL:
                case KotlinParser.SUSPEND:
                case KotlinParser.OVERRIDE:
                case KotlinParser.ABSTRACT:
                case KotlinParser.FINAL:
                case KotlinParser.OPEN:
                case KotlinParser.CONST:
                case KotlinParser.LATEINIT:
                case KotlinParser.VARARG:
                case KotlinParser.NOINLINE:
                case KotlinParser.CROSSINLINE:
                case KotlinParser.REIFIED:
                case KotlinParser.EXPECT:
                case KotlinParser.ACTUAL:
                case KotlinParser.QUOTE_OPEN:
                case KotlinParser.TRIPLE_QUOTE_OPEN:
                case KotlinParser.RealLiteral:
                case KotlinParser.LongLiteral:
                case KotlinParser.IntegerLiteral:
                case KotlinParser.HexLiteral:
                case KotlinParser.BinLiteral:
                case KotlinParser.BooleanLiteral:
                case KotlinParser.NullLiteral:
                case KotlinParser.Identifier:
                case KotlinParser.IdentifierAt:
                case KotlinParser.CharacterLiteral:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2867;
                    this.expression();
                    break;
                case KotlinParser.IN:
                case KotlinParser.NOT_IN:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2868;
                    this.rangeTest();
                    break;
                case KotlinParser.IS:
                case KotlinParser.NOT_IS:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2869;
                    this.typeTest();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    rangeTest() {
        let localctx = new RangeTestContext(this, this._ctx, this.state);
        this.enterRule(localctx, 234, KotlinParser.RULE_rangeTest);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2872;
            this.inOperator();
            this.state = 2876;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 442, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 2873;
                    this.match(KotlinParser.NL);
                }
                this.state = 2878;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 442, this._ctx);
            }
            this.state = 2879;
            this.expression();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeTest() {
        let localctx = new TypeTestContext(this, this._ctx, this.state);
        this.enterRule(localctx, 236, KotlinParser.RULE_typeTest);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2881;
            this.isOperator();
            this.state = 2885;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 2882;
                this.match(KotlinParser.NL);
                this.state = 2887;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2888;
            this.type_();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    tryExpression() {
        let localctx = new TryExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 238, KotlinParser.RULE_tryExpression);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2890;
            this.match(KotlinParser.TRY);
            this.state = 2894;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 2891;
                this.match(KotlinParser.NL);
                this.state = 2896;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2897;
            this.block();
            this.state = 2925;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 450, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 2905;
                    this._errHandler.sync(this);
                    var _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                this.state = 2901;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while (_la === KotlinParser.NL) {
                                    this.state = 2898;
                                    this.match(KotlinParser.NL);
                                    this.state = 2903;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                                this.state = 2904;
                                this.catchBlock();
                                break;
                            default:
                                throw new antlr4_1.default.error.NoViableAltException(this);
                        }
                        this.state = 2907;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 446, this._ctx);
                    } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
                    this.state = 2916;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 448, this._ctx);
                    if (la_ === 1) {
                        this.state = 2912;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === KotlinParser.NL) {
                            this.state = 2909;
                            this.match(KotlinParser.NL);
                            this.state = 2914;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2915;
                        this.finallyBlock();
                    }
                    break;
                case 2:
                    this.state = 2921;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 2918;
                        this.match(KotlinParser.NL);
                        this.state = 2923;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2924;
                    this.finallyBlock();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    catchBlock() {
        let localctx = new CatchBlockContext(this, this._ctx, this.state);
        this.enterRule(localctx, 240, KotlinParser.RULE_catchBlock);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2927;
            this.match(KotlinParser.CATCH);
            this.state = 2931;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 2928;
                this.match(KotlinParser.NL);
                this.state = 2933;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2934;
            this.match(KotlinParser.LPAREN);
            this.state = 2938;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.AT || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (KotlinParser.AT_FIELD - 99)) | (1 << (KotlinParser.AT_PROPERTY - 99)) | (1 << (KotlinParser.AT_GET - 99)) | (1 << (KotlinParser.AT_SET - 99)) | (1 << (KotlinParser.AT_RECEIVER - 99)) | (1 << (KotlinParser.AT_PARAM - 99)) | (1 << (KotlinParser.AT_SETPARAM - 99)) | (1 << (KotlinParser.AT_DELEGATE - 99)))) !== 0)) {
                this.state = 2935;
                this.annotation();
                this.state = 2940;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2941;
            this.simpleIdentifier();
            this.state = 2942;
            this.match(KotlinParser.COLON);
            this.state = 2943;
            this.userType();
            this.state = 2944;
            this.match(KotlinParser.RPAREN);
            this.state = 2948;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 2945;
                this.match(KotlinParser.NL);
                this.state = 2950;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2951;
            this.block();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    finallyBlock() {
        let localctx = new FinallyBlockContext(this, this._ctx, this.state);
        this.enterRule(localctx, 242, KotlinParser.RULE_finallyBlock);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2953;
            this.match(KotlinParser.FINALLY);
            this.state = 2957;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 2954;
                this.match(KotlinParser.NL);
                this.state = 2959;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2960;
            this.block();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    loopStatement() {
        let localctx = new LoopStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 244, KotlinParser.RULE_loopStatement);
        try {
            this.state = 2965;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.FOR:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2962;
                    this.forStatement();
                    break;
                case KotlinParser.WHILE:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2963;
                    this.whileStatement();
                    break;
                case KotlinParser.DO:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2964;
                    this.doWhileStatement();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    forStatement() {
        let localctx = new ForStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 246, KotlinParser.RULE_forStatement);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2967;
            this.match(KotlinParser.FOR);
            this.state = 2971;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 2968;
                this.match(KotlinParser.NL);
                this.state = 2973;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2974;
            this.match(KotlinParser.LPAREN);
            this.state = 2978;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 457, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 2975;
                    this.annotation();
                }
                this.state = 2980;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 457, this._ctx);
            }
            this.state = 2983;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.NL:
                case KotlinParser.AT:
                case KotlinParser.IMPORT:
                case KotlinParser.CONSTRUCTOR:
                case KotlinParser.BY:
                case KotlinParser.COMPANION:
                case KotlinParser.INIT:
                case KotlinParser.WHERE:
                case KotlinParser.CATCH:
                case KotlinParser.FINALLY:
                case KotlinParser.OUT:
                case KotlinParser.GETTER:
                case KotlinParser.SETTER:
                case KotlinParser.DYNAMIC:
                case KotlinParser.AT_FIELD:
                case KotlinParser.AT_PROPERTY:
                case KotlinParser.AT_GET:
                case KotlinParser.AT_SET:
                case KotlinParser.AT_RECEIVER:
                case KotlinParser.AT_PARAM:
                case KotlinParser.AT_SETPARAM:
                case KotlinParser.AT_DELEGATE:
                case KotlinParser.PUBLIC:
                case KotlinParser.PRIVATE:
                case KotlinParser.PROTECTED:
                case KotlinParser.INTERNAL:
                case KotlinParser.ENUM:
                case KotlinParser.SEALED:
                case KotlinParser.ANNOTATION:
                case KotlinParser.DATA:
                case KotlinParser.INNER:
                case KotlinParser.TAILREC:
                case KotlinParser.OPERATOR:
                case KotlinParser.INLINE:
                case KotlinParser.INFIX:
                case KotlinParser.EXTERNAL:
                case KotlinParser.SUSPEND:
                case KotlinParser.OVERRIDE:
                case KotlinParser.ABSTRACT:
                case KotlinParser.FINAL:
                case KotlinParser.OPEN:
                case KotlinParser.CONST:
                case KotlinParser.LATEINIT:
                case KotlinParser.VARARG:
                case KotlinParser.NOINLINE:
                case KotlinParser.CROSSINLINE:
                case KotlinParser.REIFIED:
                case KotlinParser.EXPECT:
                case KotlinParser.ACTUAL:
                case KotlinParser.Identifier:
                    this.state = 2981;
                    this.variableDeclaration();
                    break;
                case KotlinParser.LPAREN:
                    this.state = 2982;
                    this.multiVariableDeclaration();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this.state = 2985;
            this.match(KotlinParser.IN);
            this.state = 2986;
            this.expression();
            this.state = 2987;
            this.match(KotlinParser.RPAREN);
            this.state = 2991;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 459, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 2988;
                    this.match(KotlinParser.NL);
                }
                this.state = 2993;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 459, this._ctx);
            }
            this.state = 2995;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 460, this._ctx);
            if (la_ === 1) {
                this.state = 2994;
                this.controlStructureBody();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    whileStatement() {
        let localctx = new WhileStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 248, KotlinParser.RULE_whileStatement);
        var _la = 0; // Token type
        try {
            this.state = 3033;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 465, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2997;
                    this.match(KotlinParser.WHILE);
                    this.state = 3001;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 2998;
                        this.match(KotlinParser.NL);
                        this.state = 3003;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3004;
                    this.match(KotlinParser.LPAREN);
                    this.state = 3005;
                    this.expression();
                    this.state = 3006;
                    this.match(KotlinParser.RPAREN);
                    this.state = 3010;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 462, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 3007;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 3012;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 462, this._ctx);
                    }
                    this.state = 3013;
                    this.controlStructureBody();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3015;
                    this.match(KotlinParser.WHILE);
                    this.state = 3019;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 3016;
                        this.match(KotlinParser.NL);
                        this.state = 3021;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3022;
                    this.match(KotlinParser.LPAREN);
                    this.state = 3023;
                    this.expression();
                    this.state = 3024;
                    this.match(KotlinParser.RPAREN);
                    this.state = 3028;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 3025;
                        this.match(KotlinParser.NL);
                        this.state = 3030;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3031;
                    this.match(KotlinParser.SEMICOLON);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    doWhileStatement() {
        let localctx = new DoWhileStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 250, KotlinParser.RULE_doWhileStatement);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3035;
            this.match(KotlinParser.DO);
            this.state = 3039;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 466, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 3036;
                    this.match(KotlinParser.NL);
                }
                this.state = 3041;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 466, this._ctx);
            }
            this.state = 3043;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 467, this._ctx);
            if (la_ === 1) {
                this.state = 3042;
                this.controlStructureBody();
            }
            this.state = 3048;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 3045;
                this.match(KotlinParser.NL);
                this.state = 3050;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3051;
            this.match(KotlinParser.WHILE);
            this.state = 3055;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 3052;
                this.match(KotlinParser.NL);
                this.state = 3057;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3058;
            this.match(KotlinParser.LPAREN);
            this.state = 3059;
            this.expression();
            this.state = 3060;
            this.match(KotlinParser.RPAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    jumpExpression() {
        let localctx = new JumpExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 252, KotlinParser.RULE_jumpExpression);
        var _la = 0; // Token type
        try {
            this.state = 3078;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.THROW:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3062;
                    this.match(KotlinParser.THROW);
                    this.state = 3066;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 470, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 3063;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 3068;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 470, this._ctx);
                    }
                    this.state = 3069;
                    this.expression();
                    break;
                case KotlinParser.RETURN_AT:
                case KotlinParser.RETURN:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3070;
                    _la = this._input.LA(1);
                    if (!(_la === KotlinParser.RETURN_AT || _la === KotlinParser.RETURN)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3072;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 471, this._ctx);
                    if (la_ === 1) {
                        this.state = 3071;
                        this.expression();
                    }
                    break;
                case KotlinParser.CONTINUE:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 3074;
                    this.match(KotlinParser.CONTINUE);
                    break;
                case KotlinParser.CONTINUE_AT:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 3075;
                    this.match(KotlinParser.CONTINUE_AT);
                    break;
                case KotlinParser.BREAK:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 3076;
                    this.match(KotlinParser.BREAK);
                    break;
                case KotlinParser.BREAK_AT:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 3077;
                    this.match(KotlinParser.BREAK_AT);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    callableReference() {
        let localctx = new CallableReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 254, KotlinParser.RULE_callableReference);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3081;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === KotlinParser.LPAREN || _la === KotlinParser.AT || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (KotlinParser.IMPORT - 60)) | (1 << (KotlinParser.CONSTRUCTOR - 60)) | (1 << (KotlinParser.BY - 60)) | (1 << (KotlinParser.COMPANION - 60)) | (1 << (KotlinParser.INIT - 60)) | (1 << (KotlinParser.WHERE - 60)) | (1 << (KotlinParser.CATCH - 60)) | (1 << (KotlinParser.FINALLY - 60)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (KotlinParser.OUT - 94)) | (1 << (KotlinParser.GETTER - 94)) | (1 << (KotlinParser.SETTER - 94)) | (1 << (KotlinParser.DYNAMIC - 94)) | (1 << (KotlinParser.AT_FIELD - 94)) | (1 << (KotlinParser.AT_PROPERTY - 94)) | (1 << (KotlinParser.AT_GET - 94)) | (1 << (KotlinParser.AT_SET - 94)) | (1 << (KotlinParser.AT_RECEIVER - 94)) | (1 << (KotlinParser.AT_PARAM - 94)) | (1 << (KotlinParser.AT_SETPARAM - 94)) | (1 << (KotlinParser.AT_DELEGATE - 94)) | (1 << (KotlinParser.PUBLIC - 94)) | (1 << (KotlinParser.PRIVATE - 94)) | (1 << (KotlinParser.PROTECTED - 94)) | (1 << (KotlinParser.INTERNAL - 94)) | (1 << (KotlinParser.ENUM - 94)) | (1 << (KotlinParser.SEALED - 94)) | (1 << (KotlinParser.ANNOTATION - 94)) | (1 << (KotlinParser.DATA - 94)) | (1 << (KotlinParser.INNER - 94)) | (1 << (KotlinParser.TAILREC - 94)) | (1 << (KotlinParser.OPERATOR - 94)) | (1 << (KotlinParser.INLINE - 94)) | (1 << (KotlinParser.INFIX - 94)) | (1 << (KotlinParser.EXTERNAL - 94)) | (1 << (KotlinParser.SUSPEND - 94)) | (1 << (KotlinParser.OVERRIDE - 94)) | (1 << (KotlinParser.ABSTRACT - 94)) | (1 << (KotlinParser.FINAL - 94)) | (1 << (KotlinParser.OPEN - 94)))) !== 0) || ((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (KotlinParser.CONST - 126)) | (1 << (KotlinParser.LATEINIT - 126)) | (1 << (KotlinParser.VARARG - 126)) | (1 << (KotlinParser.NOINLINE - 126)) | (1 << (KotlinParser.CROSSINLINE - 126)) | (1 << (KotlinParser.REIFIED - 126)) | (1 << (KotlinParser.EXPECT - 126)) | (1 << (KotlinParser.ACTUAL - 126)) | (1 << (KotlinParser.Identifier - 126)))) !== 0)) {
                this.state = 3080;
                this.receiverType();
            }
            this.state = 3086;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 3083;
                this.match(KotlinParser.NL);
                this.state = 3088;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3089;
            this.match(KotlinParser.COLONCOLON);
            this.state = 3093;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === KotlinParser.NL) {
                this.state = 3090;
                this.match(KotlinParser.NL);
                this.state = 3095;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3098;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.IMPORT:
                case KotlinParser.CONSTRUCTOR:
                case KotlinParser.BY:
                case KotlinParser.COMPANION:
                case KotlinParser.INIT:
                case KotlinParser.WHERE:
                case KotlinParser.CATCH:
                case KotlinParser.FINALLY:
                case KotlinParser.OUT:
                case KotlinParser.GETTER:
                case KotlinParser.SETTER:
                case KotlinParser.DYNAMIC:
                case KotlinParser.PUBLIC:
                case KotlinParser.PRIVATE:
                case KotlinParser.PROTECTED:
                case KotlinParser.INTERNAL:
                case KotlinParser.ENUM:
                case KotlinParser.SEALED:
                case KotlinParser.ANNOTATION:
                case KotlinParser.DATA:
                case KotlinParser.INNER:
                case KotlinParser.TAILREC:
                case KotlinParser.OPERATOR:
                case KotlinParser.INLINE:
                case KotlinParser.INFIX:
                case KotlinParser.EXTERNAL:
                case KotlinParser.SUSPEND:
                case KotlinParser.OVERRIDE:
                case KotlinParser.ABSTRACT:
                case KotlinParser.FINAL:
                case KotlinParser.OPEN:
                case KotlinParser.CONST:
                case KotlinParser.LATEINIT:
                case KotlinParser.VARARG:
                case KotlinParser.NOINLINE:
                case KotlinParser.CROSSINLINE:
                case KotlinParser.REIFIED:
                case KotlinParser.EXPECT:
                case KotlinParser.ACTUAL:
                case KotlinParser.Identifier:
                    this.state = 3096;
                    this.simpleIdentifier();
                    break;
                case KotlinParser.CLASS:
                    this.state = 3097;
                    this.match(KotlinParser.CLASS);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    assignmentAndOperator() {
        let localctx = new AssignmentAndOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 256, KotlinParser.RULE_assignmentAndOperator);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3100;
            _la = this._input.LA(1);
            if (!(((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (KotlinParser.ADD_ASSIGNMENT - 29)) | (1 << (KotlinParser.SUB_ASSIGNMENT - 29)) | (1 << (KotlinParser.MULT_ASSIGNMENT - 29)) | (1 << (KotlinParser.DIV_ASSIGNMENT - 29)) | (1 << (KotlinParser.MOD_ASSIGNMENT - 29)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    equalityOperator() {
        let localctx = new EqualityOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 258, KotlinParser.RULE_equalityOperator);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3102;
            _la = this._input.LA(1);
            if (!(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (KotlinParser.EXCL_EQ - 48)) | (1 << (KotlinParser.EXCL_EQEQ - 48)) | (1 << (KotlinParser.EQEQ - 48)) | (1 << (KotlinParser.EQEQEQ - 48)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    comparisonOperator() {
        let localctx = new ComparisonOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 260, KotlinParser.RULE_comparisonOperator);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3104;
            _la = this._input.LA(1);
            if (!(((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (KotlinParser.LANGLE - 44)) | (1 << (KotlinParser.RANGLE - 44)) | (1 << (KotlinParser.LE - 44)) | (1 << (KotlinParser.GE - 44)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    inOperator() {
        let localctx = new InOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 262, KotlinParser.RULE_inOperator);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3106;
            _la = this._input.LA(1);
            if (!(_la === KotlinParser.IN || _la === KotlinParser.NOT_IN)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    isOperator() {
        let localctx = new IsOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 264, KotlinParser.RULE_isOperator);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3108;
            _la = this._input.LA(1);
            if (!(_la === KotlinParser.IS || _la === KotlinParser.NOT_IS)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    additiveOperator() {
        let localctx = new AdditiveOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 266, KotlinParser.RULE_additiveOperator);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3110;
            _la = this._input.LA(1);
            if (!(_la === KotlinParser.ADD || _la === KotlinParser.SUB)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    multiplicativeOperator() {
        let localctx = new MultiplicativeOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 268, KotlinParser.RULE_multiplicativeOperator);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3112;
            _la = this._input.LA(1);
            if (!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << KotlinParser.MULT) | (1 << KotlinParser.MOD) | (1 << KotlinParser.DIV))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    asOperator() {
        let localctx = new AsOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 270, KotlinParser.RULE_asOperator);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3114;
            _la = this._input.LA(1);
            if (!(_la === KotlinParser.AS_SAFE || _la === KotlinParser.AS)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    prefixUnaryOperator() {
        let localctx = new PrefixUnaryOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 272, KotlinParser.RULE_prefixUnaryOperator);
        try {
            this.state = 3121;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.INCR:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3116;
                    this.match(KotlinParser.INCR);
                    break;
                case KotlinParser.DECR:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3117;
                    this.match(KotlinParser.DECR);
                    break;
                case KotlinParser.SUB:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 3118;
                    this.match(KotlinParser.SUB);
                    break;
                case KotlinParser.ADD:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 3119;
                    this.match(KotlinParser.ADD);
                    break;
                case KotlinParser.EXCL_WS:
                case KotlinParser.EXCL_NO_WS:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 3120;
                    this.excl();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    postfixUnaryOperator() {
        let localctx = new PostfixUnaryOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 274, KotlinParser.RULE_postfixUnaryOperator);
        try {
            this.state = 3127;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.INCR:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3123;
                    this.match(KotlinParser.INCR);
                    break;
                case KotlinParser.DECR:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3124;
                    this.match(KotlinParser.DECR);
                    break;
                case KotlinParser.EXCL_NO_WS:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 3125;
                    this.match(KotlinParser.EXCL_NO_WS);
                    this.state = 3126;
                    this.excl();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    memberAccessOperator() {
        let localctx = new MemberAccessOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 276, KotlinParser.RULE_memberAccessOperator);
        try {
            this.state = 3132;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.DOT:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3129;
                    this.match(KotlinParser.DOT);
                    break;
                case KotlinParser.QUEST_NO_WS:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3130;
                    this.safeNav();
                    break;
                case KotlinParser.COLONCOLON:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 3131;
                    this.match(KotlinParser.COLONCOLON);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    modifiers() {
        let localctx = new ModifiersContext(this, this._ctx, this.state);
        this.enterRule(localctx, 278, KotlinParser.RULE_modifiers);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3136;
            this._errHandler.sync(this);
            var _alt = 1;
            do {
                switch (_alt) {
                    case 1:
                        this.state = 3136;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case KotlinParser.AT:
                            case KotlinParser.AT_FIELD:
                            case KotlinParser.AT_PROPERTY:
                            case KotlinParser.AT_GET:
                            case KotlinParser.AT_SET:
                            case KotlinParser.AT_RECEIVER:
                            case KotlinParser.AT_PARAM:
                            case KotlinParser.AT_SETPARAM:
                            case KotlinParser.AT_DELEGATE:
                                this.state = 3134;
                                this.annotation();
                                break;
                            case KotlinParser.PUBLIC:
                            case KotlinParser.PRIVATE:
                            case KotlinParser.PROTECTED:
                            case KotlinParser.INTERNAL:
                            case KotlinParser.ENUM:
                            case KotlinParser.SEALED:
                            case KotlinParser.ANNOTATION:
                            case KotlinParser.DATA:
                            case KotlinParser.INNER:
                            case KotlinParser.TAILREC:
                            case KotlinParser.OPERATOR:
                            case KotlinParser.INLINE:
                            case KotlinParser.INFIX:
                            case KotlinParser.EXTERNAL:
                            case KotlinParser.SUSPEND:
                            case KotlinParser.OVERRIDE:
                            case KotlinParser.ABSTRACT:
                            case KotlinParser.FINAL:
                            case KotlinParser.OPEN:
                            case KotlinParser.CONST:
                            case KotlinParser.LATEINIT:
                            case KotlinParser.VARARG:
                            case KotlinParser.NOINLINE:
                            case KotlinParser.CROSSINLINE:
                            case KotlinParser.EXPECT:
                            case KotlinParser.ACTUAL:
                                this.state = 3135;
                                this.modifier();
                                break;
                            default:
                                throw new antlr4_1.default.error.NoViableAltException(this);
                        }
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 3138;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 481, this._ctx);
            } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    modifier() {
        let localctx = new ModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 280, KotlinParser.RULE_modifier);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3148;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.ENUM:
                case KotlinParser.SEALED:
                case KotlinParser.ANNOTATION:
                case KotlinParser.DATA:
                case KotlinParser.INNER:
                    this.state = 3140;
                    this.classModifier();
                    break;
                case KotlinParser.OVERRIDE:
                case KotlinParser.LATEINIT:
                    this.state = 3141;
                    this.memberModifier();
                    break;
                case KotlinParser.PUBLIC:
                case KotlinParser.PRIVATE:
                case KotlinParser.PROTECTED:
                case KotlinParser.INTERNAL:
                    this.state = 3142;
                    this.visibilityModifier();
                    break;
                case KotlinParser.TAILREC:
                case KotlinParser.OPERATOR:
                case KotlinParser.INLINE:
                case KotlinParser.INFIX:
                case KotlinParser.EXTERNAL:
                case KotlinParser.SUSPEND:
                    this.state = 3143;
                    this.functionModifier();
                    break;
                case KotlinParser.CONST:
                    this.state = 3144;
                    this.propertyModifier();
                    break;
                case KotlinParser.ABSTRACT:
                case KotlinParser.FINAL:
                case KotlinParser.OPEN:
                    this.state = 3145;
                    this.inheritanceModifier();
                    break;
                case KotlinParser.VARARG:
                case KotlinParser.NOINLINE:
                case KotlinParser.CROSSINLINE:
                    this.state = 3146;
                    this.parameterModifier();
                    break;
                case KotlinParser.EXPECT:
                case KotlinParser.ACTUAL:
                    this.state = 3147;
                    this.platformModifier();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this.state = 3153;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 483, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 3150;
                    this.match(KotlinParser.NL);
                }
                this.state = 3155;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 483, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    classModifier() {
        let localctx = new ClassModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 282, KotlinParser.RULE_classModifier);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3156;
            _la = this._input.LA(1);
            if (!(((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & ((1 << (KotlinParser.ENUM - 111)) | (1 << (KotlinParser.SEALED - 111)) | (1 << (KotlinParser.ANNOTATION - 111)) | (1 << (KotlinParser.DATA - 111)) | (1 << (KotlinParser.INNER - 111)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    memberModifier() {
        let localctx = new MemberModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 284, KotlinParser.RULE_memberModifier);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3158;
            _la = this._input.LA(1);
            if (!(_la === KotlinParser.OVERRIDE || _la === KotlinParser.LATEINIT)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    visibilityModifier() {
        let localctx = new VisibilityModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 286, KotlinParser.RULE_visibilityModifier);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3160;
            _la = this._input.LA(1);
            if (!(((((_la - 107)) & ~0x1f) == 0 && ((1 << (_la - 107)) & ((1 << (KotlinParser.PUBLIC - 107)) | (1 << (KotlinParser.PRIVATE - 107)) | (1 << (KotlinParser.PROTECTED - 107)) | (1 << (KotlinParser.INTERNAL - 107)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    varianceModifier() {
        let localctx = new VarianceModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 288, KotlinParser.RULE_varianceModifier);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3162;
            _la = this._input.LA(1);
            if (!(_la === KotlinParser.IN || _la === KotlinParser.OUT)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    functionModifier() {
        let localctx = new FunctionModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 290, KotlinParser.RULE_functionModifier);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3164;
            _la = this._input.LA(1);
            if (!(((((_la - 116)) & ~0x1f) == 0 && ((1 << (_la - 116)) & ((1 << (KotlinParser.TAILREC - 116)) | (1 << (KotlinParser.OPERATOR - 116)) | (1 << (KotlinParser.INLINE - 116)) | (1 << (KotlinParser.INFIX - 116)) | (1 << (KotlinParser.EXTERNAL - 116)) | (1 << (KotlinParser.SUSPEND - 116)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    propertyModifier() {
        let localctx = new PropertyModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 292, KotlinParser.RULE_propertyModifier);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3166;
            this.match(KotlinParser.CONST);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    inheritanceModifier() {
        let localctx = new InheritanceModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 294, KotlinParser.RULE_inheritanceModifier);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3168;
            _la = this._input.LA(1);
            if (!(((((_la - 123)) & ~0x1f) == 0 && ((1 << (_la - 123)) & ((1 << (KotlinParser.ABSTRACT - 123)) | (1 << (KotlinParser.FINAL - 123)) | (1 << (KotlinParser.OPEN - 123)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parameterModifier() {
        let localctx = new ParameterModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 296, KotlinParser.RULE_parameterModifier);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3170;
            _la = this._input.LA(1);
            if (!(((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (KotlinParser.VARARG - 128)) | (1 << (KotlinParser.NOINLINE - 128)) | (1 << (KotlinParser.CROSSINLINE - 128)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    reificationModifier() {
        let localctx = new ReificationModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 298, KotlinParser.RULE_reificationModifier);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3172;
            this.match(KotlinParser.REIFIED);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    platformModifier() {
        let localctx = new PlatformModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 300, KotlinParser.RULE_platformModifier);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3174;
            _la = this._input.LA(1);
            if (!(_la === KotlinParser.EXPECT || _la === KotlinParser.ACTUAL)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    label() {
        let localctx = new LabelContext(this, this._ctx, this.state);
        this.enterRule(localctx, 302, KotlinParser.RULE_label);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3176;
            this.match(KotlinParser.IdentifierAt);
            this.state = 3180;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 484, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 3177;
                    this.match(KotlinParser.NL);
                }
                this.state = 3182;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 484, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    annotation() {
        let localctx = new AnnotationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 304, KotlinParser.RULE_annotation);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3185;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 485, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 3183;
                    this.singleAnnotation();
                    break;
                case 2:
                    this.state = 3184;
                    this.multiAnnotation();
                    break;
            }
            this.state = 3190;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 486, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 3187;
                    this.match(KotlinParser.NL);
                }
                this.state = 3192;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 486, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    singleAnnotation() {
        let localctx = new SingleAnnotationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 306, KotlinParser.RULE_singleAnnotation);
        var _la = 0; // Token type
        try {
            this.state = 3211;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.AT_FIELD:
                case KotlinParser.AT_PROPERTY:
                case KotlinParser.AT_GET:
                case KotlinParser.AT_SET:
                case KotlinParser.AT_RECEIVER:
                case KotlinParser.AT_PARAM:
                case KotlinParser.AT_SETPARAM:
                case KotlinParser.AT_DELEGATE:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3193;
                    this.annotationUseSiteTarget();
                    this.state = 3197;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 3194;
                        this.match(KotlinParser.NL);
                        this.state = 3199;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3200;
                    this.match(KotlinParser.COLON);
                    this.state = 3204;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 3201;
                        this.match(KotlinParser.NL);
                        this.state = 3206;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3207;
                    this.unescapedAnnotation();
                    break;
                case KotlinParser.AT:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3209;
                    this.match(KotlinParser.AT);
                    this.state = 3210;
                    this.unescapedAnnotation();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    multiAnnotation() {
        let localctx = new MultiAnnotationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 308, KotlinParser.RULE_multiAnnotation);
        var _la = 0; // Token type
        try {
            this.state = 3244;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.AT_FIELD:
                case KotlinParser.AT_PROPERTY:
                case KotlinParser.AT_GET:
                case KotlinParser.AT_SET:
                case KotlinParser.AT_RECEIVER:
                case KotlinParser.AT_PARAM:
                case KotlinParser.AT_SETPARAM:
                case KotlinParser.AT_DELEGATE:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3213;
                    this.annotationUseSiteTarget();
                    this.state = 3217;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 3214;
                        this.match(KotlinParser.NL);
                        this.state = 3219;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3220;
                    this.match(KotlinParser.COLON);
                    this.state = 3224;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 3221;
                        this.match(KotlinParser.NL);
                        this.state = 3226;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3227;
                    this.match(KotlinParser.LSQUARE);
                    this.state = 3229;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        this.state = 3228;
                        this.unescapedAnnotation();
                        this.state = 3231;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while (((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (KotlinParser.IMPORT - 60)) | (1 << (KotlinParser.CONSTRUCTOR - 60)) | (1 << (KotlinParser.BY - 60)) | (1 << (KotlinParser.COMPANION - 60)) | (1 << (KotlinParser.INIT - 60)) | (1 << (KotlinParser.WHERE - 60)) | (1 << (KotlinParser.CATCH - 60)) | (1 << (KotlinParser.FINALLY - 60)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (KotlinParser.OUT - 94)) | (1 << (KotlinParser.GETTER - 94)) | (1 << (KotlinParser.SETTER - 94)) | (1 << (KotlinParser.DYNAMIC - 94)) | (1 << (KotlinParser.PUBLIC - 94)) | (1 << (KotlinParser.PRIVATE - 94)) | (1 << (KotlinParser.PROTECTED - 94)) | (1 << (KotlinParser.INTERNAL - 94)) | (1 << (KotlinParser.ENUM - 94)) | (1 << (KotlinParser.SEALED - 94)) | (1 << (KotlinParser.ANNOTATION - 94)) | (1 << (KotlinParser.DATA - 94)) | (1 << (KotlinParser.INNER - 94)) | (1 << (KotlinParser.TAILREC - 94)) | (1 << (KotlinParser.OPERATOR - 94)) | (1 << (KotlinParser.INLINE - 94)) | (1 << (KotlinParser.INFIX - 94)) | (1 << (KotlinParser.EXTERNAL - 94)) | (1 << (KotlinParser.SUSPEND - 94)) | (1 << (KotlinParser.OVERRIDE - 94)) | (1 << (KotlinParser.ABSTRACT - 94)) | (1 << (KotlinParser.FINAL - 94)) | (1 << (KotlinParser.OPEN - 94)))) !== 0) || ((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (KotlinParser.CONST - 126)) | (1 << (KotlinParser.LATEINIT - 126)) | (1 << (KotlinParser.VARARG - 126)) | (1 << (KotlinParser.NOINLINE - 126)) | (1 << (KotlinParser.CROSSINLINE - 126)) | (1 << (KotlinParser.REIFIED - 126)) | (1 << (KotlinParser.EXPECT - 126)) | (1 << (KotlinParser.ACTUAL - 126)) | (1 << (KotlinParser.Identifier - 126)))) !== 0));
                    this.state = 3233;
                    this.match(KotlinParser.RSQUARE);
                    break;
                case KotlinParser.AT:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3235;
                    this.match(KotlinParser.AT);
                    this.state = 3236;
                    this.match(KotlinParser.LSQUARE);
                    this.state = 3238;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        this.state = 3237;
                        this.unescapedAnnotation();
                        this.state = 3240;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while (((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (KotlinParser.IMPORT - 60)) | (1 << (KotlinParser.CONSTRUCTOR - 60)) | (1 << (KotlinParser.BY - 60)) | (1 << (KotlinParser.COMPANION - 60)) | (1 << (KotlinParser.INIT - 60)) | (1 << (KotlinParser.WHERE - 60)) | (1 << (KotlinParser.CATCH - 60)) | (1 << (KotlinParser.FINALLY - 60)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (KotlinParser.OUT - 94)) | (1 << (KotlinParser.GETTER - 94)) | (1 << (KotlinParser.SETTER - 94)) | (1 << (KotlinParser.DYNAMIC - 94)) | (1 << (KotlinParser.PUBLIC - 94)) | (1 << (KotlinParser.PRIVATE - 94)) | (1 << (KotlinParser.PROTECTED - 94)) | (1 << (KotlinParser.INTERNAL - 94)) | (1 << (KotlinParser.ENUM - 94)) | (1 << (KotlinParser.SEALED - 94)) | (1 << (KotlinParser.ANNOTATION - 94)) | (1 << (KotlinParser.DATA - 94)) | (1 << (KotlinParser.INNER - 94)) | (1 << (KotlinParser.TAILREC - 94)) | (1 << (KotlinParser.OPERATOR - 94)) | (1 << (KotlinParser.INLINE - 94)) | (1 << (KotlinParser.INFIX - 94)) | (1 << (KotlinParser.EXTERNAL - 94)) | (1 << (KotlinParser.SUSPEND - 94)) | (1 << (KotlinParser.OVERRIDE - 94)) | (1 << (KotlinParser.ABSTRACT - 94)) | (1 << (KotlinParser.FINAL - 94)) | (1 << (KotlinParser.OPEN - 94)))) !== 0) || ((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (KotlinParser.CONST - 126)) | (1 << (KotlinParser.LATEINIT - 126)) | (1 << (KotlinParser.VARARG - 126)) | (1 << (KotlinParser.NOINLINE - 126)) | (1 << (KotlinParser.CROSSINLINE - 126)) | (1 << (KotlinParser.REIFIED - 126)) | (1 << (KotlinParser.EXPECT - 126)) | (1 << (KotlinParser.ACTUAL - 126)) | (1 << (KotlinParser.Identifier - 126)))) !== 0));
                    this.state = 3242;
                    this.match(KotlinParser.RSQUARE);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    annotationUseSiteTarget() {
        let localctx = new AnnotationUseSiteTargetContext(this, this._ctx, this.state);
        this.enterRule(localctx, 310, KotlinParser.RULE_annotationUseSiteTarget);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3246;
            _la = this._input.LA(1);
            if (!(((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (KotlinParser.AT_FIELD - 99)) | (1 << (KotlinParser.AT_PROPERTY - 99)) | (1 << (KotlinParser.AT_GET - 99)) | (1 << (KotlinParser.AT_SET - 99)) | (1 << (KotlinParser.AT_RECEIVER - 99)) | (1 << (KotlinParser.AT_PARAM - 99)) | (1 << (KotlinParser.AT_SETPARAM - 99)) | (1 << (KotlinParser.AT_DELEGATE - 99)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    unescapedAnnotation() {
        let localctx = new UnescapedAnnotationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 312, KotlinParser.RULE_unescapedAnnotation);
        try {
            this.state = 3250;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 495, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3248;
                    this.constructorInvocation();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3249;
                    this.userType();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    simpleIdentifier() {
        let localctx = new SimpleIdentifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 314, KotlinParser.RULE_simpleIdentifier);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3252;
            _la = this._input.LA(1);
            if (!(((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (KotlinParser.IMPORT - 60)) | (1 << (KotlinParser.CONSTRUCTOR - 60)) | (1 << (KotlinParser.BY - 60)) | (1 << (KotlinParser.COMPANION - 60)) | (1 << (KotlinParser.INIT - 60)) | (1 << (KotlinParser.WHERE - 60)) | (1 << (KotlinParser.CATCH - 60)) | (1 << (KotlinParser.FINALLY - 60)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (KotlinParser.OUT - 94)) | (1 << (KotlinParser.GETTER - 94)) | (1 << (KotlinParser.SETTER - 94)) | (1 << (KotlinParser.DYNAMIC - 94)) | (1 << (KotlinParser.PUBLIC - 94)) | (1 << (KotlinParser.PRIVATE - 94)) | (1 << (KotlinParser.PROTECTED - 94)) | (1 << (KotlinParser.INTERNAL - 94)) | (1 << (KotlinParser.ENUM - 94)) | (1 << (KotlinParser.SEALED - 94)) | (1 << (KotlinParser.ANNOTATION - 94)) | (1 << (KotlinParser.DATA - 94)) | (1 << (KotlinParser.INNER - 94)) | (1 << (KotlinParser.TAILREC - 94)) | (1 << (KotlinParser.OPERATOR - 94)) | (1 << (KotlinParser.INLINE - 94)) | (1 << (KotlinParser.INFIX - 94)) | (1 << (KotlinParser.EXTERNAL - 94)) | (1 << (KotlinParser.SUSPEND - 94)) | (1 << (KotlinParser.OVERRIDE - 94)) | (1 << (KotlinParser.ABSTRACT - 94)) | (1 << (KotlinParser.FINAL - 94)) | (1 << (KotlinParser.OPEN - 94)))) !== 0) || ((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (KotlinParser.CONST - 126)) | (1 << (KotlinParser.LATEINIT - 126)) | (1 << (KotlinParser.VARARG - 126)) | (1 << (KotlinParser.NOINLINE - 126)) | (1 << (KotlinParser.CROSSINLINE - 126)) | (1 << (KotlinParser.REIFIED - 126)) | (1 << (KotlinParser.EXPECT - 126)) | (1 << (KotlinParser.ACTUAL - 126)) | (1 << (KotlinParser.Identifier - 126)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    identifier() {
        let localctx = new IdentifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 316, KotlinParser.RULE_identifier);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3254;
            this.simpleIdentifier();
            this.state = 3265;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 497, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 3258;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === KotlinParser.NL) {
                        this.state = 3255;
                        this.match(KotlinParser.NL);
                        this.state = 3260;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3261;
                    this.match(KotlinParser.DOT);
                    this.state = 3262;
                    this.simpleIdentifier();
                }
                this.state = 3267;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 497, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    shebangLine() {
        let localctx = new ShebangLineContext(this, this._ctx, this.state);
        this.enterRule(localctx, 318, KotlinParser.RULE_shebangLine);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3268;
            this.match(KotlinParser.ShebangLine);
            this.state = 3270;
            this._errHandler.sync(this);
            var _alt = 1;
            do {
                switch (_alt) {
                    case 1:
                        this.state = 3269;
                        this.match(KotlinParser.NL);
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 3272;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 498, this._ctx);
            } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    quest() {
        let localctx = new QuestContext(this, this._ctx, this.state);
        this.enterRule(localctx, 320, KotlinParser.RULE_quest);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3274;
            _la = this._input.LA(1);
            if (!(_la === KotlinParser.QUEST_WS || _la === KotlinParser.QUEST_NO_WS)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    elvis() {
        let localctx = new ElvisContext(this, this._ctx, this.state);
        this.enterRule(localctx, 322, KotlinParser.RULE_elvis);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3276;
            this.match(KotlinParser.QUEST_NO_WS);
            this.state = 3277;
            this.match(KotlinParser.COLON);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    safeNav() {
        let localctx = new SafeNavContext(this, this._ctx, this.state);
        this.enterRule(localctx, 324, KotlinParser.RULE_safeNav);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3279;
            this.match(KotlinParser.QUEST_NO_WS);
            this.state = 3280;
            this.match(KotlinParser.DOT);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    excl() {
        let localctx = new ExclContext(this, this._ctx, this.state);
        this.enterRule(localctx, 326, KotlinParser.RULE_excl);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3282;
            _la = this._input.LA(1);
            if (!(_la === KotlinParser.EXCL_WS || _la === KotlinParser.EXCL_NO_WS)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    semi() {
        let localctx = new SemiContext(this, this._ctx, this.state);
        this.enterRule(localctx, 328, KotlinParser.RULE_semi);
        var _la = 0; // Token type
        try {
            this.state = 3292;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.NL:
                case KotlinParser.SEMICOLON:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3284;
                    _la = this._input.LA(1);
                    if (!(_la === KotlinParser.NL || _la === KotlinParser.SEMICOLON)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3288;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 499, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 3285;
                            this.match(KotlinParser.NL);
                        }
                        this.state = 3290;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 499, this._ctx);
                    }
                    break;
                case KotlinParser.EOF:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3291;
                    this.match(KotlinParser.EOF);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    semis() {
        let localctx = new SemisContext(this, this._ctx, this.state);
        this.enterRule(localctx, 330, KotlinParser.RULE_semis);
        var _la = 0; // Token type
        try {
            this.state = 3300;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case KotlinParser.NL:
                case KotlinParser.SEMICOLON:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3295;
                    this._errHandler.sync(this);
                    var _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                this.state = 3294;
                                _la = this._input.LA(1);
                                if (!(_la === KotlinParser.NL || _la === KotlinParser.SEMICOLON)) {
                                    this._errHandler.recoverInline(this);
                                }
                                else {
                                    this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                                break;
                            default:
                                throw new antlr4_1.default.error.NoViableAltException(this);
                        }
                        this.state = 3297;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 501, this._ctx);
                    } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
                    break;
                case KotlinParser.EOF:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3299;
                    this.match(KotlinParser.EOF);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
}
exports["default"] = KotlinParser;
KotlinParser.EOF = antlr4_1.default.Token.EOF;
KotlinParser.ShebangLine = 1;
KotlinParser.DelimitedComment = 2;
KotlinParser.LineComment = 3;
KotlinParser.WS = 4;
KotlinParser.NL = 5;
KotlinParser.RESERVED = 6;
KotlinParser.DOT = 7;
KotlinParser.COMMA = 8;
KotlinParser.LPAREN = 9;
KotlinParser.RPAREN = 10;
KotlinParser.LSQUARE = 11;
KotlinParser.RSQUARE = 12;
KotlinParser.LCURL = 13;
KotlinParser.RCURL = 14;
KotlinParser.MULT = 15;
KotlinParser.MOD = 16;
KotlinParser.DIV = 17;
KotlinParser.ADD = 18;
KotlinParser.SUB = 19;
KotlinParser.INCR = 20;
KotlinParser.DECR = 21;
KotlinParser.CONJ = 22;
KotlinParser.DISJ = 23;
KotlinParser.EXCL_WS = 24;
KotlinParser.EXCL_NO_WS = 25;
KotlinParser.COLON = 26;
KotlinParser.SEMICOLON = 27;
KotlinParser.ASSIGNMENT = 28;
KotlinParser.ADD_ASSIGNMENT = 29;
KotlinParser.SUB_ASSIGNMENT = 30;
KotlinParser.MULT_ASSIGNMENT = 31;
KotlinParser.DIV_ASSIGNMENT = 32;
KotlinParser.MOD_ASSIGNMENT = 33;
KotlinParser.ARROW = 34;
KotlinParser.DOUBLE_ARROW = 35;
KotlinParser.RANGE = 36;
KotlinParser.COLONCOLON = 37;
KotlinParser.DOUBLE_SEMICOLON = 38;
KotlinParser.HASH = 39;
KotlinParser.AT = 40;
KotlinParser.AT_WS = 41;
KotlinParser.QUEST_WS = 42;
KotlinParser.QUEST_NO_WS = 43;
KotlinParser.LANGLE = 44;
KotlinParser.RANGLE = 45;
KotlinParser.LE = 46;
KotlinParser.GE = 47;
KotlinParser.EXCL_EQ = 48;
KotlinParser.EXCL_EQEQ = 49;
KotlinParser.AS_SAFE = 50;
KotlinParser.EQEQ = 51;
KotlinParser.EQEQEQ = 52;
KotlinParser.SINGLE_QUOTE = 53;
KotlinParser.RETURN_AT = 54;
KotlinParser.CONTINUE_AT = 55;
KotlinParser.BREAK_AT = 56;
KotlinParser.THIS_AT = 57;
KotlinParser.SUPER_AT = 58;
KotlinParser.PACKAGE = 59;
KotlinParser.IMPORT = 60;
KotlinParser.CLASS = 61;
KotlinParser.INTERFACE = 62;
KotlinParser.FUN = 63;
KotlinParser.OBJECT = 64;
KotlinParser.VAL = 65;
KotlinParser.VAR = 66;
KotlinParser.TYPE_ALIAS = 67;
KotlinParser.CONSTRUCTOR = 68;
KotlinParser.BY = 69;
KotlinParser.COMPANION = 70;
KotlinParser.INIT = 71;
KotlinParser.THIS = 72;
KotlinParser.SUPER = 73;
KotlinParser.TYPEOF = 74;
KotlinParser.WHERE = 75;
KotlinParser.IF = 76;
KotlinParser.ELSE = 77;
KotlinParser.WHEN = 78;
KotlinParser.TRY = 79;
KotlinParser.CATCH = 80;
KotlinParser.FINALLY = 81;
KotlinParser.FOR = 82;
KotlinParser.DO = 83;
KotlinParser.WHILE = 84;
KotlinParser.THROW = 85;
KotlinParser.RETURN = 86;
KotlinParser.CONTINUE = 87;
KotlinParser.BREAK = 88;
KotlinParser.AS = 89;
KotlinParser.IS = 90;
KotlinParser.IN = 91;
KotlinParser.NOT_IS = 92;
KotlinParser.NOT_IN = 93;
KotlinParser.OUT = 94;
KotlinParser.GETTER = 95;
KotlinParser.SETTER = 96;
KotlinParser.DYNAMIC = 97;
KotlinParser.AT_FILE = 98;
KotlinParser.AT_FIELD = 99;
KotlinParser.AT_PROPERTY = 100;
KotlinParser.AT_GET = 101;
KotlinParser.AT_SET = 102;
KotlinParser.AT_RECEIVER = 103;
KotlinParser.AT_PARAM = 104;
KotlinParser.AT_SETPARAM = 105;
KotlinParser.AT_DELEGATE = 106;
KotlinParser.PUBLIC = 107;
KotlinParser.PRIVATE = 108;
KotlinParser.PROTECTED = 109;
KotlinParser.INTERNAL = 110;
KotlinParser.ENUM = 111;
KotlinParser.SEALED = 112;
KotlinParser.ANNOTATION = 113;
KotlinParser.DATA = 114;
KotlinParser.INNER = 115;
KotlinParser.TAILREC = 116;
KotlinParser.OPERATOR = 117;
KotlinParser.INLINE = 118;
KotlinParser.INFIX = 119;
KotlinParser.EXTERNAL = 120;
KotlinParser.SUSPEND = 121;
KotlinParser.OVERRIDE = 122;
KotlinParser.ABSTRACT = 123;
KotlinParser.FINAL = 124;
KotlinParser.OPEN = 125;
KotlinParser.CONST = 126;
KotlinParser.LATEINIT = 127;
KotlinParser.VARARG = 128;
KotlinParser.NOINLINE = 129;
KotlinParser.CROSSINLINE = 130;
KotlinParser.REIFIED = 131;
KotlinParser.EXPECT = 132;
KotlinParser.ACTUAL = 133;
KotlinParser.QUOTE_OPEN = 134;
KotlinParser.TRIPLE_QUOTE_OPEN = 135;
KotlinParser.RealLiteral = 136;
KotlinParser.FloatLiteral = 137;
KotlinParser.DoubleLiteral = 138;
KotlinParser.LongLiteral = 139;
KotlinParser.IntegerLiteral = 140;
KotlinParser.HexLiteral = 141;
KotlinParser.BinLiteral = 142;
KotlinParser.BooleanLiteral = 143;
KotlinParser.NullLiteral = 144;
KotlinParser.Identifier = 145;
KotlinParser.IdentifierAt = 146;
KotlinParser.FieldIdentifier = 147;
KotlinParser.CharacterLiteral = 148;
KotlinParser.ErrorCharacter = 149;
KotlinParser.UNICODE_CLASS_LL = 150;
KotlinParser.UNICODE_CLASS_LM = 151;
KotlinParser.UNICODE_CLASS_LO = 152;
KotlinParser.UNICODE_CLASS_LT = 153;
KotlinParser.UNICODE_CLASS_LU = 154;
KotlinParser.UNICODE_CLASS_ND = 155;
KotlinParser.UNICODE_CLASS_NL = 156;
KotlinParser.Inside_Comment = 157;
KotlinParser.Inside_WS = 158;
KotlinParser.Inside_NL = 159;
KotlinParser.QUOTE_CLOSE = 160;
KotlinParser.LineStrRef = 161;
KotlinParser.LineStrText = 162;
KotlinParser.LineStrEscapedChar = 163;
KotlinParser.LineStrExprStart = 164;
KotlinParser.TRIPLE_QUOTE_CLOSE = 165;
KotlinParser.MultiLineStringQuote = 166;
KotlinParser.MultiLineStrRef = 167;
KotlinParser.MultiLineStrText = 168;
KotlinParser.MultiLineStrExprStart = 169;
KotlinParser.RULE_kotlinFile = 0;
KotlinParser.RULE_script = 1;
KotlinParser.RULE_fileAnnotation = 2;
KotlinParser.RULE_packageHeader = 3;
KotlinParser.RULE_importList = 4;
KotlinParser.RULE_importHeader = 5;
KotlinParser.RULE_importAlias = 6;
KotlinParser.RULE_topLevelObject = 7;
KotlinParser.RULE_classDeclaration = 8;
KotlinParser.RULE_primaryConstructor = 9;
KotlinParser.RULE_classParameters = 10;
KotlinParser.RULE_classParameter = 11;
KotlinParser.RULE_delegationSpecifiers = 12;
KotlinParser.RULE_annotatedDelegationSpecifier = 13;
KotlinParser.RULE_delegationSpecifier = 14;
KotlinParser.RULE_constructorInvocation = 15;
KotlinParser.RULE_explicitDelegation = 16;
KotlinParser.RULE_classBody = 17;
KotlinParser.RULE_classMemberDeclarations = 18;
KotlinParser.RULE_classMemberDeclaration = 19;
KotlinParser.RULE_anonymousInitializer = 20;
KotlinParser.RULE_secondaryConstructor = 21;
KotlinParser.RULE_constructorDelegationCall = 22;
KotlinParser.RULE_enumClassBody = 23;
KotlinParser.RULE_enumEntries = 24;
KotlinParser.RULE_enumEntry = 25;
KotlinParser.RULE_functionDeclaration = 26;
KotlinParser.RULE_functionValueParameters = 27;
KotlinParser.RULE_functionValueParameter = 28;
KotlinParser.RULE_parameter = 29;
KotlinParser.RULE_setterParameter = 30;
KotlinParser.RULE_functionBody = 31;
KotlinParser.RULE_objectDeclaration = 32;
KotlinParser.RULE_companionObject = 33;
KotlinParser.RULE_propertyDeclaration = 34;
KotlinParser.RULE_multiVariableDeclaration = 35;
KotlinParser.RULE_variableDeclaration = 36;
KotlinParser.RULE_propertyDelegate = 37;
KotlinParser.RULE_getter = 38;
KotlinParser.RULE_setter = 39;
KotlinParser.RULE_typeAlias = 40;
KotlinParser.RULE_typeParameters = 41;
KotlinParser.RULE_typeParameter = 42;
KotlinParser.RULE_typeParameterModifiers = 43;
KotlinParser.RULE_typeParameterModifier = 44;
KotlinParser.RULE_type_ = 45;
KotlinParser.RULE_typeModifiers = 46;
KotlinParser.RULE_typeModifier = 47;
KotlinParser.RULE_parenthesizedType = 48;
KotlinParser.RULE_nullableType = 49;
KotlinParser.RULE_typeReference = 50;
KotlinParser.RULE_functionType = 51;
KotlinParser.RULE_receiverType = 52;
KotlinParser.RULE_userType = 53;
KotlinParser.RULE_parenthesizedUserType = 54;
KotlinParser.RULE_simpleUserType = 55;
KotlinParser.RULE_functionTypeParameters = 56;
KotlinParser.RULE_typeConstraints = 57;
KotlinParser.RULE_typeConstraint = 58;
KotlinParser.RULE_block = 59;
KotlinParser.RULE_statements = 60;
KotlinParser.RULE_statement = 61;
KotlinParser.RULE_declaration = 62;
KotlinParser.RULE_assignment = 63;
KotlinParser.RULE_expression = 64;
KotlinParser.RULE_disjunction = 65;
KotlinParser.RULE_conjunction = 66;
KotlinParser.RULE_equality = 67;
KotlinParser.RULE_comparison = 68;
KotlinParser.RULE_infixOperation = 69;
KotlinParser.RULE_elvisExpression = 70;
KotlinParser.RULE_infixFunctionCall = 71;
KotlinParser.RULE_rangeExpression = 72;
KotlinParser.RULE_additiveExpression = 73;
KotlinParser.RULE_multiplicativeExpression = 74;
KotlinParser.RULE_asExpression = 75;
KotlinParser.RULE_prefixUnaryExpression = 76;
KotlinParser.RULE_unaryPrefix = 77;
KotlinParser.RULE_postfixUnaryExpression = 78;
KotlinParser.RULE_postfixUnarySuffix = 79;
KotlinParser.RULE_directlyAssignableExpression = 80;
KotlinParser.RULE_assignableExpression = 81;
KotlinParser.RULE_assignableSuffix = 82;
KotlinParser.RULE_indexingSuffix = 83;
KotlinParser.RULE_navigationSuffix = 84;
KotlinParser.RULE_callSuffix = 85;
KotlinParser.RULE_annotatedLambda = 86;
KotlinParser.RULE_valueArguments = 87;
KotlinParser.RULE_typeArguments = 88;
KotlinParser.RULE_typeProjection = 89;
KotlinParser.RULE_typeProjectionModifiers = 90;
KotlinParser.RULE_typeProjectionModifier = 91;
KotlinParser.RULE_valueArgument = 92;
KotlinParser.RULE_primaryExpression = 93;
KotlinParser.RULE_parenthesizedExpression = 94;
KotlinParser.RULE_collectionLiteral = 95;
KotlinParser.RULE_literalConstant = 96;
KotlinParser.RULE_stringLiteral = 97;
KotlinParser.RULE_lineStringLiteral = 98;
KotlinParser.RULE_multiLineStringLiteral = 99;
KotlinParser.RULE_lineStringContent = 100;
KotlinParser.RULE_lineStringExpression = 101;
KotlinParser.RULE_multiLineStringContent = 102;
KotlinParser.RULE_multiLineStringExpression = 103;
KotlinParser.RULE_lambdaLiteral = 104;
KotlinParser.RULE_lambdaParameters = 105;
KotlinParser.RULE_lambdaParameter = 106;
KotlinParser.RULE_anonymousFunction = 107;
KotlinParser.RULE_functionLiteral = 108;
KotlinParser.RULE_objectLiteral = 109;
KotlinParser.RULE_thisExpression = 110;
KotlinParser.RULE_superExpression = 111;
KotlinParser.RULE_controlStructureBody = 112;
KotlinParser.RULE_ifExpression = 113;
KotlinParser.RULE_whenExpression = 114;
KotlinParser.RULE_whenEntry = 115;
KotlinParser.RULE_whenCondition = 116;
KotlinParser.RULE_rangeTest = 117;
KotlinParser.RULE_typeTest = 118;
KotlinParser.RULE_tryExpression = 119;
KotlinParser.RULE_catchBlock = 120;
KotlinParser.RULE_finallyBlock = 121;
KotlinParser.RULE_loopStatement = 122;
KotlinParser.RULE_forStatement = 123;
KotlinParser.RULE_whileStatement = 124;
KotlinParser.RULE_doWhileStatement = 125;
KotlinParser.RULE_jumpExpression = 126;
KotlinParser.RULE_callableReference = 127;
KotlinParser.RULE_assignmentAndOperator = 128;
KotlinParser.RULE_equalityOperator = 129;
KotlinParser.RULE_comparisonOperator = 130;
KotlinParser.RULE_inOperator = 131;
KotlinParser.RULE_isOperator = 132;
KotlinParser.RULE_additiveOperator = 133;
KotlinParser.RULE_multiplicativeOperator = 134;
KotlinParser.RULE_asOperator = 135;
KotlinParser.RULE_prefixUnaryOperator = 136;
KotlinParser.RULE_postfixUnaryOperator = 137;
KotlinParser.RULE_memberAccessOperator = 138;
KotlinParser.RULE_modifiers = 139;
KotlinParser.RULE_modifier = 140;
KotlinParser.RULE_classModifier = 141;
KotlinParser.RULE_memberModifier = 142;
KotlinParser.RULE_visibilityModifier = 143;
KotlinParser.RULE_varianceModifier = 144;
KotlinParser.RULE_functionModifier = 145;
KotlinParser.RULE_propertyModifier = 146;
KotlinParser.RULE_inheritanceModifier = 147;
KotlinParser.RULE_parameterModifier = 148;
KotlinParser.RULE_reificationModifier = 149;
KotlinParser.RULE_platformModifier = 150;
KotlinParser.RULE_label = 151;
KotlinParser.RULE_annotation = 152;
KotlinParser.RULE_singleAnnotation = 153;
KotlinParser.RULE_multiAnnotation = 154;
KotlinParser.RULE_annotationUseSiteTarget = 155;
KotlinParser.RULE_unescapedAnnotation = 156;
KotlinParser.RULE_simpleIdentifier = 157;
KotlinParser.RULE_identifier = 158;
KotlinParser.RULE_shebangLine = 159;
KotlinParser.RULE_quest = 160;
KotlinParser.RULE_elvis = 161;
KotlinParser.RULE_safeNav = 162;
KotlinParser.RULE_excl = 163;
KotlinParser.RULE_semi = 164;
KotlinParser.RULE_semis = 165;
class KotlinFileContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_kotlinFile;
    }
    packageHeader() {
        return this.getTypedRuleContext(PackageHeaderContext, 0);
    }
    ;
    importList() {
        return this.getTypedRuleContext(ImportListContext, 0);
    }
    ;
    EOF() {
        return this.getToken(KotlinParser.EOF, 0);
    }
    ;
    shebangLine() {
        return this.getTypedRuleContext(ShebangLineContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    fileAnnotation = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(FileAnnotationContext);
        }
        else {
            return this.getTypedRuleContext(FileAnnotationContext, i);
        }
    };
    topLevelObject = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(TopLevelObjectContext);
        }
        else {
            return this.getTypedRuleContext(TopLevelObjectContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterKotlinFile(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitKotlinFile(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitKotlinFile(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ScriptContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_script;
    }
    packageHeader() {
        return this.getTypedRuleContext(PackageHeaderContext, 0);
    }
    ;
    importList() {
        return this.getTypedRuleContext(ImportListContext, 0);
    }
    ;
    EOF() {
        return this.getToken(KotlinParser.EOF, 0);
    }
    ;
    shebangLine() {
        return this.getTypedRuleContext(ShebangLineContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    fileAnnotation = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(FileAnnotationContext);
        }
        else {
            return this.getTypedRuleContext(FileAnnotationContext, i);
        }
    };
    statement = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(StatementContext);
        }
        else {
            return this.getTypedRuleContext(StatementContext, i);
        }
    };
    semi = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(SemiContext);
        }
        else {
            return this.getTypedRuleContext(SemiContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterScript(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitScript(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitScript(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FileAnnotationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_fileAnnotation;
    }
    AT_FILE() {
        return this.getToken(KotlinParser.AT_FILE, 0);
    }
    ;
    COLON() {
        return this.getToken(KotlinParser.COLON, 0);
    }
    ;
    LSQUARE() {
        return this.getToken(KotlinParser.LSQUARE, 0);
    }
    ;
    RSQUARE() {
        return this.getToken(KotlinParser.RSQUARE, 0);
    }
    ;
    unescapedAnnotation = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(UnescapedAnnotationContext);
        }
        else {
            return this.getTypedRuleContext(UnescapedAnnotationContext, i);
        }
    };
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterFileAnnotation(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitFileAnnotation(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitFileAnnotation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PackageHeaderContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_packageHeader;
    }
    PACKAGE() {
        return this.getToken(KotlinParser.PACKAGE, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    semi() {
        return this.getTypedRuleContext(SemiContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterPackageHeader(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitPackageHeader(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitPackageHeader(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ImportListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_importList;
    }
    importHeader = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(ImportHeaderContext);
        }
        else {
            return this.getTypedRuleContext(ImportHeaderContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterImportList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitImportList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitImportList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ImportHeaderContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_importHeader;
    }
    IMPORT() {
        return this.getToken(KotlinParser.IMPORT, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    DOT() {
        return this.getToken(KotlinParser.DOT, 0);
    }
    ;
    MULT() {
        return this.getToken(KotlinParser.MULT, 0);
    }
    ;
    importAlias() {
        return this.getTypedRuleContext(ImportAliasContext, 0);
    }
    ;
    semi() {
        return this.getTypedRuleContext(SemiContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterImportHeader(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitImportHeader(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitImportHeader(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ImportAliasContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_importAlias;
    }
    AS() {
        return this.getToken(KotlinParser.AS, 0);
    }
    ;
    simpleIdentifier() {
        return this.getTypedRuleContext(SimpleIdentifierContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterImportAlias(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitImportAlias(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitImportAlias(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TopLevelObjectContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_topLevelObject;
    }
    declaration() {
        return this.getTypedRuleContext(DeclarationContext, 0);
    }
    ;
    semis() {
        return this.getTypedRuleContext(SemisContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterTopLevelObject(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitTopLevelObject(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitTopLevelObject(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ClassDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_classDeclaration;
    }
    simpleIdentifier() {
        return this.getTypedRuleContext(SimpleIdentifierContext, 0);
    }
    ;
    CLASS() {
        return this.getToken(KotlinParser.CLASS, 0);
    }
    ;
    INTERFACE() {
        return this.getToken(KotlinParser.INTERFACE, 0);
    }
    ;
    modifiers() {
        return this.getTypedRuleContext(ModifiersContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    typeParameters() {
        return this.getTypedRuleContext(TypeParametersContext, 0);
    }
    ;
    primaryConstructor() {
        return this.getTypedRuleContext(PrimaryConstructorContext, 0);
    }
    ;
    COLON() {
        return this.getToken(KotlinParser.COLON, 0);
    }
    ;
    delegationSpecifiers() {
        return this.getTypedRuleContext(DelegationSpecifiersContext, 0);
    }
    ;
    typeConstraints() {
        return this.getTypedRuleContext(TypeConstraintsContext, 0);
    }
    ;
    classBody() {
        return this.getTypedRuleContext(ClassBodyContext, 0);
    }
    ;
    enumClassBody() {
        return this.getTypedRuleContext(EnumClassBodyContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterClassDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitClassDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitClassDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PrimaryConstructorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_primaryConstructor;
    }
    classParameters() {
        return this.getTypedRuleContext(ClassParametersContext, 0);
    }
    ;
    CONSTRUCTOR() {
        return this.getToken(KotlinParser.CONSTRUCTOR, 0);
    }
    ;
    modifiers() {
        return this.getTypedRuleContext(ModifiersContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterPrimaryConstructor(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitPrimaryConstructor(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitPrimaryConstructor(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ClassParametersContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_classParameters;
    }
    LPAREN() {
        return this.getToken(KotlinParser.LPAREN, 0);
    }
    ;
    RPAREN() {
        return this.getToken(KotlinParser.RPAREN, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    classParameter = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(ClassParameterContext);
        }
        else {
            return this.getTypedRuleContext(ClassParameterContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.COMMA);
        }
        else {
            return this.getToken(KotlinParser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterClassParameters(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitClassParameters(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitClassParameters(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ClassParameterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_classParameter;
    }
    simpleIdentifier() {
        return this.getTypedRuleContext(SimpleIdentifierContext, 0);
    }
    ;
    COLON() {
        return this.getToken(KotlinParser.COLON, 0);
    }
    ;
    type_() {
        return this.getTypedRuleContext(Type_Context, 0);
    }
    ;
    modifiers() {
        return this.getTypedRuleContext(ModifiersContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    ASSIGNMENT() {
        return this.getToken(KotlinParser.ASSIGNMENT, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    VAL() {
        return this.getToken(KotlinParser.VAL, 0);
    }
    ;
    VAR() {
        return this.getToken(KotlinParser.VAR, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterClassParameter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitClassParameter(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitClassParameter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DelegationSpecifiersContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_delegationSpecifiers;
    }
    annotatedDelegationSpecifier = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(AnnotatedDelegationSpecifierContext);
        }
        else {
            return this.getTypedRuleContext(AnnotatedDelegationSpecifierContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.COMMA);
        }
        else {
            return this.getToken(KotlinParser.COMMA, i);
        }
    };
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterDelegationSpecifiers(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitDelegationSpecifiers(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitDelegationSpecifiers(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AnnotatedDelegationSpecifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_annotatedDelegationSpecifier;
    }
    delegationSpecifier() {
        return this.getTypedRuleContext(DelegationSpecifierContext, 0);
    }
    ;
    annotation = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(AnnotationContext);
        }
        else {
            return this.getTypedRuleContext(AnnotationContext, i);
        }
    };
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterAnnotatedDelegationSpecifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitAnnotatedDelegationSpecifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitAnnotatedDelegationSpecifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DelegationSpecifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_delegationSpecifier;
    }
    constructorInvocation() {
        return this.getTypedRuleContext(ConstructorInvocationContext, 0);
    }
    ;
    explicitDelegation() {
        return this.getTypedRuleContext(ExplicitDelegationContext, 0);
    }
    ;
    userType() {
        return this.getTypedRuleContext(UserTypeContext, 0);
    }
    ;
    functionType() {
        return this.getTypedRuleContext(FunctionTypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterDelegationSpecifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitDelegationSpecifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitDelegationSpecifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ConstructorInvocationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_constructorInvocation;
    }
    userType() {
        return this.getTypedRuleContext(UserTypeContext, 0);
    }
    ;
    valueArguments() {
        return this.getTypedRuleContext(ValueArgumentsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterConstructorInvocation(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitConstructorInvocation(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitConstructorInvocation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ExplicitDelegationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_explicitDelegation;
    }
    BY() {
        return this.getToken(KotlinParser.BY, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    userType() {
        return this.getTypedRuleContext(UserTypeContext, 0);
    }
    ;
    functionType() {
        return this.getTypedRuleContext(FunctionTypeContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterExplicitDelegation(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitExplicitDelegation(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitExplicitDelegation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ClassBodyContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_classBody;
    }
    LCURL() {
        return this.getToken(KotlinParser.LCURL, 0);
    }
    ;
    classMemberDeclarations() {
        return this.getTypedRuleContext(ClassMemberDeclarationsContext, 0);
    }
    ;
    RCURL() {
        return this.getToken(KotlinParser.RCURL, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterClassBody(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitClassBody(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitClassBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ClassMemberDeclarationsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_classMemberDeclarations;
    }
    classMemberDeclaration = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(ClassMemberDeclarationContext);
        }
        else {
            return this.getTypedRuleContext(ClassMemberDeclarationContext, i);
        }
    };
    semis = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(SemisContext);
        }
        else {
            return this.getTypedRuleContext(SemisContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterClassMemberDeclarations(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitClassMemberDeclarations(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitClassMemberDeclarations(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ClassMemberDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_classMemberDeclaration;
    }
    declaration() {
        return this.getTypedRuleContext(DeclarationContext, 0);
    }
    ;
    companionObject() {
        return this.getTypedRuleContext(CompanionObjectContext, 0);
    }
    ;
    anonymousInitializer() {
        return this.getTypedRuleContext(AnonymousInitializerContext, 0);
    }
    ;
    secondaryConstructor() {
        return this.getTypedRuleContext(SecondaryConstructorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterClassMemberDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitClassMemberDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitClassMemberDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AnonymousInitializerContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_anonymousInitializer;
    }
    INIT() {
        return this.getToken(KotlinParser.INIT, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterAnonymousInitializer(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitAnonymousInitializer(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitAnonymousInitializer(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SecondaryConstructorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_secondaryConstructor;
    }
    CONSTRUCTOR() {
        return this.getToken(KotlinParser.CONSTRUCTOR, 0);
    }
    ;
    functionValueParameters() {
        return this.getTypedRuleContext(FunctionValueParametersContext, 0);
    }
    ;
    modifiers() {
        return this.getTypedRuleContext(ModifiersContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    COLON() {
        return this.getToken(KotlinParser.COLON, 0);
    }
    ;
    constructorDelegationCall() {
        return this.getTypedRuleContext(ConstructorDelegationCallContext, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterSecondaryConstructor(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitSecondaryConstructor(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitSecondaryConstructor(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ConstructorDelegationCallContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_constructorDelegationCall;
    }
    THIS() {
        return this.getToken(KotlinParser.THIS, 0);
    }
    ;
    valueArguments() {
        return this.getTypedRuleContext(ValueArgumentsContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    SUPER() {
        return this.getToken(KotlinParser.SUPER, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterConstructorDelegationCall(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitConstructorDelegationCall(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitConstructorDelegationCall(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class EnumClassBodyContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_enumClassBody;
    }
    LCURL() {
        return this.getToken(KotlinParser.LCURL, 0);
    }
    ;
    RCURL() {
        return this.getToken(KotlinParser.RCURL, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enumEntries() {
        return this.getTypedRuleContext(EnumEntriesContext, 0);
    }
    ;
    SEMICOLON() {
        return this.getToken(KotlinParser.SEMICOLON, 0);
    }
    ;
    classMemberDeclarations() {
        return this.getTypedRuleContext(ClassMemberDeclarationsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterEnumClassBody(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitEnumClassBody(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitEnumClassBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class EnumEntriesContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_enumEntries;
    }
    enumEntry = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(EnumEntryContext);
        }
        else {
            return this.getTypedRuleContext(EnumEntryContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.COMMA);
        }
        else {
            return this.getToken(KotlinParser.COMMA, i);
        }
    };
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterEnumEntries(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitEnumEntries(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitEnumEntries(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class EnumEntryContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_enumEntry;
    }
    simpleIdentifier() {
        return this.getTypedRuleContext(SimpleIdentifierContext, 0);
    }
    ;
    modifiers() {
        return this.getTypedRuleContext(ModifiersContext, 0);
    }
    ;
    valueArguments() {
        return this.getTypedRuleContext(ValueArgumentsContext, 0);
    }
    ;
    classBody() {
        return this.getTypedRuleContext(ClassBodyContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterEnumEntry(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitEnumEntry(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitEnumEntry(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FunctionDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_functionDeclaration;
    }
    FUN() {
        return this.getToken(KotlinParser.FUN, 0);
    }
    ;
    simpleIdentifier() {
        return this.getTypedRuleContext(SimpleIdentifierContext, 0);
    }
    ;
    functionValueParameters() {
        return this.getTypedRuleContext(FunctionValueParametersContext, 0);
    }
    ;
    modifiers() {
        return this.getTypedRuleContext(ModifiersContext, 0);
    }
    ;
    typeParameters() {
        return this.getTypedRuleContext(TypeParametersContext, 0);
    }
    ;
    receiverType() {
        return this.getTypedRuleContext(ReceiverTypeContext, 0);
    }
    ;
    DOT() {
        return this.getToken(KotlinParser.DOT, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    COLON() {
        return this.getToken(KotlinParser.COLON, 0);
    }
    ;
    type_() {
        return this.getTypedRuleContext(Type_Context, 0);
    }
    ;
    typeConstraints() {
        return this.getTypedRuleContext(TypeConstraintsContext, 0);
    }
    ;
    functionBody() {
        return this.getTypedRuleContext(FunctionBodyContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterFunctionDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitFunctionDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitFunctionDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FunctionValueParametersContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_functionValueParameters;
    }
    LPAREN() {
        return this.getToken(KotlinParser.LPAREN, 0);
    }
    ;
    RPAREN() {
        return this.getToken(KotlinParser.RPAREN, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    functionValueParameter = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(FunctionValueParameterContext);
        }
        else {
            return this.getTypedRuleContext(FunctionValueParameterContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.COMMA);
        }
        else {
            return this.getToken(KotlinParser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterFunctionValueParameters(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitFunctionValueParameters(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitFunctionValueParameters(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FunctionValueParameterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_functionValueParameter;
    }
    parameter() {
        return this.getTypedRuleContext(ParameterContext, 0);
    }
    ;
    modifiers() {
        return this.getTypedRuleContext(ModifiersContext, 0);
    }
    ;
    ASSIGNMENT() {
        return this.getToken(KotlinParser.ASSIGNMENT, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterFunctionValueParameter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitFunctionValueParameter(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitFunctionValueParameter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ParameterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_parameter;
    }
    simpleIdentifier() {
        return this.getTypedRuleContext(SimpleIdentifierContext, 0);
    }
    ;
    COLON() {
        return this.getToken(KotlinParser.COLON, 0);
    }
    ;
    type_() {
        return this.getTypedRuleContext(Type_Context, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterParameter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitParameter(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitParameter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SetterParameterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_setterParameter;
    }
    simpleIdentifier() {
        return this.getTypedRuleContext(SimpleIdentifierContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    COLON() {
        return this.getToken(KotlinParser.COLON, 0);
    }
    ;
    type_() {
        return this.getTypedRuleContext(Type_Context, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterSetterParameter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitSetterParameter(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitSetterParameter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FunctionBodyContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_functionBody;
    }
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    ASSIGNMENT() {
        return this.getToken(KotlinParser.ASSIGNMENT, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterFunctionBody(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitFunctionBody(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitFunctionBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ObjectDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_objectDeclaration;
    }
    OBJECT() {
        return this.getToken(KotlinParser.OBJECT, 0);
    }
    ;
    simpleIdentifier() {
        return this.getTypedRuleContext(SimpleIdentifierContext, 0);
    }
    ;
    modifiers() {
        return this.getTypedRuleContext(ModifiersContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    COLON() {
        return this.getToken(KotlinParser.COLON, 0);
    }
    ;
    delegationSpecifiers() {
        return this.getTypedRuleContext(DelegationSpecifiersContext, 0);
    }
    ;
    classBody() {
        return this.getTypedRuleContext(ClassBodyContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterObjectDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitObjectDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitObjectDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CompanionObjectContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_companionObject;
    }
    COMPANION() {
        return this.getToken(KotlinParser.COMPANION, 0);
    }
    ;
    OBJECT() {
        return this.getToken(KotlinParser.OBJECT, 0);
    }
    ;
    modifiers() {
        return this.getTypedRuleContext(ModifiersContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    simpleIdentifier() {
        return this.getTypedRuleContext(SimpleIdentifierContext, 0);
    }
    ;
    COLON() {
        return this.getToken(KotlinParser.COLON, 0);
    }
    ;
    delegationSpecifiers() {
        return this.getTypedRuleContext(DelegationSpecifiersContext, 0);
    }
    ;
    classBody() {
        return this.getTypedRuleContext(ClassBodyContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterCompanionObject(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitCompanionObject(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitCompanionObject(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PropertyDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_propertyDeclaration;
    }
    VAL() {
        return this.getToken(KotlinParser.VAL, 0);
    }
    ;
    VAR() {
        return this.getToken(KotlinParser.VAR, 0);
    }
    ;
    modifiers() {
        return this.getTypedRuleContext(ModifiersContext, 0);
    }
    ;
    typeParameters() {
        return this.getTypedRuleContext(TypeParametersContext, 0);
    }
    ;
    receiverType() {
        return this.getTypedRuleContext(ReceiverTypeContext, 0);
    }
    ;
    DOT() {
        return this.getToken(KotlinParser.DOT, 0);
    }
    ;
    typeConstraints() {
        return this.getTypedRuleContext(TypeConstraintsContext, 0);
    }
    ;
    SEMICOLON() {
        return this.getToken(KotlinParser.SEMICOLON, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    multiVariableDeclaration() {
        return this.getTypedRuleContext(MultiVariableDeclarationContext, 0);
    }
    ;
    variableDeclaration() {
        return this.getTypedRuleContext(VariableDeclarationContext, 0);
    }
    ;
    ASSIGNMENT() {
        return this.getToken(KotlinParser.ASSIGNMENT, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    propertyDelegate() {
        return this.getTypedRuleContext(PropertyDelegateContext, 0);
    }
    ;
    getter() {
        return this.getTypedRuleContext(GetterContext, 0);
    }
    ;
    setter() {
        return this.getTypedRuleContext(SetterContext, 0);
    }
    ;
    semi() {
        return this.getTypedRuleContext(SemiContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterPropertyDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitPropertyDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitPropertyDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MultiVariableDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_multiVariableDeclaration;
    }
    LPAREN() {
        return this.getToken(KotlinParser.LPAREN, 0);
    }
    ;
    variableDeclaration = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(VariableDeclarationContext);
        }
        else {
            return this.getTypedRuleContext(VariableDeclarationContext, i);
        }
    };
    RPAREN() {
        return this.getToken(KotlinParser.RPAREN, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.COMMA);
        }
        else {
            return this.getToken(KotlinParser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterMultiVariableDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitMultiVariableDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitMultiVariableDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class VariableDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_variableDeclaration;
    }
    simpleIdentifier() {
        return this.getTypedRuleContext(SimpleIdentifierContext, 0);
    }
    ;
    annotation = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(AnnotationContext);
        }
        else {
            return this.getTypedRuleContext(AnnotationContext, i);
        }
    };
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    COLON() {
        return this.getToken(KotlinParser.COLON, 0);
    }
    ;
    type_() {
        return this.getTypedRuleContext(Type_Context, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterVariableDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitVariableDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitVariableDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PropertyDelegateContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_propertyDelegate;
    }
    BY() {
        return this.getToken(KotlinParser.BY, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterPropertyDelegate(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitPropertyDelegate(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitPropertyDelegate(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class GetterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_getter;
    }
    GETTER() {
        return this.getToken(KotlinParser.GETTER, 0);
    }
    ;
    modifiers() {
        return this.getTypedRuleContext(ModifiersContext, 0);
    }
    ;
    LPAREN() {
        return this.getToken(KotlinParser.LPAREN, 0);
    }
    ;
    RPAREN() {
        return this.getToken(KotlinParser.RPAREN, 0);
    }
    ;
    functionBody() {
        return this.getTypedRuleContext(FunctionBodyContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    COLON() {
        return this.getToken(KotlinParser.COLON, 0);
    }
    ;
    type_() {
        return this.getTypedRuleContext(Type_Context, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterGetter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitGetter(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitGetter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SetterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_setter;
    }
    SETTER() {
        return this.getToken(KotlinParser.SETTER, 0);
    }
    ;
    modifiers() {
        return this.getTypedRuleContext(ModifiersContext, 0);
    }
    ;
    LPAREN() {
        return this.getToken(KotlinParser.LPAREN, 0);
    }
    ;
    setterParameter() {
        return this.getTypedRuleContext(SetterParameterContext, 0);
    }
    ;
    RPAREN() {
        return this.getToken(KotlinParser.RPAREN, 0);
    }
    ;
    functionBody() {
        return this.getTypedRuleContext(FunctionBodyContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    annotation = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(AnnotationContext);
        }
        else {
            return this.getTypedRuleContext(AnnotationContext, i);
        }
    };
    parameterModifier = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(ParameterModifierContext);
        }
        else {
            return this.getTypedRuleContext(ParameterModifierContext, i);
        }
    };
    COLON() {
        return this.getToken(KotlinParser.COLON, 0);
    }
    ;
    type_() {
        return this.getTypedRuleContext(Type_Context, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterSetter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitSetter(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitSetter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeAliasContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_typeAlias;
    }
    TYPE_ALIAS() {
        return this.getToken(KotlinParser.TYPE_ALIAS, 0);
    }
    ;
    simpleIdentifier() {
        return this.getTypedRuleContext(SimpleIdentifierContext, 0);
    }
    ;
    ASSIGNMENT() {
        return this.getToken(KotlinParser.ASSIGNMENT, 0);
    }
    ;
    type_() {
        return this.getTypedRuleContext(Type_Context, 0);
    }
    ;
    modifiers() {
        return this.getTypedRuleContext(ModifiersContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    typeParameters() {
        return this.getTypedRuleContext(TypeParametersContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterTypeAlias(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitTypeAlias(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitTypeAlias(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeParametersContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_typeParameters;
    }
    LANGLE() {
        return this.getToken(KotlinParser.LANGLE, 0);
    }
    ;
    typeParameter = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(TypeParameterContext);
        }
        else {
            return this.getTypedRuleContext(TypeParameterContext, i);
        }
    };
    RANGLE() {
        return this.getToken(KotlinParser.RANGLE, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.COMMA);
        }
        else {
            return this.getToken(KotlinParser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterTypeParameters(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitTypeParameters(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitTypeParameters(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeParameterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_typeParameter;
    }
    simpleIdentifier() {
        return this.getTypedRuleContext(SimpleIdentifierContext, 0);
    }
    ;
    typeParameterModifiers() {
        return this.getTypedRuleContext(TypeParameterModifiersContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    COLON() {
        return this.getToken(KotlinParser.COLON, 0);
    }
    ;
    type_() {
        return this.getTypedRuleContext(Type_Context, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterTypeParameter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitTypeParameter(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitTypeParameter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeParameterModifiersContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_typeParameterModifiers;
    }
    typeParameterModifier = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(TypeParameterModifierContext);
        }
        else {
            return this.getTypedRuleContext(TypeParameterModifierContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterTypeParameterModifiers(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitTypeParameterModifiers(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitTypeParameterModifiers(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeParameterModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_typeParameterModifier;
    }
    reificationModifier() {
        return this.getTypedRuleContext(ReificationModifierContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    varianceModifier() {
        return this.getTypedRuleContext(VarianceModifierContext, 0);
    }
    ;
    annotation() {
        return this.getTypedRuleContext(AnnotationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterTypeParameterModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitTypeParameterModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitTypeParameterModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Type_Context extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_type_;
    }
    parenthesizedType() {
        return this.getTypedRuleContext(ParenthesizedTypeContext, 0);
    }
    ;
    nullableType() {
        return this.getTypedRuleContext(NullableTypeContext, 0);
    }
    ;
    typeReference() {
        return this.getTypedRuleContext(TypeReferenceContext, 0);
    }
    ;
    functionType() {
        return this.getTypedRuleContext(FunctionTypeContext, 0);
    }
    ;
    typeModifiers() {
        return this.getTypedRuleContext(TypeModifiersContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterType_(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitType_(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitType_(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeModifiersContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_typeModifiers;
    }
    typeModifier = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(TypeModifierContext);
        }
        else {
            return this.getTypedRuleContext(TypeModifierContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterTypeModifiers(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitTypeModifiers(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitTypeModifiers(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_typeModifier;
    }
    annotation() {
        return this.getTypedRuleContext(AnnotationContext, 0);
    }
    ;
    SUSPEND() {
        return this.getToken(KotlinParser.SUSPEND, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterTypeModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitTypeModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitTypeModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ParenthesizedTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_parenthesizedType;
    }
    LPAREN() {
        return this.getToken(KotlinParser.LPAREN, 0);
    }
    ;
    type_() {
        return this.getTypedRuleContext(Type_Context, 0);
    }
    ;
    RPAREN() {
        return this.getToken(KotlinParser.RPAREN, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterParenthesizedType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitParenthesizedType(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitParenthesizedType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class NullableTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_nullableType;
    }
    typeReference() {
        return this.getTypedRuleContext(TypeReferenceContext, 0);
    }
    ;
    parenthesizedType() {
        return this.getTypedRuleContext(ParenthesizedTypeContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    quest = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(QuestContext);
        }
        else {
            return this.getTypedRuleContext(QuestContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterNullableType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitNullableType(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitNullableType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeReferenceContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_typeReference;
    }
    userType() {
        return this.getTypedRuleContext(UserTypeContext, 0);
    }
    ;
    DYNAMIC() {
        return this.getToken(KotlinParser.DYNAMIC, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterTypeReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitTypeReference(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitTypeReference(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FunctionTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_functionType;
    }
    functionTypeParameters() {
        return this.getTypedRuleContext(FunctionTypeParametersContext, 0);
    }
    ;
    ARROW() {
        return this.getToken(KotlinParser.ARROW, 0);
    }
    ;
    type_() {
        return this.getTypedRuleContext(Type_Context, 0);
    }
    ;
    receiverType() {
        return this.getTypedRuleContext(ReceiverTypeContext, 0);
    }
    ;
    DOT() {
        return this.getToken(KotlinParser.DOT, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterFunctionType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitFunctionType(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitFunctionType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ReceiverTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_receiverType;
    }
    parenthesizedType() {
        return this.getTypedRuleContext(ParenthesizedTypeContext, 0);
    }
    ;
    nullableType() {
        return this.getTypedRuleContext(NullableTypeContext, 0);
    }
    ;
    typeReference() {
        return this.getTypedRuleContext(TypeReferenceContext, 0);
    }
    ;
    typeModifiers() {
        return this.getTypedRuleContext(TypeModifiersContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterReceiverType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitReceiverType(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitReceiverType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class UserTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_userType;
    }
    simpleUserType = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(SimpleUserTypeContext);
        }
        else {
            return this.getTypedRuleContext(SimpleUserTypeContext, i);
        }
    };
    DOT = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.DOT);
        }
        else {
            return this.getToken(KotlinParser.DOT, i);
        }
    };
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterUserType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitUserType(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitUserType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ParenthesizedUserTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_parenthesizedUserType;
    }
    LPAREN() {
        return this.getToken(KotlinParser.LPAREN, 0);
    }
    ;
    userType() {
        return this.getTypedRuleContext(UserTypeContext, 0);
    }
    ;
    RPAREN() {
        return this.getToken(KotlinParser.RPAREN, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    parenthesizedUserType() {
        return this.getTypedRuleContext(ParenthesizedUserTypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterParenthesizedUserType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitParenthesizedUserType(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitParenthesizedUserType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SimpleUserTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_simpleUserType;
    }
    simpleIdentifier() {
        return this.getTypedRuleContext(SimpleIdentifierContext, 0);
    }
    ;
    typeArguments() {
        return this.getTypedRuleContext(TypeArgumentsContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterSimpleUserType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitSimpleUserType(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitSimpleUserType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FunctionTypeParametersContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_functionTypeParameters;
    }
    LPAREN() {
        return this.getToken(KotlinParser.LPAREN, 0);
    }
    ;
    RPAREN() {
        return this.getToken(KotlinParser.RPAREN, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    parameter = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(ParameterContext);
        }
        else {
            return this.getTypedRuleContext(ParameterContext, i);
        }
    };
    type_ = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Type_Context);
        }
        else {
            return this.getTypedRuleContext(Type_Context, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.COMMA);
        }
        else {
            return this.getToken(KotlinParser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterFunctionTypeParameters(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitFunctionTypeParameters(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitFunctionTypeParameters(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeConstraintsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_typeConstraints;
    }
    WHERE() {
        return this.getToken(KotlinParser.WHERE, 0);
    }
    ;
    typeConstraint = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(TypeConstraintContext);
        }
        else {
            return this.getTypedRuleContext(TypeConstraintContext, i);
        }
    };
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.COMMA);
        }
        else {
            return this.getToken(KotlinParser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterTypeConstraints(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitTypeConstraints(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitTypeConstraints(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeConstraintContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_typeConstraint;
    }
    simpleIdentifier() {
        return this.getTypedRuleContext(SimpleIdentifierContext, 0);
    }
    ;
    COLON() {
        return this.getToken(KotlinParser.COLON, 0);
    }
    ;
    type_() {
        return this.getTypedRuleContext(Type_Context, 0);
    }
    ;
    annotation = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(AnnotationContext);
        }
        else {
            return this.getTypedRuleContext(AnnotationContext, i);
        }
    };
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterTypeConstraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitTypeConstraint(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitTypeConstraint(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class BlockContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_block;
    }
    LCURL() {
        return this.getToken(KotlinParser.LCURL, 0);
    }
    ;
    statements() {
        return this.getTypedRuleContext(StatementsContext, 0);
    }
    ;
    RCURL() {
        return this.getToken(KotlinParser.RCURL, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterBlock(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitBlock(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitBlock(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class StatementsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_statements;
    }
    statement = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(StatementContext);
        }
        else {
            return this.getTypedRuleContext(StatementContext, i);
        }
    };
    semis() {
        return this.getTypedRuleContext(SemisContext, 0);
    }
    ;
    SEMICOLON = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.SEMICOLON);
        }
        else {
            return this.getToken(KotlinParser.SEMICOLON, i);
        }
    };
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterStatements(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitStatements(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitStatements(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class StatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_statement;
    }
    declaration() {
        return this.getTypedRuleContext(DeclarationContext, 0);
    }
    ;
    assignment() {
        return this.getTypedRuleContext(AssignmentContext, 0);
    }
    ;
    loopStatement() {
        return this.getTypedRuleContext(LoopStatementContext, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    label = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(LabelContext);
        }
        else {
            return this.getTypedRuleContext(LabelContext, i);
        }
    };
    annotation = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(AnnotationContext);
        }
        else {
            return this.getTypedRuleContext(AnnotationContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_declaration;
    }
    classDeclaration() {
        return this.getTypedRuleContext(ClassDeclarationContext, 0);
    }
    ;
    objectDeclaration() {
        return this.getTypedRuleContext(ObjectDeclarationContext, 0);
    }
    ;
    functionDeclaration() {
        return this.getTypedRuleContext(FunctionDeclarationContext, 0);
    }
    ;
    propertyDeclaration() {
        return this.getTypedRuleContext(PropertyDeclarationContext, 0);
    }
    ;
    typeAlias() {
        return this.getTypedRuleContext(TypeAliasContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AssignmentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_assignment;
    }
    directlyAssignableExpression() {
        return this.getTypedRuleContext(DirectlyAssignableExpressionContext, 0);
    }
    ;
    ASSIGNMENT() {
        return this.getToken(KotlinParser.ASSIGNMENT, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    assignableExpression() {
        return this.getTypedRuleContext(AssignableExpressionContext, 0);
    }
    ;
    assignmentAndOperator() {
        return this.getTypedRuleContext(AssignmentAndOperatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterAssignment(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitAssignment(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitAssignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_expression;
    }
    disjunction() {
        return this.getTypedRuleContext(DisjunctionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DisjunctionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_disjunction;
    }
    conjunction = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(ConjunctionContext);
        }
        else {
            return this.getTypedRuleContext(ConjunctionContext, i);
        }
    };
    DISJ = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.DISJ);
        }
        else {
            return this.getToken(KotlinParser.DISJ, i);
        }
    };
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterDisjunction(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitDisjunction(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitDisjunction(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ConjunctionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_conjunction;
    }
    equality = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(EqualityContext);
        }
        else {
            return this.getTypedRuleContext(EqualityContext, i);
        }
    };
    CONJ = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.CONJ);
        }
        else {
            return this.getToken(KotlinParser.CONJ, i);
        }
    };
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterConjunction(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitConjunction(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitConjunction(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class EqualityContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_equality;
    }
    comparison = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(ComparisonContext);
        }
        else {
            return this.getTypedRuleContext(ComparisonContext, i);
        }
    };
    equalityOperator = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(EqualityOperatorContext);
        }
        else {
            return this.getTypedRuleContext(EqualityOperatorContext, i);
        }
    };
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterEquality(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitEquality(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitEquality(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ComparisonContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_comparison;
    }
    infixOperation = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(InfixOperationContext);
        }
        else {
            return this.getTypedRuleContext(InfixOperationContext, i);
        }
    };
    comparisonOperator() {
        return this.getTypedRuleContext(ComparisonOperatorContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterComparison(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitComparison(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitComparison(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InfixOperationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_infixOperation;
    }
    elvisExpression = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(ElvisExpressionContext);
        }
        else {
            return this.getTypedRuleContext(ElvisExpressionContext, i);
        }
    };
    inOperator = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(InOperatorContext);
        }
        else {
            return this.getTypedRuleContext(InOperatorContext, i);
        }
    };
    isOperator = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(IsOperatorContext);
        }
        else {
            return this.getTypedRuleContext(IsOperatorContext, i);
        }
    };
    type_ = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Type_Context);
        }
        else {
            return this.getTypedRuleContext(Type_Context, i);
        }
    };
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterInfixOperation(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitInfixOperation(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitInfixOperation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ElvisExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_elvisExpression;
    }
    infixFunctionCall = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(InfixFunctionCallContext);
        }
        else {
            return this.getTypedRuleContext(InfixFunctionCallContext, i);
        }
    };
    elvis = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(ElvisContext);
        }
        else {
            return this.getTypedRuleContext(ElvisContext, i);
        }
    };
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterElvisExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitElvisExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitElvisExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InfixFunctionCallContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_infixFunctionCall;
    }
    rangeExpression = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(RangeExpressionContext);
        }
        else {
            return this.getTypedRuleContext(RangeExpressionContext, i);
        }
    };
    simpleIdentifier = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(SimpleIdentifierContext);
        }
        else {
            return this.getTypedRuleContext(SimpleIdentifierContext, i);
        }
    };
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterInfixFunctionCall(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitInfixFunctionCall(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitInfixFunctionCall(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class RangeExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_rangeExpression;
    }
    additiveExpression = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(AdditiveExpressionContext);
        }
        else {
            return this.getTypedRuleContext(AdditiveExpressionContext, i);
        }
    };
    RANGE = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.RANGE);
        }
        else {
            return this.getToken(KotlinParser.RANGE, i);
        }
    };
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterRangeExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitRangeExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitRangeExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AdditiveExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_additiveExpression;
    }
    multiplicativeExpression = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(MultiplicativeExpressionContext);
        }
        else {
            return this.getTypedRuleContext(MultiplicativeExpressionContext, i);
        }
    };
    additiveOperator = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(AdditiveOperatorContext);
        }
        else {
            return this.getTypedRuleContext(AdditiveOperatorContext, i);
        }
    };
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterAdditiveExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitAdditiveExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitAdditiveExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MultiplicativeExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_multiplicativeExpression;
    }
    asExpression = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(AsExpressionContext);
        }
        else {
            return this.getTypedRuleContext(AsExpressionContext, i);
        }
    };
    multiplicativeOperator = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(MultiplicativeOperatorContext);
        }
        else {
            return this.getTypedRuleContext(MultiplicativeOperatorContext, i);
        }
    };
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterMultiplicativeExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitMultiplicativeExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitMultiplicativeExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AsExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_asExpression;
    }
    prefixUnaryExpression() {
        return this.getTypedRuleContext(PrefixUnaryExpressionContext, 0);
    }
    ;
    asOperator() {
        return this.getTypedRuleContext(AsOperatorContext, 0);
    }
    ;
    type_() {
        return this.getTypedRuleContext(Type_Context, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterAsExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitAsExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitAsExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PrefixUnaryExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_prefixUnaryExpression;
    }
    postfixUnaryExpression() {
        return this.getTypedRuleContext(PostfixUnaryExpressionContext, 0);
    }
    ;
    unaryPrefix = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(UnaryPrefixContext);
        }
        else {
            return this.getTypedRuleContext(UnaryPrefixContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterPrefixUnaryExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitPrefixUnaryExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitPrefixUnaryExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class UnaryPrefixContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_unaryPrefix;
    }
    annotation() {
        return this.getTypedRuleContext(AnnotationContext, 0);
    }
    ;
    label() {
        return this.getTypedRuleContext(LabelContext, 0);
    }
    ;
    prefixUnaryOperator() {
        return this.getTypedRuleContext(PrefixUnaryOperatorContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterUnaryPrefix(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitUnaryPrefix(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitUnaryPrefix(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PostfixUnaryExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_postfixUnaryExpression;
    }
    primaryExpression() {
        return this.getTypedRuleContext(PrimaryExpressionContext, 0);
    }
    ;
    postfixUnarySuffix = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(PostfixUnarySuffixContext);
        }
        else {
            return this.getTypedRuleContext(PostfixUnarySuffixContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterPostfixUnaryExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitPostfixUnaryExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitPostfixUnaryExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PostfixUnarySuffixContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_postfixUnarySuffix;
    }
    postfixUnaryOperator() {
        return this.getTypedRuleContext(PostfixUnaryOperatorContext, 0);
    }
    ;
    typeArguments() {
        return this.getTypedRuleContext(TypeArgumentsContext, 0);
    }
    ;
    callSuffix() {
        return this.getTypedRuleContext(CallSuffixContext, 0);
    }
    ;
    indexingSuffix() {
        return this.getTypedRuleContext(IndexingSuffixContext, 0);
    }
    ;
    navigationSuffix() {
        return this.getTypedRuleContext(NavigationSuffixContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterPostfixUnarySuffix(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitPostfixUnarySuffix(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitPostfixUnarySuffix(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DirectlyAssignableExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_directlyAssignableExpression;
    }
    postfixUnaryExpression() {
        return this.getTypedRuleContext(PostfixUnaryExpressionContext, 0);
    }
    ;
    assignableSuffix() {
        return this.getTypedRuleContext(AssignableSuffixContext, 0);
    }
    ;
    simpleIdentifier() {
        return this.getTypedRuleContext(SimpleIdentifierContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterDirectlyAssignableExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitDirectlyAssignableExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitDirectlyAssignableExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AssignableExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_assignableExpression;
    }
    prefixUnaryExpression() {
        return this.getTypedRuleContext(PrefixUnaryExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterAssignableExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitAssignableExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitAssignableExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AssignableSuffixContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_assignableSuffix;
    }
    typeArguments() {
        return this.getTypedRuleContext(TypeArgumentsContext, 0);
    }
    ;
    indexingSuffix() {
        return this.getTypedRuleContext(IndexingSuffixContext, 0);
    }
    ;
    navigationSuffix() {
        return this.getTypedRuleContext(NavigationSuffixContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterAssignableSuffix(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitAssignableSuffix(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitAssignableSuffix(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class IndexingSuffixContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_indexingSuffix;
    }
    LSQUARE() {
        return this.getToken(KotlinParser.LSQUARE, 0);
    }
    ;
    expression = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(ExpressionContext);
        }
        else {
            return this.getTypedRuleContext(ExpressionContext, i);
        }
    };
    RSQUARE() {
        return this.getToken(KotlinParser.RSQUARE, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.COMMA);
        }
        else {
            return this.getToken(KotlinParser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterIndexingSuffix(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitIndexingSuffix(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitIndexingSuffix(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class NavigationSuffixContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_navigationSuffix;
    }
    memberAccessOperator() {
        return this.getTypedRuleContext(MemberAccessOperatorContext, 0);
    }
    ;
    simpleIdentifier() {
        return this.getTypedRuleContext(SimpleIdentifierContext, 0);
    }
    ;
    parenthesizedExpression() {
        return this.getTypedRuleContext(ParenthesizedExpressionContext, 0);
    }
    ;
    CLASS() {
        return this.getToken(KotlinParser.CLASS, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterNavigationSuffix(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitNavigationSuffix(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitNavigationSuffix(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CallSuffixContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_callSuffix;
    }
    annotatedLambda() {
        return this.getTypedRuleContext(AnnotatedLambdaContext, 0);
    }
    ;
    typeArguments() {
        return this.getTypedRuleContext(TypeArgumentsContext, 0);
    }
    ;
    valueArguments() {
        return this.getTypedRuleContext(ValueArgumentsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterCallSuffix(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitCallSuffix(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitCallSuffix(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AnnotatedLambdaContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_annotatedLambda;
    }
    lambdaLiteral() {
        return this.getTypedRuleContext(LambdaLiteralContext, 0);
    }
    ;
    annotation = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(AnnotationContext);
        }
        else {
            return this.getTypedRuleContext(AnnotationContext, i);
        }
    };
    label() {
        return this.getTypedRuleContext(LabelContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterAnnotatedLambda(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitAnnotatedLambda(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitAnnotatedLambda(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ValueArgumentsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_valueArguments;
    }
    LPAREN() {
        return this.getToken(KotlinParser.LPAREN, 0);
    }
    ;
    RPAREN() {
        return this.getToken(KotlinParser.RPAREN, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    valueArgument = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(ValueArgumentContext);
        }
        else {
            return this.getTypedRuleContext(ValueArgumentContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.COMMA);
        }
        else {
            return this.getToken(KotlinParser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterValueArguments(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitValueArguments(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitValueArguments(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeArgumentsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_typeArguments;
    }
    LANGLE() {
        return this.getToken(KotlinParser.LANGLE, 0);
    }
    ;
    typeProjection = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(TypeProjectionContext);
        }
        else {
            return this.getTypedRuleContext(TypeProjectionContext, i);
        }
    };
    RANGLE() {
        return this.getToken(KotlinParser.RANGLE, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.COMMA);
        }
        else {
            return this.getToken(KotlinParser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterTypeArguments(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitTypeArguments(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitTypeArguments(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeProjectionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_typeProjection;
    }
    type_() {
        return this.getTypedRuleContext(Type_Context, 0);
    }
    ;
    typeProjectionModifiers() {
        return this.getTypedRuleContext(TypeProjectionModifiersContext, 0);
    }
    ;
    MULT() {
        return this.getToken(KotlinParser.MULT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterTypeProjection(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitTypeProjection(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitTypeProjection(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeProjectionModifiersContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_typeProjectionModifiers;
    }
    typeProjectionModifier = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(TypeProjectionModifierContext);
        }
        else {
            return this.getTypedRuleContext(TypeProjectionModifierContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterTypeProjectionModifiers(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitTypeProjectionModifiers(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitTypeProjectionModifiers(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeProjectionModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_typeProjectionModifier;
    }
    varianceModifier() {
        return this.getTypedRuleContext(VarianceModifierContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    annotation() {
        return this.getTypedRuleContext(AnnotationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterTypeProjectionModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitTypeProjectionModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitTypeProjectionModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ValueArgumentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_valueArgument;
    }
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    annotation() {
        return this.getTypedRuleContext(AnnotationContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    simpleIdentifier() {
        return this.getTypedRuleContext(SimpleIdentifierContext, 0);
    }
    ;
    ASSIGNMENT() {
        return this.getToken(KotlinParser.ASSIGNMENT, 0);
    }
    ;
    MULT() {
        return this.getToken(KotlinParser.MULT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterValueArgument(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitValueArgument(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitValueArgument(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PrimaryExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_primaryExpression;
    }
    parenthesizedExpression() {
        return this.getTypedRuleContext(ParenthesizedExpressionContext, 0);
    }
    ;
    literalConstant() {
        return this.getTypedRuleContext(LiteralConstantContext, 0);
    }
    ;
    stringLiteral() {
        return this.getTypedRuleContext(StringLiteralContext, 0);
    }
    ;
    simpleIdentifier() {
        return this.getTypedRuleContext(SimpleIdentifierContext, 0);
    }
    ;
    callableReference() {
        return this.getTypedRuleContext(CallableReferenceContext, 0);
    }
    ;
    functionLiteral() {
        return this.getTypedRuleContext(FunctionLiteralContext, 0);
    }
    ;
    objectLiteral() {
        return this.getTypedRuleContext(ObjectLiteralContext, 0);
    }
    ;
    collectionLiteral() {
        return this.getTypedRuleContext(CollectionLiteralContext, 0);
    }
    ;
    thisExpression() {
        return this.getTypedRuleContext(ThisExpressionContext, 0);
    }
    ;
    superExpression() {
        return this.getTypedRuleContext(SuperExpressionContext, 0);
    }
    ;
    ifExpression() {
        return this.getTypedRuleContext(IfExpressionContext, 0);
    }
    ;
    whenExpression() {
        return this.getTypedRuleContext(WhenExpressionContext, 0);
    }
    ;
    tryExpression() {
        return this.getTypedRuleContext(TryExpressionContext, 0);
    }
    ;
    jumpExpression() {
        return this.getTypedRuleContext(JumpExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterPrimaryExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitPrimaryExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitPrimaryExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ParenthesizedExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_parenthesizedExpression;
    }
    LPAREN() {
        return this.getToken(KotlinParser.LPAREN, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    RPAREN() {
        return this.getToken(KotlinParser.RPAREN, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterParenthesizedExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitParenthesizedExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitParenthesizedExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CollectionLiteralContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_collectionLiteral;
    }
    LSQUARE() {
        return this.getToken(KotlinParser.LSQUARE, 0);
    }
    ;
    expression = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(ExpressionContext);
        }
        else {
            return this.getTypedRuleContext(ExpressionContext, i);
        }
    };
    RSQUARE() {
        return this.getToken(KotlinParser.RSQUARE, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.COMMA);
        }
        else {
            return this.getToken(KotlinParser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterCollectionLiteral(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitCollectionLiteral(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitCollectionLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LiteralConstantContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_literalConstant;
    }
    BooleanLiteral() {
        return this.getToken(KotlinParser.BooleanLiteral, 0);
    }
    ;
    IntegerLiteral() {
        return this.getToken(KotlinParser.IntegerLiteral, 0);
    }
    ;
    HexLiteral() {
        return this.getToken(KotlinParser.HexLiteral, 0);
    }
    ;
    BinLiteral() {
        return this.getToken(KotlinParser.BinLiteral, 0);
    }
    ;
    CharacterLiteral() {
        return this.getToken(KotlinParser.CharacterLiteral, 0);
    }
    ;
    RealLiteral() {
        return this.getToken(KotlinParser.RealLiteral, 0);
    }
    ;
    NullLiteral() {
        return this.getToken(KotlinParser.NullLiteral, 0);
    }
    ;
    LongLiteral() {
        return this.getToken(KotlinParser.LongLiteral, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterLiteralConstant(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitLiteralConstant(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitLiteralConstant(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class StringLiteralContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_stringLiteral;
    }
    lineStringLiteral() {
        return this.getTypedRuleContext(LineStringLiteralContext, 0);
    }
    ;
    multiLineStringLiteral() {
        return this.getTypedRuleContext(MultiLineStringLiteralContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterStringLiteral(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitStringLiteral(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitStringLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LineStringLiteralContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_lineStringLiteral;
    }
    QUOTE_OPEN() {
        return this.getToken(KotlinParser.QUOTE_OPEN, 0);
    }
    ;
    QUOTE_CLOSE() {
        return this.getToken(KotlinParser.QUOTE_CLOSE, 0);
    }
    ;
    lineStringContent = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(LineStringContentContext);
        }
        else {
            return this.getTypedRuleContext(LineStringContentContext, i);
        }
    };
    lineStringExpression = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(LineStringExpressionContext);
        }
        else {
            return this.getTypedRuleContext(LineStringExpressionContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterLineStringLiteral(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitLineStringLiteral(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitLineStringLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MultiLineStringLiteralContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_multiLineStringLiteral;
    }
    TRIPLE_QUOTE_OPEN() {
        return this.getToken(KotlinParser.TRIPLE_QUOTE_OPEN, 0);
    }
    ;
    TRIPLE_QUOTE_CLOSE() {
        return this.getToken(KotlinParser.TRIPLE_QUOTE_CLOSE, 0);
    }
    ;
    multiLineStringContent = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(MultiLineStringContentContext);
        }
        else {
            return this.getTypedRuleContext(MultiLineStringContentContext, i);
        }
    };
    multiLineStringExpression = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(MultiLineStringExpressionContext);
        }
        else {
            return this.getTypedRuleContext(MultiLineStringExpressionContext, i);
        }
    };
    MultiLineStringQuote = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.MultiLineStringQuote);
        }
        else {
            return this.getToken(KotlinParser.MultiLineStringQuote, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterMultiLineStringLiteral(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitMultiLineStringLiteral(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitMultiLineStringLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LineStringContentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_lineStringContent;
    }
    LineStrText() {
        return this.getToken(KotlinParser.LineStrText, 0);
    }
    ;
    LineStrEscapedChar() {
        return this.getToken(KotlinParser.LineStrEscapedChar, 0);
    }
    ;
    LineStrRef() {
        return this.getToken(KotlinParser.LineStrRef, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterLineStringContent(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitLineStringContent(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitLineStringContent(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LineStringExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_lineStringExpression;
    }
    LineStrExprStart() {
        return this.getToken(KotlinParser.LineStrExprStart, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    RCURL() {
        return this.getToken(KotlinParser.RCURL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterLineStringExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitLineStringExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitLineStringExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MultiLineStringContentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_multiLineStringContent;
    }
    MultiLineStrText() {
        return this.getToken(KotlinParser.MultiLineStrText, 0);
    }
    ;
    MultiLineStringQuote() {
        return this.getToken(KotlinParser.MultiLineStringQuote, 0);
    }
    ;
    MultiLineStrRef() {
        return this.getToken(KotlinParser.MultiLineStrRef, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterMultiLineStringContent(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitMultiLineStringContent(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitMultiLineStringContent(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MultiLineStringExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_multiLineStringExpression;
    }
    MultiLineStrExprStart() {
        return this.getToken(KotlinParser.MultiLineStrExprStart, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    RCURL() {
        return this.getToken(KotlinParser.RCURL, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterMultiLineStringExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitMultiLineStringExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitMultiLineStringExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LambdaLiteralContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_lambdaLiteral;
    }
    LCURL() {
        return this.getToken(KotlinParser.LCURL, 0);
    }
    ;
    statements() {
        return this.getTypedRuleContext(StatementsContext, 0);
    }
    ;
    RCURL() {
        return this.getToken(KotlinParser.RCURL, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    ARROW() {
        return this.getToken(KotlinParser.ARROW, 0);
    }
    ;
    lambdaParameters() {
        return this.getTypedRuleContext(LambdaParametersContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterLambdaLiteral(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitLambdaLiteral(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitLambdaLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LambdaParametersContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_lambdaParameters;
    }
    lambdaParameter = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(LambdaParameterContext);
        }
        else {
            return this.getTypedRuleContext(LambdaParameterContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.COMMA);
        }
        else {
            return this.getToken(KotlinParser.COMMA, i);
        }
    };
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterLambdaParameters(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitLambdaParameters(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitLambdaParameters(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LambdaParameterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_lambdaParameter;
    }
    variableDeclaration() {
        return this.getTypedRuleContext(VariableDeclarationContext, 0);
    }
    ;
    multiVariableDeclaration() {
        return this.getTypedRuleContext(MultiVariableDeclarationContext, 0);
    }
    ;
    COLON() {
        return this.getToken(KotlinParser.COLON, 0);
    }
    ;
    type_() {
        return this.getTypedRuleContext(Type_Context, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterLambdaParameter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitLambdaParameter(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitLambdaParameter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AnonymousFunctionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_anonymousFunction;
    }
    FUN() {
        return this.getToken(KotlinParser.FUN, 0);
    }
    ;
    functionValueParameters() {
        return this.getTypedRuleContext(FunctionValueParametersContext, 0);
    }
    ;
    type_ = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Type_Context);
        }
        else {
            return this.getTypedRuleContext(Type_Context, i);
        }
    };
    DOT() {
        return this.getToken(KotlinParser.DOT, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    COLON() {
        return this.getToken(KotlinParser.COLON, 0);
    }
    ;
    typeConstraints() {
        return this.getTypedRuleContext(TypeConstraintsContext, 0);
    }
    ;
    functionBody() {
        return this.getTypedRuleContext(FunctionBodyContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterAnonymousFunction(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitAnonymousFunction(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitAnonymousFunction(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FunctionLiteralContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_functionLiteral;
    }
    lambdaLiteral() {
        return this.getTypedRuleContext(LambdaLiteralContext, 0);
    }
    ;
    anonymousFunction() {
        return this.getTypedRuleContext(AnonymousFunctionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterFunctionLiteral(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitFunctionLiteral(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitFunctionLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ObjectLiteralContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_objectLiteral;
    }
    OBJECT() {
        return this.getToken(KotlinParser.OBJECT, 0);
    }
    ;
    COLON() {
        return this.getToken(KotlinParser.COLON, 0);
    }
    ;
    delegationSpecifiers() {
        return this.getTypedRuleContext(DelegationSpecifiersContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    classBody() {
        return this.getTypedRuleContext(ClassBodyContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterObjectLiteral(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitObjectLiteral(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitObjectLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ThisExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_thisExpression;
    }
    THIS() {
        return this.getToken(KotlinParser.THIS, 0);
    }
    ;
    THIS_AT() {
        return this.getToken(KotlinParser.THIS_AT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterThisExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitThisExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitThisExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SuperExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_superExpression;
    }
    SUPER() {
        return this.getToken(KotlinParser.SUPER, 0);
    }
    ;
    LANGLE() {
        return this.getToken(KotlinParser.LANGLE, 0);
    }
    ;
    type_() {
        return this.getTypedRuleContext(Type_Context, 0);
    }
    ;
    RANGLE() {
        return this.getToken(KotlinParser.RANGLE, 0);
    }
    ;
    AT() {
        return this.getToken(KotlinParser.AT, 0);
    }
    ;
    simpleIdentifier() {
        return this.getTypedRuleContext(SimpleIdentifierContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    SUPER_AT() {
        return this.getToken(KotlinParser.SUPER_AT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterSuperExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitSuperExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitSuperExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ControlStructureBodyContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_controlStructureBody;
    }
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    statement() {
        return this.getTypedRuleContext(StatementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterControlStructureBody(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitControlStructureBody(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitControlStructureBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class IfExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_ifExpression;
    }
    IF() {
        return this.getToken(KotlinParser.IF, 0);
    }
    ;
    LPAREN() {
        return this.getToken(KotlinParser.LPAREN, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    RPAREN() {
        return this.getToken(KotlinParser.RPAREN, 0);
    }
    ;
    controlStructureBody = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(ControlStructureBodyContext);
        }
        else {
            return this.getTypedRuleContext(ControlStructureBodyContext, i);
        }
    };
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    ELSE() {
        return this.getToken(KotlinParser.ELSE, 0);
    }
    ;
    SEMICOLON() {
        return this.getToken(KotlinParser.SEMICOLON, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterIfExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitIfExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitIfExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class WhenExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_whenExpression;
    }
    WHEN() {
        return this.getToken(KotlinParser.WHEN, 0);
    }
    ;
    LCURL() {
        return this.getToken(KotlinParser.LCURL, 0);
    }
    ;
    RCURL() {
        return this.getToken(KotlinParser.RCURL, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    LPAREN() {
        return this.getToken(KotlinParser.LPAREN, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    RPAREN() {
        return this.getToken(KotlinParser.RPAREN, 0);
    }
    ;
    whenEntry = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(WhenEntryContext);
        }
        else {
            return this.getTypedRuleContext(WhenEntryContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterWhenExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitWhenExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitWhenExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class WhenEntryContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_whenEntry;
    }
    whenCondition = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(WhenConditionContext);
        }
        else {
            return this.getTypedRuleContext(WhenConditionContext, i);
        }
    };
    ARROW() {
        return this.getToken(KotlinParser.ARROW, 0);
    }
    ;
    controlStructureBody() {
        return this.getTypedRuleContext(ControlStructureBodyContext, 0);
    }
    ;
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.COMMA);
        }
        else {
            return this.getToken(KotlinParser.COMMA, i);
        }
    };
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    semi() {
        return this.getTypedRuleContext(SemiContext, 0);
    }
    ;
    ELSE() {
        return this.getToken(KotlinParser.ELSE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterWhenEntry(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitWhenEntry(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitWhenEntry(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class WhenConditionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_whenCondition;
    }
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    rangeTest() {
        return this.getTypedRuleContext(RangeTestContext, 0);
    }
    ;
    typeTest() {
        return this.getTypedRuleContext(TypeTestContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterWhenCondition(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitWhenCondition(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitWhenCondition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class RangeTestContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_rangeTest;
    }
    inOperator() {
        return this.getTypedRuleContext(InOperatorContext, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterRangeTest(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitRangeTest(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitRangeTest(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeTestContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_typeTest;
    }
    isOperator() {
        return this.getTypedRuleContext(IsOperatorContext, 0);
    }
    ;
    type_() {
        return this.getTypedRuleContext(Type_Context, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterTypeTest(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitTypeTest(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitTypeTest(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TryExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_tryExpression;
    }
    TRY() {
        return this.getToken(KotlinParser.TRY, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    finallyBlock() {
        return this.getTypedRuleContext(FinallyBlockContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    catchBlock = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(CatchBlockContext);
        }
        else {
            return this.getTypedRuleContext(CatchBlockContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterTryExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitTryExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitTryExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CatchBlockContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_catchBlock;
    }
    CATCH() {
        return this.getToken(KotlinParser.CATCH, 0);
    }
    ;
    LPAREN() {
        return this.getToken(KotlinParser.LPAREN, 0);
    }
    ;
    simpleIdentifier() {
        return this.getTypedRuleContext(SimpleIdentifierContext, 0);
    }
    ;
    COLON() {
        return this.getToken(KotlinParser.COLON, 0);
    }
    ;
    userType() {
        return this.getTypedRuleContext(UserTypeContext, 0);
    }
    ;
    RPAREN() {
        return this.getToken(KotlinParser.RPAREN, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    annotation = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(AnnotationContext);
        }
        else {
            return this.getTypedRuleContext(AnnotationContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterCatchBlock(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitCatchBlock(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitCatchBlock(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FinallyBlockContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_finallyBlock;
    }
    FINALLY() {
        return this.getToken(KotlinParser.FINALLY, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterFinallyBlock(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitFinallyBlock(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitFinallyBlock(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LoopStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_loopStatement;
    }
    forStatement() {
        return this.getTypedRuleContext(ForStatementContext, 0);
    }
    ;
    whileStatement() {
        return this.getTypedRuleContext(WhileStatementContext, 0);
    }
    ;
    doWhileStatement() {
        return this.getTypedRuleContext(DoWhileStatementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterLoopStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitLoopStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitLoopStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ForStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_forStatement;
    }
    FOR() {
        return this.getToken(KotlinParser.FOR, 0);
    }
    ;
    LPAREN() {
        return this.getToken(KotlinParser.LPAREN, 0);
    }
    ;
    IN() {
        return this.getToken(KotlinParser.IN, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    RPAREN() {
        return this.getToken(KotlinParser.RPAREN, 0);
    }
    ;
    variableDeclaration() {
        return this.getTypedRuleContext(VariableDeclarationContext, 0);
    }
    ;
    multiVariableDeclaration() {
        return this.getTypedRuleContext(MultiVariableDeclarationContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    annotation = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(AnnotationContext);
        }
        else {
            return this.getTypedRuleContext(AnnotationContext, i);
        }
    };
    controlStructureBody() {
        return this.getTypedRuleContext(ControlStructureBodyContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterForStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitForStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitForStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class WhileStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_whileStatement;
    }
    WHILE() {
        return this.getToken(KotlinParser.WHILE, 0);
    }
    ;
    LPAREN() {
        return this.getToken(KotlinParser.LPAREN, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    RPAREN() {
        return this.getToken(KotlinParser.RPAREN, 0);
    }
    ;
    controlStructureBody() {
        return this.getTypedRuleContext(ControlStructureBodyContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    SEMICOLON() {
        return this.getToken(KotlinParser.SEMICOLON, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterWhileStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitWhileStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitWhileStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DoWhileStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_doWhileStatement;
    }
    DO() {
        return this.getToken(KotlinParser.DO, 0);
    }
    ;
    WHILE() {
        return this.getToken(KotlinParser.WHILE, 0);
    }
    ;
    LPAREN() {
        return this.getToken(KotlinParser.LPAREN, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    RPAREN() {
        return this.getToken(KotlinParser.RPAREN, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    controlStructureBody() {
        return this.getTypedRuleContext(ControlStructureBodyContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterDoWhileStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitDoWhileStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitDoWhileStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class JumpExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_jumpExpression;
    }
    THROW() {
        return this.getToken(KotlinParser.THROW, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    RETURN() {
        return this.getToken(KotlinParser.RETURN, 0);
    }
    ;
    RETURN_AT() {
        return this.getToken(KotlinParser.RETURN_AT, 0);
    }
    ;
    CONTINUE() {
        return this.getToken(KotlinParser.CONTINUE, 0);
    }
    ;
    CONTINUE_AT() {
        return this.getToken(KotlinParser.CONTINUE_AT, 0);
    }
    ;
    BREAK() {
        return this.getToken(KotlinParser.BREAK, 0);
    }
    ;
    BREAK_AT() {
        return this.getToken(KotlinParser.BREAK_AT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterJumpExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitJumpExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitJumpExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CallableReferenceContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_callableReference;
    }
    COLONCOLON() {
        return this.getToken(KotlinParser.COLONCOLON, 0);
    }
    ;
    simpleIdentifier() {
        return this.getTypedRuleContext(SimpleIdentifierContext, 0);
    }
    ;
    CLASS() {
        return this.getToken(KotlinParser.CLASS, 0);
    }
    ;
    receiverType() {
        return this.getTypedRuleContext(ReceiverTypeContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterCallableReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitCallableReference(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitCallableReference(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AssignmentAndOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_assignmentAndOperator;
    }
    ADD_ASSIGNMENT() {
        return this.getToken(KotlinParser.ADD_ASSIGNMENT, 0);
    }
    ;
    SUB_ASSIGNMENT() {
        return this.getToken(KotlinParser.SUB_ASSIGNMENT, 0);
    }
    ;
    MULT_ASSIGNMENT() {
        return this.getToken(KotlinParser.MULT_ASSIGNMENT, 0);
    }
    ;
    DIV_ASSIGNMENT() {
        return this.getToken(KotlinParser.DIV_ASSIGNMENT, 0);
    }
    ;
    MOD_ASSIGNMENT() {
        return this.getToken(KotlinParser.MOD_ASSIGNMENT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterAssignmentAndOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitAssignmentAndOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitAssignmentAndOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class EqualityOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_equalityOperator;
    }
    EXCL_EQ() {
        return this.getToken(KotlinParser.EXCL_EQ, 0);
    }
    ;
    EXCL_EQEQ() {
        return this.getToken(KotlinParser.EXCL_EQEQ, 0);
    }
    ;
    EQEQ() {
        return this.getToken(KotlinParser.EQEQ, 0);
    }
    ;
    EQEQEQ() {
        return this.getToken(KotlinParser.EQEQEQ, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterEqualityOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitEqualityOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitEqualityOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ComparisonOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_comparisonOperator;
    }
    LANGLE() {
        return this.getToken(KotlinParser.LANGLE, 0);
    }
    ;
    RANGLE() {
        return this.getToken(KotlinParser.RANGLE, 0);
    }
    ;
    LE() {
        return this.getToken(KotlinParser.LE, 0);
    }
    ;
    GE() {
        return this.getToken(KotlinParser.GE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterComparisonOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitComparisonOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitComparisonOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_inOperator;
    }
    IN() {
        return this.getToken(KotlinParser.IN, 0);
    }
    ;
    NOT_IN() {
        return this.getToken(KotlinParser.NOT_IN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterInOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitInOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitInOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class IsOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_isOperator;
    }
    IS() {
        return this.getToken(KotlinParser.IS, 0);
    }
    ;
    NOT_IS() {
        return this.getToken(KotlinParser.NOT_IS, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterIsOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitIsOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitIsOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AdditiveOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_additiveOperator;
    }
    ADD() {
        return this.getToken(KotlinParser.ADD, 0);
    }
    ;
    SUB() {
        return this.getToken(KotlinParser.SUB, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterAdditiveOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitAdditiveOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitAdditiveOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MultiplicativeOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_multiplicativeOperator;
    }
    MULT() {
        return this.getToken(KotlinParser.MULT, 0);
    }
    ;
    DIV() {
        return this.getToken(KotlinParser.DIV, 0);
    }
    ;
    MOD() {
        return this.getToken(KotlinParser.MOD, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterMultiplicativeOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitMultiplicativeOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitMultiplicativeOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AsOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_asOperator;
    }
    AS() {
        return this.getToken(KotlinParser.AS, 0);
    }
    ;
    AS_SAFE() {
        return this.getToken(KotlinParser.AS_SAFE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterAsOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitAsOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitAsOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PrefixUnaryOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_prefixUnaryOperator;
    }
    INCR() {
        return this.getToken(KotlinParser.INCR, 0);
    }
    ;
    DECR() {
        return this.getToken(KotlinParser.DECR, 0);
    }
    ;
    SUB() {
        return this.getToken(KotlinParser.SUB, 0);
    }
    ;
    ADD() {
        return this.getToken(KotlinParser.ADD, 0);
    }
    ;
    excl() {
        return this.getTypedRuleContext(ExclContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterPrefixUnaryOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitPrefixUnaryOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitPrefixUnaryOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PostfixUnaryOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_postfixUnaryOperator;
    }
    INCR() {
        return this.getToken(KotlinParser.INCR, 0);
    }
    ;
    DECR() {
        return this.getToken(KotlinParser.DECR, 0);
    }
    ;
    EXCL_NO_WS() {
        return this.getToken(KotlinParser.EXCL_NO_WS, 0);
    }
    ;
    excl() {
        return this.getTypedRuleContext(ExclContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterPostfixUnaryOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitPostfixUnaryOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitPostfixUnaryOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MemberAccessOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_memberAccessOperator;
    }
    DOT() {
        return this.getToken(KotlinParser.DOT, 0);
    }
    ;
    safeNav() {
        return this.getTypedRuleContext(SafeNavContext, 0);
    }
    ;
    COLONCOLON() {
        return this.getToken(KotlinParser.COLONCOLON, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterMemberAccessOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitMemberAccessOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitMemberAccessOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ModifiersContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_modifiers;
    }
    annotation = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(AnnotationContext);
        }
        else {
            return this.getTypedRuleContext(AnnotationContext, i);
        }
    };
    modifier = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(ModifierContext);
        }
        else {
            return this.getTypedRuleContext(ModifierContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterModifiers(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitModifiers(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitModifiers(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_modifier;
    }
    classModifier() {
        return this.getTypedRuleContext(ClassModifierContext, 0);
    }
    ;
    memberModifier() {
        return this.getTypedRuleContext(MemberModifierContext, 0);
    }
    ;
    visibilityModifier() {
        return this.getTypedRuleContext(VisibilityModifierContext, 0);
    }
    ;
    functionModifier() {
        return this.getTypedRuleContext(FunctionModifierContext, 0);
    }
    ;
    propertyModifier() {
        return this.getTypedRuleContext(PropertyModifierContext, 0);
    }
    ;
    inheritanceModifier() {
        return this.getTypedRuleContext(InheritanceModifierContext, 0);
    }
    ;
    parameterModifier() {
        return this.getTypedRuleContext(ParameterModifierContext, 0);
    }
    ;
    platformModifier() {
        return this.getTypedRuleContext(PlatformModifierContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ClassModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_classModifier;
    }
    ENUM() {
        return this.getToken(KotlinParser.ENUM, 0);
    }
    ;
    SEALED() {
        return this.getToken(KotlinParser.SEALED, 0);
    }
    ;
    ANNOTATION() {
        return this.getToken(KotlinParser.ANNOTATION, 0);
    }
    ;
    DATA() {
        return this.getToken(KotlinParser.DATA, 0);
    }
    ;
    INNER() {
        return this.getToken(KotlinParser.INNER, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterClassModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitClassModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitClassModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MemberModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_memberModifier;
    }
    OVERRIDE() {
        return this.getToken(KotlinParser.OVERRIDE, 0);
    }
    ;
    LATEINIT() {
        return this.getToken(KotlinParser.LATEINIT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterMemberModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitMemberModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitMemberModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class VisibilityModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_visibilityModifier;
    }
    PUBLIC() {
        return this.getToken(KotlinParser.PUBLIC, 0);
    }
    ;
    PRIVATE() {
        return this.getToken(KotlinParser.PRIVATE, 0);
    }
    ;
    INTERNAL() {
        return this.getToken(KotlinParser.INTERNAL, 0);
    }
    ;
    PROTECTED() {
        return this.getToken(KotlinParser.PROTECTED, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterVisibilityModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitVisibilityModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitVisibilityModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class VarianceModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_varianceModifier;
    }
    IN() {
        return this.getToken(KotlinParser.IN, 0);
    }
    ;
    OUT() {
        return this.getToken(KotlinParser.OUT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterVarianceModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitVarianceModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitVarianceModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FunctionModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_functionModifier;
    }
    TAILREC() {
        return this.getToken(KotlinParser.TAILREC, 0);
    }
    ;
    OPERATOR() {
        return this.getToken(KotlinParser.OPERATOR, 0);
    }
    ;
    INFIX() {
        return this.getToken(KotlinParser.INFIX, 0);
    }
    ;
    INLINE() {
        return this.getToken(KotlinParser.INLINE, 0);
    }
    ;
    EXTERNAL() {
        return this.getToken(KotlinParser.EXTERNAL, 0);
    }
    ;
    SUSPEND() {
        return this.getToken(KotlinParser.SUSPEND, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterFunctionModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitFunctionModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitFunctionModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PropertyModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_propertyModifier;
    }
    CONST() {
        return this.getToken(KotlinParser.CONST, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterPropertyModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitPropertyModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitPropertyModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InheritanceModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_inheritanceModifier;
    }
    ABSTRACT() {
        return this.getToken(KotlinParser.ABSTRACT, 0);
    }
    ;
    FINAL() {
        return this.getToken(KotlinParser.FINAL, 0);
    }
    ;
    OPEN() {
        return this.getToken(KotlinParser.OPEN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterInheritanceModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitInheritanceModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitInheritanceModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ParameterModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_parameterModifier;
    }
    VARARG() {
        return this.getToken(KotlinParser.VARARG, 0);
    }
    ;
    NOINLINE() {
        return this.getToken(KotlinParser.NOINLINE, 0);
    }
    ;
    CROSSINLINE() {
        return this.getToken(KotlinParser.CROSSINLINE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterParameterModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitParameterModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitParameterModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ReificationModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_reificationModifier;
    }
    REIFIED() {
        return this.getToken(KotlinParser.REIFIED, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterReificationModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitReificationModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitReificationModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PlatformModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_platformModifier;
    }
    EXPECT() {
        return this.getToken(KotlinParser.EXPECT, 0);
    }
    ;
    ACTUAL() {
        return this.getToken(KotlinParser.ACTUAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterPlatformModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitPlatformModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitPlatformModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LabelContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_label;
    }
    IdentifierAt() {
        return this.getToken(KotlinParser.IdentifierAt, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterLabel(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitLabel(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitLabel(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AnnotationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_annotation;
    }
    singleAnnotation() {
        return this.getTypedRuleContext(SingleAnnotationContext, 0);
    }
    ;
    multiAnnotation() {
        return this.getTypedRuleContext(MultiAnnotationContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterAnnotation(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitAnnotation(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitAnnotation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SingleAnnotationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_singleAnnotation;
    }
    annotationUseSiteTarget() {
        return this.getTypedRuleContext(AnnotationUseSiteTargetContext, 0);
    }
    ;
    COLON() {
        return this.getToken(KotlinParser.COLON, 0);
    }
    ;
    unescapedAnnotation() {
        return this.getTypedRuleContext(UnescapedAnnotationContext, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    AT() {
        return this.getToken(KotlinParser.AT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterSingleAnnotation(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitSingleAnnotation(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitSingleAnnotation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MultiAnnotationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_multiAnnotation;
    }
    annotationUseSiteTarget() {
        return this.getTypedRuleContext(AnnotationUseSiteTargetContext, 0);
    }
    ;
    COLON() {
        return this.getToken(KotlinParser.COLON, 0);
    }
    ;
    LSQUARE() {
        return this.getToken(KotlinParser.LSQUARE, 0);
    }
    ;
    RSQUARE() {
        return this.getToken(KotlinParser.RSQUARE, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    unescapedAnnotation = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(UnescapedAnnotationContext);
        }
        else {
            return this.getTypedRuleContext(UnescapedAnnotationContext, i);
        }
    };
    AT() {
        return this.getToken(KotlinParser.AT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterMultiAnnotation(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitMultiAnnotation(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitMultiAnnotation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AnnotationUseSiteTargetContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_annotationUseSiteTarget;
    }
    AT_FIELD() {
        return this.getToken(KotlinParser.AT_FIELD, 0);
    }
    ;
    AT_PROPERTY() {
        return this.getToken(KotlinParser.AT_PROPERTY, 0);
    }
    ;
    AT_GET() {
        return this.getToken(KotlinParser.AT_GET, 0);
    }
    ;
    AT_SET() {
        return this.getToken(KotlinParser.AT_SET, 0);
    }
    ;
    AT_RECEIVER() {
        return this.getToken(KotlinParser.AT_RECEIVER, 0);
    }
    ;
    AT_PARAM() {
        return this.getToken(KotlinParser.AT_PARAM, 0);
    }
    ;
    AT_SETPARAM() {
        return this.getToken(KotlinParser.AT_SETPARAM, 0);
    }
    ;
    AT_DELEGATE() {
        return this.getToken(KotlinParser.AT_DELEGATE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterAnnotationUseSiteTarget(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitAnnotationUseSiteTarget(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitAnnotationUseSiteTarget(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class UnescapedAnnotationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_unescapedAnnotation;
    }
    constructorInvocation() {
        return this.getTypedRuleContext(ConstructorInvocationContext, 0);
    }
    ;
    userType() {
        return this.getTypedRuleContext(UserTypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterUnescapedAnnotation(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitUnescapedAnnotation(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitUnescapedAnnotation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SimpleIdentifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_simpleIdentifier;
    }
    Identifier() {
        return this.getToken(KotlinParser.Identifier, 0);
    }
    ;
    ABSTRACT() {
        return this.getToken(KotlinParser.ABSTRACT, 0);
    }
    ;
    ANNOTATION() {
        return this.getToken(KotlinParser.ANNOTATION, 0);
    }
    ;
    BY() {
        return this.getToken(KotlinParser.BY, 0);
    }
    ;
    CATCH() {
        return this.getToken(KotlinParser.CATCH, 0);
    }
    ;
    COMPANION() {
        return this.getToken(KotlinParser.COMPANION, 0);
    }
    ;
    CONSTRUCTOR() {
        return this.getToken(KotlinParser.CONSTRUCTOR, 0);
    }
    ;
    CROSSINLINE() {
        return this.getToken(KotlinParser.CROSSINLINE, 0);
    }
    ;
    DATA() {
        return this.getToken(KotlinParser.DATA, 0);
    }
    ;
    DYNAMIC() {
        return this.getToken(KotlinParser.DYNAMIC, 0);
    }
    ;
    ENUM() {
        return this.getToken(KotlinParser.ENUM, 0);
    }
    ;
    EXTERNAL() {
        return this.getToken(KotlinParser.EXTERNAL, 0);
    }
    ;
    FINAL() {
        return this.getToken(KotlinParser.FINAL, 0);
    }
    ;
    FINALLY() {
        return this.getToken(KotlinParser.FINALLY, 0);
    }
    ;
    GETTER() {
        return this.getToken(KotlinParser.GETTER, 0);
    }
    ;
    IMPORT() {
        return this.getToken(KotlinParser.IMPORT, 0);
    }
    ;
    INFIX() {
        return this.getToken(KotlinParser.INFIX, 0);
    }
    ;
    INIT() {
        return this.getToken(KotlinParser.INIT, 0);
    }
    ;
    INLINE() {
        return this.getToken(KotlinParser.INLINE, 0);
    }
    ;
    INNER() {
        return this.getToken(KotlinParser.INNER, 0);
    }
    ;
    INTERNAL() {
        return this.getToken(KotlinParser.INTERNAL, 0);
    }
    ;
    LATEINIT() {
        return this.getToken(KotlinParser.LATEINIT, 0);
    }
    ;
    NOINLINE() {
        return this.getToken(KotlinParser.NOINLINE, 0);
    }
    ;
    OPEN() {
        return this.getToken(KotlinParser.OPEN, 0);
    }
    ;
    OPERATOR() {
        return this.getToken(KotlinParser.OPERATOR, 0);
    }
    ;
    OUT() {
        return this.getToken(KotlinParser.OUT, 0);
    }
    ;
    OVERRIDE() {
        return this.getToken(KotlinParser.OVERRIDE, 0);
    }
    ;
    PRIVATE() {
        return this.getToken(KotlinParser.PRIVATE, 0);
    }
    ;
    PROTECTED() {
        return this.getToken(KotlinParser.PROTECTED, 0);
    }
    ;
    PUBLIC() {
        return this.getToken(KotlinParser.PUBLIC, 0);
    }
    ;
    REIFIED() {
        return this.getToken(KotlinParser.REIFIED, 0);
    }
    ;
    SEALED() {
        return this.getToken(KotlinParser.SEALED, 0);
    }
    ;
    TAILREC() {
        return this.getToken(KotlinParser.TAILREC, 0);
    }
    ;
    SETTER() {
        return this.getToken(KotlinParser.SETTER, 0);
    }
    ;
    VARARG() {
        return this.getToken(KotlinParser.VARARG, 0);
    }
    ;
    WHERE() {
        return this.getToken(KotlinParser.WHERE, 0);
    }
    ;
    EXPECT() {
        return this.getToken(KotlinParser.EXPECT, 0);
    }
    ;
    ACTUAL() {
        return this.getToken(KotlinParser.ACTUAL, 0);
    }
    ;
    CONST() {
        return this.getToken(KotlinParser.CONST, 0);
    }
    ;
    SUSPEND() {
        return this.getToken(KotlinParser.SUSPEND, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterSimpleIdentifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitSimpleIdentifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitSimpleIdentifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class IdentifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_identifier;
    }
    simpleIdentifier = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(SimpleIdentifierContext);
        }
        else {
            return this.getTypedRuleContext(SimpleIdentifierContext, i);
        }
    };
    DOT = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.DOT);
        }
        else {
            return this.getToken(KotlinParser.DOT, i);
        }
    };
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterIdentifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitIdentifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitIdentifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ShebangLineContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_shebangLine;
    }
    ShebangLine() {
        return this.getToken(KotlinParser.ShebangLine, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterShebangLine(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitShebangLine(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitShebangLine(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class QuestContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_quest;
    }
    QUEST_NO_WS() {
        return this.getToken(KotlinParser.QUEST_NO_WS, 0);
    }
    ;
    QUEST_WS() {
        return this.getToken(KotlinParser.QUEST_WS, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterQuest(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitQuest(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitQuest(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ElvisContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_elvis;
    }
    QUEST_NO_WS() {
        return this.getToken(KotlinParser.QUEST_NO_WS, 0);
    }
    ;
    COLON() {
        return this.getToken(KotlinParser.COLON, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterElvis(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitElvis(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitElvis(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SafeNavContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_safeNav;
    }
    QUEST_NO_WS() {
        return this.getToken(KotlinParser.QUEST_NO_WS, 0);
    }
    ;
    DOT() {
        return this.getToken(KotlinParser.DOT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterSafeNav(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitSafeNav(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitSafeNav(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ExclContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_excl;
    }
    EXCL_NO_WS() {
        return this.getToken(KotlinParser.EXCL_NO_WS, 0);
    }
    ;
    EXCL_WS() {
        return this.getToken(KotlinParser.EXCL_WS, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterExcl(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitExcl(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitExcl(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SemiContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_semi;
    }
    SEMICOLON() {
        return this.getToken(KotlinParser.SEMICOLON, 0);
    }
    ;
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    EOF() {
        return this.getToken(KotlinParser.EOF, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterSemi(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitSemi(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitSemi(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SemisContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KotlinParser.RULE_semis;
    }
    SEMICOLON = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.SEMICOLON);
        }
        else {
            return this.getToken(KotlinParser.SEMICOLON, i);
        }
    };
    NL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(KotlinParser.NL);
        }
        else {
            return this.getToken(KotlinParser.NL, i);
        }
    };
    EOF() {
        return this.getToken(KotlinParser.EOF, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.enterSemis(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof KotlinParserListener_1.default) {
            listener.exitSemis(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof KotlinParserVisitor_1.default) {
            return visitor.visitSemis(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
KotlinParser.KotlinFileContext = KotlinFileContext;
KotlinParser.ScriptContext = ScriptContext;
KotlinParser.FileAnnotationContext = FileAnnotationContext;
KotlinParser.PackageHeaderContext = PackageHeaderContext;
KotlinParser.ImportListContext = ImportListContext;
KotlinParser.ImportHeaderContext = ImportHeaderContext;
KotlinParser.ImportAliasContext = ImportAliasContext;
KotlinParser.TopLevelObjectContext = TopLevelObjectContext;
KotlinParser.ClassDeclarationContext = ClassDeclarationContext;
KotlinParser.PrimaryConstructorContext = PrimaryConstructorContext;
KotlinParser.ClassParametersContext = ClassParametersContext;
KotlinParser.ClassParameterContext = ClassParameterContext;
KotlinParser.DelegationSpecifiersContext = DelegationSpecifiersContext;
KotlinParser.AnnotatedDelegationSpecifierContext = AnnotatedDelegationSpecifierContext;
KotlinParser.DelegationSpecifierContext = DelegationSpecifierContext;
KotlinParser.ConstructorInvocationContext = ConstructorInvocationContext;
KotlinParser.ExplicitDelegationContext = ExplicitDelegationContext;
KotlinParser.ClassBodyContext = ClassBodyContext;
KotlinParser.ClassMemberDeclarationsContext = ClassMemberDeclarationsContext;
KotlinParser.ClassMemberDeclarationContext = ClassMemberDeclarationContext;
KotlinParser.AnonymousInitializerContext = AnonymousInitializerContext;
KotlinParser.SecondaryConstructorContext = SecondaryConstructorContext;
KotlinParser.ConstructorDelegationCallContext = ConstructorDelegationCallContext;
KotlinParser.EnumClassBodyContext = EnumClassBodyContext;
KotlinParser.EnumEntriesContext = EnumEntriesContext;
KotlinParser.EnumEntryContext = EnumEntryContext;
KotlinParser.FunctionDeclarationContext = FunctionDeclarationContext;
KotlinParser.FunctionValueParametersContext = FunctionValueParametersContext;
KotlinParser.FunctionValueParameterContext = FunctionValueParameterContext;
KotlinParser.ParameterContext = ParameterContext;
KotlinParser.SetterParameterContext = SetterParameterContext;
KotlinParser.FunctionBodyContext = FunctionBodyContext;
KotlinParser.ObjectDeclarationContext = ObjectDeclarationContext;
KotlinParser.CompanionObjectContext = CompanionObjectContext;
KotlinParser.PropertyDeclarationContext = PropertyDeclarationContext;
KotlinParser.MultiVariableDeclarationContext = MultiVariableDeclarationContext;
KotlinParser.VariableDeclarationContext = VariableDeclarationContext;
KotlinParser.PropertyDelegateContext = PropertyDelegateContext;
KotlinParser.GetterContext = GetterContext;
KotlinParser.SetterContext = SetterContext;
KotlinParser.TypeAliasContext = TypeAliasContext;
KotlinParser.TypeParametersContext = TypeParametersContext;
KotlinParser.TypeParameterContext = TypeParameterContext;
KotlinParser.TypeParameterModifiersContext = TypeParameterModifiersContext;
KotlinParser.TypeParameterModifierContext = TypeParameterModifierContext;
KotlinParser.Type_Context = Type_Context;
KotlinParser.TypeModifiersContext = TypeModifiersContext;
KotlinParser.TypeModifierContext = TypeModifierContext;
KotlinParser.ParenthesizedTypeContext = ParenthesizedTypeContext;
KotlinParser.NullableTypeContext = NullableTypeContext;
KotlinParser.TypeReferenceContext = TypeReferenceContext;
KotlinParser.FunctionTypeContext = FunctionTypeContext;
KotlinParser.ReceiverTypeContext = ReceiverTypeContext;
KotlinParser.UserTypeContext = UserTypeContext;
KotlinParser.ParenthesizedUserTypeContext = ParenthesizedUserTypeContext;
KotlinParser.SimpleUserTypeContext = SimpleUserTypeContext;
KotlinParser.FunctionTypeParametersContext = FunctionTypeParametersContext;
KotlinParser.TypeConstraintsContext = TypeConstraintsContext;
KotlinParser.TypeConstraintContext = TypeConstraintContext;
KotlinParser.BlockContext = BlockContext;
KotlinParser.StatementsContext = StatementsContext;
KotlinParser.StatementContext = StatementContext;
KotlinParser.DeclarationContext = DeclarationContext;
KotlinParser.AssignmentContext = AssignmentContext;
KotlinParser.ExpressionContext = ExpressionContext;
KotlinParser.DisjunctionContext = DisjunctionContext;
KotlinParser.ConjunctionContext = ConjunctionContext;
KotlinParser.EqualityContext = EqualityContext;
KotlinParser.ComparisonContext = ComparisonContext;
KotlinParser.InfixOperationContext = InfixOperationContext;
KotlinParser.ElvisExpressionContext = ElvisExpressionContext;
KotlinParser.InfixFunctionCallContext = InfixFunctionCallContext;
KotlinParser.RangeExpressionContext = RangeExpressionContext;
KotlinParser.AdditiveExpressionContext = AdditiveExpressionContext;
KotlinParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;
KotlinParser.AsExpressionContext = AsExpressionContext;
KotlinParser.PrefixUnaryExpressionContext = PrefixUnaryExpressionContext;
KotlinParser.UnaryPrefixContext = UnaryPrefixContext;
KotlinParser.PostfixUnaryExpressionContext = PostfixUnaryExpressionContext;
KotlinParser.PostfixUnarySuffixContext = PostfixUnarySuffixContext;
KotlinParser.DirectlyAssignableExpressionContext = DirectlyAssignableExpressionContext;
KotlinParser.AssignableExpressionContext = AssignableExpressionContext;
KotlinParser.AssignableSuffixContext = AssignableSuffixContext;
KotlinParser.IndexingSuffixContext = IndexingSuffixContext;
KotlinParser.NavigationSuffixContext = NavigationSuffixContext;
KotlinParser.CallSuffixContext = CallSuffixContext;
KotlinParser.AnnotatedLambdaContext = AnnotatedLambdaContext;
KotlinParser.ValueArgumentsContext = ValueArgumentsContext;
KotlinParser.TypeArgumentsContext = TypeArgumentsContext;
KotlinParser.TypeProjectionContext = TypeProjectionContext;
KotlinParser.TypeProjectionModifiersContext = TypeProjectionModifiersContext;
KotlinParser.TypeProjectionModifierContext = TypeProjectionModifierContext;
KotlinParser.ValueArgumentContext = ValueArgumentContext;
KotlinParser.PrimaryExpressionContext = PrimaryExpressionContext;
KotlinParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;
KotlinParser.CollectionLiteralContext = CollectionLiteralContext;
KotlinParser.LiteralConstantContext = LiteralConstantContext;
KotlinParser.StringLiteralContext = StringLiteralContext;
KotlinParser.LineStringLiteralContext = LineStringLiteralContext;
KotlinParser.MultiLineStringLiteralContext = MultiLineStringLiteralContext;
KotlinParser.LineStringContentContext = LineStringContentContext;
KotlinParser.LineStringExpressionContext = LineStringExpressionContext;
KotlinParser.MultiLineStringContentContext = MultiLineStringContentContext;
KotlinParser.MultiLineStringExpressionContext = MultiLineStringExpressionContext;
KotlinParser.LambdaLiteralContext = LambdaLiteralContext;
KotlinParser.LambdaParametersContext = LambdaParametersContext;
KotlinParser.LambdaParameterContext = LambdaParameterContext;
KotlinParser.AnonymousFunctionContext = AnonymousFunctionContext;
KotlinParser.FunctionLiteralContext = FunctionLiteralContext;
KotlinParser.ObjectLiteralContext = ObjectLiteralContext;
KotlinParser.ThisExpressionContext = ThisExpressionContext;
KotlinParser.SuperExpressionContext = SuperExpressionContext;
KotlinParser.ControlStructureBodyContext = ControlStructureBodyContext;
KotlinParser.IfExpressionContext = IfExpressionContext;
KotlinParser.WhenExpressionContext = WhenExpressionContext;
KotlinParser.WhenEntryContext = WhenEntryContext;
KotlinParser.WhenConditionContext = WhenConditionContext;
KotlinParser.RangeTestContext = RangeTestContext;
KotlinParser.TypeTestContext = TypeTestContext;
KotlinParser.TryExpressionContext = TryExpressionContext;
KotlinParser.CatchBlockContext = CatchBlockContext;
KotlinParser.FinallyBlockContext = FinallyBlockContext;
KotlinParser.LoopStatementContext = LoopStatementContext;
KotlinParser.ForStatementContext = ForStatementContext;
KotlinParser.WhileStatementContext = WhileStatementContext;
KotlinParser.DoWhileStatementContext = DoWhileStatementContext;
KotlinParser.JumpExpressionContext = JumpExpressionContext;
KotlinParser.CallableReferenceContext = CallableReferenceContext;
KotlinParser.AssignmentAndOperatorContext = AssignmentAndOperatorContext;
KotlinParser.EqualityOperatorContext = EqualityOperatorContext;
KotlinParser.ComparisonOperatorContext = ComparisonOperatorContext;
KotlinParser.InOperatorContext = InOperatorContext;
KotlinParser.IsOperatorContext = IsOperatorContext;
KotlinParser.AdditiveOperatorContext = AdditiveOperatorContext;
KotlinParser.MultiplicativeOperatorContext = MultiplicativeOperatorContext;
KotlinParser.AsOperatorContext = AsOperatorContext;
KotlinParser.PrefixUnaryOperatorContext = PrefixUnaryOperatorContext;
KotlinParser.PostfixUnaryOperatorContext = PostfixUnaryOperatorContext;
KotlinParser.MemberAccessOperatorContext = MemberAccessOperatorContext;
KotlinParser.ModifiersContext = ModifiersContext;
KotlinParser.ModifierContext = ModifierContext;
KotlinParser.ClassModifierContext = ClassModifierContext;
KotlinParser.MemberModifierContext = MemberModifierContext;
KotlinParser.VisibilityModifierContext = VisibilityModifierContext;
KotlinParser.VarianceModifierContext = VarianceModifierContext;
KotlinParser.FunctionModifierContext = FunctionModifierContext;
KotlinParser.PropertyModifierContext = PropertyModifierContext;
KotlinParser.InheritanceModifierContext = InheritanceModifierContext;
KotlinParser.ParameterModifierContext = ParameterModifierContext;
KotlinParser.ReificationModifierContext = ReificationModifierContext;
KotlinParser.PlatformModifierContext = PlatformModifierContext;
KotlinParser.LabelContext = LabelContext;
KotlinParser.AnnotationContext = AnnotationContext;
KotlinParser.SingleAnnotationContext = SingleAnnotationContext;
KotlinParser.MultiAnnotationContext = MultiAnnotationContext;
KotlinParser.AnnotationUseSiteTargetContext = AnnotationUseSiteTargetContext;
KotlinParser.UnescapedAnnotationContext = UnescapedAnnotationContext;
KotlinParser.SimpleIdentifierContext = SimpleIdentifierContext;
KotlinParser.IdentifierContext = IdentifierContext;
KotlinParser.ShebangLineContext = ShebangLineContext;
KotlinParser.QuestContext = QuestContext;
KotlinParser.ElvisContext = ElvisContext;
KotlinParser.SafeNavContext = SafeNavContext;
KotlinParser.ExclContext = ExclContext;
KotlinParser.SemiContext = SemiContext;
KotlinParser.SemisContext = SemisContext;
//# sourceMappingURL=KotlinParser.js.map

/***/ })

}]);