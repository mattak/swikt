"use strict";
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([[273],{

/***/ 314:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
// Generated from ./assets/swift/Swift5Parser.g4 by ANTLR 4.10.1
// jshint ignore: start
const antlr4_1 = __importDefault(__webpack_require__(7228));
const Swift5ParserListener_1 = __importDefault(__webpack_require__(2118));
const Swift5ParserVisitor_1 = __importDefault(__webpack_require__(4310));
const SwiftSupport_1 = __importDefault(__webpack_require__(4667));
const serializedATN = [4, 1, 193, 2872, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4,
    7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12,
    2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2,
    20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27,
    7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7,
    34, 2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41,
    2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47, 7, 47, 2, 48, 7, 48, 2,
    49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56,
    7, 56, 2, 57, 7, 57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 2, 63, 7,
    63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2, 68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70,
    2, 71, 7, 71, 2, 72, 7, 72, 2, 73, 7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2,
    78, 7, 78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83, 2, 84, 7, 84, 2, 85,
    7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2, 89, 7, 89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7,
    92, 2, 93, 7, 93, 2, 94, 7, 94, 2, 95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 2, 98, 7, 98, 2, 99, 7, 99,
    2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103, 7, 103, 2, 104, 7, 104, 2, 105, 7, 105,
    2, 106, 7, 106, 2, 107, 7, 107, 2, 108, 7, 108, 2, 109, 7, 109, 2, 110, 7, 110, 2, 111, 7, 111,
    2, 112, 7, 112, 2, 113, 7, 113, 2, 114, 7, 114, 2, 115, 7, 115, 2, 116, 7, 116, 2, 117, 7, 117,
    2, 118, 7, 118, 2, 119, 7, 119, 2, 120, 7, 120, 2, 121, 7, 121, 2, 122, 7, 122, 2, 123, 7, 123,
    2, 124, 7, 124, 2, 125, 7, 125, 2, 126, 7, 126, 2, 127, 7, 127, 2, 128, 7, 128, 2, 129, 7, 129,
    2, 130, 7, 130, 2, 131, 7, 131, 2, 132, 7, 132, 2, 133, 7, 133, 2, 134, 7, 134, 2, 135, 7, 135,
    2, 136, 7, 136, 2, 137, 7, 137, 2, 138, 7, 138, 2, 139, 7, 139, 2, 140, 7, 140, 2, 141, 7, 141,
    2, 142, 7, 142, 2, 143, 7, 143, 2, 144, 7, 144, 2, 145, 7, 145, 2, 146, 7, 146, 2, 147, 7, 147,
    2, 148, 7, 148, 2, 149, 7, 149, 2, 150, 7, 150, 2, 151, 7, 151, 2, 152, 7, 152, 2, 153, 7, 153,
    2, 154, 7, 154, 2, 155, 7, 155, 2, 156, 7, 156, 2, 157, 7, 157, 2, 158, 7, 158, 2, 159, 7, 159,
    2, 160, 7, 160, 2, 161, 7, 161, 2, 162, 7, 162, 2, 163, 7, 163, 2, 164, 7, 164, 2, 165, 7, 165,
    2, 166, 7, 166, 2, 167, 7, 167, 2, 168, 7, 168, 2, 169, 7, 169, 2, 170, 7, 170, 2, 171, 7, 171,
    2, 172, 7, 172, 2, 173, 7, 173, 2, 174, 7, 174, 2, 175, 7, 175, 2, 176, 7, 176, 2, 177, 7, 177,
    2, 178, 7, 178, 2, 179, 7, 179, 2, 180, 7, 180, 2, 181, 7, 181, 2, 182, 7, 182, 2, 183, 7, 183,
    2, 184, 7, 184, 2, 185, 7, 185, 2, 186, 7, 186, 2, 187, 7, 187, 2, 188, 7, 188, 2, 189, 7, 189,
    2, 190, 7, 190, 2, 191, 7, 191, 2, 192, 7, 192, 2, 193, 7, 193, 2, 194, 7, 194, 2, 195, 7, 195,
    2, 196, 7, 196, 2, 197, 7, 197, 2, 198, 7, 198, 2, 199, 7, 199, 2, 200, 7, 200, 2, 201, 7, 201,
    2, 202, 7, 202, 2, 203, 7, 203, 2, 204, 7, 204, 2, 205, 7, 205, 2, 206, 7, 206, 2, 207, 7, 207,
    2, 208, 7, 208, 2, 209, 7, 209, 2, 210, 7, 210, 2, 211, 7, 211, 2, 212, 7, 212, 2, 213, 7, 213,
    2, 214, 7, 214, 2, 215, 7, 215, 2, 216, 7, 216, 2, 217, 7, 217, 2, 218, 7, 218, 2, 219, 7, 219,
    2, 220, 7, 220, 2, 221, 7, 221, 2, 222, 7, 222, 2, 223, 7, 223, 2, 224, 7, 224, 2, 225, 7, 225,
    2, 226, 7, 226, 2, 227, 7, 227, 2, 228, 7, 228, 2, 229, 7, 229, 2, 230, 7, 230, 2, 231, 7, 231,
    2, 232, 7, 232, 2, 233, 7, 233, 2, 234, 7, 234, 2, 235, 7, 235, 2, 236, 7, 236, 2, 237, 7, 237,
    2, 238, 7, 238, 2, 239, 7, 239, 2, 240, 7, 240, 2, 241, 7, 241, 2, 242, 7, 242, 2, 243, 7, 243,
    2, 244, 7, 244, 2, 245, 7, 245, 2, 246, 7, 246, 2, 247, 7, 247, 2, 248, 7, 248, 2, 249, 7, 249,
    2, 250, 7, 250, 2, 251, 7, 251, 2, 252, 7, 252, 2, 253, 7, 253, 2, 254, 7, 254, 2, 255, 7, 255,
    2, 256, 7, 256, 2, 257, 7, 257, 2, 258, 7, 258, 2, 259, 7, 259, 2, 260, 7, 260, 2, 261, 7, 261,
    2, 262, 7, 262, 2, 263, 7, 263, 2, 264, 7, 264, 2, 265, 7, 265, 2, 266, 7, 266, 2, 267, 7, 267,
    2, 268, 7, 268, 2, 269, 7, 269, 2, 270, 7, 270, 2, 271, 7, 271, 2, 272, 7, 272, 2, 273, 7, 273,
    2, 274, 7, 274, 2, 275, 7, 275, 2, 276, 7, 276, 2, 277, 7, 277, 2, 278, 7, 278, 2, 279, 7, 279,
    2, 280, 7, 280, 2, 281, 7, 281, 2, 282, 7, 282, 2, 283, 7, 283, 2, 284, 7, 284, 2, 285, 7, 285,
    2, 286, 7, 286, 2, 287, 7, 287, 2, 288, 7, 288, 2, 289, 7, 289, 2, 290, 7, 290, 2, 291, 7, 291,
    2, 292, 7, 292, 2, 293, 7, 293, 2, 294, 7, 294, 2, 295, 7, 295, 2, 296, 7, 296, 2, 297, 7, 297,
    2, 298, 7, 298, 2, 299, 7, 299, 2, 300, 7, 300, 2, 301, 7, 301, 2, 302, 7, 302, 2, 303, 7, 303,
    2, 304, 7, 304, 2, 305, 7, 305, 2, 306, 7, 306, 2, 307, 7, 307, 2, 308, 7, 308, 2, 309, 7, 309,
    2, 310, 7, 310, 2, 311, 7, 311, 2, 312, 7, 312, 2, 313, 7, 313, 1, 0, 3, 0, 630, 8, 0, 1, 0, 1, 0,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 642, 8, 1, 1, 1, 3, 1, 645, 8, 1, 1, 1, 3, 1, 648,
    8, 1, 1, 2, 1, 2, 1, 2, 1, 2, 4, 2, 654, 8, 2, 11, 2, 12, 2, 655, 1, 3, 1, 3, 1, 3, 3, 3, 661, 8, 3, 1,
    4, 1, 4, 3, 4, 665, 8, 4, 1, 4, 1, 4, 1, 4, 1, 4, 3, 4, 671, 8, 4, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1,
    6, 1, 6, 1, 6, 5, 6, 682, 8, 6, 10, 6, 12, 6, 685, 9, 6, 1, 7, 1, 7, 1, 7, 1, 7, 3, 7, 691, 8, 7, 1, 8,
    1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 3, 11,
    709, 8, 11, 1, 12, 1, 12, 1, 12, 1, 12, 3, 12, 715, 8, 12, 1, 13, 1, 13, 1, 13, 1, 13, 3, 13, 721,
    8, 13, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 15, 3, 15, 732, 8, 15, 1, 15, 1, 15,
    1, 16, 1, 16, 3, 16, 738, 8, 16, 1, 17, 1, 17, 3, 17, 742, 8, 17, 1, 17, 1, 17, 1, 17, 3, 17, 747,
    8, 17, 1, 18, 3, 18, 750, 8, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 19, 1, 19, 3, 19, 758, 8, 19, 1, 19,
    1, 19, 1, 19, 3, 19, 763, 8, 19, 5, 19, 765, 8, 19, 10, 19, 12, 19, 768, 9, 19, 1, 20, 3, 20, 771,
    8, 20, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 22, 1, 22, 1, 23, 1, 23, 3, 23, 783, 8, 23, 1, 23,
    3, 23, 786, 8, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 3, 24, 793, 8, 24, 1, 25, 1, 25, 3, 25, 797,
    8, 25, 1, 26, 1, 26, 1, 26, 3, 26, 802, 8, 26, 1, 27, 1, 27, 3, 27, 806, 8, 27, 1, 28, 1, 28, 1, 28,
    1, 28, 1, 28, 3, 28, 813, 8, 28, 1, 29, 1, 29, 1, 29, 1, 30, 1, 30, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31,
    3, 31, 825, 8, 31, 1, 32, 1, 32, 3, 32, 829, 8, 32, 1, 33, 1, 33, 3, 33, 833, 8, 33, 1, 34, 1, 34,
    1, 35, 1, 35, 3, 35, 839, 8, 35, 1, 36, 1, 36, 1, 36, 1, 37, 1, 37, 1, 37, 1, 38, 1, 38, 1, 38, 3, 38,
    850, 8, 38, 1, 39, 4, 39, 853, 8, 39, 11, 39, 12, 39, 854, 1, 40, 1, 40, 3, 40, 859, 8, 40, 1, 40,
    1, 40, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 5, 41, 868, 8, 41, 10, 41, 12, 41, 871, 9, 41, 1, 42, 1,
    42, 3, 42, 875, 8, 42, 1, 43, 1, 43, 1, 43, 3, 43, 880, 8, 43, 1, 44, 1, 44, 3, 44, 884, 8, 44, 1,
    44, 3, 44, 887, 8, 44, 1, 44, 1, 44, 1, 45, 1, 45, 1, 45, 3, 45, 894, 8, 45, 1, 46, 4, 46, 897, 8,
    46, 11, 46, 12, 46, 898, 1, 47, 1, 47, 1, 47, 3, 47, 904, 8, 47, 1, 48, 1, 48, 3, 48, 908, 8, 48,
    1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 3, 49, 920, 8, 49, 1, 49, 1, 49,
    1, 49, 3, 49, 925, 8, 49, 1, 49, 1, 49, 5, 49, 929, 8, 49, 10, 49, 12, 49, 932, 9, 49, 1, 50, 1, 50,
    1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 3, 50, 948, 8, 50,
    1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 3, 50, 963,
    8, 50, 1, 51, 1, 51, 3, 51, 967, 8, 51, 1, 52, 1, 52, 1, 52, 3, 52, 972, 8, 52, 1, 53, 1, 53, 1, 54,
    1, 54, 1, 55, 1, 55, 1, 55, 5, 55, 981, 8, 55, 10, 55, 12, 55, 984, 9, 55, 1, 56, 1, 56, 1, 57, 1,
    57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 3, 57, 998, 8, 57, 1, 57, 1, 57, 1, 58,
    1, 58, 1, 59, 1, 59, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 61, 1, 61, 1, 62, 1, 62, 1, 62, 1, 62, 1,
    62, 1, 63, 1, 63, 1, 63, 5, 63, 1021, 8, 63, 10, 63, 12, 63, 1024, 9, 63, 1, 64, 1, 64, 1, 64, 1,
    64, 3, 64, 1030, 8, 64, 1, 65, 1, 65, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 3, 66, 1039, 8, 66, 3, 66,
    1041, 8, 66, 1, 67, 1, 67, 1, 67, 1, 67, 1, 68, 1, 68, 1, 68, 5, 68, 1050, 8, 68, 10, 68, 12, 68,
    1053, 9, 68, 1, 69, 1, 69, 1, 69, 1, 69, 3, 69, 1059, 8, 69, 3, 69, 1061, 8, 69, 1, 70, 1, 70, 1,
    70, 1, 71, 1, 71, 1, 71, 5, 71, 1069, 8, 71, 10, 71, 12, 71, 1072, 9, 71, 1, 72, 1, 72, 3, 72, 1076,
    8, 72, 1, 73, 1, 73, 1, 73, 1, 73, 3, 73, 1082, 8, 73, 1, 74, 1, 74, 1, 74, 1, 74, 3, 74, 1088, 8,
    74, 1, 75, 1, 75, 1, 75, 1, 75, 1, 76, 1, 76, 1, 76, 5, 76, 1097, 8, 76, 10, 76, 12, 76, 1100, 9,
    76, 1, 77, 1, 77, 1, 78, 1, 78, 1, 78, 1, 78, 1, 78, 1, 78, 1, 78, 1, 78, 1, 78, 1, 78, 1, 78, 1, 78,
    1, 78, 1, 78, 1, 78, 3, 78, 1119, 8, 78, 1, 78, 3, 78, 1122, 8, 78, 1, 79, 4, 79, 1125, 8, 79, 11,
    79, 12, 79, 1126, 1, 80, 3, 80, 1130, 8, 80, 1, 81, 1, 81, 3, 81, 1134, 8, 81, 1, 81, 1, 81, 1, 82,
    3, 82, 1139, 8, 82, 1, 82, 1, 82, 3, 82, 1143, 8, 82, 1, 82, 1, 82, 1, 83, 1, 83, 1, 84, 1, 84, 1,
    84, 5, 84, 1152, 8, 84, 10, 84, 12, 84, 1155, 9, 84, 1, 85, 1, 85, 3, 85, 1159, 8, 85, 1, 86, 3,
    86, 1162, 8, 86, 1, 86, 3, 86, 1165, 8, 86, 1, 86, 1, 86, 1, 86, 1, 87, 1, 87, 1, 87, 5, 87, 1173,
    8, 87, 10, 87, 12, 87, 1176, 9, 87, 1, 88, 1, 88, 3, 88, 1180, 8, 88, 1, 89, 1, 89, 1, 89, 1, 90,
    1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 3, 90, 1194, 8, 90, 1, 90, 3, 90, 1197, 8,
    90, 3, 90, 1199, 8, 90, 1, 90, 3, 90, 1202, 8, 90, 1, 91, 3, 91, 1205, 8, 91, 1, 91, 3, 91, 1208,
    8, 91, 1, 91, 1, 91, 1, 92, 1, 92, 1, 93, 1, 93, 1, 93, 3, 93, 1217, 8, 93, 1, 93, 1, 93, 1, 93, 3,
    93, 1222, 8, 93, 1, 93, 1, 93, 1, 93, 3, 93, 1227, 8, 93, 1, 94, 3, 94, 1230, 8, 94, 1, 94, 3, 94,
    1233, 8, 94, 1, 94, 1, 94, 3, 94, 1237, 8, 94, 1, 95, 3, 95, 1240, 8, 95, 1, 95, 3, 95, 1243, 8,
    95, 1, 95, 1, 95, 3, 95, 1247, 8, 95, 1, 95, 3, 95, 1250, 8, 95, 1, 96, 1, 96, 1, 96, 1, 96, 1, 97,
    1, 97, 1, 97, 3, 97, 1259, 8, 97, 1, 97, 1, 97, 1, 97, 3, 97, 1264, 8, 97, 1, 97, 1, 97, 1, 98, 3,
    98, 1269, 8, 98, 1, 98, 3, 98, 1272, 8, 98, 1, 98, 1, 98, 1, 99, 3, 99, 1277, 8, 99, 1, 99, 3, 99,
    1280, 8, 99, 1, 99, 1, 99, 1, 100, 1, 100, 1, 100, 3, 100, 1287, 8, 100, 1, 100, 1, 100, 3, 100,
    1291, 8, 100, 3, 100, 1293, 8, 100, 1, 100, 1, 100, 1, 101, 3, 101, 1298, 8, 101, 1, 101, 1, 101,
    3, 101, 1302, 8, 101, 1, 101, 1, 101, 1, 102, 3, 102, 1307, 8, 102, 1, 102, 1, 102, 3, 102, 1311,
    8, 102, 1, 102, 1, 102, 1, 103, 3, 103, 1316, 8, 103, 1, 103, 3, 103, 1319, 8, 103, 1, 103, 1,
    103, 1, 103, 3, 103, 1324, 8, 103, 1, 103, 1, 103, 1, 104, 1, 104, 1, 105, 1, 105, 1, 105, 1, 106,
    1, 106, 1, 106, 3, 106, 1336, 8, 106, 1, 106, 1, 106, 3, 106, 1340, 8, 106, 1, 106, 3, 106, 1343,
    8, 106, 1, 107, 3, 107, 1346, 8, 107, 1, 107, 3, 107, 1349, 8, 107, 1, 107, 1, 107, 1, 108, 1,
    108, 3, 108, 1355, 8, 108, 1, 109, 1, 109, 3, 109, 1359, 8, 109, 1, 109, 3, 109, 1362, 8, 109,
    1, 109, 3, 109, 1365, 8, 109, 1, 110, 1, 110, 3, 110, 1369, 8, 110, 1, 110, 1, 110, 1, 111, 1,
    111, 1, 112, 1, 112, 3, 112, 1377, 8, 112, 1, 112, 1, 112, 1, 113, 1, 113, 1, 113, 5, 113, 1384,
    8, 113, 10, 113, 12, 113, 1387, 9, 113, 1, 114, 3, 114, 1390, 8, 114, 1, 114, 3, 114, 1393, 8,
    114, 1, 114, 1, 114, 1, 114, 3, 114, 1398, 8, 114, 1, 114, 3, 114, 1401, 8, 114, 1, 115, 1, 115,
    1, 116, 1, 116, 1, 117, 1, 117, 1, 117, 1, 118, 3, 118, 1411, 8, 118, 1, 118, 3, 118, 1414, 8,
    118, 1, 118, 1, 118, 3, 118, 1418, 8, 118, 1, 119, 3, 119, 1421, 8, 119, 1, 119, 1, 119, 1, 119,
    3, 119, 1426, 8, 119, 1, 119, 3, 119, 1429, 8, 119, 1, 119, 3, 119, 1432, 8, 119, 1, 119, 1, 119,
    3, 119, 1436, 8, 119, 1, 119, 1, 119, 1, 120, 4, 120, 1441, 8, 120, 11, 120, 12, 120, 1442, 1,
    121, 1, 121, 1, 121, 3, 121, 1448, 8, 121, 1, 122, 3, 122, 1451, 8, 122, 1, 122, 3, 122, 1454,
    8, 122, 1, 122, 1, 122, 1, 122, 1, 123, 1, 123, 1, 123, 5, 123, 1462, 8, 123, 10, 123, 12, 123,
    1465, 9, 123, 1, 124, 1, 124, 1, 124, 1, 124, 1, 124, 1, 124, 1, 124, 3, 124, 1474, 8, 124, 3,
    124, 1476, 8, 124, 1, 125, 1, 125, 1, 126, 1, 126, 1, 127, 1, 127, 1, 127, 3, 127, 1485, 8, 127,
    1, 127, 1, 127, 3, 127, 1489, 8, 127, 1, 127, 1, 127, 1, 127, 1, 127, 1, 128, 4, 128, 1496, 8,
    128, 11, 128, 12, 128, 1497, 1, 129, 1, 129, 1, 129, 3, 129, 1503, 8, 129, 1, 130, 3, 130, 1506,
    8, 130, 1, 130, 1, 130, 1, 130, 1, 131, 1, 131, 1, 131, 5, 131, 1514, 8, 131, 10, 131, 12, 131,
    1517, 9, 131, 1, 132, 1, 132, 3, 132, 1521, 8, 132, 1, 133, 1, 133, 1, 133, 1, 134, 1, 134, 1,
    134, 3, 134, 1529, 8, 134, 1, 135, 3, 135, 1532, 8, 135, 1, 135, 3, 135, 1535, 8, 135, 1, 135,
    1, 135, 1, 135, 3, 135, 1540, 8, 135, 1, 135, 3, 135, 1543, 8, 135, 1, 135, 3, 135, 1546, 8, 135,
    1, 135, 1, 135, 1, 136, 1, 136, 1, 137, 1, 137, 1, 137, 1, 137, 1, 138, 5, 138, 1557, 8, 138, 10,
    138, 12, 138, 1560, 9, 138, 1, 139, 1, 139, 3, 139, 1564, 8, 139, 1, 140, 3, 140, 1567, 8, 140,
    1, 140, 3, 140, 1570, 8, 140, 1, 140, 3, 140, 1573, 8, 140, 1, 140, 1, 140, 3, 140, 1577, 8, 140,
    3, 140, 1579, 8, 140, 1, 140, 1, 140, 1, 140, 3, 140, 1584, 8, 140, 1, 140, 3, 140, 1587, 8, 140,
    1, 140, 3, 140, 1590, 8, 140, 1, 140, 1, 140, 1, 141, 1, 141, 1, 142, 1, 142, 1, 142, 1, 142, 1,
    143, 5, 143, 1601, 8, 143, 10, 143, 12, 143, 1604, 9, 143, 1, 144, 1, 144, 3, 144, 1608, 8, 144,
    1, 145, 3, 145, 1611, 8, 145, 1, 145, 3, 145, 1614, 8, 145, 1, 145, 1, 145, 1, 145, 1, 145, 1,
    145, 3, 145, 1621, 8, 145, 1, 145, 3, 145, 1624, 8, 145, 1, 145, 1, 145, 1, 146, 1, 146, 1, 147,
    1, 147, 1, 147, 1, 147, 1, 148, 5, 148, 1635, 8, 148, 10, 148, 12, 148, 1638, 9, 148, 1, 149,
    1, 149, 3, 149, 1642, 8, 149, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 3, 150, 1650, 8,
    150, 1, 151, 1, 151, 1, 151, 1, 151, 1, 151, 1, 152, 1, 152, 1, 152, 3, 152, 1660, 8, 152, 1, 152,
    1, 152, 3, 152, 1664, 8, 152, 1, 153, 1, 153, 3, 153, 1668, 8, 153, 1, 153, 1, 153, 3, 153, 1672,
    8, 153, 1, 153, 3, 153, 1675, 8, 153, 1, 153, 3, 153, 1678, 8, 153, 1, 154, 1, 154, 1, 154, 3,
    154, 1683, 8, 154, 1, 154, 1, 154, 1, 155, 3, 155, 1688, 8, 155, 1, 155, 3, 155, 1691, 8, 155,
    1, 155, 1, 155, 1, 155, 3, 155, 1696, 8, 155, 1, 155, 3, 155, 1699, 8, 155, 1, 155, 3, 155, 1702,
    8, 155, 1, 156, 1, 156, 3, 156, 1706, 8, 156, 1, 156, 1, 156, 3, 156, 1710, 8, 156, 1, 156, 3,
    156, 1713, 8, 156, 1, 156, 1, 156, 1, 157, 3, 157, 1718, 8, 157, 1, 157, 3, 157, 1721, 8, 157,
    1, 157, 1, 157, 3, 157, 1725, 8, 157, 1, 158, 1, 158, 1, 159, 3, 159, 1730, 8, 159, 1, 159, 1,
    159, 1, 159, 1, 160, 3, 160, 1736, 8, 160, 1, 160, 3, 160, 1739, 8, 160, 1, 160, 1, 160, 1, 160,
    3, 160, 1744, 8, 160, 1, 160, 3, 160, 1747, 8, 160, 1, 160, 1, 160, 1, 161, 1, 161, 1, 161, 1,
    161, 1, 162, 5, 162, 1756, 8, 162, 10, 162, 12, 162, 1759, 9, 162, 1, 163, 1, 163, 3, 163, 1763,
    8, 163, 1, 164, 1, 164, 1, 164, 3, 164, 1768, 8, 164, 1, 164, 1, 164, 1, 164, 3, 164, 1773, 8,
    164, 1, 165, 3, 165, 1776, 8, 165, 1, 165, 3, 165, 1779, 8, 165, 1, 165, 1, 165, 3, 165, 1783,
    8, 165, 1, 165, 1, 165, 1, 166, 1, 166, 3, 166, 1789, 8, 166, 1, 166, 1, 166, 1, 167, 1, 167, 1,
    167, 3, 167, 1796, 8, 167, 1, 168, 1, 168, 1, 168, 1, 168, 1, 169, 1, 169, 1, 169, 1, 169, 1, 170,
    1, 170, 1, 170, 1, 170, 3, 170, 1810, 8, 170, 1, 171, 1, 171, 1, 171, 1, 172, 1, 172, 1, 172, 1,
    172, 3, 172, 1819, 8, 172, 1, 172, 1, 172, 1, 173, 4, 173, 1824, 8, 173, 11, 173, 12, 173, 1825,
    1, 174, 1, 174, 1, 174, 3, 174, 1831, 8, 174, 1, 175, 1, 175, 1, 175, 1, 175, 1, 176, 1, 176, 1,
    176, 1, 176, 1, 177, 1, 177, 1, 177, 1, 177, 1, 178, 1, 178, 1, 178, 5, 178, 1848, 8, 178, 10,
    178, 12, 178, 1851, 9, 178, 1, 179, 1, 179, 1, 179, 5, 179, 1856, 8, 179, 10, 179, 12, 179, 1859,
    9, 179, 1, 180, 1, 180, 1, 180, 1, 180, 1, 180, 1, 180, 1, 180, 1, 180, 1, 180, 1, 180, 1, 180,
    1, 180, 1, 180, 1, 180, 1, 180, 1, 180, 3, 180, 1877, 8, 180, 1, 180, 1, 180, 1, 180, 3, 180, 1882,
    8, 180, 1, 181, 4, 181, 1885, 8, 181, 11, 181, 12, 181, 1886, 1, 182, 1, 182, 1, 182, 1, 182,
    3, 182, 1893, 8, 182, 1, 183, 1, 183, 1, 184, 1, 184, 1, 184, 1, 184, 3, 184, 1901, 8, 184, 1,
    184, 3, 184, 1904, 8, 184, 1, 184, 1, 184, 1, 184, 1, 184, 1, 184, 1, 184, 3, 184, 1912, 8, 184,
    1, 184, 1, 184, 1, 184, 5, 184, 1917, 8, 184, 10, 184, 12, 184, 1920, 9, 184, 1, 185, 1, 185,
    1, 186, 1, 186, 1, 187, 1, 187, 1, 187, 1, 187, 3, 187, 1930, 8, 187, 1, 188, 1, 188, 3, 188, 1934,
    8, 188, 1, 188, 1, 188, 1, 189, 1, 189, 1, 189, 5, 189, 1941, 8, 189, 10, 189, 12, 189, 1944,
    9, 189, 1, 190, 1, 190, 1, 190, 3, 190, 1949, 8, 190, 1, 190, 1, 190, 1, 191, 3, 191, 1954, 8,
    191, 1, 191, 1, 191, 1, 191, 3, 191, 1959, 8, 191, 1, 192, 1, 192, 1, 192, 1, 193, 1, 193, 1, 194,
    1, 194, 1, 194, 3, 194, 1969, 8, 194, 1, 195, 1, 195, 1, 195, 5, 195, 1974, 8, 195, 10, 195, 12,
    195, 1977, 9, 195, 1, 196, 1, 196, 3, 196, 1981, 8, 196, 1, 196, 1, 196, 1, 197, 4, 197, 1986,
    8, 197, 11, 197, 12, 197, 1987, 1, 198, 4, 198, 1991, 8, 198, 11, 198, 12, 198, 1992, 1, 199,
    1, 199, 3, 199, 1997, 8, 199, 1, 199, 1, 199, 1, 199, 3, 199, 2002, 8, 199, 1, 199, 1, 199, 1,
    199, 3, 199, 2007, 8, 199, 1, 199, 1, 199, 1, 199, 1, 199, 1, 199, 1, 199, 3, 199, 2015, 8, 199,
    1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 3, 200, 2023, 8, 200, 1, 201, 3, 201, 2026, 8,
    201, 1, 201, 1, 201, 3, 201, 2030, 8, 201, 1, 202, 1, 202, 1, 202, 5, 202, 2035, 8, 202, 10, 202,
    12, 202, 2038, 9, 202, 1, 203, 3, 203, 2041, 8, 203, 1, 203, 1, 203, 3, 203, 2045, 8, 203, 1,
    204, 1, 204, 1, 204, 1, 205, 1, 205, 3, 205, 2052, 8, 205, 1, 206, 1, 206, 1, 206, 1, 206, 1, 206,
    3, 206, 2059, 8, 206, 1, 206, 3, 206, 2062, 8, 206, 1, 206, 1, 206, 1, 206, 3, 206, 2067, 8, 206,
    1, 207, 4, 207, 2070, 8, 207, 11, 207, 12, 207, 2071, 1, 208, 1, 208, 1, 208, 1, 208, 1, 209,
    1, 209, 1, 209, 3, 209, 2081, 8, 209, 3, 209, 2083, 8, 209, 1, 209, 1, 209, 1, 210, 1, 210, 3,
    210, 2089, 8, 210, 1, 210, 1, 210, 1, 210, 1, 210, 1, 210, 1, 210, 1, 210, 1, 210, 1, 210, 1, 210,
    1, 210, 1, 210, 1, 210, 1, 210, 3, 210, 2105, 8, 210, 1, 211, 1, 211, 1, 211, 1, 211, 1, 211, 3,
    211, 2112, 8, 211, 1, 212, 1, 212, 1, 212, 1, 212, 1, 212, 1, 212, 1, 212, 1, 212, 1, 212, 1, 212,
    1, 212, 3, 212, 2125, 8, 212, 1, 213, 1, 213, 3, 213, 2129, 8, 213, 1, 213, 1, 213, 1, 214, 1,
    214, 1, 214, 5, 214, 2136, 8, 214, 10, 214, 12, 214, 2139, 9, 214, 1, 214, 3, 214, 2142, 8, 214,
    1, 215, 1, 215, 1, 216, 1, 216, 1, 216, 3, 216, 2149, 8, 216, 1, 216, 1, 216, 1, 217, 1, 217, 1,
    217, 5, 217, 2156, 8, 217, 10, 217, 12, 217, 2159, 9, 217, 1, 217, 3, 217, 2162, 8, 217, 1, 218,
    1, 218, 1, 218, 1, 218, 1, 219, 1, 219, 1, 219, 1, 219, 1, 219, 1, 219, 1, 219, 1, 219, 1, 219,
    1, 219, 1, 219, 1, 219, 1, 219, 1, 219, 1, 219, 1, 219, 1, 219, 1, 219, 1, 219, 1, 219, 1, 219,
    1, 219, 1, 219, 1, 219, 1, 219, 1, 219, 1, 219, 1, 219, 1, 219, 1, 219, 1, 219, 1, 219, 1, 219,
    3, 219, 2201, 8, 219, 1, 220, 1, 220, 1, 220, 1, 220, 1, 220, 1, 220, 1, 220, 1, 220, 1, 220, 1,
    220, 1, 220, 1, 220, 3, 220, 2215, 8, 220, 1, 221, 1, 221, 1, 221, 1, 221, 1, 221, 1, 221, 1, 221,
    1, 221, 1, 221, 1, 221, 1, 221, 3, 221, 2228, 8, 221, 1, 222, 1, 222, 3, 222, 2232, 8, 222, 1,
    222, 3, 222, 2235, 8, 222, 1, 222, 1, 222, 1, 223, 3, 223, 2240, 8, 223, 1, 223, 1, 223, 3, 223,
    2244, 8, 223, 1, 223, 3, 223, 2247, 8, 223, 1, 223, 1, 223, 1, 223, 1, 223, 1, 223, 3, 223, 2254,
    8, 223, 1, 224, 1, 224, 3, 224, 2258, 8, 224, 1, 224, 1, 224, 3, 224, 2262, 8, 224, 1, 225, 1,
    225, 1, 225, 5, 225, 2267, 8, 225, 10, 225, 12, 225, 2270, 9, 225, 1, 226, 1, 226, 1, 226, 3,
    226, 2275, 8, 226, 3, 226, 2277, 8, 226, 1, 227, 1, 227, 1, 227, 1, 227, 1, 228, 1, 228, 1, 228,
    5, 228, 2286, 8, 228, 10, 228, 12, 228, 2289, 9, 228, 1, 229, 3, 229, 2292, 8, 229, 1, 229, 1,
    229, 3, 229, 2296, 8, 229, 1, 229, 1, 229, 1, 229, 3, 229, 2301, 8, 229, 1, 230, 1, 230, 1, 230,
    1, 230, 1, 230, 3, 230, 2308, 8, 230, 3, 230, 2310, 8, 230, 1, 231, 1, 231, 1, 231, 3, 231, 2315,
    8, 231, 1, 231, 1, 231, 3, 231, 2319, 8, 231, 1, 232, 1, 232, 1, 232, 1, 232, 1, 233, 1, 233, 1,
    233, 1, 233, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 3, 234, 2337, 8, 234,
    1, 235, 1, 235, 1, 235, 5, 235, 2342, 8, 235, 10, 235, 12, 235, 2345, 9, 235, 1, 236, 1, 236,
    1, 236, 3, 236, 2350, 8, 236, 1, 236, 1, 236, 1, 237, 1, 237, 1, 238, 1, 238, 3, 238, 2358, 8,
    238, 1, 238, 1, 238, 1, 238, 1, 239, 1, 239, 1, 239, 5, 239, 2366, 8, 239, 10, 239, 12, 239, 2369,
    9, 239, 1, 240, 1, 240, 3, 240, 2373, 8, 240, 1, 240, 3, 240, 2376, 8, 240, 1, 241, 4, 241, 2379,
    8, 241, 11, 241, 12, 241, 2380, 1, 242, 1, 242, 1, 242, 1, 242, 1, 242, 1, 242, 1, 242, 3, 242,
    2390, 8, 242, 1, 243, 1, 243, 1, 243, 1, 243, 3, 243, 2396, 8, 243, 1, 243, 1, 243, 1, 243, 1,
    244, 1, 244, 1, 244, 1, 244, 1, 244, 1, 245, 1, 245, 1, 245, 1, 245, 1, 245, 1, 245, 1, 245, 1,
    245, 5, 245, 2414, 8, 245, 10, 245, 12, 245, 2417, 9, 245, 1, 245, 5, 245, 2420, 8, 245, 10,
    245, 12, 245, 2423, 9, 245, 1, 246, 3, 246, 2426, 8, 246, 1, 246, 1, 246, 3, 246, 2430, 8, 246,
    1, 247, 1, 247, 1, 247, 1, 247, 1, 247, 1, 247, 3, 247, 2438, 8, 247, 1, 248, 1, 248, 1, 248, 1,
    248, 1, 248, 1, 248, 1, 248, 1, 248, 3, 248, 2448, 8, 248, 3, 248, 2450, 8, 248, 1, 249, 1, 249,
    1, 249, 1, 250, 1, 250, 1, 250, 1, 250, 1, 251, 1, 251, 1, 251, 1, 252, 1, 252, 1, 252, 1, 253,
    1, 253, 3, 253, 2467, 8, 253, 1, 253, 1, 253, 1, 254, 1, 254, 1, 254, 5, 254, 2474, 8, 254, 10,
    254, 12, 254, 2477, 9, 254, 1, 255, 3, 255, 2480, 8, 255, 1, 255, 1, 255, 1, 255, 3, 255, 2485,
    8, 255, 1, 256, 1, 256, 3, 256, 2489, 8, 256, 1, 257, 4, 257, 2492, 8, 257, 11, 257, 12, 257,
    2493, 1, 258, 1, 258, 1, 258, 1, 258, 1, 259, 4, 259, 2501, 8, 259, 11, 259, 12, 259, 2502, 1,
    260, 1, 260, 1, 260, 1, 261, 1, 261, 1, 261, 1, 261, 1, 261, 1, 261, 1, 261, 1, 261, 1, 261, 1,
    261, 1, 261, 1, 261, 1, 261, 1, 261, 3, 261, 2522, 8, 261, 1, 261, 1, 261, 1, 261, 1, 261, 1, 261,
    1, 261, 1, 261, 1, 261, 1, 261, 3, 261, 2533, 8, 261, 5, 261, 2535, 8, 261, 10, 261, 12, 261,
    2538, 9, 261, 1, 262, 1, 262, 3, 262, 2542, 8, 262, 1, 262, 3, 262, 2545, 8, 262, 1, 262, 1, 262,
    1, 263, 1, 263, 3, 263, 2551, 8, 263, 1, 263, 1, 263, 3, 263, 2555, 8, 263, 1, 264, 1, 264, 1,
    265, 1, 265, 3, 265, 2561, 8, 265, 1, 265, 1, 265, 1, 266, 1, 266, 1, 266, 5, 266, 2568, 8, 266,
    10, 266, 12, 266, 2571, 9, 266, 1, 267, 1, 267, 1, 267, 1, 267, 3, 267, 2577, 8, 267, 1, 267,
    1, 267, 3, 267, 2581, 8, 267, 1, 268, 4, 268, 2584, 8, 268, 11, 268, 12, 268, 2585, 1, 269, 3,
    269, 2589, 8, 269, 1, 269, 1, 269, 3, 269, 2593, 8, 269, 1, 269, 1, 269, 1, 269, 1, 270, 1, 270,
    1, 270, 3, 270, 2601, 8, 270, 3, 270, 2603, 8, 270, 1, 270, 1, 270, 1, 271, 1, 271, 1, 271, 5,
    271, 2610, 8, 271, 10, 271, 12, 271, 2613, 9, 271, 1, 272, 3, 272, 2616, 8, 272, 1, 272, 3, 272,
    2619, 8, 272, 1, 272, 1, 272, 1, 272, 1, 272, 3, 272, 2625, 8, 272, 1, 273, 4, 273, 2628, 8, 273,
    11, 273, 12, 273, 2629, 1, 274, 1, 274, 1, 274, 1, 274, 1, 275, 1, 275, 1, 275, 1, 275, 1, 275,
    1, 275, 1, 276, 1, 276, 1, 276, 5, 276, 2645, 8, 276, 10, 276, 12, 276, 2648, 9, 276, 1, 276,
    3, 276, 2651, 8, 276, 1, 277, 1, 277, 1, 277, 1, 278, 1, 278, 1, 278, 1, 279, 1, 279, 1, 280, 1,
    280, 1, 281, 1, 281, 1, 281, 1, 282, 1, 282, 1, 282, 5, 282, 2669, 8, 282, 10, 282, 12, 282, 2672,
    9, 282, 1, 283, 1, 283, 1, 283, 1, 283, 1, 283, 1, 283, 3, 283, 2680, 8, 283, 1, 283, 3, 283, 2683,
    8, 283, 1, 284, 1, 284, 1, 284, 5, 284, 2688, 8, 284, 10, 284, 12, 284, 2691, 9, 284, 1, 285,
    1, 285, 1, 286, 1, 286, 1, 286, 1, 287, 1, 287, 1, 287, 1, 288, 1, 288, 1, 288, 1, 288, 1, 289,
    1, 289, 1, 289, 1, 289, 1, 290, 1, 290, 1, 290, 1, 290, 1, 291, 1, 291, 1, 291, 1, 292, 1, 292,
    1, 292, 1, 292, 1, 293, 1, 293, 1, 293, 1, 293, 1, 293, 1, 294, 1, 294, 1, 294, 1, 294, 1, 295,
    1, 295, 1, 295, 1, 296, 1, 296, 1, 296, 1, 297, 1, 297, 1, 297, 1, 298, 1, 298, 3, 298, 2740, 8,
    298, 1, 298, 1, 298, 1, 298, 3, 298, 2745, 8, 298, 1, 299, 1, 299, 3, 299, 2749, 8, 299, 1, 300,
    1, 300, 3, 300, 2753, 8, 300, 1, 301, 1, 301, 4, 301, 2757, 8, 301, 11, 301, 12, 301, 2758, 1,
    302, 1, 302, 1, 303, 1, 303, 3, 303, 2765, 8, 303, 1, 304, 1, 304, 4, 304, 2769, 8, 304, 11, 304,
    12, 304, 2770, 1, 305, 1, 305, 1, 305, 1, 305, 3, 305, 2777, 8, 305, 1, 306, 3, 306, 2780, 8,
    306, 1, 306, 1, 306, 3, 306, 2784, 8, 306, 1, 306, 3, 306, 2787, 8, 306, 1, 307, 1, 307, 1, 308,
    1, 308, 1, 309, 1, 309, 1, 310, 1, 310, 1, 310, 3, 310, 2798, 8, 310, 1, 311, 1, 311, 4, 311, 2802,
    8, 311, 11, 311, 12, 311, 2803, 1, 311, 1, 311, 1, 311, 4, 311, 2809, 8, 311, 11, 311, 12, 311,
    2810, 1, 311, 3, 311, 2814, 8, 311, 1, 312, 1, 312, 5, 312, 2818, 8, 312, 10, 312, 12, 312, 2821,
    9, 312, 1, 312, 1, 312, 1, 312, 5, 312, 2826, 8, 312, 10, 312, 12, 312, 2829, 9, 312, 1, 312,
    3, 312, 2832, 8, 312, 1, 313, 1, 313, 1, 313, 1, 313, 1, 313, 1, 313, 1, 313, 1, 313, 3, 313, 2842,
    8, 313, 1, 313, 1, 313, 5, 313, 2846, 8, 313, 10, 313, 12, 313, 2849, 9, 313, 1, 313, 1, 313,
    1, 313, 1, 313, 1, 313, 1, 313, 1, 313, 1, 313, 1, 313, 3, 313, 2860, 8, 313, 1, 313, 1, 313, 5,
    313, 2864, 8, 313, 10, 313, 12, 313, 2867, 9, 313, 1, 313, 3, 313, 2870, 8, 313, 1, 313, 1, 2421,
    3, 98, 368, 522, 314, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38,
    40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86,
    88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126,
    128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162,
    164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198,
    200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234,
    236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270,
    272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306,
    308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342,
    344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378,
    380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414,
    416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450,
    452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486,
    488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522,
    524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558,
    560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594,
    596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 0, 22, 1, 0,
    27, 28, 1, 0, 62, 63, 1, 0, 97, 103, 1, 0, 104, 107, 1, 0, 108, 109, 1, 0, 116, 117, 2, 0, 97, 101,
    109, 112, 6, 0, 6, 6, 13, 13, 16, 16, 27, 29, 36, 36, 59, 59, 1, 0, 39, 40, 1, 0, 151, 152, 1, 0,
    53, 54, 1, 0, 49, 51, 1, 0, 75, 76, 3, 0, 20, 20, 22, 24, 79, 79, 1, 0, 77, 78, 5, 0, 138, 138, 145,
    147, 152, 153, 156, 156, 164, 165, 1, 0, 135, 136, 16, 0, 1, 2, 5, 6, 8, 8, 10, 11, 14, 14, 17,
    17, 20, 26, 29, 33, 41, 41, 47, 58, 60, 71, 73, 78, 85, 88, 92, 112, 114, 115, 135, 136, 15, 0,
    1, 1, 3, 20, 22, 29, 34, 40, 42, 46, 58, 59, 72, 72, 79, 84, 89, 91, 95, 96, 113, 113, 116, 128,
    130, 130, 132, 134, 150, 150, 3, 0, 148, 149, 151, 152, 154, 163, 2, 0, 84, 84, 89, 89, 1, 0,
    170, 174, 3041, 0, 629, 1, 0, 0, 0, 2, 647, 1, 0, 0, 0, 4, 653, 1, 0, 0, 0, 6, 660, 1, 0, 0, 0, 8, 662,
    1, 0, 0, 0, 10, 674, 1, 0, 0, 0, 12, 678, 1, 0, 0, 0, 14, 690, 1, 0, 0, 0, 16, 692, 1, 0, 0, 0, 18, 696,
    1, 0, 0, 0, 20, 700, 1, 0, 0, 0, 22, 708, 1, 0, 0, 0, 24, 710, 1, 0, 0, 0, 26, 720, 1, 0, 0, 0, 28, 722,
    1, 0, 0, 0, 30, 727, 1, 0, 0, 0, 32, 735, 1, 0, 0, 0, 34, 746, 1, 0, 0, 0, 36, 749, 1, 0, 0, 0, 38, 755,
    1, 0, 0, 0, 40, 770, 1, 0, 0, 0, 42, 775, 1, 0, 0, 0, 44, 778, 1, 0, 0, 0, 46, 780, 1, 0, 0, 0, 48, 789,
    1, 0, 0, 0, 50, 794, 1, 0, 0, 0, 52, 798, 1, 0, 0, 0, 54, 803, 1, 0, 0, 0, 56, 807, 1, 0, 0, 0, 58, 814,
    1, 0, 0, 0, 60, 817, 1, 0, 0, 0, 62, 824, 1, 0, 0, 0, 64, 826, 1, 0, 0, 0, 66, 830, 1, 0, 0, 0, 68, 834,
    1, 0, 0, 0, 70, 836, 1, 0, 0, 0, 72, 840, 1, 0, 0, 0, 74, 843, 1, 0, 0, 0, 76, 846, 1, 0, 0, 0, 78, 852,
    1, 0, 0, 0, 80, 856, 1, 0, 0, 0, 82, 862, 1, 0, 0, 0, 84, 872, 1, 0, 0, 0, 86, 879, 1, 0, 0, 0, 88, 881,
    1, 0, 0, 0, 90, 890, 1, 0, 0, 0, 92, 896, 1, 0, 0, 0, 94, 900, 1, 0, 0, 0, 96, 905, 1, 0, 0, 0, 98, 919,
    1, 0, 0, 0, 100, 962, 1, 0, 0, 0, 102, 964, 1, 0, 0, 0, 104, 968, 1, 0, 0, 0, 106, 973, 1, 0, 0, 0,
    108, 975, 1, 0, 0, 0, 110, 977, 1, 0, 0, 0, 112, 985, 1, 0, 0, 0, 114, 987, 1, 0, 0, 0, 116, 1001,
    1, 0, 0, 0, 118, 1003, 1, 0, 0, 0, 120, 1005, 1, 0, 0, 0, 122, 1010, 1, 0, 0, 0, 124, 1012, 1, 0,
    0, 0, 126, 1017, 1, 0, 0, 0, 128, 1029, 1, 0, 0, 0, 130, 1031, 1, 0, 0, 0, 132, 1040, 1, 0, 0, 0,
    134, 1042, 1, 0, 0, 0, 136, 1046, 1, 0, 0, 0, 138, 1054, 1, 0, 0, 0, 140, 1062, 1, 0, 0, 0, 142,
    1065, 1, 0, 0, 0, 144, 1075, 1, 0, 0, 0, 146, 1077, 1, 0, 0, 0, 148, 1083, 1, 0, 0, 0, 150, 1089,
    1, 0, 0, 0, 152, 1093, 1, 0, 0, 0, 154, 1101, 1, 0, 0, 0, 156, 1118, 1, 0, 0, 0, 158, 1124, 1, 0,
    0, 0, 160, 1129, 1, 0, 0, 0, 162, 1131, 1, 0, 0, 0, 164, 1138, 1, 0, 0, 0, 166, 1146, 1, 0, 0, 0,
    168, 1148, 1, 0, 0, 0, 170, 1158, 1, 0, 0, 0, 172, 1161, 1, 0, 0, 0, 174, 1169, 1, 0, 0, 0, 176,
    1177, 1, 0, 0, 0, 178, 1181, 1, 0, 0, 0, 180, 1184, 1, 0, 0, 0, 182, 1204, 1, 0, 0, 0, 184, 1211,
    1, 0, 0, 0, 186, 1226, 1, 0, 0, 0, 188, 1229, 1, 0, 0, 0, 190, 1239, 1, 0, 0, 0, 192, 1251, 1, 0,
    0, 0, 194, 1255, 1, 0, 0, 0, 196, 1268, 1, 0, 0, 0, 198, 1276, 1, 0, 0, 0, 200, 1283, 1, 0, 0, 0,
    202, 1297, 1, 0, 0, 0, 204, 1306, 1, 0, 0, 0, 206, 1315, 1, 0, 0, 0, 208, 1327, 1, 0, 0, 0, 210,
    1329, 1, 0, 0, 0, 212, 1332, 1, 0, 0, 0, 214, 1345, 1, 0, 0, 0, 216, 1354, 1, 0, 0, 0, 218, 1356,
    1, 0, 0, 0, 220, 1366, 1, 0, 0, 0, 222, 1372, 1, 0, 0, 0, 224, 1374, 1, 0, 0, 0, 226, 1380, 1, 0,
    0, 0, 228, 1389, 1, 0, 0, 0, 230, 1402, 1, 0, 0, 0, 232, 1404, 1, 0, 0, 0, 234, 1406, 1, 0, 0, 0,
    236, 1410, 1, 0, 0, 0, 238, 1420, 1, 0, 0, 0, 240, 1440, 1, 0, 0, 0, 242, 1447, 1, 0, 0, 0, 244,
    1450, 1, 0, 0, 0, 246, 1458, 1, 0, 0, 0, 248, 1475, 1, 0, 0, 0, 250, 1477, 1, 0, 0, 0, 252, 1479,
    1, 0, 0, 0, 254, 1481, 1, 0, 0, 0, 256, 1495, 1, 0, 0, 0, 258, 1502, 1, 0, 0, 0, 260, 1505, 1, 0,
    0, 0, 262, 1510, 1, 0, 0, 0, 264, 1518, 1, 0, 0, 0, 266, 1522, 1, 0, 0, 0, 268, 1528, 1, 0, 0, 0,
    270, 1531, 1, 0, 0, 0, 272, 1549, 1, 0, 0, 0, 274, 1551, 1, 0, 0, 0, 276, 1558, 1, 0, 0, 0, 278,
    1563, 1, 0, 0, 0, 280, 1566, 1, 0, 0, 0, 282, 1593, 1, 0, 0, 0, 284, 1595, 1, 0, 0, 0, 286, 1602,
    1, 0, 0, 0, 288, 1607, 1, 0, 0, 0, 290, 1610, 1, 0, 0, 0, 292, 1627, 1, 0, 0, 0, 294, 1629, 1, 0,
    0, 0, 296, 1636, 1, 0, 0, 0, 298, 1641, 1, 0, 0, 0, 300, 1649, 1, 0, 0, 0, 302, 1651, 1, 0, 0, 0,
    304, 1656, 1, 0, 0, 0, 306, 1665, 1, 0, 0, 0, 308, 1679, 1, 0, 0, 0, 310, 1687, 1, 0, 0, 0, 312,
    1703, 1, 0, 0, 0, 314, 1717, 1, 0, 0, 0, 316, 1726, 1, 0, 0, 0, 318, 1729, 1, 0, 0, 0, 320, 1735,
    1, 0, 0, 0, 322, 1750, 1, 0, 0, 0, 324, 1757, 1, 0, 0, 0, 326, 1762, 1, 0, 0, 0, 328, 1764, 1, 0,
    0, 0, 330, 1775, 1, 0, 0, 0, 332, 1786, 1, 0, 0, 0, 334, 1795, 1, 0, 0, 0, 336, 1797, 1, 0, 0, 0,
    338, 1801, 1, 0, 0, 0, 340, 1805, 1, 0, 0, 0, 342, 1811, 1, 0, 0, 0, 344, 1814, 1, 0, 0, 0, 346,
    1823, 1, 0, 0, 0, 348, 1830, 1, 0, 0, 0, 350, 1832, 1, 0, 0, 0, 352, 1836, 1, 0, 0, 0, 354, 1840,
    1, 0, 0, 0, 356, 1844, 1, 0, 0, 0, 358, 1852, 1, 0, 0, 0, 360, 1881, 1, 0, 0, 0, 362, 1884, 1, 0,
    0, 0, 364, 1888, 1, 0, 0, 0, 366, 1894, 1, 0, 0, 0, 368, 1911, 1, 0, 0, 0, 370, 1921, 1, 0, 0, 0,
    372, 1923, 1, 0, 0, 0, 374, 1929, 1, 0, 0, 0, 376, 1931, 1, 0, 0, 0, 378, 1937, 1, 0, 0, 0, 380,
    1948, 1, 0, 0, 0, 382, 1953, 1, 0, 0, 0, 384, 1960, 1, 0, 0, 0, 386, 1963, 1, 0, 0, 0, 388, 1965,
    1, 0, 0, 0, 390, 1970, 1, 0, 0, 0, 392, 1978, 1, 0, 0, 0, 394, 1985, 1, 0, 0, 0, 396, 1990, 1, 0,
    0, 0, 398, 2014, 1, 0, 0, 0, 400, 2022, 1, 0, 0, 0, 402, 2025, 1, 0, 0, 0, 404, 2031, 1, 0, 0, 0,
    406, 2044, 1, 0, 0, 0, 408, 2046, 1, 0, 0, 0, 410, 2049, 1, 0, 0, 0, 412, 2066, 1, 0, 0, 0, 414,
    2069, 1, 0, 0, 0, 416, 2073, 1, 0, 0, 0, 418, 2082, 1, 0, 0, 0, 420, 2104, 1, 0, 0, 0, 422, 2106,
    1, 0, 0, 0, 424, 2124, 1, 0, 0, 0, 426, 2126, 1, 0, 0, 0, 428, 2132, 1, 0, 0, 0, 430, 2143, 1, 0,
    0, 0, 432, 2145, 1, 0, 0, 0, 434, 2152, 1, 0, 0, 0, 436, 2163, 1, 0, 0, 0, 438, 2200, 1, 0, 0, 0,
    440, 2214, 1, 0, 0, 0, 442, 2227, 1, 0, 0, 0, 444, 2229, 1, 0, 0, 0, 446, 2253, 1, 0, 0, 0, 448,
    2261, 1, 0, 0, 0, 450, 2263, 1, 0, 0, 0, 452, 2271, 1, 0, 0, 0, 454, 2278, 1, 0, 0, 0, 456, 2282,
    1, 0, 0, 0, 458, 2291, 1, 0, 0, 0, 460, 2309, 1, 0, 0, 0, 462, 2311, 1, 0, 0, 0, 464, 2320, 1, 0,
    0, 0, 466, 2324, 1, 0, 0, 0, 468, 2336, 1, 0, 0, 0, 470, 2338, 1, 0, 0, 0, 472, 2349, 1, 0, 0, 0,
    474, 2353, 1, 0, 0, 0, 476, 2355, 1, 0, 0, 0, 478, 2362, 1, 0, 0, 0, 480, 2375, 1, 0, 0, 0, 482,
    2378, 1, 0, 0, 0, 484, 2389, 1, 0, 0, 0, 486, 2391, 1, 0, 0, 0, 488, 2400, 1, 0, 0, 0, 490, 2405,
    1, 0, 0, 0, 492, 2429, 1, 0, 0, 0, 494, 2431, 1, 0, 0, 0, 496, 2439, 1, 0, 0, 0, 498, 2451, 1, 0,
    0, 0, 500, 2454, 1, 0, 0, 0, 502, 2458, 1, 0, 0, 0, 504, 2461, 1, 0, 0, 0, 506, 2464, 1, 0, 0, 0,
    508, 2470, 1, 0, 0, 0, 510, 2479, 1, 0, 0, 0, 512, 2486, 1, 0, 0, 0, 514, 2491, 1, 0, 0, 0, 516,
    2495, 1, 0, 0, 0, 518, 2500, 1, 0, 0, 0, 520, 2504, 1, 0, 0, 0, 522, 2521, 1, 0, 0, 0, 524, 2539,
    1, 0, 0, 0, 526, 2548, 1, 0, 0, 0, 528, 2556, 1, 0, 0, 0, 530, 2558, 1, 0, 0, 0, 532, 2564, 1, 0,
    0, 0, 534, 2576, 1, 0, 0, 0, 536, 2583, 1, 0, 0, 0, 538, 2588, 1, 0, 0, 0, 540, 2597, 1, 0, 0, 0,
    542, 2606, 1, 0, 0, 0, 544, 2624, 1, 0, 0, 0, 546, 2627, 1, 0, 0, 0, 548, 2631, 1, 0, 0, 0, 550,
    2635, 1, 0, 0, 0, 552, 2641, 1, 0, 0, 0, 554, 2652, 1, 0, 0, 0, 556, 2655, 1, 0, 0, 0, 558, 2658,
    1, 0, 0, 0, 560, 2660, 1, 0, 0, 0, 562, 2662, 1, 0, 0, 0, 564, 2665, 1, 0, 0, 0, 566, 2682, 1, 0,
    0, 0, 568, 2684, 1, 0, 0, 0, 570, 2692, 1, 0, 0, 0, 572, 2694, 1, 0, 0, 0, 574, 2697, 1, 0, 0, 0,
    576, 2700, 1, 0, 0, 0, 578, 2704, 1, 0, 0, 0, 580, 2708, 1, 0, 0, 0, 582, 2712, 1, 0, 0, 0, 584,
    2715, 1, 0, 0, 0, 586, 2719, 1, 0, 0, 0, 588, 2724, 1, 0, 0, 0, 590, 2728, 1, 0, 0, 0, 592, 2731,
    1, 0, 0, 0, 594, 2734, 1, 0, 0, 0, 596, 2744, 1, 0, 0, 0, 598, 2748, 1, 0, 0, 0, 600, 2752, 1, 0,
    0, 0, 602, 2756, 1, 0, 0, 0, 604, 2760, 1, 0, 0, 0, 606, 2764, 1, 0, 0, 0, 608, 2768, 1, 0, 0, 0,
    610, 2776, 1, 0, 0, 0, 612, 2786, 1, 0, 0, 0, 614, 2788, 1, 0, 0, 0, 616, 2790, 1, 0, 0, 0, 618,
    2792, 1, 0, 0, 0, 620, 2797, 1, 0, 0, 0, 622, 2813, 1, 0, 0, 0, 624, 2831, 1, 0, 0, 0, 626, 2869,
    1, 0, 0, 0, 628, 630, 3, 4, 2, 0, 629, 628, 1, 0, 0, 0, 629, 630, 1, 0, 0, 0, 630, 631, 1, 0, 0, 0,
    631, 632, 5, 0, 0, 1, 632, 1, 1, 0, 0, 0, 633, 642, 3, 6, 3, 0, 634, 642, 3, 156, 78, 0, 635, 642,
    3, 22, 11, 0, 636, 642, 3, 56, 28, 0, 637, 642, 3, 62, 31, 0, 638, 642, 3, 74, 37, 0, 639, 642,
    3, 76, 38, 0, 640, 642, 3, 402, 201, 0, 641, 633, 1, 0, 0, 0, 641, 634, 1, 0, 0, 0, 641, 635, 1,
    0, 0, 0, 641, 636, 1, 0, 0, 0, 641, 637, 1, 0, 0, 0, 641, 638, 1, 0, 0, 0, 641, 639, 1, 0, 0, 0, 641,
    640, 1, 0, 0, 0, 642, 644, 1, 0, 0, 0, 643, 645, 5, 147, 0, 0, 644, 643, 1, 0, 0, 0, 644, 645, 1,
    0, 0, 0, 645, 648, 1, 0, 0, 0, 646, 648, 3, 86, 43, 0, 647, 641, 1, 0, 0, 0, 647, 646, 1, 0, 0, 0,
    648, 3, 1, 0, 0, 0, 649, 650, 4, 2, 0, 1, 650, 651, 3, 2, 1, 0, 651, 652, 6, 2, -1, 0, 652, 654, 1,
    0, 0, 0, 653, 649, 1, 0, 0, 0, 654, 655, 1, 0, 0, 0, 655, 653, 1, 0, 0, 0, 655, 656, 1, 0, 0, 0, 656,
    5, 1, 0, 0, 0, 657, 661, 3, 8, 4, 0, 658, 661, 3, 10, 5, 0, 659, 661, 3, 20, 10, 0, 660, 657, 1, 0,
    0, 0, 660, 658, 1, 0, 0, 0, 660, 659, 1, 0, 0, 0, 661, 7, 1, 0, 0, 0, 662, 664, 5, 14, 0, 0, 663, 665,
    5, 4, 0, 0, 664, 663, 1, 0, 0, 0, 664, 665, 1, 0, 0, 0, 665, 666, 1, 0, 0, 0, 666, 667, 3, 368, 184,
    0, 667, 668, 5, 17, 0, 0, 668, 670, 3, 402, 201, 0, 669, 671, 3, 42, 21, 0, 670, 669, 1, 0, 0, 0,
    670, 671, 1, 0, 0, 0, 671, 672, 1, 0, 0, 0, 672, 673, 3, 162, 81, 0, 673, 9, 1, 0, 0, 0, 674, 675,
    5, 26, 0, 0, 675, 676, 3, 12, 6, 0, 676, 677, 3, 162, 81, 0, 677, 11, 1, 0, 0, 0, 678, 683, 3, 14,
    7, 0, 679, 680, 5, 145, 0, 0, 680, 682, 3, 14, 7, 0, 681, 679, 1, 0, 0, 0, 682, 685, 1, 0, 0, 0, 683,
    681, 1, 0, 0, 0, 683, 684, 1, 0, 0, 0, 684, 13, 1, 0, 0, 0, 685, 683, 1, 0, 0, 0, 686, 691, 3, 124,
    62, 0, 687, 691, 3, 402, 201, 0, 688, 691, 3, 16, 8, 0, 689, 691, 3, 18, 9, 0, 690, 686, 1, 0, 0,
    0, 690, 687, 1, 0, 0, 0, 690, 688, 1, 0, 0, 0, 690, 689, 1, 0, 0, 0, 691, 15, 1, 0, 0, 0, 692, 693,
    5, 4, 0, 0, 693, 694, 3, 368, 184, 0, 694, 695, 3, 178, 89, 0, 695, 17, 1, 0, 0, 0, 696, 697, 7,
    0, 0, 0, 697, 698, 3, 368, 184, 0, 698, 699, 3, 178, 89, 0, 699, 19, 1, 0, 0, 0, 700, 701, 5, 34,
    0, 0, 701, 702, 3, 162, 81, 0, 702, 703, 5, 26, 0, 0, 703, 704, 3, 402, 201, 0, 704, 21, 1, 0, 0,
    0, 705, 709, 3, 24, 12, 0, 706, 709, 3, 28, 14, 0, 707, 709, 3, 30, 15, 0, 708, 705, 1, 0, 0, 0,
    708, 706, 1, 0, 0, 0, 708, 707, 1, 0, 0, 0, 709, 23, 1, 0, 0, 0, 710, 711, 5, 18, 0, 0, 711, 712,
    3, 12, 6, 0, 712, 714, 3, 162, 81, 0, 713, 715, 3, 26, 13, 0, 714, 713, 1, 0, 0, 0, 714, 715, 1,
    0, 0, 0, 715, 25, 1, 0, 0, 0, 716, 717, 5, 12, 0, 0, 717, 721, 3, 162, 81, 0, 718, 719, 5, 12, 0,
    0, 719, 721, 3, 24, 12, 0, 720, 716, 1, 0, 0, 0, 720, 718, 1, 0, 0, 0, 721, 27, 1, 0, 0, 0, 722, 723,
    5, 11, 0, 0, 723, 724, 3, 12, 6, 0, 724, 725, 5, 12, 0, 0, 725, 726, 3, 162, 81, 0, 726, 29, 1, 0,
    0, 0, 727, 728, 5, 35, 0, 0, 728, 729, 3, 402, 201, 0, 729, 731, 5, 139, 0, 0, 730, 732, 3, 32,
    16, 0, 731, 730, 1, 0, 0, 0, 731, 732, 1, 0, 0, 0, 732, 733, 1, 0, 0, 0, 733, 734, 5, 142, 0, 0, 734,
    31, 1, 0, 0, 0, 735, 737, 3, 34, 17, 0, 736, 738, 3, 32, 16, 0, 737, 736, 1, 0, 0, 0, 737, 738, 1,
    0, 0, 0, 738, 33, 1, 0, 0, 0, 739, 742, 3, 36, 18, 0, 740, 742, 3, 40, 20, 0, 741, 739, 1, 0, 0, 0,
    741, 740, 1, 0, 0, 0, 742, 743, 1, 0, 0, 0, 743, 744, 3, 4, 2, 0, 744, 747, 1, 0, 0, 0, 745, 747,
    3, 46, 23, 0, 746, 741, 1, 0, 0, 0, 746, 745, 1, 0, 0, 0, 747, 35, 1, 0, 0, 0, 748, 750, 3, 394, 197,
    0, 749, 748, 1, 0, 0, 0, 749, 750, 1, 0, 0, 0, 750, 751, 1, 0, 0, 0, 751, 752, 5, 4, 0, 0, 752, 753,
    3, 38, 19, 0, 753, 754, 5, 146, 0, 0, 754, 37, 1, 0, 0, 0, 755, 757, 3, 368, 184, 0, 756, 758, 3,
    42, 21, 0, 757, 756, 1, 0, 0, 0, 757, 758, 1, 0, 0, 0, 758, 766, 1, 0, 0, 0, 759, 760, 5, 145, 0,
    0, 760, 762, 3, 368, 184, 0, 761, 763, 3, 42, 21, 0, 762, 761, 1, 0, 0, 0, 762, 763, 1, 0, 0, 0,
    763, 765, 1, 0, 0, 0, 764, 759, 1, 0, 0, 0, 765, 768, 1, 0, 0, 0, 766, 764, 1, 0, 0, 0, 766, 767,
    1, 0, 0, 0, 767, 39, 1, 0, 0, 0, 768, 766, 1, 0, 0, 0, 769, 771, 3, 394, 197, 0, 770, 769, 1, 0, 0,
    0, 770, 771, 1, 0, 0, 0, 771, 772, 1, 0, 0, 0, 772, 773, 5, 8, 0, 0, 773, 774, 5, 146, 0, 0, 774,
    41, 1, 0, 0, 0, 775, 776, 5, 25, 0, 0, 776, 777, 3, 44, 22, 0, 777, 43, 1, 0, 0, 0, 778, 779, 3, 402,
    201, 0, 779, 45, 1, 0, 0, 0, 780, 782, 3, 48, 24, 0, 781, 783, 3, 50, 25, 0, 782, 781, 1, 0, 0, 0,
    782, 783, 1, 0, 0, 0, 783, 785, 1, 0, 0, 0, 784, 786, 3, 54, 27, 0, 785, 784, 1, 0, 0, 0, 785, 786,
    1, 0, 0, 0, 786, 787, 1, 0, 0, 0, 787, 788, 5, 122, 0, 0, 788, 47, 1, 0, 0, 0, 789, 790, 5, 119, 0,
    0, 790, 792, 3, 98, 49, 0, 791, 793, 3, 32, 16, 0, 792, 791, 1, 0, 0, 0, 792, 793, 1, 0, 0, 0, 793,
    49, 1, 0, 0, 0, 794, 796, 3, 94, 47, 0, 795, 797, 3, 50, 25, 0, 796, 795, 1, 0, 0, 0, 796, 797, 1,
    0, 0, 0, 797, 51, 1, 0, 0, 0, 798, 799, 5, 120, 0, 0, 799, 801, 3, 98, 49, 0, 800, 802, 3, 32, 16,
    0, 801, 800, 1, 0, 0, 0, 801, 802, 1, 0, 0, 0, 802, 53, 1, 0, 0, 0, 803, 805, 5, 121, 0, 0, 804, 806,
    3, 32, 16, 0, 805, 804, 1, 0, 0, 0, 805, 806, 1, 0, 0, 0, 806, 55, 1, 0, 0, 0, 807, 812, 3, 58, 29,
    0, 808, 813, 3, 6, 3, 0, 809, 813, 3, 24, 12, 0, 810, 813, 3, 30, 15, 0, 811, 813, 3, 76, 38, 0,
    812, 808, 1, 0, 0, 0, 812, 809, 1, 0, 0, 0, 812, 810, 1, 0, 0, 0, 812, 811, 1, 0, 0, 0, 813, 57, 1,
    0, 0, 0, 814, 815, 3, 60, 30, 0, 815, 816, 5, 146, 0, 0, 816, 59, 1, 0, 0, 0, 817, 818, 3, 566, 283,
    0, 818, 61, 1, 0, 0, 0, 819, 825, 3, 64, 32, 0, 820, 825, 3, 66, 33, 0, 821, 825, 3, 68, 34, 0, 822,
    825, 3, 70, 35, 0, 823, 825, 3, 72, 36, 0, 824, 819, 1, 0, 0, 0, 824, 820, 1, 0, 0, 0, 824, 821,
    1, 0, 0, 0, 824, 822, 1, 0, 0, 0, 824, 823, 1, 0, 0, 0, 825, 63, 1, 0, 0, 0, 826, 828, 5, 3, 0, 0, 827,
    829, 3, 60, 30, 0, 828, 827, 1, 0, 0, 0, 828, 829, 1, 0, 0, 0, 829, 65, 1, 0, 0, 0, 830, 832, 5, 7,
    0, 0, 831, 833, 3, 60, 30, 0, 832, 831, 1, 0, 0, 0, 832, 833, 1, 0, 0, 0, 833, 67, 1, 0, 0, 0, 834,
    835, 5, 15, 0, 0, 835, 69, 1, 0, 0, 0, 836, 838, 5, 37, 0, 0, 837, 839, 3, 402, 201, 0, 838, 837,
    1, 0, 0, 0, 838, 839, 1, 0, 0, 0, 839, 71, 1, 0, 0, 0, 840, 841, 5, 38, 0, 0, 841, 842, 3, 402, 201,
    0, 842, 73, 1, 0, 0, 0, 843, 844, 5, 9, 0, 0, 844, 845, 3, 162, 81, 0, 845, 75, 1, 0, 0, 0, 846, 847,
    5, 10, 0, 0, 847, 849, 3, 162, 81, 0, 848, 850, 3, 78, 39, 0, 849, 848, 1, 0, 0, 0, 849, 850, 1,
    0, 0, 0, 850, 77, 1, 0, 0, 0, 851, 853, 3, 80, 40, 0, 852, 851, 1, 0, 0, 0, 853, 854, 1, 0, 0, 0, 854,
    852, 1, 0, 0, 0, 854, 855, 1, 0, 0, 0, 855, 79, 1, 0, 0, 0, 856, 858, 5, 5, 0, 0, 857, 859, 3, 82,
    41, 0, 858, 857, 1, 0, 0, 0, 858, 859, 1, 0, 0, 0, 859, 860, 1, 0, 0, 0, 860, 861, 3, 162, 81, 0,
    861, 81, 1, 0, 0, 0, 862, 869, 3, 84, 42, 0, 863, 864, 3, 84, 42, 0, 864, 865, 5, 145, 0, 0, 865,
    866, 3, 84, 42, 0, 866, 868, 1, 0, 0, 0, 867, 863, 1, 0, 0, 0, 868, 871, 1, 0, 0, 0, 869, 867, 1,
    0, 0, 0, 869, 870, 1, 0, 0, 0, 870, 83, 1, 0, 0, 0, 871, 869, 1, 0, 0, 0, 872, 874, 3, 368, 184, 0,
    873, 875, 3, 42, 21, 0, 874, 873, 1, 0, 0, 0, 874, 875, 1, 0, 0, 0, 875, 85, 1, 0, 0, 0, 876, 880,
    3, 88, 44, 0, 877, 880, 3, 114, 57, 0, 878, 880, 3, 120, 60, 0, 879, 876, 1, 0, 0, 0, 879, 877,
    1, 0, 0, 0, 879, 878, 1, 0, 0, 0, 880, 87, 1, 0, 0, 0, 881, 883, 3, 90, 45, 0, 882, 884, 3, 92, 46,
    0, 883, 882, 1, 0, 0, 0, 883, 884, 1, 0, 0, 0, 884, 886, 1, 0, 0, 0, 885, 887, 3, 96, 48, 0, 886,
    885, 1, 0, 0, 0, 886, 887, 1, 0, 0, 0, 887, 888, 1, 0, 0, 0, 888, 889, 5, 122, 0, 0, 889, 89, 1, 0,
    0, 0, 890, 891, 5, 119, 0, 0, 891, 893, 3, 98, 49, 0, 892, 894, 3, 4, 2, 0, 893, 892, 1, 0, 0, 0,
    893, 894, 1, 0, 0, 0, 894, 91, 1, 0, 0, 0, 895, 897, 3, 94, 47, 0, 896, 895, 1, 0, 0, 0, 897, 898,
    1, 0, 0, 0, 898, 896, 1, 0, 0, 0, 898, 899, 1, 0, 0, 0, 899, 93, 1, 0, 0, 0, 900, 901, 5, 120, 0, 0,
    901, 903, 3, 98, 49, 0, 902, 904, 3, 4, 2, 0, 903, 902, 1, 0, 0, 0, 903, 904, 1, 0, 0, 0, 904, 95,
    1, 0, 0, 0, 905, 907, 5, 121, 0, 0, 906, 908, 3, 4, 2, 0, 907, 906, 1, 0, 0, 0, 907, 908, 1, 0, 0,
    0, 908, 97, 1, 0, 0, 0, 909, 910, 6, 49, -1, 0, 910, 920, 3, 100, 50, 0, 911, 920, 3, 566, 283,
    0, 912, 920, 3, 614, 307, 0, 913, 914, 5, 140, 0, 0, 914, 915, 3, 98, 49, 0, 915, 916, 5, 143,
    0, 0, 916, 920, 1, 0, 0, 0, 917, 918, 5, 151, 0, 0, 918, 920, 3, 98, 49, 2, 919, 909, 1, 0, 0, 0,
    919, 911, 1, 0, 0, 0, 919, 912, 1, 0, 0, 0, 919, 913, 1, 0, 0, 0, 919, 917, 1, 0, 0, 0, 920, 930,
    1, 0, 0, 0, 921, 924, 10, 1, 0, 0, 922, 925, 3, 576, 288, 0, 923, 925, 3, 578, 289, 0, 924, 922,
    1, 0, 0, 0, 924, 923, 1, 0, 0, 0, 925, 926, 1, 0, 0, 0, 926, 927, 3, 98, 49, 2, 927, 929, 1, 0, 0,
    0, 928, 921, 1, 0, 0, 0, 929, 932, 1, 0, 0, 0, 930, 928, 1, 0, 0, 0, 930, 931, 1, 0, 0, 0, 931, 99,
    1, 0, 0, 0, 932, 930, 1, 0, 0, 0, 933, 934, 5, 60, 0, 0, 934, 935, 5, 140, 0, 0, 935, 936, 3, 106,
    53, 0, 936, 937, 5, 143, 0, 0, 937, 963, 1, 0, 0, 0, 938, 939, 5, 61, 0, 0, 939, 940, 5, 140, 0,
    0, 940, 941, 3, 108, 54, 0, 941, 942, 5, 143, 0, 0, 942, 963, 1, 0, 0, 0, 943, 944, 7, 1, 0, 0, 944,
    947, 5, 140, 0, 0, 945, 948, 3, 580, 290, 0, 946, 948, 3, 582, 291, 0, 947, 945, 1, 0, 0, 0, 947,
    946, 1, 0, 0, 0, 948, 949, 1, 0, 0, 0, 949, 950, 3, 102, 51, 0, 950, 951, 5, 143, 0, 0, 951, 963,
    1, 0, 0, 0, 952, 953, 5, 64, 0, 0, 953, 954, 5, 140, 0, 0, 954, 955, 3, 110, 55, 0, 955, 956, 5,
    143, 0, 0, 956, 963, 1, 0, 0, 0, 957, 958, 5, 65, 0, 0, 958, 959, 5, 140, 0, 0, 959, 960, 3, 112,
    56, 0, 960, 961, 5, 143, 0, 0, 961, 963, 1, 0, 0, 0, 962, 933, 1, 0, 0, 0, 962, 938, 1, 0, 0, 0, 962,
    943, 1, 0, 0, 0, 962, 952, 1, 0, 0, 0, 962, 957, 1, 0, 0, 0, 963, 101, 1, 0, 0, 0, 964, 966, 5, 172,
    0, 0, 965, 967, 3, 104, 52, 0, 966, 965, 1, 0, 0, 0, 966, 967, 1, 0, 0, 0, 967, 103, 1, 0, 0, 0, 968,
    969, 5, 138, 0, 0, 969, 971, 5, 172, 0, 0, 970, 972, 3, 104, 52, 0, 971, 970, 1, 0, 0, 0, 971, 972,
    1, 0, 0, 0, 972, 105, 1, 0, 0, 0, 973, 974, 7, 2, 0, 0, 974, 107, 1, 0, 0, 0, 975, 976, 7, 3, 0, 0,
    976, 109, 1, 0, 0, 0, 977, 982, 3, 566, 283, 0, 978, 979, 5, 138, 0, 0, 979, 981, 3, 566, 283,
    0, 980, 978, 1, 0, 0, 0, 981, 984, 1, 0, 0, 0, 982, 980, 1, 0, 0, 0, 982, 983, 1, 0, 0, 0, 983, 111,
    1, 0, 0, 0, 984, 982, 1, 0, 0, 0, 985, 986, 7, 4, 0, 0, 986, 113, 1, 0, 0, 0, 987, 988, 5, 113, 0,
    0, 988, 997, 5, 140, 0, 0, 989, 990, 5, 114, 0, 0, 990, 991, 5, 146, 0, 0, 991, 992, 3, 118, 59,
    0, 992, 993, 5, 145, 0, 0, 993, 994, 5, 115, 0, 0, 994, 995, 5, 146, 0, 0, 995, 996, 3, 116, 58,
    0, 996, 998, 1, 0, 0, 0, 997, 989, 1, 0, 0, 0, 997, 998, 1, 0, 0, 0, 998, 999, 1, 0, 0, 0, 999, 1000,
    5, 143, 0, 0, 1000, 115, 1, 0, 0, 0, 1001, 1002, 5, 173, 0, 0, 1002, 117, 1, 0, 0, 0, 1003, 1004,
    3, 624, 312, 0, 1004, 119, 1, 0, 0, 0, 1005, 1006, 7, 5, 0, 0, 1006, 1007, 5, 140, 0, 0, 1007,
    1008, 3, 122, 61, 0, 1008, 1009, 5, 143, 0, 0, 1009, 121, 1, 0, 0, 0, 1010, 1011, 3, 624, 312,
    0, 1011, 123, 1, 0, 0, 0, 1012, 1013, 5, 118, 0, 0, 1013, 1014, 5, 140, 0, 0, 1014, 1015, 3, 126,
    63, 0, 1015, 1016, 5, 143, 0, 0, 1016, 125, 1, 0, 0, 0, 1017, 1022, 3, 128, 64, 0, 1018, 1019,
    5, 145, 0, 0, 1019, 1021, 3, 128, 64, 0, 1020, 1018, 1, 0, 0, 0, 1021, 1024, 1, 0, 0, 0, 1022,
    1020, 1, 0, 0, 0, 1022, 1023, 1, 0, 0, 0, 1023, 127, 1, 0, 0, 0, 1024, 1022, 1, 0, 0, 0, 1025, 1026,
    3, 130, 65, 0, 1026, 1027, 3, 132, 66, 0, 1027, 1030, 1, 0, 0, 0, 1028, 1030, 5, 160, 0, 0, 1029,
    1025, 1, 0, 0, 0, 1029, 1028, 1, 0, 0, 0, 1030, 129, 1, 0, 0, 0, 1031, 1032, 7, 6, 0, 0, 1032, 131,
    1, 0, 0, 0, 1033, 1041, 5, 173, 0, 0, 1034, 1041, 5, 172, 0, 0, 1035, 1038, 5, 175, 0, 0, 1036,
    1037, 5, 138, 0, 0, 1037, 1039, 5, 172, 0, 0, 1038, 1036, 1, 0, 0, 0, 1038, 1039, 1, 0, 0, 0, 1039,
    1041, 1, 0, 0, 0, 1040, 1033, 1, 0, 0, 0, 1040, 1034, 1, 0, 0, 0, 1040, 1035, 1, 0, 0, 0, 1041,
    133, 1, 0, 0, 0, 1042, 1043, 5, 148, 0, 0, 1043, 1044, 3, 136, 68, 0, 1044, 1045, 5, 149, 0, 0,
    1045, 135, 1, 0, 0, 0, 1046, 1051, 3, 138, 69, 0, 1047, 1048, 5, 145, 0, 0, 1048, 1050, 3, 138,
    69, 0, 1049, 1047, 1, 0, 0, 0, 1050, 1053, 1, 0, 0, 0, 1051, 1049, 1, 0, 0, 0, 1051, 1052, 1, 0,
    0, 0, 1052, 137, 1, 0, 0, 0, 1053, 1051, 1, 0, 0, 0, 1054, 1060, 3, 528, 264, 0, 1055, 1058, 5,
    146, 0, 0, 1056, 1059, 3, 526, 263, 0, 1057, 1059, 3, 552, 276, 0, 1058, 1056, 1, 0, 0, 0, 1058,
    1057, 1, 0, 0, 0, 1059, 1061, 1, 0, 0, 0, 1060, 1055, 1, 0, 0, 0, 1060, 1061, 1, 0, 0, 0, 1061,
    139, 1, 0, 0, 0, 1062, 1063, 5, 25, 0, 0, 1063, 1064, 3, 142, 71, 0, 1064, 141, 1, 0, 0, 0, 1065,
    1070, 3, 144, 72, 0, 1066, 1067, 5, 145, 0, 0, 1067, 1069, 3, 144, 72, 0, 1068, 1066, 1, 0, 0,
    0, 1069, 1072, 1, 0, 0, 0, 1070, 1068, 1, 0, 0, 0, 1070, 1071, 1, 0, 0, 0, 1071, 143, 1, 0, 0, 0,
    1072, 1070, 1, 0, 0, 0, 1073, 1076, 3, 146, 73, 0, 1074, 1076, 3, 148, 74, 0, 1075, 1073, 1,
    0, 0, 0, 1075, 1074, 1, 0, 0, 0, 1076, 145, 1, 0, 0, 0, 1077, 1078, 3, 526, 263, 0, 1078, 1081,
    5, 146, 0, 0, 1079, 1082, 3, 526, 263, 0, 1080, 1082, 3, 552, 276, 0, 1081, 1079, 1, 0, 0, 0,
    1081, 1080, 1, 0, 0, 0, 1082, 147, 1, 0, 0, 0, 1083, 1084, 3, 526, 263, 0, 1084, 1087, 3, 588,
    294, 0, 1085, 1088, 3, 526, 263, 0, 1086, 1088, 3, 522, 261, 0, 1087, 1085, 1, 0, 0, 0, 1087,
    1086, 1, 0, 0, 0, 1088, 149, 1, 0, 0, 0, 1089, 1090, 5, 148, 0, 0, 1090, 1091, 3, 152, 76, 0, 1091,
    1092, 5, 149, 0, 0, 1092, 151, 1, 0, 0, 0, 1093, 1098, 3, 154, 77, 0, 1094, 1095, 5, 145, 0, 0,
    1095, 1097, 3, 154, 77, 0, 1096, 1094, 1, 0, 0, 0, 1097, 1100, 1, 0, 0, 0, 1098, 1096, 1, 0, 0,
    0, 1098, 1099, 1, 0, 0, 0, 1099, 153, 1, 0, 0, 0, 1100, 1098, 1, 0, 0, 0, 1101, 1102, 3, 522, 261,
    0, 1102, 155, 1, 0, 0, 0, 1103, 1119, 3, 164, 82, 0, 1104, 1119, 3, 172, 86, 0, 1105, 1119, 3,
    180, 90, 0, 1106, 1119, 3, 206, 103, 0, 1107, 1119, 3, 212, 106, 0, 1108, 1119, 3, 236, 118,
    0, 1109, 1119, 3, 270, 135, 0, 1110, 1119, 3, 280, 140, 0, 1111, 1119, 3, 290, 145, 0, 1112,
    1119, 3, 312, 156, 0, 1113, 1119, 3, 318, 159, 0, 1114, 1119, 3, 320, 160, 0, 1115, 1119, 3,
    328, 164, 0, 1116, 1119, 3, 334, 167, 0, 1117, 1119, 3, 344, 172, 0, 1118, 1103, 1, 0, 0, 0,
    1118, 1104, 1, 0, 0, 0, 1118, 1105, 1, 0, 0, 0, 1118, 1106, 1, 0, 0, 0, 1118, 1107, 1, 0, 0, 0,
    1118, 1108, 1, 0, 0, 0, 1118, 1109, 1, 0, 0, 0, 1118, 1110, 1, 0, 0, 0, 1118, 1111, 1, 0, 0, 0,
    1118, 1112, 1, 0, 0, 0, 1118, 1113, 1, 0, 0, 0, 1118, 1114, 1, 0, 0, 0, 1118, 1115, 1, 0, 0, 0,
    1118, 1116, 1, 0, 0, 0, 1118, 1117, 1, 0, 0, 0, 1119, 1121, 1, 0, 0, 0, 1120, 1122, 5, 147, 0,
    0, 1121, 1120, 1, 0, 0, 0, 1121, 1122, 1, 0, 0, 0, 1122, 157, 1, 0, 0, 0, 1123, 1125, 3, 156, 78,
    0, 1124, 1123, 1, 0, 0, 0, 1125, 1126, 1, 0, 0, 0, 1126, 1124, 1, 0, 0, 0, 1126, 1127, 1, 0, 0,
    0, 1127, 159, 1, 0, 0, 0, 1128, 1130, 3, 4, 2, 0, 1129, 1128, 1, 0, 0, 0, 1129, 1130, 1, 0, 0, 0,
    1130, 161, 1, 0, 0, 0, 1131, 1133, 5, 139, 0, 0, 1132, 1134, 3, 4, 2, 0, 1133, 1132, 1, 0, 0, 0,
    1133, 1134, 1, 0, 0, 0, 1134, 1135, 1, 0, 0, 0, 1135, 1136, 5, 142, 0, 0, 1136, 163, 1, 0, 0, 0,
    1137, 1139, 3, 394, 197, 0, 1138, 1137, 1, 0, 0, 0, 1138, 1139, 1, 0, 0, 0, 1139, 1140, 1, 0,
    0, 0, 1140, 1142, 5, 19, 0, 0, 1141, 1143, 3, 166, 83, 0, 1142, 1141, 1, 0, 0, 0, 1142, 1143,
    1, 0, 0, 0, 1143, 1144, 1, 0, 0, 0, 1144, 1145, 3, 168, 84, 0, 1145, 165, 1, 0, 0, 0, 1146, 1147,
    7, 7, 0, 0, 1147, 167, 1, 0, 0, 0, 1148, 1153, 3, 170, 85, 0, 1149, 1150, 5, 138, 0, 0, 1150, 1152,
    3, 170, 85, 0, 1151, 1149, 1, 0, 0, 0, 1152, 1155, 1, 0, 0, 0, 1153, 1151, 1, 0, 0, 0, 1153, 1154,
    1, 0, 0, 0, 1154, 169, 1, 0, 0, 0, 1155, 1153, 1, 0, 0, 0, 1156, 1159, 3, 566, 283, 0, 1157, 1159,
    3, 596, 298, 0, 1158, 1156, 1, 0, 0, 0, 1158, 1157, 1, 0, 0, 0, 1159, 171, 1, 0, 0, 0, 1160, 1162,
    3, 394, 197, 0, 1161, 1160, 1, 0, 0, 0, 1161, 1162, 1, 0, 0, 0, 1162, 1164, 1, 0, 0, 0, 1163, 1165,
    3, 362, 181, 0, 1164, 1163, 1, 0, 0, 0, 1164, 1165, 1, 0, 0, 0, 1165, 1166, 1, 0, 0, 0, 1166, 1167,
    5, 27, 0, 0, 1167, 1168, 3, 174, 87, 0, 1168, 173, 1, 0, 0, 0, 1169, 1174, 3, 176, 88, 0, 1170,
    1171, 5, 145, 0, 0, 1171, 1173, 3, 176, 88, 0, 1172, 1170, 1, 0, 0, 0, 1173, 1176, 1, 0, 0, 0,
    1174, 1172, 1, 0, 0, 0, 1174, 1175, 1, 0, 0, 0, 1175, 175, 1, 0, 0, 0, 1176, 1174, 1, 0, 0, 0, 1177,
    1179, 3, 368, 184, 0, 1178, 1180, 3, 178, 89, 0, 1179, 1178, 1, 0, 0, 0, 1179, 1180, 1, 0, 0,
    0, 1180, 177, 1, 0, 0, 0, 1181, 1182, 5, 156, 0, 0, 1182, 1183, 3, 402, 201, 0, 1183, 179, 1,
    0, 0, 0, 1184, 1201, 3, 182, 91, 0, 1185, 1198, 3, 184, 92, 0, 1186, 1187, 3, 178, 89, 0, 1187,
    1188, 3, 200, 100, 0, 1188, 1199, 1, 0, 0, 0, 1189, 1196, 3, 524, 262, 0, 1190, 1197, 3, 186,
    93, 0, 1191, 1197, 3, 194, 97, 0, 1192, 1194, 3, 178, 89, 0, 1193, 1192, 1, 0, 0, 0, 1193, 1194,
    1, 0, 0, 0, 1194, 1195, 1, 0, 0, 0, 1195, 1197, 3, 200, 100, 0, 1196, 1190, 1, 0, 0, 0, 1196, 1191,
    1, 0, 0, 0, 1196, 1193, 1, 0, 0, 0, 1197, 1199, 1, 0, 0, 0, 1198, 1186, 1, 0, 0, 0, 1198, 1189,
    1, 0, 0, 0, 1199, 1202, 1, 0, 0, 0, 1200, 1202, 3, 174, 87, 0, 1201, 1185, 1, 0, 0, 0, 1201, 1200,
    1, 0, 0, 0, 1202, 181, 1, 0, 0, 0, 1203, 1205, 3, 394, 197, 0, 1204, 1203, 1, 0, 0, 0, 1204, 1205,
    1, 0, 0, 0, 1205, 1207, 1, 0, 0, 0, 1206, 1208, 3, 362, 181, 0, 1207, 1206, 1, 0, 0, 0, 1207, 1208,
    1, 0, 0, 0, 1208, 1209, 1, 0, 0, 0, 1209, 1210, 5, 28, 0, 0, 1210, 183, 1, 0, 0, 0, 1211, 1212,
    3, 566, 283, 0, 1212, 185, 1, 0, 0, 0, 1213, 1221, 5, 139, 0, 0, 1214, 1216, 3, 188, 94, 0, 1215,
    1217, 3, 190, 95, 0, 1216, 1215, 1, 0, 0, 0, 1216, 1217, 1, 0, 0, 0, 1217, 1222, 1, 0, 0, 0, 1218,
    1219, 3, 190, 95, 0, 1219, 1220, 3, 188, 94, 0, 1220, 1222, 1, 0, 0, 0, 1221, 1214, 1, 0, 0, 0,
    1221, 1218, 1, 0, 0, 0, 1222, 1223, 1, 0, 0, 0, 1223, 1224, 5, 142, 0, 0, 1224, 1227, 1, 0, 0,
    0, 1225, 1227, 3, 162, 81, 0, 1226, 1213, 1, 0, 0, 0, 1226, 1225, 1, 0, 0, 0, 1227, 187, 1, 0,
    0, 0, 1228, 1230, 3, 394, 197, 0, 1229, 1228, 1, 0, 0, 0, 1229, 1230, 1, 0, 0, 0, 1230, 1232,
    1, 0, 0, 0, 1231, 1233, 3, 366, 183, 0, 1232, 1231, 1, 0, 0, 0, 1232, 1233, 1, 0, 0, 0, 1233, 1234,
    1, 0, 0, 0, 1234, 1236, 5, 30, 0, 0, 1235, 1237, 3, 162, 81, 0, 1236, 1235, 1, 0, 0, 0, 1236, 1237,
    1, 0, 0, 0, 1237, 189, 1, 0, 0, 0, 1238, 1240, 3, 394, 197, 0, 1239, 1238, 1, 0, 0, 0, 1239, 1240,
    1, 0, 0, 0, 1240, 1242, 1, 0, 0, 0, 1241, 1243, 3, 366, 183, 0, 1242, 1241, 1, 0, 0, 0, 1242, 1243,
    1, 0, 0, 0, 1243, 1244, 1, 0, 0, 0, 1244, 1246, 5, 31, 0, 0, 1245, 1247, 3, 192, 96, 0, 1246, 1245,
    1, 0, 0, 0, 1246, 1247, 1, 0, 0, 0, 1247, 1249, 1, 0, 0, 0, 1248, 1250, 3, 162, 81, 0, 1249, 1248,
    1, 0, 0, 0, 1249, 1250, 1, 0, 0, 0, 1250, 191, 1, 0, 0, 0, 1251, 1252, 5, 140, 0, 0, 1252, 1253,
    3, 566, 283, 0, 1253, 1254, 5, 143, 0, 0, 1254, 193, 1, 0, 0, 0, 1255, 1263, 5, 139, 0, 0, 1256,
    1258, 3, 196, 98, 0, 1257, 1259, 3, 198, 99, 0, 1258, 1257, 1, 0, 0, 0, 1258, 1259, 1, 0, 0, 0,
    1259, 1264, 1, 0, 0, 0, 1260, 1261, 3, 198, 99, 0, 1261, 1262, 3, 196, 98, 0, 1262, 1264, 1,
    0, 0, 0, 1263, 1256, 1, 0, 0, 0, 1263, 1260, 1, 0, 0, 0, 1264, 1265, 1, 0, 0, 0, 1265, 1266, 5,
    142, 0, 0, 1266, 195, 1, 0, 0, 0, 1267, 1269, 3, 394, 197, 0, 1268, 1267, 1, 0, 0, 0, 1268, 1269,
    1, 0, 0, 0, 1269, 1271, 1, 0, 0, 0, 1270, 1272, 3, 366, 183, 0, 1271, 1270, 1, 0, 0, 0, 1271, 1272,
    1, 0, 0, 0, 1272, 1273, 1, 0, 0, 0, 1273, 1274, 5, 30, 0, 0, 1274, 197, 1, 0, 0, 0, 1275, 1277,
    3, 394, 197, 0, 1276, 1275, 1, 0, 0, 0, 1276, 1277, 1, 0, 0, 0, 1277, 1279, 1, 0, 0, 0, 1278, 1280,
    3, 366, 183, 0, 1279, 1278, 1, 0, 0, 0, 1279, 1280, 1, 0, 0, 0, 1280, 1281, 1, 0, 0, 0, 1281, 1282,
    5, 31, 0, 0, 1282, 199, 1, 0, 0, 0, 1283, 1292, 5, 139, 0, 0, 1284, 1286, 3, 202, 101, 0, 1285,
    1287, 3, 204, 102, 0, 1286, 1285, 1, 0, 0, 0, 1286, 1287, 1, 0, 0, 0, 1287, 1293, 1, 0, 0, 0, 1288,
    1290, 3, 204, 102, 0, 1289, 1291, 3, 202, 101, 0, 1290, 1289, 1, 0, 0, 0, 1290, 1291, 1, 0, 0,
    0, 1291, 1293, 1, 0, 0, 0, 1292, 1284, 1, 0, 0, 0, 1292, 1288, 1, 0, 0, 0, 1293, 1294, 1, 0, 0,
    0, 1294, 1295, 5, 142, 0, 0, 1295, 201, 1, 0, 0, 0, 1296, 1298, 3, 394, 197, 0, 1297, 1296, 1,
    0, 0, 0, 1297, 1298, 1, 0, 0, 0, 1298, 1299, 1, 0, 0, 0, 1299, 1301, 5, 32, 0, 0, 1300, 1302, 3,
    192, 96, 0, 1301, 1300, 1, 0, 0, 0, 1301, 1302, 1, 0, 0, 0, 1302, 1303, 1, 0, 0, 0, 1303, 1304,
    3, 162, 81, 0, 1304, 203, 1, 0, 0, 0, 1305, 1307, 3, 394, 197, 0, 1306, 1305, 1, 0, 0, 0, 1306,
    1307, 1, 0, 0, 0, 1307, 1308, 1, 0, 0, 0, 1308, 1310, 5, 33, 0, 0, 1309, 1311, 3, 192, 96, 0, 1310,
    1309, 1, 0, 0, 0, 1310, 1311, 1, 0, 0, 0, 1311, 1312, 1, 0, 0, 0, 1312, 1313, 3, 162, 81, 0, 1313,
    205, 1, 0, 0, 0, 1314, 1316, 3, 394, 197, 0, 1315, 1314, 1, 0, 0, 0, 1315, 1316, 1, 0, 0, 0, 1316,
    1318, 1, 0, 0, 0, 1317, 1319, 3, 364, 182, 0, 1318, 1317, 1, 0, 0, 0, 1318, 1319, 1, 0, 0, 0, 1319,
    1320, 1, 0, 0, 0, 1320, 1321, 5, 59, 0, 0, 1321, 1323, 3, 208, 104, 0, 1322, 1324, 3, 134, 67,
    0, 1323, 1322, 1, 0, 0, 0, 1323, 1324, 1, 0, 0, 0, 1324, 1325, 1, 0, 0, 0, 1325, 1326, 3, 210,
    105, 0, 1326, 207, 1, 0, 0, 0, 1327, 1328, 3, 566, 283, 0, 1328, 209, 1, 0, 0, 0, 1329, 1330,
    5, 156, 0, 0, 1330, 1331, 3, 522, 261, 0, 1331, 211, 1, 0, 0, 0, 1332, 1333, 3, 214, 107, 0, 1333,
    1335, 3, 216, 108, 0, 1334, 1336, 3, 134, 67, 0, 1335, 1334, 1, 0, 0, 0, 1335, 1336, 1, 0, 0,
    0, 1336, 1337, 1, 0, 0, 0, 1337, 1339, 3, 218, 109, 0, 1338, 1340, 3, 140, 70, 0, 1339, 1338,
    1, 0, 0, 0, 1339, 1340, 1, 0, 0, 0, 1340, 1342, 1, 0, 0, 0, 1341, 1343, 3, 222, 111, 0, 1342, 1341,
    1, 0, 0, 0, 1342, 1343, 1, 0, 0, 0, 1343, 213, 1, 0, 0, 0, 1344, 1346, 3, 394, 197, 0, 1345, 1344,
    1, 0, 0, 0, 1345, 1346, 1, 0, 0, 0, 1346, 1348, 1, 0, 0, 0, 1347, 1349, 3, 362, 181, 0, 1348, 1347,
    1, 0, 0, 0, 1348, 1349, 1, 0, 0, 0, 1349, 1350, 1, 0, 0, 0, 1350, 1351, 5, 16, 0, 0, 1351, 215,
    1, 0, 0, 0, 1352, 1355, 3, 566, 283, 0, 1353, 1355, 3, 596, 298, 0, 1354, 1352, 1, 0, 0, 0, 1354,
    1353, 1, 0, 0, 0, 1355, 217, 1, 0, 0, 0, 1356, 1361, 3, 224, 112, 0, 1357, 1359, 5, 39, 0, 0, 1358,
    1357, 1, 0, 0, 0, 1358, 1359, 1, 0, 0, 0, 1359, 1362, 1, 0, 0, 0, 1360, 1362, 5, 40, 0, 0, 1361,
    1358, 1, 0, 0, 0, 1361, 1360, 1, 0, 0, 0, 1362, 1364, 1, 0, 0, 0, 1363, 1365, 3, 220, 110, 0, 1364,
    1363, 1, 0, 0, 0, 1364, 1365, 1, 0, 0, 0, 1365, 219, 1, 0, 0, 0, 1366, 1368, 3, 584, 292, 0, 1367,
    1369, 3, 394, 197, 0, 1368, 1367, 1, 0, 0, 0, 1368, 1369, 1, 0, 0, 0, 1369, 1370, 1, 0, 0, 0, 1370,
    1371, 3, 522, 261, 0, 1371, 221, 1, 0, 0, 0, 1372, 1373, 3, 162, 81, 0, 1373, 223, 1, 0, 0, 0,
    1374, 1376, 5, 140, 0, 0, 1375, 1377, 3, 226, 113, 0, 1376, 1375, 1, 0, 0, 0, 1376, 1377, 1,
    0, 0, 0, 1377, 1378, 1, 0, 0, 0, 1378, 1379, 5, 143, 0, 0, 1379, 225, 1, 0, 0, 0, 1380, 1385, 3,
    228, 114, 0, 1381, 1382, 5, 145, 0, 0, 1382, 1384, 3, 228, 114, 0, 1383, 1381, 1, 0, 0, 0, 1384,
    1387, 1, 0, 0, 0, 1385, 1383, 1, 0, 0, 0, 1385, 1386, 1, 0, 0, 0, 1386, 227, 1, 0, 0, 0, 1387, 1385,
    1, 0, 0, 0, 1388, 1390, 3, 394, 197, 0, 1389, 1388, 1, 0, 0, 0, 1389, 1390, 1, 0, 0, 0, 1390, 1392,
    1, 0, 0, 0, 1391, 1393, 3, 230, 115, 0, 1392, 1391, 1, 0, 0, 0, 1392, 1393, 1, 0, 0, 0, 1393, 1394,
    1, 0, 0, 0, 1394, 1395, 3, 232, 116, 0, 1395, 1400, 3, 524, 262, 0, 1396, 1398, 3, 234, 117,
    0, 1397, 1396, 1, 0, 0, 0, 1397, 1398, 1, 0, 0, 0, 1398, 1401, 1, 0, 0, 0, 1399, 1401, 3, 586,
    293, 0, 1400, 1397, 1, 0, 0, 0, 1400, 1399, 1, 0, 0, 0, 1401, 229, 1, 0, 0, 0, 1402, 1403, 3, 566,
    283, 0, 1403, 231, 1, 0, 0, 0, 1404, 1405, 3, 566, 283, 0, 1405, 233, 1, 0, 0, 0, 1406, 1407,
    5, 156, 0, 0, 1407, 1408, 3, 402, 201, 0, 1408, 235, 1, 0, 0, 0, 1409, 1411, 3, 394, 197, 0, 1410,
    1409, 1, 0, 0, 0, 1410, 1411, 1, 0, 0, 0, 1411, 1413, 1, 0, 0, 0, 1412, 1414, 3, 364, 182, 0, 1413,
    1412, 1, 0, 0, 0, 1413, 1414, 1, 0, 0, 0, 1414, 1417, 1, 0, 0, 0, 1415, 1418, 3, 238, 119, 0, 1416,
    1418, 3, 254, 127, 0, 1417, 1415, 1, 0, 0, 0, 1417, 1416, 1, 0, 0, 0, 1418, 237, 1, 0, 0, 0, 1419,
    1421, 5, 41, 0, 0, 1420, 1419, 1, 0, 0, 0, 1420, 1421, 1, 0, 0, 0, 1421, 1422, 1, 0, 0, 0, 1422,
    1423, 5, 13, 0, 0, 1423, 1425, 3, 250, 125, 0, 1424, 1426, 3, 134, 67, 0, 1425, 1424, 1, 0, 0,
    0, 1425, 1426, 1, 0, 0, 0, 1426, 1428, 1, 0, 0, 0, 1427, 1429, 3, 562, 281, 0, 1428, 1427, 1,
    0, 0, 0, 1428, 1429, 1, 0, 0, 0, 1429, 1431, 1, 0, 0, 0, 1430, 1432, 3, 140, 70, 0, 1431, 1430,
    1, 0, 0, 0, 1431, 1432, 1, 0, 0, 0, 1432, 1433, 1, 0, 0, 0, 1433, 1435, 5, 139, 0, 0, 1434, 1436,
    3, 240, 120, 0, 1435, 1434, 1, 0, 0, 0, 1435, 1436, 1, 0, 0, 0, 1436, 1437, 1, 0, 0, 0, 1437, 1438,
    5, 142, 0, 0, 1438, 239, 1, 0, 0, 0, 1439, 1441, 3, 242, 121, 0, 1440, 1439, 1, 0, 0, 0, 1441,
    1442, 1, 0, 0, 0, 1442, 1440, 1, 0, 0, 0, 1442, 1443, 1, 0, 0, 0, 1443, 241, 1, 0, 0, 0, 1444, 1448,
    3, 156, 78, 0, 1445, 1448, 3, 244, 122, 0, 1446, 1448, 3, 86, 43, 0, 1447, 1444, 1, 0, 0, 0, 1447,
    1445, 1, 0, 0, 0, 1447, 1446, 1, 0, 0, 0, 1448, 243, 1, 0, 0, 0, 1449, 1451, 3, 394, 197, 0, 1450,
    1449, 1, 0, 0, 0, 1450, 1451, 1, 0, 0, 0, 1451, 1453, 1, 0, 0, 0, 1452, 1454, 5, 41, 0, 0, 1453,
    1452, 1, 0, 0, 0, 1453, 1454, 1, 0, 0, 0, 1454, 1455, 1, 0, 0, 0, 1455, 1456, 5, 4, 0, 0, 1456,
    1457, 3, 246, 123, 0, 1457, 245, 1, 0, 0, 0, 1458, 1463, 3, 248, 124, 0, 1459, 1460, 5, 145,
    0, 0, 1460, 1462, 3, 248, 124, 0, 1461, 1459, 1, 0, 0, 0, 1462, 1465, 1, 0, 0, 0, 1463, 1461,
    1, 0, 0, 0, 1463, 1464, 1, 0, 0, 0, 1464, 247, 1, 0, 0, 0, 1465, 1463, 1, 0, 0, 0, 1466, 1476, 3,
    556, 278, 0, 1467, 1473, 3, 252, 126, 0, 1468, 1474, 3, 530, 265, 0, 1469, 1470, 5, 140, 0,
    0, 1470, 1471, 3, 522, 261, 0, 1471, 1472, 5, 143, 0, 0, 1472, 1474, 1, 0, 0, 0, 1473, 1468,
    1, 0, 0, 0, 1473, 1469, 1, 0, 0, 0, 1473, 1474, 1, 0, 0, 0, 1474, 1476, 1, 0, 0, 0, 1475, 1466,
    1, 0, 0, 0, 1475, 1467, 1, 0, 0, 0, 1476, 249, 1, 0, 0, 0, 1477, 1478, 3, 566, 283, 0, 1478, 251,
    1, 0, 0, 0, 1479, 1480, 3, 566, 283, 0, 1480, 253, 1, 0, 0, 0, 1481, 1482, 5, 13, 0, 0, 1482, 1484,
    3, 250, 125, 0, 1483, 1485, 3, 134, 67, 0, 1484, 1483, 1, 0, 0, 0, 1484, 1485, 1, 0, 0, 0, 1485,
    1486, 1, 0, 0, 0, 1486, 1488, 3, 562, 281, 0, 1487, 1489, 3, 140, 70, 0, 1488, 1487, 1, 0, 0,
    0, 1488, 1489, 1, 0, 0, 0, 1489, 1490, 1, 0, 0, 0, 1490, 1491, 5, 139, 0, 0, 1491, 1492, 3, 256,
    128, 0, 1492, 1493, 5, 142, 0, 0, 1493, 255, 1, 0, 0, 0, 1494, 1496, 3, 258, 129, 0, 1495, 1494,
    1, 0, 0, 0, 1496, 1497, 1, 0, 0, 0, 1497, 1495, 1, 0, 0, 0, 1497, 1498, 1, 0, 0, 0, 1498, 257, 1,
    0, 0, 0, 1499, 1503, 3, 156, 78, 0, 1500, 1503, 3, 260, 130, 0, 1501, 1503, 3, 86, 43, 0, 1502,
    1499, 1, 0, 0, 0, 1502, 1500, 1, 0, 0, 0, 1502, 1501, 1, 0, 0, 0, 1503, 259, 1, 0, 0, 0, 1504, 1506,
    3, 394, 197, 0, 1505, 1504, 1, 0, 0, 0, 1505, 1506, 1, 0, 0, 0, 1506, 1507, 1, 0, 0, 0, 1507, 1508,
    5, 4, 0, 0, 1508, 1509, 3, 262, 131, 0, 1509, 261, 1, 0, 0, 0, 1510, 1515, 3, 264, 132, 0, 1511,
    1512, 5, 145, 0, 0, 1512, 1514, 3, 264, 132, 0, 1513, 1511, 1, 0, 0, 0, 1514, 1517, 1, 0, 0, 0,
    1515, 1513, 1, 0, 0, 0, 1515, 1516, 1, 0, 0, 0, 1516, 263, 1, 0, 0, 0, 1517, 1515, 1, 0, 0, 0, 1518,
    1520, 3, 252, 126, 0, 1519, 1521, 3, 266, 133, 0, 1520, 1519, 1, 0, 0, 0, 1520, 1521, 1, 0, 0,
    0, 1521, 265, 1, 0, 0, 0, 1522, 1523, 5, 156, 0, 0, 1523, 1524, 3, 268, 134, 0, 1524, 267, 1,
    0, 0, 0, 1525, 1529, 3, 612, 306, 0, 1526, 1529, 3, 624, 312, 0, 1527, 1529, 3, 614, 307, 0,
    1528, 1525, 1, 0, 0, 0, 1528, 1526, 1, 0, 0, 0, 1528, 1527, 1, 0, 0, 0, 1529, 269, 1, 0, 0, 0, 1530,
    1532, 3, 394, 197, 0, 1531, 1530, 1, 0, 0, 0, 1531, 1532, 1, 0, 0, 0, 1532, 1534, 1, 0, 0, 0, 1533,
    1535, 3, 364, 182, 0, 1534, 1533, 1, 0, 0, 0, 1534, 1535, 1, 0, 0, 0, 1535, 1536, 1, 0, 0, 0, 1536,
    1537, 5, 36, 0, 0, 1537, 1539, 3, 272, 136, 0, 1538, 1540, 3, 134, 67, 0, 1539, 1538, 1, 0, 0,
    0, 1539, 1540, 1, 0, 0, 0, 1540, 1542, 1, 0, 0, 0, 1541, 1543, 3, 562, 281, 0, 1542, 1541, 1,
    0, 0, 0, 1542, 1543, 1, 0, 0, 0, 1543, 1545, 1, 0, 0, 0, 1544, 1546, 3, 140, 70, 0, 1545, 1544,
    1, 0, 0, 0, 1545, 1546, 1, 0, 0, 0, 1546, 1547, 1, 0, 0, 0, 1547, 1548, 3, 274, 137, 0, 1548, 271,
    1, 0, 0, 0, 1549, 1550, 3, 566, 283, 0, 1550, 273, 1, 0, 0, 0, 1551, 1552, 5, 139, 0, 0, 1552,
    1553, 3, 276, 138, 0, 1553, 1554, 5, 142, 0, 0, 1554, 275, 1, 0, 0, 0, 1555, 1557, 3, 278, 139,
    0, 1556, 1555, 1, 0, 0, 0, 1557, 1560, 1, 0, 0, 0, 1558, 1556, 1, 0, 0, 0, 1558, 1559, 1, 0, 0,
    0, 1559, 277, 1, 0, 0, 0, 1560, 1558, 1, 0, 0, 0, 1561, 1564, 3, 156, 78, 0, 1562, 1564, 3, 86,
    43, 0, 1563, 1561, 1, 0, 0, 0, 1563, 1562, 1, 0, 0, 0, 1564, 279, 1, 0, 0, 0, 1565, 1567, 3, 394,
    197, 0, 1566, 1565, 1, 0, 0, 0, 1566, 1567, 1, 0, 0, 0, 1567, 1578, 1, 0, 0, 0, 1568, 1570, 3,
    364, 182, 0, 1569, 1568, 1, 0, 0, 0, 1569, 1570, 1, 0, 0, 0, 1570, 1572, 1, 0, 0, 0, 1571, 1573,
    5, 21, 0, 0, 1572, 1571, 1, 0, 0, 0, 1572, 1573, 1, 0, 0, 0, 1573, 1579, 1, 0, 0, 0, 1574, 1576,
    5, 21, 0, 0, 1575, 1577, 3, 364, 182, 0, 1576, 1575, 1, 0, 0, 0, 1576, 1577, 1, 0, 0, 0, 1577,
    1579, 1, 0, 0, 0, 1578, 1569, 1, 0, 0, 0, 1578, 1574, 1, 0, 0, 0, 1579, 1580, 1, 0, 0, 0, 1580,
    1581, 5, 6, 0, 0, 1581, 1583, 3, 282, 141, 0, 1582, 1584, 3, 134, 67, 0, 1583, 1582, 1, 0, 0,
    0, 1583, 1584, 1, 0, 0, 0, 1584, 1586, 1, 0, 0, 0, 1585, 1587, 3, 562, 281, 0, 1586, 1585, 1,
    0, 0, 0, 1586, 1587, 1, 0, 0, 0, 1587, 1589, 1, 0, 0, 0, 1588, 1590, 3, 140, 70, 0, 1589, 1588,
    1, 0, 0, 0, 1589, 1590, 1, 0, 0, 0, 1590, 1591, 1, 0, 0, 0, 1591, 1592, 3, 284, 142, 0, 1592, 281,
    1, 0, 0, 0, 1593, 1594, 3, 566, 283, 0, 1594, 283, 1, 0, 0, 0, 1595, 1596, 5, 139, 0, 0, 1596,
    1597, 3, 286, 143, 0, 1597, 1598, 5, 142, 0, 0, 1598, 285, 1, 0, 0, 0, 1599, 1601, 3, 288, 144,
    0, 1600, 1599, 1, 0, 0, 0, 1601, 1604, 1, 0, 0, 0, 1602, 1600, 1, 0, 0, 0, 1602, 1603, 1, 0, 0,
    0, 1603, 287, 1, 0, 0, 0, 1604, 1602, 1, 0, 0, 0, 1605, 1608, 3, 156, 78, 0, 1606, 1608, 3, 86,
    43, 0, 1607, 1605, 1, 0, 0, 0, 1607, 1606, 1, 0, 0, 0, 1608, 289, 1, 0, 0, 0, 1609, 1611, 3, 394,
    197, 0, 1610, 1609, 1, 0, 0, 0, 1610, 1611, 1, 0, 0, 0, 1611, 1613, 1, 0, 0, 0, 1612, 1614, 3,
    364, 182, 0, 1613, 1612, 1, 0, 0, 0, 1613, 1614, 1, 0, 0, 0, 1614, 1615, 1, 0, 0, 0, 1615, 1616,
    5, 29, 0, 0, 1616, 1620, 3, 292, 146, 0, 1617, 1618, 5, 146, 0, 0, 1618, 1621, 5, 6, 0, 0, 1619,
    1621, 3, 562, 281, 0, 1620, 1617, 1, 0, 0, 0, 1620, 1619, 1, 0, 0, 0, 1620, 1621, 1, 0, 0, 0, 1621,
    1623, 1, 0, 0, 0, 1622, 1624, 3, 140, 70, 0, 1623, 1622, 1, 0, 0, 0, 1623, 1624, 1, 0, 0, 0, 1624,
    1625, 1, 0, 0, 0, 1625, 1626, 3, 294, 147, 0, 1626, 291, 1, 0, 0, 0, 1627, 1628, 3, 566, 283,
    0, 1628, 293, 1, 0, 0, 0, 1629, 1630, 5, 139, 0, 0, 1630, 1631, 3, 296, 148, 0, 1631, 1632, 5,
    142, 0, 0, 1632, 295, 1, 0, 0, 0, 1633, 1635, 3, 298, 149, 0, 1634, 1633, 1, 0, 0, 0, 1635, 1638,
    1, 0, 0, 0, 1636, 1634, 1, 0, 0, 0, 1636, 1637, 1, 0, 0, 0, 1637, 297, 1, 0, 0, 0, 1638, 1636, 1,
    0, 0, 0, 1639, 1642, 3, 300, 150, 0, 1640, 1642, 3, 86, 43, 0, 1641, 1639, 1, 0, 0, 0, 1641, 1640,
    1, 0, 0, 0, 1642, 299, 1, 0, 0, 0, 1643, 1650, 3, 302, 151, 0, 1644, 1650, 3, 304, 152, 0, 1645,
    1650, 3, 306, 153, 0, 1646, 1650, 3, 308, 154, 0, 1647, 1650, 3, 310, 155, 0, 1648, 1650, 3,
    206, 103, 0, 1649, 1643, 1, 0, 0, 0, 1649, 1644, 1, 0, 0, 0, 1649, 1645, 1, 0, 0, 0, 1649, 1646,
    1, 0, 0, 0, 1649, 1647, 1, 0, 0, 0, 1649, 1648, 1, 0, 0, 0, 1650, 301, 1, 0, 0, 0, 1651, 1652, 3,
    182, 91, 0, 1652, 1653, 3, 184, 92, 0, 1653, 1654, 3, 524, 262, 0, 1654, 1655, 3, 194, 97, 0,
    1655, 303, 1, 0, 0, 0, 1656, 1657, 3, 214, 107, 0, 1657, 1659, 3, 216, 108, 0, 1658, 1660, 3,
    134, 67, 0, 1659, 1658, 1, 0, 0, 0, 1659, 1660, 1, 0, 0, 0, 1660, 1661, 1, 0, 0, 0, 1661, 1663,
    3, 218, 109, 0, 1662, 1664, 3, 140, 70, 0, 1663, 1662, 1, 0, 0, 0, 1663, 1664, 1, 0, 0, 0, 1664,
    305, 1, 0, 0, 0, 1665, 1667, 3, 314, 157, 0, 1666, 1668, 3, 134, 67, 0, 1667, 1666, 1, 0, 0, 0,
    1667, 1668, 1, 0, 0, 0, 1668, 1669, 1, 0, 0, 0, 1669, 1674, 3, 224, 112, 0, 1670, 1672, 5, 39,
    0, 0, 1671, 1670, 1, 0, 0, 0, 1671, 1672, 1, 0, 0, 0, 1672, 1675, 1, 0, 0, 0, 1673, 1675, 5, 40,
    0, 0, 1674, 1671, 1, 0, 0, 0, 1674, 1673, 1, 0, 0, 0, 1675, 1677, 1, 0, 0, 0, 1676, 1678, 3, 140,
    70, 0, 1677, 1676, 1, 0, 0, 0, 1677, 1678, 1, 0, 0, 0, 1678, 307, 1, 0, 0, 0, 1679, 1680, 3, 330,
    165, 0, 1680, 1682, 3, 332, 166, 0, 1681, 1683, 3, 140, 70, 0, 1682, 1681, 1, 0, 0, 0, 1682,
    1683, 1, 0, 0, 0, 1683, 1684, 1, 0, 0, 0, 1684, 1685, 3, 194, 97, 0, 1685, 309, 1, 0, 0, 0, 1686,
    1688, 3, 394, 197, 0, 1687, 1686, 1, 0, 0, 0, 1687, 1688, 1, 0, 0, 0, 1688, 1690, 1, 0, 0, 0, 1689,
    1691, 3, 364, 182, 0, 1690, 1689, 1, 0, 0, 0, 1690, 1691, 1, 0, 0, 0, 1691, 1692, 1, 0, 0, 0, 1692,
    1693, 5, 44, 0, 0, 1693, 1695, 3, 208, 104, 0, 1694, 1696, 3, 562, 281, 0, 1695, 1694, 1, 0,
    0, 0, 1695, 1696, 1, 0, 0, 0, 1696, 1698, 1, 0, 0, 0, 1697, 1699, 3, 210, 105, 0, 1698, 1697,
    1, 0, 0, 0, 1698, 1699, 1, 0, 0, 0, 1699, 1701, 1, 0, 0, 0, 1700, 1702, 3, 140, 70, 0, 1701, 1700,
    1, 0, 0, 0, 1701, 1702, 1, 0, 0, 0, 1702, 311, 1, 0, 0, 0, 1703, 1705, 3, 314, 157, 0, 1704, 1706,
    3, 134, 67, 0, 1705, 1704, 1, 0, 0, 0, 1705, 1706, 1, 0, 0, 0, 1706, 1707, 1, 0, 0, 0, 1707, 1709,
    3, 224, 112, 0, 1708, 1710, 7, 8, 0, 0, 1709, 1708, 1, 0, 0, 0, 1709, 1710, 1, 0, 0, 0, 1710, 1712,
    1, 0, 0, 0, 1711, 1713, 3, 140, 70, 0, 1712, 1711, 1, 0, 0, 0, 1712, 1713, 1, 0, 0, 0, 1713, 1714,
    1, 0, 0, 0, 1714, 1715, 3, 316, 158, 0, 1715, 313, 1, 0, 0, 0, 1716, 1718, 3, 394, 197, 0, 1717,
    1716, 1, 0, 0, 0, 1717, 1718, 1, 0, 0, 0, 1718, 1720, 1, 0, 0, 0, 1719, 1721, 3, 362, 181, 0, 1720,
    1719, 1, 0, 0, 0, 1720, 1721, 1, 0, 0, 0, 1721, 1722, 1, 0, 0, 0, 1722, 1724, 5, 42, 0, 0, 1723,
    1725, 7, 9, 0, 0, 1724, 1723, 1, 0, 0, 0, 1724, 1725, 1, 0, 0, 0, 1725, 315, 1, 0, 0, 0, 1726, 1727,
    3, 162, 81, 0, 1727, 317, 1, 0, 0, 0, 1728, 1730, 3, 394, 197, 0, 1729, 1728, 1, 0, 0, 0, 1729,
    1730, 1, 0, 0, 0, 1730, 1731, 1, 0, 0, 0, 1731, 1732, 5, 43, 0, 0, 1732, 1733, 3, 162, 81, 0, 1733,
    319, 1, 0, 0, 0, 1734, 1736, 3, 394, 197, 0, 1735, 1734, 1, 0, 0, 0, 1735, 1736, 1, 0, 0, 0, 1736,
    1738, 1, 0, 0, 0, 1737, 1739, 3, 364, 182, 0, 1738, 1737, 1, 0, 0, 0, 1738, 1739, 1, 0, 0, 0, 1739,
    1740, 1, 0, 0, 0, 1740, 1741, 5, 45, 0, 0, 1741, 1743, 3, 526, 263, 0, 1742, 1744, 3, 562, 281,
    0, 1743, 1742, 1, 0, 0, 0, 1743, 1744, 1, 0, 0, 0, 1744, 1746, 1, 0, 0, 0, 1745, 1747, 3, 140,
    70, 0, 1746, 1745, 1, 0, 0, 0, 1746, 1747, 1, 0, 0, 0, 1747, 1748, 1, 0, 0, 0, 1748, 1749, 3, 322,
    161, 0, 1749, 321, 1, 0, 0, 0, 1750, 1751, 5, 139, 0, 0, 1751, 1752, 3, 324, 162, 0, 1752, 1753,
    5, 142, 0, 0, 1753, 323, 1, 0, 0, 0, 1754, 1756, 3, 326, 163, 0, 1755, 1754, 1, 0, 0, 0, 1756,
    1759, 1, 0, 0, 0, 1757, 1755, 1, 0, 0, 0, 1757, 1758, 1, 0, 0, 0, 1758, 325, 1, 0, 0, 0, 1759, 1757,
    1, 0, 0, 0, 1760, 1763, 3, 156, 78, 0, 1761, 1763, 3, 86, 43, 0, 1762, 1760, 1, 0, 0, 0, 1762,
    1761, 1, 0, 0, 0, 1763, 327, 1, 0, 0, 0, 1764, 1765, 3, 330, 165, 0, 1765, 1767, 3, 332, 166,
    0, 1766, 1768, 3, 140, 70, 0, 1767, 1766, 1, 0, 0, 0, 1767, 1768, 1, 0, 0, 0, 1768, 1772, 1, 0,
    0, 0, 1769, 1773, 3, 162, 81, 0, 1770, 1773, 3, 186, 93, 0, 1771, 1773, 3, 194, 97, 0, 1772,
    1769, 1, 0, 0, 0, 1772, 1770, 1, 0, 0, 0, 1772, 1771, 1, 0, 0, 0, 1773, 329, 1, 0, 0, 0, 1774, 1776,
    3, 394, 197, 0, 1775, 1774, 1, 0, 0, 0, 1775, 1776, 1, 0, 0, 0, 1776, 1778, 1, 0, 0, 0, 1777, 1779,
    3, 362, 181, 0, 1778, 1777, 1, 0, 0, 0, 1778, 1779, 1, 0, 0, 0, 1779, 1780, 1, 0, 0, 0, 1780, 1782,
    5, 46, 0, 0, 1781, 1783, 3, 134, 67, 0, 1782, 1781, 1, 0, 0, 0, 1782, 1783, 1, 0, 0, 0, 1783, 1784,
    1, 0, 0, 0, 1784, 1785, 3, 224, 112, 0, 1785, 331, 1, 0, 0, 0, 1786, 1788, 3, 584, 292, 0, 1787,
    1789, 3, 394, 197, 0, 1788, 1787, 1, 0, 0, 0, 1788, 1789, 1, 0, 0, 0, 1789, 1790, 1, 0, 0, 0, 1790,
    1791, 3, 522, 261, 0, 1791, 333, 1, 0, 0, 0, 1792, 1796, 3, 336, 168, 0, 1793, 1796, 3, 338,
    169, 0, 1794, 1796, 3, 340, 170, 0, 1795, 1792, 1, 0, 0, 0, 1795, 1793, 1, 0, 0, 0, 1795, 1794,
    1, 0, 0, 0, 1796, 335, 1, 0, 0, 0, 1797, 1798, 5, 47, 0, 0, 1798, 1799, 5, 58, 0, 0, 1799, 1800,
    3, 596, 298, 0, 1800, 337, 1, 0, 0, 0, 1801, 1802, 5, 57, 0, 0, 1802, 1803, 5, 58, 0, 0, 1803,
    1804, 3, 596, 298, 0, 1804, 339, 1, 0, 0, 0, 1805, 1806, 5, 48, 0, 0, 1806, 1807, 5, 58, 0, 0,
    1807, 1809, 3, 596, 298, 0, 1808, 1810, 3, 342, 171, 0, 1809, 1808, 1, 0, 0, 0, 1809, 1810,
    1, 0, 0, 0, 1810, 341, 1, 0, 0, 0, 1811, 1812, 5, 146, 0, 0, 1812, 1813, 3, 358, 179, 0, 1813,
    343, 1, 0, 0, 0, 1814, 1815, 5, 52, 0, 0, 1815, 1816, 3, 358, 179, 0, 1816, 1818, 5, 139, 0, 0,
    1817, 1819, 3, 346, 173, 0, 1818, 1817, 1, 0, 0, 0, 1818, 1819, 1, 0, 0, 0, 1819, 1820, 1, 0,
    0, 0, 1820, 1821, 5, 142, 0, 0, 1821, 345, 1, 0, 0, 0, 1822, 1824, 3, 348, 174, 0, 1823, 1822,
    1, 0, 0, 0, 1824, 1825, 1, 0, 0, 0, 1825, 1823, 1, 0, 0, 0, 1825, 1826, 1, 0, 0, 0, 1826, 347, 1,
    0, 0, 0, 1827, 1831, 3, 350, 175, 0, 1828, 1831, 3, 352, 176, 0, 1829, 1831, 3, 354, 177, 0,
    1830, 1827, 1, 0, 0, 0, 1830, 1828, 1, 0, 0, 0, 1830, 1829, 1, 0, 0, 0, 1831, 349, 1, 0, 0, 0, 1832,
    1833, 7, 10, 0, 0, 1833, 1834, 5, 146, 0, 0, 1834, 1835, 3, 356, 178, 0, 1835, 351, 1, 0, 0, 0,
    1836, 1837, 5, 55, 0, 0, 1837, 1838, 5, 146, 0, 0, 1838, 1839, 3, 614, 307, 0, 1839, 353, 1,
    0, 0, 0, 1840, 1841, 5, 56, 0, 0, 1841, 1842, 5, 146, 0, 0, 1842, 1843, 7, 11, 0, 0, 1843, 355,
    1, 0, 0, 0, 1844, 1849, 3, 358, 179, 0, 1845, 1846, 5, 145, 0, 0, 1846, 1848, 3, 358, 179, 0,
    1847, 1845, 1, 0, 0, 0, 1848, 1851, 1, 0, 0, 0, 1849, 1847, 1, 0, 0, 0, 1849, 1850, 1, 0, 0, 0,
    1850, 357, 1, 0, 0, 0, 1851, 1849, 1, 0, 0, 0, 1852, 1857, 3, 566, 283, 0, 1853, 1854, 5, 138,
    0, 0, 1854, 1856, 3, 566, 283, 0, 1855, 1853, 1, 0, 0, 0, 1856, 1859, 1, 0, 0, 0, 1857, 1855,
    1, 0, 0, 0, 1857, 1858, 1, 0, 0, 0, 1858, 359, 1, 0, 0, 0, 1859, 1857, 1, 0, 0, 0, 1860, 1882, 5,
    6, 0, 0, 1861, 1882, 5, 66, 0, 0, 1862, 1882, 5, 67, 0, 0, 1863, 1882, 5, 21, 0, 0, 1864, 1882,
    5, 48, 0, 0, 1865, 1882, 5, 68, 0, 0, 1866, 1882, 5, 69, 0, 0, 1867, 1882, 5, 70, 0, 0, 1868, 1882,
    5, 57, 0, 0, 1869, 1882, 5, 47, 0, 0, 1870, 1882, 5, 71, 0, 0, 1871, 1882, 5, 72, 0, 0, 1872, 1876,
    5, 74, 0, 0, 1873, 1874, 5, 140, 0, 0, 1874, 1875, 7, 12, 0, 0, 1875, 1877, 5, 143, 0, 0, 1876,
    1873, 1, 0, 0, 0, 1876, 1877, 1, 0, 0, 0, 1877, 1882, 1, 0, 0, 0, 1878, 1882, 5, 73, 0, 0, 1879,
    1882, 3, 364, 182, 0, 1880, 1882, 3, 366, 183, 0, 1881, 1860, 1, 0, 0, 0, 1881, 1861, 1, 0, 0,
    0, 1881, 1862, 1, 0, 0, 0, 1881, 1863, 1, 0, 0, 0, 1881, 1864, 1, 0, 0, 0, 1881, 1865, 1, 0, 0,
    0, 1881, 1866, 1, 0, 0, 0, 1881, 1867, 1, 0, 0, 0, 1881, 1868, 1, 0, 0, 0, 1881, 1869, 1, 0, 0,
    0, 1881, 1870, 1, 0, 0, 0, 1881, 1871, 1, 0, 0, 0, 1881, 1872, 1, 0, 0, 0, 1881, 1878, 1, 0, 0,
    0, 1881, 1879, 1, 0, 0, 0, 1881, 1880, 1, 0, 0, 0, 1882, 361, 1, 0, 0, 0, 1883, 1885, 3, 360, 180,
    0, 1884, 1883, 1, 0, 0, 0, 1885, 1886, 1, 0, 0, 0, 1886, 1884, 1, 0, 0, 0, 1886, 1887, 1, 0, 0,
    0, 1887, 363, 1, 0, 0, 0, 1888, 1892, 7, 13, 0, 0, 1889, 1890, 5, 140, 0, 0, 1890, 1891, 5, 31,
    0, 0, 1891, 1893, 5, 143, 0, 0, 1892, 1889, 1, 0, 0, 0, 1892, 1893, 1, 0, 0, 0, 1893, 365, 1, 0,
    0, 0, 1894, 1895, 7, 14, 0, 0, 1895, 367, 1, 0, 0, 0, 1896, 1900, 6, 184, -1, 0, 1897, 1901, 3,
    370, 185, 0, 1898, 1901, 3, 372, 186, 0, 1899, 1901, 3, 376, 188, 0, 1900, 1897, 1, 0, 0, 0,
    1900, 1898, 1, 0, 0, 0, 1900, 1899, 1, 0, 0, 0, 1901, 1903, 1, 0, 0, 0, 1902, 1904, 3, 524, 262,
    0, 1903, 1902, 1, 0, 0, 0, 1903, 1904, 1, 0, 0, 0, 1904, 1912, 1, 0, 0, 0, 1905, 1912, 3, 374,
    187, 0, 1906, 1912, 3, 382, 191, 0, 1907, 1912, 3, 384, 192, 0, 1908, 1909, 5, 80, 0, 0, 1909,
    1912, 3, 522, 261, 0, 1910, 1912, 3, 386, 193, 0, 1911, 1896, 1, 0, 0, 0, 1911, 1905, 1, 0, 0,
    0, 1911, 1906, 1, 0, 0, 0, 1911, 1907, 1, 0, 0, 0, 1911, 1908, 1, 0, 0, 0, 1911, 1910, 1, 0, 0,
    0, 1912, 1918, 1, 0, 0, 0, 1913, 1914, 10, 2, 0, 0, 1914, 1915, 5, 1, 0, 0, 1915, 1917, 3, 522,
    261, 0, 1916, 1913, 1, 0, 0, 0, 1917, 1920, 1, 0, 0, 0, 1918, 1916, 1, 0, 0, 0, 1918, 1919, 1,
    0, 0, 0, 1919, 369, 1, 0, 0, 0, 1920, 1918, 1, 0, 0, 0, 1921, 1922, 5, 150, 0, 0, 1922, 371, 1,
    0, 0, 0, 1923, 1924, 3, 566, 283, 0, 1924, 373, 1, 0, 0, 0, 1925, 1926, 5, 28, 0, 0, 1926, 1930,
    3, 368, 184, 0, 1927, 1928, 5, 27, 0, 0, 1928, 1930, 3, 368, 184, 0, 1929, 1925, 1, 0, 0, 0, 1929,
    1927, 1, 0, 0, 0, 1930, 375, 1, 0, 0, 0, 1931, 1933, 5, 140, 0, 0, 1932, 1934, 3, 378, 189, 0,
    1933, 1932, 1, 0, 0, 0, 1933, 1934, 1, 0, 0, 0, 1934, 1935, 1, 0, 0, 0, 1935, 1936, 5, 143, 0,
    0, 1936, 377, 1, 0, 0, 0, 1937, 1942, 3, 380, 190, 0, 1938, 1939, 5, 145, 0, 0, 1939, 1941, 3,
    380, 190, 0, 1940, 1938, 1, 0, 0, 0, 1941, 1944, 1, 0, 0, 0, 1942, 1940, 1, 0, 0, 0, 1942, 1943,
    1, 0, 0, 0, 1943, 379, 1, 0, 0, 0, 1944, 1942, 1, 0, 0, 0, 1945, 1946, 3, 566, 283, 0, 1946, 1947,
    5, 146, 0, 0, 1947, 1949, 1, 0, 0, 0, 1948, 1945, 1, 0, 0, 0, 1948, 1949, 1, 0, 0, 0, 1949, 1950,
    1, 0, 0, 0, 1950, 1951, 3, 368, 184, 0, 1951, 381, 1, 0, 0, 0, 1952, 1954, 3, 526, 263, 0, 1953,
    1952, 1, 0, 0, 0, 1953, 1954, 1, 0, 0, 0, 1954, 1955, 1, 0, 0, 0, 1955, 1956, 5, 138, 0, 0, 1956,
    1958, 3, 252, 126, 0, 1957, 1959, 3, 376, 188, 0, 1958, 1957, 1, 0, 0, 0, 1958, 1959, 1, 0, 0,
    0, 1959, 383, 1, 0, 0, 0, 1960, 1961, 3, 372, 186, 0, 1961, 1962, 5, 152, 0, 0, 1962, 385, 1,
    0, 0, 0, 1963, 1964, 3, 402, 201, 0, 1964, 387, 1, 0, 0, 0, 1965, 1966, 5, 153, 0, 0, 1966, 1968,
    3, 390, 195, 0, 1967, 1969, 3, 392, 196, 0, 1968, 1967, 1, 0, 0, 0, 1968, 1969, 1, 0, 0, 0, 1969,
    389, 1, 0, 0, 0, 1970, 1975, 3, 566, 283, 0, 1971, 1972, 5, 138, 0, 0, 1972, 1974, 3, 566, 283,
    0, 1973, 1971, 1, 0, 0, 0, 1974, 1977, 1, 0, 0, 0, 1975, 1973, 1, 0, 0, 0, 1975, 1976, 1, 0, 0,
    0, 1976, 391, 1, 0, 0, 0, 1977, 1975, 1, 0, 0, 0, 1978, 1980, 5, 140, 0, 0, 1979, 1981, 3, 396,
    198, 0, 1980, 1979, 1, 0, 0, 0, 1980, 1981, 1, 0, 0, 0, 1981, 1982, 1, 0, 0, 0, 1982, 1983, 5,
    143, 0, 0, 1983, 393, 1, 0, 0, 0, 1984, 1986, 3, 388, 194, 0, 1985, 1984, 1, 0, 0, 0, 1986, 1987,
    1, 0, 0, 0, 1987, 1985, 1, 0, 0, 0, 1987, 1988, 1, 0, 0, 0, 1988, 395, 1, 0, 0, 0, 1989, 1991, 3,
    398, 199, 0, 1990, 1989, 1, 0, 0, 0, 1991, 1992, 1, 0, 0, 0, 1992, 1990, 1, 0, 0, 0, 1992, 1993,
    1, 0, 0, 0, 1993, 397, 1, 0, 0, 0, 1994, 1996, 5, 140, 0, 0, 1995, 1997, 3, 396, 198, 0, 1996,
    1995, 1, 0, 0, 0, 1996, 1997, 1, 0, 0, 0, 1997, 1998, 1, 0, 0, 0, 1998, 2015, 5, 143, 0, 0, 1999,
    2001, 5, 141, 0, 0, 2000, 2002, 3, 396, 198, 0, 2001, 2000, 1, 0, 0, 0, 2001, 2002, 1, 0, 0, 0,
    2002, 2003, 1, 0, 0, 0, 2003, 2015, 5, 144, 0, 0, 2004, 2006, 5, 139, 0, 0, 2005, 2007, 3, 396,
    198, 0, 2006, 2005, 1, 0, 0, 0, 2006, 2007, 1, 0, 0, 0, 2007, 2008, 1, 0, 0, 0, 2008, 2015, 5,
    142, 0, 0, 2009, 2015, 3, 566, 283, 0, 2010, 2015, 3, 570, 285, 0, 2011, 2015, 3, 610, 305,
    0, 2012, 2015, 3, 596, 298, 0, 2013, 2015, 3, 400, 200, 0, 2014, 1994, 1, 0, 0, 0, 2014, 1999,
    1, 0, 0, 0, 2014, 2004, 1, 0, 0, 0, 2014, 2009, 1, 0, 0, 0, 2014, 2010, 1, 0, 0, 0, 2014, 2011,
    1, 0, 0, 0, 2014, 2012, 1, 0, 0, 0, 2014, 2013, 1, 0, 0, 0, 2015, 399, 1, 0, 0, 0, 2016, 2023, 7,
    15, 0, 0, 2017, 2023, 3, 584, 292, 0, 2018, 2019, 4, 200, 3, 0, 2019, 2023, 5, 154, 0, 0, 2020,
    2021, 4, 200, 4, 0, 2021, 2023, 5, 151, 0, 0, 2022, 2016, 1, 0, 0, 0, 2022, 2017, 1, 0, 0, 0, 2022,
    2018, 1, 0, 0, 0, 2022, 2020, 1, 0, 0, 0, 2023, 401, 1, 0, 0, 0, 2024, 2026, 3, 410, 205, 0, 2025,
    2024, 1, 0, 0, 0, 2025, 2026, 1, 0, 0, 0, 2026, 2027, 1, 0, 0, 0, 2027, 2029, 3, 406, 203, 0, 2028,
    2030, 3, 414, 207, 0, 2029, 2028, 1, 0, 0, 0, 2029, 2030, 1, 0, 0, 0, 2030, 403, 1, 0, 0, 0, 2031,
    2036, 3, 402, 201, 0, 2032, 2033, 5, 145, 0, 0, 2033, 2035, 3, 402, 201, 0, 2034, 2032, 1, 0,
    0, 0, 2035, 2038, 1, 0, 0, 0, 2036, 2034, 1, 0, 0, 0, 2036, 2037, 1, 0, 0, 0, 2037, 405, 1, 0, 0,
    0, 2038, 2036, 1, 0, 0, 0, 2039, 2041, 3, 592, 296, 0, 2040, 2039, 1, 0, 0, 0, 2040, 2041, 1,
    0, 0, 0, 2041, 2042, 1, 0, 0, 0, 2042, 2045, 3, 490, 245, 0, 2043, 2045, 3, 408, 204, 0, 2044,
    2040, 1, 0, 0, 0, 2044, 2043, 1, 0, 0, 0, 2045, 407, 1, 0, 0, 0, 2046, 2047, 5, 154, 0, 0, 2047,
    2048, 3, 566, 283, 0, 2048, 409, 1, 0, 0, 0, 2049, 2051, 5, 81, 0, 0, 2050, 2052, 7, 9, 0, 0, 2051,
    2050, 1, 0, 0, 0, 2051, 2052, 1, 0, 0, 0, 2052, 411, 1, 0, 0, 0, 2053, 2054, 3, 590, 295, 0, 2054,
    2055, 3, 406, 203, 0, 2055, 2067, 1, 0, 0, 0, 2056, 2059, 3, 572, 286, 0, 2057, 2059, 3, 416,
    208, 0, 2058, 2056, 1, 0, 0, 0, 2058, 2057, 1, 0, 0, 0, 2059, 2061, 1, 0, 0, 0, 2060, 2062, 3,
    410, 205, 0, 2061, 2060, 1, 0, 0, 0, 2061, 2062, 1, 0, 0, 0, 2062, 2063, 1, 0, 0, 0, 2063, 2064,
    3, 406, 203, 0, 2064, 2067, 1, 0, 0, 0, 2065, 2067, 3, 418, 209, 0, 2066, 2053, 1, 0, 0, 0, 2066,
    2058, 1, 0, 0, 0, 2066, 2065, 1, 0, 0, 0, 2067, 413, 1, 0, 0, 0, 2068, 2070, 3, 412, 206, 0, 2069,
    2068, 1, 0, 0, 0, 2070, 2071, 1, 0, 0, 0, 2071, 2069, 1, 0, 0, 0, 2071, 2072, 1, 0, 0, 0, 2072,
    415, 1, 0, 0, 0, 2073, 2074, 5, 152, 0, 0, 2074, 2075, 3, 402, 201, 0, 2075, 2076, 5, 146, 0,
    0, 2076, 417, 1, 0, 0, 0, 2077, 2083, 5, 80, 0, 0, 2078, 2080, 5, 1, 0, 0, 2079, 2081, 7, 9, 0,
    0, 2080, 2079, 1, 0, 0, 0, 2080, 2081, 1, 0, 0, 0, 2081, 2083, 1, 0, 0, 0, 2082, 2077, 1, 0, 0,
    0, 2082, 2078, 1, 0, 0, 0, 2083, 2084, 1, 0, 0, 0, 2084, 2085, 3, 522, 261, 0, 2085, 419, 1, 0,
    0, 0, 2086, 2088, 3, 422, 211, 0, 2087, 2089, 3, 150, 75, 0, 2088, 2087, 1, 0, 0, 0, 2088, 2089,
    1, 0, 0, 0, 2089, 2105, 1, 0, 0, 0, 2090, 2105, 3, 548, 274, 0, 2091, 2105, 3, 550, 275, 0, 2092,
    2105, 3, 424, 212, 0, 2093, 2105, 3, 440, 220, 0, 2094, 2105, 3, 442, 221, 0, 2095, 2105, 3,
    444, 222, 0, 2096, 2105, 3, 464, 232, 0, 2097, 2105, 3, 466, 233, 0, 2098, 2105, 3, 468, 234,
    0, 2099, 2105, 3, 462, 231, 0, 2100, 2105, 3, 474, 237, 0, 2101, 2105, 3, 476, 238, 0, 2102,
    2105, 3, 486, 243, 0, 2103, 2105, 3, 488, 244, 0, 2104, 2086, 1, 0, 0, 0, 2104, 2090, 1, 0, 0,
    0, 2104, 2091, 1, 0, 0, 0, 2104, 2092, 1, 0, 0, 0, 2104, 2093, 1, 0, 0, 0, 2104, 2094, 1, 0, 0,
    0, 2104, 2095, 1, 0, 0, 0, 2104, 2096, 1, 0, 0, 0, 2104, 2097, 1, 0, 0, 0, 2104, 2098, 1, 0, 0,
    0, 2104, 2099, 1, 0, 0, 0, 2104, 2100, 1, 0, 0, 0, 2104, 2101, 1, 0, 0, 0, 2104, 2102, 1, 0, 0,
    0, 2104, 2103, 1, 0, 0, 0, 2105, 421, 1, 0, 0, 0, 2106, 2111, 3, 566, 283, 0, 2107, 2108, 5, 140,
    0, 0, 2108, 2109, 3, 518, 259, 0, 2109, 2110, 5, 143, 0, 0, 2110, 2112, 1, 0, 0, 0, 2111, 2107,
    1, 0, 0, 0, 2111, 2112, 1, 0, 0, 0, 2112, 423, 1, 0, 0, 0, 2113, 2125, 3, 610, 305, 0, 2114, 2125,
    3, 426, 213, 0, 2115, 2125, 3, 432, 216, 0, 2116, 2125, 3, 438, 219, 0, 2117, 2125, 5, 123,
    0, 0, 2118, 2125, 5, 124, 0, 0, 2119, 2125, 5, 125, 0, 0, 2120, 2125, 5, 126, 0, 0, 2121, 2125,
    5, 127, 0, 0, 2122, 2125, 5, 128, 0, 0, 2123, 2125, 5, 129, 0, 0, 2124, 2113, 1, 0, 0, 0, 2124,
    2114, 1, 0, 0, 0, 2124, 2115, 1, 0, 0, 0, 2124, 2116, 1, 0, 0, 0, 2124, 2117, 1, 0, 0, 0, 2124,
    2118, 1, 0, 0, 0, 2124, 2119, 1, 0, 0, 0, 2124, 2120, 1, 0, 0, 0, 2124, 2121, 1, 0, 0, 0, 2124,
    2122, 1, 0, 0, 0, 2124, 2123, 1, 0, 0, 0, 2125, 425, 1, 0, 0, 0, 2126, 2128, 5, 141, 0, 0, 2127,
    2129, 3, 428, 214, 0, 2128, 2127, 1, 0, 0, 0, 2128, 2129, 1, 0, 0, 0, 2129, 2130, 1, 0, 0, 0, 2130,
    2131, 5, 144, 0, 0, 2131, 427, 1, 0, 0, 0, 2132, 2137, 3, 430, 215, 0, 2133, 2134, 5, 145, 0,
    0, 2134, 2136, 3, 430, 215, 0, 2135, 2133, 1, 0, 0, 0, 2136, 2139, 1, 0, 0, 0, 2137, 2135, 1,
    0, 0, 0, 2137, 2138, 1, 0, 0, 0, 2138, 2141, 1, 0, 0, 0, 2139, 2137, 1, 0, 0, 0, 2140, 2142, 5,
    145, 0, 0, 2141, 2140, 1, 0, 0, 0, 2141, 2142, 1, 0, 0, 0, 2142, 429, 1, 0, 0, 0, 2143, 2144, 3,
    402, 201, 0, 2144, 431, 1, 0, 0, 0, 2145, 2148, 5, 141, 0, 0, 2146, 2149, 3, 434, 217, 0, 2147,
    2149, 5, 146, 0, 0, 2148, 2146, 1, 0, 0, 0, 2148, 2147, 1, 0, 0, 0, 2149, 2150, 1, 0, 0, 0, 2150,
    2151, 5, 144, 0, 0, 2151, 433, 1, 0, 0, 0, 2152, 2157, 3, 436, 218, 0, 2153, 2154, 5, 145, 0,
    0, 2154, 2156, 3, 436, 218, 0, 2155, 2153, 1, 0, 0, 0, 2156, 2159, 1, 0, 0, 0, 2157, 2155, 1,
    0, 0, 0, 2157, 2158, 1, 0, 0, 0, 2158, 2161, 1, 0, 0, 0, 2159, 2157, 1, 0, 0, 0, 2160, 2162, 5,
    145, 0, 0, 2161, 2160, 1, 0, 0, 0, 2161, 2162, 1, 0, 0, 0, 2162, 435, 1, 0, 0, 0, 2163, 2164, 3,
    402, 201, 0, 2164, 2165, 5, 146, 0, 0, 2165, 2166, 3, 402, 201, 0, 2166, 437, 1, 0, 0, 0, 2167,
    2168, 5, 132, 0, 0, 2168, 2169, 5, 140, 0, 0, 2169, 2170, 5, 85, 0, 0, 2170, 2171, 5, 146, 0,
    0, 2171, 2172, 3, 402, 201, 0, 2172, 2173, 5, 145, 0, 0, 2173, 2174, 5, 87, 0, 0, 2174, 2175,
    5, 146, 0, 0, 2175, 2176, 3, 402, 201, 0, 2176, 2177, 5, 145, 0, 0, 2177, 2178, 5, 86, 0, 0, 2178,
    2179, 5, 146, 0, 0, 2179, 2180, 3, 402, 201, 0, 2180, 2181, 5, 145, 0, 0, 2181, 2182, 5, 2, 0,
    0, 2182, 2183, 5, 146, 0, 0, 2183, 2184, 3, 402, 201, 0, 2184, 2185, 5, 143, 0, 0, 2185, 2201,
    1, 0, 0, 0, 2186, 2187, 5, 133, 0, 0, 2187, 2188, 5, 140, 0, 0, 2188, 2189, 5, 88, 0, 0, 2189,
    2190, 5, 146, 0, 0, 2190, 2191, 3, 402, 201, 0, 2191, 2192, 5, 143, 0, 0, 2192, 2201, 1, 0, 0,
    0, 2193, 2194, 5, 134, 0, 0, 2194, 2195, 5, 140, 0, 0, 2195, 2196, 5, 88, 0, 0, 2196, 2197, 5,
    146, 0, 0, 2197, 2198, 3, 402, 201, 0, 2198, 2199, 5, 143, 0, 0, 2199, 2201, 1, 0, 0, 0, 2200,
    2167, 1, 0, 0, 0, 2200, 2186, 1, 0, 0, 0, 2200, 2193, 1, 0, 0, 0, 2201, 439, 1, 0, 0, 0, 2202, 2215,
    5, 95, 0, 0, 2203, 2204, 5, 95, 0, 0, 2204, 2205, 5, 138, 0, 0, 2205, 2215, 3, 566, 283, 0, 2206,
    2207, 5, 95, 0, 0, 2207, 2208, 5, 141, 0, 0, 2208, 2209, 3, 508, 254, 0, 2209, 2210, 5, 144,
    0, 0, 2210, 2215, 1, 0, 0, 0, 2211, 2212, 5, 95, 0, 0, 2212, 2213, 5, 138, 0, 0, 2213, 2215, 5,
    42, 0, 0, 2214, 2202, 1, 0, 0, 0, 2214, 2203, 1, 0, 0, 0, 2214, 2206, 1, 0, 0, 0, 2214, 2211, 1,
    0, 0, 0, 2215, 441, 1, 0, 0, 0, 2216, 2217, 5, 82, 0, 0, 2217, 2218, 5, 138, 0, 0, 2218, 2228,
    3, 566, 283, 0, 2219, 2220, 5, 82, 0, 0, 2220, 2221, 5, 141, 0, 0, 2221, 2222, 3, 508, 254, 0,
    2222, 2223, 5, 144, 0, 0, 2223, 2228, 1, 0, 0, 0, 2224, 2225, 5, 82, 0, 0, 2225, 2226, 5, 138,
    0, 0, 2226, 2228, 5, 42, 0, 0, 2227, 2216, 1, 0, 0, 0, 2227, 2219, 1, 0, 0, 0, 2227, 2224, 1, 0,
    0, 0, 2228, 443, 1, 0, 0, 0, 2229, 2231, 5, 139, 0, 0, 2230, 2232, 3, 446, 223, 0, 2231, 2230,
    1, 0, 0, 0, 2231, 2232, 1, 0, 0, 0, 2232, 2234, 1, 0, 0, 0, 2233, 2235, 3, 4, 2, 0, 2234, 2233,
    1, 0, 0, 0, 2234, 2235, 1, 0, 0, 0, 2235, 2236, 1, 0, 0, 0, 2236, 2237, 5, 142, 0, 0, 2237, 445,
    1, 0, 0, 0, 2238, 2240, 3, 454, 227, 0, 2239, 2238, 1, 0, 0, 0, 2239, 2240, 1, 0, 0, 0, 2240, 2241,
    1, 0, 0, 0, 2241, 2243, 3, 448, 224, 0, 2242, 2244, 5, 39, 0, 0, 2243, 2242, 1, 0, 0, 0, 2243,
    2244, 1, 0, 0, 0, 2244, 2246, 1, 0, 0, 0, 2245, 2247, 3, 220, 110, 0, 2246, 2245, 1, 0, 0, 0, 2246,
    2247, 1, 0, 0, 0, 2247, 2248, 1, 0, 0, 0, 2248, 2249, 5, 17, 0, 0, 2249, 2254, 1, 0, 0, 0, 2250,
    2251, 3, 454, 227, 0, 2251, 2252, 5, 17, 0, 0, 2252, 2254, 1, 0, 0, 0, 2253, 2239, 1, 0, 0, 0,
    2253, 2250, 1, 0, 0, 0, 2254, 447, 1, 0, 0, 0, 2255, 2257, 5, 140, 0, 0, 2256, 2258, 3, 450, 225,
    0, 2257, 2256, 1, 0, 0, 0, 2257, 2258, 1, 0, 0, 0, 2258, 2259, 1, 0, 0, 0, 2259, 2262, 5, 143,
    0, 0, 2260, 2262, 3, 568, 284, 0, 2261, 2255, 1, 0, 0, 0, 2261, 2260, 1, 0, 0, 0, 2262, 449, 1,
    0, 0, 0, 2263, 2268, 3, 452, 226, 0, 2264, 2265, 5, 145, 0, 0, 2265, 2267, 3, 452, 226, 0, 2266,
    2264, 1, 0, 0, 0, 2267, 2270, 1, 0, 0, 0, 2268, 2266, 1, 0, 0, 0, 2268, 2269, 1, 0, 0, 0, 2269,
    451, 1, 0, 0, 0, 2270, 2268, 1, 0, 0, 0, 2271, 2276, 3, 566, 283, 0, 2272, 2274, 3, 524, 262,
    0, 2273, 2275, 3, 586, 293, 0, 2274, 2273, 1, 0, 0, 0, 2274, 2275, 1, 0, 0, 0, 2275, 2277, 1,
    0, 0, 0, 2276, 2272, 1, 0, 0, 0, 2276, 2277, 1, 0, 0, 0, 2277, 453, 1, 0, 0, 0, 2278, 2279, 5, 141,
    0, 0, 2279, 2280, 3, 456, 228, 0, 2280, 2281, 5, 144, 0, 0, 2281, 455, 1, 0, 0, 0, 2282, 2287,
    3, 458, 229, 0, 2283, 2284, 5, 145, 0, 0, 2284, 2286, 3, 458, 229, 0, 2285, 2283, 1, 0, 0, 0,
    2286, 2289, 1, 0, 0, 0, 2287, 2285, 1, 0, 0, 0, 2287, 2288, 1, 0, 0, 0, 2288, 457, 1, 0, 0, 0, 2289,
    2287, 1, 0, 0, 0, 2290, 2292, 3, 460, 230, 0, 2291, 2290, 1, 0, 0, 0, 2291, 2292, 1, 0, 0, 0, 2292,
    2300, 1, 0, 0, 0, 2293, 2295, 3, 566, 283, 0, 2294, 2296, 5, 156, 0, 0, 2295, 2294, 1, 0, 0, 0,
    2295, 2296, 1, 0, 0, 0, 2296, 2297, 1, 0, 0, 0, 2297, 2298, 3, 402, 201, 0, 2298, 2301, 1, 0,
    0, 0, 2299, 2301, 3, 440, 220, 0, 2300, 2293, 1, 0, 0, 0, 2300, 2299, 1, 0, 0, 0, 2301, 459, 1,
    0, 0, 0, 2302, 2310, 5, 73, 0, 0, 2303, 2307, 5, 74, 0, 0, 2304, 2305, 5, 140, 0, 0, 2305, 2306,
    7, 12, 0, 0, 2306, 2308, 5, 143, 0, 0, 2307, 2304, 1, 0, 0, 0, 2307, 2308, 1, 0, 0, 0, 2308, 2310,
    1, 0, 0, 0, 2309, 2302, 1, 0, 0, 0, 2309, 2303, 1, 0, 0, 0, 2310, 461, 1, 0, 0, 0, 2311, 2314, 5,
    138, 0, 0, 2312, 2315, 3, 566, 283, 0, 2313, 2315, 3, 570, 285, 0, 2314, 2312, 1, 0, 0, 0, 2314,
    2313, 1, 0, 0, 0, 2315, 2318, 1, 0, 0, 0, 2316, 2317, 5, 138, 0, 0, 2317, 2319, 3, 490, 245, 0,
    2318, 2316, 1, 0, 0, 0, 2318, 2319, 1, 0, 0, 0, 2319, 463, 1, 0, 0, 0, 2320, 2321, 5, 140, 0, 0,
    2321, 2322, 3, 596, 298, 0, 2322, 2323, 5, 143, 0, 0, 2323, 465, 1, 0, 0, 0, 2324, 2325, 5, 140,
    0, 0, 2325, 2326, 3, 402, 201, 0, 2326, 2327, 5, 143, 0, 0, 2327, 467, 1, 0, 0, 0, 2328, 2329,
    5, 140, 0, 0, 2329, 2337, 5, 143, 0, 0, 2330, 2331, 5, 140, 0, 0, 2331, 2332, 3, 472, 236, 0,
    2332, 2333, 5, 145, 0, 0, 2333, 2334, 3, 470, 235, 0, 2334, 2335, 5, 143, 0, 0, 2335, 2337,
    1, 0, 0, 0, 2336, 2328, 1, 0, 0, 0, 2336, 2330, 1, 0, 0, 0, 2337, 469, 1, 0, 0, 0, 2338, 2343, 3,
    472, 236, 0, 2339, 2340, 5, 145, 0, 0, 2340, 2342, 3, 472, 236, 0, 2341, 2339, 1, 0, 0, 0, 2342,
    2345, 1, 0, 0, 0, 2343, 2341, 1, 0, 0, 0, 2343, 2344, 1, 0, 0, 0, 2344, 471, 1, 0, 0, 0, 2345, 2343,
    1, 0, 0, 0, 2346, 2347, 3, 566, 283, 0, 2347, 2348, 5, 146, 0, 0, 2348, 2350, 1, 0, 0, 0, 2349,
    2346, 1, 0, 0, 0, 2349, 2350, 1, 0, 0, 0, 2350, 2351, 1, 0, 0, 0, 2351, 2352, 3, 402, 201, 0, 2352,
    473, 1, 0, 0, 0, 2353, 2354, 5, 150, 0, 0, 2354, 475, 1, 0, 0, 0, 2355, 2357, 5, 167, 0, 0, 2356,
    2358, 3, 522, 261, 0, 2357, 2356, 1, 0, 0, 0, 2357, 2358, 1, 0, 0, 0, 2358, 2359, 1, 0, 0, 0, 2359,
    2360, 5, 138, 0, 0, 2360, 2361, 3, 478, 239, 0, 2361, 477, 1, 0, 0, 0, 2362, 2367, 3, 480, 240,
    0, 2363, 2364, 5, 138, 0, 0, 2364, 2366, 3, 480, 240, 0, 2365, 2363, 1, 0, 0, 0, 2366, 2369,
    1, 0, 0, 0, 2367, 2365, 1, 0, 0, 0, 2367, 2368, 1, 0, 0, 0, 2368, 479, 1, 0, 0, 0, 2369, 2367, 1,
    0, 0, 0, 2370, 2372, 3, 566, 283, 0, 2371, 2373, 3, 482, 241, 0, 2372, 2371, 1, 0, 0, 0, 2372,
    2373, 1, 0, 0, 0, 2373, 2376, 1, 0, 0, 0, 2374, 2376, 3, 482, 241, 0, 2375, 2370, 1, 0, 0, 0, 2375,
    2374, 1, 0, 0, 0, 2376, 481, 1, 0, 0, 0, 2377, 2379, 3, 484, 242, 0, 2378, 2377, 1, 0, 0, 0, 2379,
    2380, 1, 0, 0, 0, 2380, 2378, 1, 0, 0, 0, 2380, 2381, 1, 0, 0, 0, 2381, 483, 1, 0, 0, 0, 2382, 2390,
    5, 152, 0, 0, 2383, 2390, 5, 151, 0, 0, 2384, 2390, 5, 95, 0, 0, 2385, 2386, 5, 141, 0, 0, 2386,
    2387, 3, 508, 254, 0, 2387, 2388, 5, 144, 0, 0, 2388, 2390, 1, 0, 0, 0, 2389, 2382, 1, 0, 0, 0,
    2389, 2383, 1, 0, 0, 0, 2389, 2384, 1, 0, 0, 0, 2389, 2385, 1, 0, 0, 0, 2390, 485, 1, 0, 0, 0, 2391,
    2392, 5, 130, 0, 0, 2392, 2395, 5, 140, 0, 0, 2393, 2394, 7, 16, 0, 0, 2394, 2396, 5, 146, 0,
    0, 2395, 2393, 1, 0, 0, 0, 2395, 2396, 1, 0, 0, 0, 2396, 2397, 1, 0, 0, 0, 2397, 2398, 3, 402,
    201, 0, 2398, 2399, 5, 143, 0, 0, 2399, 487, 1, 0, 0, 0, 2400, 2401, 5, 131, 0, 0, 2401, 2402,
    5, 140, 0, 0, 2402, 2403, 3, 402, 201, 0, 2403, 2404, 5, 143, 0, 0, 2404, 489, 1, 0, 0, 0, 2405,
    2415, 3, 420, 210, 0, 2406, 2414, 3, 492, 246, 0, 2407, 2414, 3, 494, 247, 0, 2408, 2414, 3,
    496, 248, 0, 2409, 2414, 3, 498, 249, 0, 2410, 2414, 3, 500, 250, 0, 2411, 2414, 3, 502, 251,
    0, 2412, 2414, 3, 504, 252, 0, 2413, 2406, 1, 0, 0, 0, 2413, 2407, 1, 0, 0, 0, 2413, 2408, 1,
    0, 0, 0, 2413, 2409, 1, 0, 0, 0, 2413, 2410, 1, 0, 0, 0, 2413, 2411, 1, 0, 0, 0, 2413, 2412, 1,
    0, 0, 0, 2414, 2417, 1, 0, 0, 0, 2415, 2413, 1, 0, 0, 0, 2415, 2416, 1, 0, 0, 0, 2416, 2421, 1,
    0, 0, 0, 2417, 2415, 1, 0, 0, 0, 2418, 2420, 3, 594, 297, 0, 2419, 2418, 1, 0, 0, 0, 2420, 2423,
    1, 0, 0, 0, 2421, 2422, 1, 0, 0, 0, 2421, 2419, 1, 0, 0, 0, 2422, 491, 1, 0, 0, 0, 2423, 2421, 1,
    0, 0, 0, 2424, 2426, 3, 506, 253, 0, 2425, 2424, 1, 0, 0, 0, 2425, 2426, 1, 0, 0, 0, 2426, 2427,
    1, 0, 0, 0, 2427, 2430, 3, 512, 256, 0, 2428, 2430, 3, 506, 253, 0, 2429, 2425, 1, 0, 0, 0, 2429,
    2428, 1, 0, 0, 0, 2430, 493, 1, 0, 0, 0, 2431, 2432, 5, 138, 0, 0, 2432, 2437, 5, 42, 0, 0, 2433,
    2434, 5, 140, 0, 0, 2434, 2435, 3, 518, 259, 0, 2435, 2436, 5, 143, 0, 0, 2436, 2438, 1, 0, 0,
    0, 2437, 2433, 1, 0, 0, 0, 2437, 2438, 1, 0, 0, 0, 2438, 495, 1, 0, 0, 0, 2439, 2449, 5, 138, 0,
    0, 2440, 2450, 5, 172, 0, 0, 2441, 2447, 3, 566, 283, 0, 2442, 2448, 3, 150, 75, 0, 2443, 2444,
    5, 140, 0, 0, 2444, 2445, 3, 518, 259, 0, 2445, 2446, 5, 143, 0, 0, 2446, 2448, 1, 0, 0, 0, 2447,
    2442, 1, 0, 0, 0, 2447, 2443, 1, 0, 0, 0, 2447, 2448, 1, 0, 0, 0, 2448, 2450, 1, 0, 0, 0, 2449,
    2440, 1, 0, 0, 0, 2449, 2441, 1, 0, 0, 0, 2450, 497, 1, 0, 0, 0, 2451, 2452, 5, 138, 0, 0, 2452,
    2453, 5, 95, 0, 0, 2453, 499, 1, 0, 0, 0, 2454, 2455, 5, 141, 0, 0, 2455, 2456, 3, 508, 254, 0,
    2456, 2457, 5, 144, 0, 0, 2457, 501, 1, 0, 0, 0, 2458, 2459, 4, 251, 5, 0, 2459, 2460, 5, 151,
    0, 0, 2460, 503, 1, 0, 0, 0, 2461, 2462, 4, 252, 6, 0, 2462, 2463, 5, 152, 0, 0, 2463, 505, 1,
    0, 0, 0, 2464, 2466, 5, 140, 0, 0, 2465, 2467, 3, 508, 254, 0, 2466, 2465, 1, 0, 0, 0, 2466, 2467,
    1, 0, 0, 0, 2467, 2468, 1, 0, 0, 0, 2468, 2469, 5, 143, 0, 0, 2469, 507, 1, 0, 0, 0, 2470, 2475,
    3, 510, 255, 0, 2471, 2472, 5, 145, 0, 0, 2472, 2474, 3, 510, 255, 0, 2473, 2471, 1, 0, 0, 0,
    2474, 2477, 1, 0, 0, 0, 2475, 2473, 1, 0, 0, 0, 2475, 2476, 1, 0, 0, 0, 2476, 509, 1, 0, 0, 0, 2477,
    2475, 1, 0, 0, 0, 2478, 2480, 3, 520, 260, 0, 2479, 2478, 1, 0, 0, 0, 2479, 2480, 1, 0, 0, 0, 2480,
    2484, 1, 0, 0, 0, 2481, 2485, 3, 566, 283, 0, 2482, 2485, 3, 402, 201, 0, 2483, 2485, 3, 596,
    298, 0, 2484, 2481, 1, 0, 0, 0, 2484, 2482, 1, 0, 0, 0, 2484, 2483, 1, 0, 0, 0, 2485, 511, 1, 0,
    0, 0, 2486, 2488, 3, 444, 222, 0, 2487, 2489, 3, 514, 257, 0, 2488, 2487, 1, 0, 0, 0, 2488, 2489,
    1, 0, 0, 0, 2489, 513, 1, 0, 0, 0, 2490, 2492, 3, 516, 258, 0, 2491, 2490, 1, 0, 0, 0, 2492, 2493,
    1, 0, 0, 0, 2493, 2491, 1, 0, 0, 0, 2493, 2494, 1, 0, 0, 0, 2494, 515, 1, 0, 0, 0, 2495, 2496, 3,
    566, 283, 0, 2496, 2497, 5, 146, 0, 0, 2497, 2498, 3, 444, 222, 0, 2498, 517, 1, 0, 0, 0, 2499,
    2501, 3, 520, 260, 0, 2500, 2499, 1, 0, 0, 0, 2501, 2502, 1, 0, 0, 0, 2502, 2500, 1, 0, 0, 0, 2502,
    2503, 1, 0, 0, 0, 2503, 519, 1, 0, 0, 0, 2504, 2505, 3, 566, 283, 0, 2505, 2506, 5, 146, 0, 0,
    2506, 521, 1, 0, 0, 0, 2507, 2508, 6, 261, -1, 0, 2508, 2522, 3, 538, 269, 0, 2509, 2522, 3,
    548, 274, 0, 2510, 2522, 3, 550, 275, 0, 2511, 2522, 3, 552, 276, 0, 2512, 2522, 3, 526, 263,
    0, 2513, 2522, 3, 530, 265, 0, 2514, 2522, 3, 556, 278, 0, 2515, 2522, 3, 558, 279, 0, 2516,
    2522, 3, 560, 280, 0, 2517, 2518, 5, 140, 0, 0, 2518, 2519, 3, 522, 261, 0, 2519, 2520, 5, 143,
    0, 0, 2520, 2522, 1, 0, 0, 0, 2521, 2507, 1, 0, 0, 0, 2521, 2509, 1, 0, 0, 0, 2521, 2510, 1, 0,
    0, 0, 2521, 2511, 1, 0, 0, 0, 2521, 2512, 1, 0, 0, 0, 2521, 2513, 1, 0, 0, 0, 2521, 2514, 1, 0,
    0, 0, 2521, 2515, 1, 0, 0, 0, 2521, 2516, 1, 0, 0, 0, 2521, 2517, 1, 0, 0, 0, 2522, 2536, 1, 0,
    0, 0, 2523, 2532, 10, 4, 0, 0, 2524, 2525, 4, 261, 8, 0, 2525, 2533, 5, 152, 0, 0, 2526, 2527,
    4, 261, 9, 0, 2527, 2533, 5, 151, 0, 0, 2528, 2529, 5, 138, 0, 0, 2529, 2533, 5, 93, 0, 0, 2530,
    2531, 5, 138, 0, 0, 2531, 2533, 5, 29, 0, 0, 2532, 2524, 1, 0, 0, 0, 2532, 2526, 1, 0, 0, 0, 2532,
    2528, 1, 0, 0, 0, 2532, 2530, 1, 0, 0, 0, 2533, 2535, 1, 0, 0, 0, 2534, 2523, 1, 0, 0, 0, 2535,
    2538, 1, 0, 0, 0, 2536, 2534, 1, 0, 0, 0, 2536, 2537, 1, 0, 0, 0, 2537, 523, 1, 0, 0, 0, 2538, 2536,
    1, 0, 0, 0, 2539, 2541, 5, 146, 0, 0, 2540, 2542, 3, 394, 197, 0, 2541, 2540, 1, 0, 0, 0, 2541,
    2542, 1, 0, 0, 0, 2542, 2544, 1, 0, 0, 0, 2543, 2545, 5, 91, 0, 0, 2544, 2543, 1, 0, 0, 0, 2544,
    2545, 1, 0, 0, 0, 2545, 2546, 1, 0, 0, 0, 2546, 2547, 3, 522, 261, 0, 2547, 525, 1, 0, 0, 0, 2548,
    2550, 3, 528, 264, 0, 2549, 2551, 3, 150, 75, 0, 2550, 2549, 1, 0, 0, 0, 2550, 2551, 1, 0, 0,
    0, 2551, 2554, 1, 0, 0, 0, 2552, 2553, 5, 138, 0, 0, 2553, 2555, 3, 526, 263, 0, 2554, 2552,
    1, 0, 0, 0, 2554, 2555, 1, 0, 0, 0, 2555, 527, 1, 0, 0, 0, 2556, 2557, 3, 566, 283, 0, 2557, 529,
    1, 0, 0, 0, 2558, 2560, 5, 140, 0, 0, 2559, 2561, 3, 532, 266, 0, 2560, 2559, 1, 0, 0, 0, 2560,
    2561, 1, 0, 0, 0, 2561, 2562, 1, 0, 0, 0, 2562, 2563, 5, 143, 0, 0, 2563, 531, 1, 0, 0, 0, 2564,
    2569, 3, 534, 267, 0, 2565, 2566, 5, 145, 0, 0, 2566, 2568, 3, 534, 267, 0, 2567, 2565, 1, 0,
    0, 0, 2568, 2571, 1, 0, 0, 0, 2569, 2567, 1, 0, 0, 0, 2569, 2570, 1, 0, 0, 0, 2570, 533, 1, 0, 0,
    0, 2571, 2569, 1, 0, 0, 0, 2572, 2573, 3, 536, 268, 0, 2573, 2574, 3, 524, 262, 0, 2574, 2577,
    1, 0, 0, 0, 2575, 2577, 3, 522, 261, 0, 2576, 2572, 1, 0, 0, 0, 2576, 2575, 1, 0, 0, 0, 2577, 2580,
    1, 0, 0, 0, 2578, 2579, 5, 156, 0, 0, 2579, 2581, 3, 402, 201, 0, 2580, 2578, 1, 0, 0, 0, 2580,
    2581, 1, 0, 0, 0, 2581, 535, 1, 0, 0, 0, 2582, 2584, 3, 566, 283, 0, 2583, 2582, 1, 0, 0, 0, 2584,
    2585, 1, 0, 0, 0, 2585, 2583, 1, 0, 0, 0, 2585, 2586, 1, 0, 0, 0, 2586, 537, 1, 0, 0, 0, 2587, 2589,
    3, 394, 197, 0, 2588, 2587, 1, 0, 0, 0, 2588, 2589, 1, 0, 0, 0, 2589, 2590, 1, 0, 0, 0, 2590, 2592,
    3, 540, 270, 0, 2591, 2593, 5, 39, 0, 0, 2592, 2591, 1, 0, 0, 0, 2592, 2593, 1, 0, 0, 0, 2593,
    2594, 1, 0, 0, 0, 2594, 2595, 3, 584, 292, 0, 2595, 2596, 3, 522, 261, 0, 2596, 539, 1, 0, 0,
    0, 2597, 2602, 5, 140, 0, 0, 2598, 2600, 3, 542, 271, 0, 2599, 2601, 3, 586, 293, 0, 2600, 2599,
    1, 0, 0, 0, 2600, 2601, 1, 0, 0, 0, 2601, 2603, 1, 0, 0, 0, 2602, 2598, 1, 0, 0, 0, 2602, 2603,
    1, 0, 0, 0, 2603, 2604, 1, 0, 0, 0, 2604, 2605, 5, 143, 0, 0, 2605, 541, 1, 0, 0, 0, 2606, 2611,
    3, 544, 272, 0, 2607, 2608, 5, 145, 0, 0, 2608, 2610, 3, 544, 272, 0, 2609, 2607, 1, 0, 0, 0,
    2610, 2613, 1, 0, 0, 0, 2611, 2609, 1, 0, 0, 0, 2611, 2612, 1, 0, 0, 0, 2612, 543, 1, 0, 0, 0, 2613,
    2611, 1, 0, 0, 0, 2614, 2616, 3, 394, 197, 0, 2615, 2614, 1, 0, 0, 0, 2615, 2616, 1, 0, 0, 0, 2616,
    2618, 1, 0, 0, 0, 2617, 2619, 5, 91, 0, 0, 2618, 2617, 1, 0, 0, 0, 2618, 2619, 1, 0, 0, 0, 2619,
    2620, 1, 0, 0, 0, 2620, 2625, 3, 522, 261, 0, 2621, 2622, 3, 546, 273, 0, 2622, 2623, 3, 524,
    262, 0, 2623, 2625, 1, 0, 0, 0, 2624, 2615, 1, 0, 0, 0, 2624, 2621, 1, 0, 0, 0, 2625, 545, 1, 0,
    0, 0, 2626, 2628, 3, 566, 283, 0, 2627, 2626, 1, 0, 0, 0, 2628, 2629, 1, 0, 0, 0, 2629, 2627,
    1, 0, 0, 0, 2629, 2630, 1, 0, 0, 0, 2630, 547, 1, 0, 0, 0, 2631, 2632, 5, 141, 0, 0, 2632, 2633,
    3, 522, 261, 0, 2633, 2634, 5, 144, 0, 0, 2634, 549, 1, 0, 0, 0, 2635, 2636, 5, 141, 0, 0, 2636,
    2637, 3, 522, 261, 0, 2637, 2638, 5, 146, 0, 0, 2638, 2639, 3, 522, 261, 0, 2639, 2640, 5, 144,
    0, 0, 2640, 551, 1, 0, 0, 0, 2641, 2646, 3, 526, 263, 0, 2642, 2643, 5, 154, 0, 0, 2643, 2645,
    3, 526, 263, 0, 2644, 2642, 1, 0, 0, 0, 2645, 2648, 1, 0, 0, 0, 2646, 2644, 1, 0, 0, 0, 2646, 2647,
    1, 0, 0, 0, 2647, 2650, 1, 0, 0, 0, 2648, 2646, 1, 0, 0, 0, 2649, 2651, 3, 554, 277, 0, 2650, 2649,
    1, 0, 0, 0, 2650, 2651, 1, 0, 0, 0, 2651, 553, 1, 0, 0, 0, 2652, 2653, 4, 277, 10, 0, 2653, 2654,
    5, 154, 0, 0, 2654, 555, 1, 0, 0, 0, 2655, 2656, 5, 92, 0, 0, 2656, 2657, 3, 522, 261, 0, 2657,
    557, 1, 0, 0, 0, 2658, 2659, 5, 83, 0, 0, 2659, 559, 1, 0, 0, 0, 2660, 2661, 5, 96, 0, 0, 2661,
    561, 1, 0, 0, 0, 2662, 2663, 5, 146, 0, 0, 2663, 2664, 3, 564, 282, 0, 2664, 563, 1, 0, 0, 0, 2665,
    2670, 3, 526, 263, 0, 2666, 2667, 5, 145, 0, 0, 2667, 2669, 3, 526, 263, 0, 2668, 2666, 1, 0,
    0, 0, 2669, 2672, 1, 0, 0, 0, 2670, 2668, 1, 0, 0, 0, 2670, 2671, 1, 0, 0, 0, 2671, 565, 1, 0, 0,
    0, 2672, 2670, 1, 0, 0, 0, 2673, 2683, 7, 17, 0, 0, 2674, 2683, 5, 137, 0, 0, 2675, 2679, 5, 165,
    0, 0, 2676, 2680, 3, 570, 285, 0, 2677, 2680, 5, 137, 0, 0, 2678, 2680, 5, 166, 0, 0, 2679, 2676,
    1, 0, 0, 0, 2679, 2677, 1, 0, 0, 0, 2679, 2678, 1, 0, 0, 0, 2680, 2681, 1, 0, 0, 0, 2681, 2683,
    5, 165, 0, 0, 2682, 2673, 1, 0, 0, 0, 2682, 2674, 1, 0, 0, 0, 2682, 2675, 1, 0, 0, 0, 2683, 567,
    1, 0, 0, 0, 2684, 2689, 3, 566, 283, 0, 2685, 2686, 5, 145, 0, 0, 2686, 2688, 3, 566, 283, 0,
    2687, 2685, 1, 0, 0, 0, 2688, 2691, 1, 0, 0, 0, 2689, 2687, 1, 0, 0, 0, 2689, 2690, 1, 0, 0, 0,
    2690, 569, 1, 0, 0, 0, 2691, 2689, 1, 0, 0, 0, 2692, 2693, 7, 18, 0, 0, 2693, 571, 1, 0, 0, 0, 2694,
    2695, 4, 286, 11, 0, 2695, 2696, 5, 156, 0, 0, 2696, 573, 1, 0, 0, 0, 2697, 2698, 4, 287, 12,
    0, 2698, 2699, 5, 155, 0, 0, 2699, 575, 1, 0, 0, 0, 2700, 2701, 4, 288, 13, 0, 2701, 2702, 5,
    154, 0, 0, 2702, 2703, 5, 154, 0, 0, 2703, 577, 1, 0, 0, 0, 2704, 2705, 4, 289, 14, 0, 2705, 2706,
    5, 157, 0, 0, 2706, 2707, 5, 157, 0, 0, 2707, 579, 1, 0, 0, 0, 2708, 2709, 4, 290, 15, 0, 2709,
    2710, 5, 149, 0, 0, 2710, 2711, 5, 156, 0, 0, 2711, 581, 1, 0, 0, 0, 2712, 2713, 4, 291, 16, 0,
    2713, 2714, 5, 148, 0, 0, 2714, 583, 1, 0, 0, 0, 2715, 2716, 4, 292, 17, 0, 2716, 2717, 5, 155,
    0, 0, 2717, 2718, 5, 149, 0, 0, 2718, 585, 1, 0, 0, 0, 2719, 2720, 4, 293, 18, 0, 2720, 2721,
    5, 138, 0, 0, 2721, 2722, 5, 138, 0, 0, 2722, 2723, 5, 138, 0, 0, 2723, 587, 1, 0, 0, 0, 2724,
    2725, 4, 294, 19, 0, 2725, 2726, 5, 156, 0, 0, 2726, 2727, 5, 156, 0, 0, 2727, 589, 1, 0, 0, 0,
    2728, 2729, 4, 295, 20, 0, 2729, 2730, 3, 596, 298, 0, 2730, 591, 1, 0, 0, 0, 2731, 2732, 4,
    296, 21, 0, 2732, 2733, 3, 596, 298, 0, 2733, 593, 1, 0, 0, 0, 2734, 2735, 4, 297, 22, 0, 2735,
    2736, 3, 596, 298, 0, 2736, 595, 1, 0, 0, 0, 2737, 2739, 3, 598, 299, 0, 2738, 2740, 3, 602,
    301, 0, 2739, 2738, 1, 0, 0, 0, 2739, 2740, 1, 0, 0, 0, 2740, 2745, 1, 0, 0, 0, 2741, 2742, 3,
    604, 302, 0, 2742, 2743, 3, 608, 304, 0, 2743, 2745, 1, 0, 0, 0, 2744, 2737, 1, 0, 0, 0, 2744,
    2741, 1, 0, 0, 0, 2745, 597, 1, 0, 0, 0, 2746, 2749, 7, 19, 0, 0, 2747, 2749, 5, 168, 0, 0, 2748,
    2746, 1, 0, 0, 0, 2748, 2747, 1, 0, 0, 0, 2749, 599, 1, 0, 0, 0, 2750, 2753, 3, 598, 299, 0, 2751,
    2753, 5, 169, 0, 0, 2752, 2750, 1, 0, 0, 0, 2752, 2751, 1, 0, 0, 0, 2753, 601, 1, 0, 0, 0, 2754,
    2755, 4, 301, 23, 0, 2755, 2757, 3, 600, 300, 0, 2756, 2754, 1, 0, 0, 0, 2757, 2758, 1, 0, 0,
    0, 2758, 2756, 1, 0, 0, 0, 2758, 2759, 1, 0, 0, 0, 2759, 603, 1, 0, 0, 0, 2760, 2761, 5, 138, 0,
    0, 2761, 605, 1, 0, 0, 0, 2762, 2765, 5, 138, 0, 0, 2763, 2765, 3, 600, 300, 0, 2764, 2762, 1,
    0, 0, 0, 2764, 2763, 1, 0, 0, 0, 2765, 607, 1, 0, 0, 0, 2766, 2767, 4, 304, 24, 0, 2767, 2769,
    3, 606, 303, 0, 2768, 2766, 1, 0, 0, 0, 2769, 2770, 1, 0, 0, 0, 2770, 2768, 1, 0, 0, 0, 2770, 2771,
    1, 0, 0, 0, 2771, 609, 1, 0, 0, 0, 2772, 2777, 3, 612, 306, 0, 2773, 2777, 3, 620, 310, 0, 2774,
    2777, 3, 614, 307, 0, 2775, 2777, 3, 616, 308, 0, 2776, 2772, 1, 0, 0, 0, 2776, 2773, 1, 0, 0,
    0, 2776, 2774, 1, 0, 0, 0, 2776, 2775, 1, 0, 0, 0, 2777, 611, 1, 0, 0, 0, 2778, 2780, 3, 574, 287,
    0, 2779, 2778, 1, 0, 0, 0, 2779, 2780, 1, 0, 0, 0, 2780, 2781, 1, 0, 0, 0, 2781, 2787, 3, 618,
    309, 0, 2782, 2784, 3, 574, 287, 0, 2783, 2782, 1, 0, 0, 0, 2783, 2784, 1, 0, 0, 0, 2784, 2785,
    1, 0, 0, 0, 2785, 2787, 5, 175, 0, 0, 2786, 2779, 1, 0, 0, 0, 2786, 2783, 1, 0, 0, 0, 2787, 613,
    1, 0, 0, 0, 2788, 2789, 7, 20, 0, 0, 2789, 615, 1, 0, 0, 0, 2790, 2791, 5, 90, 0, 0, 2791, 617,
    1, 0, 0, 0, 2792, 2793, 7, 21, 0, 0, 2793, 619, 1, 0, 0, 0, 2794, 2798, 3, 622, 311, 0, 2795, 2798,
    3, 626, 313, 0, 2796, 2798, 3, 624, 312, 0, 2797, 2794, 1, 0, 0, 0, 2797, 2795, 1, 0, 0, 0, 2797,
    2796, 1, 0, 0, 0, 2798, 621, 1, 0, 0, 0, 2799, 2801, 5, 180, 0, 0, 2800, 2802, 5, 193, 0, 0, 2801,
    2800, 1, 0, 0, 0, 2802, 2803, 1, 0, 0, 0, 2803, 2801, 1, 0, 0, 0, 2803, 2804, 1, 0, 0, 0, 2804,
    2805, 1, 0, 0, 0, 2805, 2814, 5, 192, 0, 0, 2806, 2808, 5, 181, 0, 0, 2807, 2809, 5, 191, 0, 0,
    2808, 2807, 1, 0, 0, 0, 2809, 2810, 1, 0, 0, 0, 2810, 2808, 1, 0, 0, 0, 2810, 2811, 1, 0, 0, 0,
    2811, 2812, 1, 0, 0, 0, 2812, 2814, 5, 190, 0, 0, 2813, 2799, 1, 0, 0, 0, 2813, 2806, 1, 0, 0,
    0, 2814, 623, 1, 0, 0, 0, 2815, 2819, 5, 183, 0, 0, 2816, 2818, 5, 186, 0, 0, 2817, 2816, 1, 0,
    0, 0, 2818, 2821, 1, 0, 0, 0, 2819, 2817, 1, 0, 0, 0, 2819, 2820, 1, 0, 0, 0, 2820, 2822, 1, 0,
    0, 0, 2821, 2819, 1, 0, 0, 0, 2822, 2832, 5, 185, 0, 0, 2823, 2827, 5, 182, 0, 0, 2824, 2826,
    5, 189, 0, 0, 2825, 2824, 1, 0, 0, 0, 2826, 2829, 1, 0, 0, 0, 2827, 2825, 1, 0, 0, 0, 2827, 2828,
    1, 0, 0, 0, 2828, 2830, 1, 0, 0, 0, 2829, 2827, 1, 0, 0, 0, 2830, 2832, 5, 188, 0, 0, 2831, 2815,
    1, 0, 0, 0, 2831, 2823, 1, 0, 0, 0, 2832, 625, 1, 0, 0, 0, 2833, 2847, 5, 183, 0, 0, 2834, 2846,
    5, 186, 0, 0, 2835, 2841, 5, 184, 0, 0, 2836, 2842, 3, 402, 201, 0, 2837, 2838, 3, 472, 236,
    0, 2838, 2839, 5, 145, 0, 0, 2839, 2840, 3, 470, 235, 0, 2840, 2842, 1, 0, 0, 0, 2841, 2836,
    1, 0, 0, 0, 2841, 2837, 1, 0, 0, 0, 2842, 2843, 1, 0, 0, 0, 2843, 2844, 5, 143, 0, 0, 2844, 2846,
    1, 0, 0, 0, 2845, 2834, 1, 0, 0, 0, 2845, 2835, 1, 0, 0, 0, 2846, 2849, 1, 0, 0, 0, 2847, 2845,
    1, 0, 0, 0, 2847, 2848, 1, 0, 0, 0, 2848, 2850, 1, 0, 0, 0, 2849, 2847, 1, 0, 0, 0, 2850, 2870,
    5, 185, 0, 0, 2851, 2865, 5, 182, 0, 0, 2852, 2864, 5, 189, 0, 0, 2853, 2859, 5, 187, 0, 0, 2854,
    2860, 3, 402, 201, 0, 2855, 2856, 3, 472, 236, 0, 2856, 2857, 5, 145, 0, 0, 2857, 2858, 3, 470,
    235, 0, 2858, 2860, 1, 0, 0, 0, 2859, 2854, 1, 0, 0, 0, 2859, 2855, 1, 0, 0, 0, 2860, 2861, 1,
    0, 0, 0, 2861, 2862, 5, 143, 0, 0, 2862, 2864, 1, 0, 0, 0, 2863, 2852, 1, 0, 0, 0, 2863, 2853,
    1, 0, 0, 0, 2864, 2867, 1, 0, 0, 0, 2865, 2863, 1, 0, 0, 0, 2865, 2866, 1, 0, 0, 0, 2866, 2868,
    1, 0, 0, 0, 2867, 2865, 1, 0, 0, 0, 2868, 2870, 5, 188, 0, 0, 2869, 2833, 1, 0, 0, 0, 2869, 2851,
    1, 0, 0, 0, 2870, 627, 1, 0, 0, 0, 357, 629, 641, 644, 647, 655, 660, 664, 670, 683, 690, 708,
    714, 720, 731, 737, 741, 746, 749, 757, 762, 766, 770, 782, 785, 792, 796, 801, 805, 812,
    824, 828, 832, 838, 849, 854, 858, 869, 874, 879, 883, 886, 893, 898, 903, 907, 919, 924,
    930, 947, 962, 966, 971, 982, 997, 1022, 1029, 1038, 1040, 1051, 1058, 1060, 1070, 1075,
    1081, 1087, 1098, 1118, 1121, 1126, 1129, 1133, 1138, 1142, 1153, 1158, 1161, 1164, 1174,
    1179, 1193, 1196, 1198, 1201, 1204, 1207, 1216, 1221, 1226, 1229, 1232, 1236, 1239, 1242,
    1246, 1249, 1258, 1263, 1268, 1271, 1276, 1279, 1286, 1290, 1292, 1297, 1301, 1306, 1310,
    1315, 1318, 1323, 1335, 1339, 1342, 1345, 1348, 1354, 1358, 1361, 1364, 1368, 1376, 1385,
    1389, 1392, 1397, 1400, 1410, 1413, 1417, 1420, 1425, 1428, 1431, 1435, 1442, 1447, 1450,
    1453, 1463, 1473, 1475, 1484, 1488, 1497, 1502, 1505, 1515, 1520, 1528, 1531, 1534, 1539,
    1542, 1545, 1558, 1563, 1566, 1569, 1572, 1576, 1578, 1583, 1586, 1589, 1602, 1607, 1610,
    1613, 1620, 1623, 1636, 1641, 1649, 1659, 1663, 1667, 1671, 1674, 1677, 1682, 1687, 1690,
    1695, 1698, 1701, 1705, 1709, 1712, 1717, 1720, 1724, 1729, 1735, 1738, 1743, 1746, 1757,
    1762, 1767, 1772, 1775, 1778, 1782, 1788, 1795, 1809, 1818, 1825, 1830, 1849, 1857, 1876,
    1881, 1886, 1892, 1900, 1903, 1911, 1918, 1929, 1933, 1942, 1948, 1953, 1958, 1968, 1975,
    1980, 1987, 1992, 1996, 2001, 2006, 2014, 2022, 2025, 2029, 2036, 2040, 2044, 2051, 2058,
    2061, 2066, 2071, 2080, 2082, 2088, 2104, 2111, 2124, 2128, 2137, 2141, 2148, 2157, 2161,
    2200, 2214, 2227, 2231, 2234, 2239, 2243, 2246, 2253, 2257, 2261, 2268, 2274, 2276, 2287,
    2291, 2295, 2300, 2307, 2309, 2314, 2318, 2336, 2343, 2349, 2357, 2367, 2372, 2375, 2380,
    2389, 2395, 2413, 2415, 2421, 2425, 2429, 2437, 2447, 2449, 2466, 2475, 2479, 2484, 2488,
    2493, 2502, 2521, 2532, 2536, 2541, 2544, 2550, 2554, 2560, 2569, 2576, 2580, 2585, 2588,
    2592, 2600, 2602, 2611, 2615, 2618, 2624, 2629, 2646, 2650, 2670, 2679, 2682, 2689, 2739,
    2744, 2748, 2752, 2758, 2764, 2770, 2776, 2779, 2783, 2786, 2797, 2803, 2810, 2813, 2819,
    2827, 2831, 2841, 2845, 2847, 2859, 2863, 2865, 2869];
const atn = new antlr4_1.default.atn.ATNDeserializer().deserialize(serializedATN);
const decisionsToDFA = atn.decisionToState.map((ds, index) => new antlr4_1.default.dfa.DFA(ds, index));
const sharedContextCache = new antlr4_1.default.PredictionContextCache();
class Swift5Parser extends antlr4_1.default.Parser {
    static grammarFileName = "Swift5Parser.g4";
    static literalNames = [null, "'as'", "'alpha'", "'break'", "'case'",
        "'catch'", "'class'", "'continue'", "'default'",
        "'defer'", "'do'", "'guard'", "'else'", "'enum'",
        "'for'", "'fallthrough'", "'func'", "'in'",
        "'if'", "'import'", "'internal'", "'final'",
        "'open'", "'private'", "'public'", "'where'",
        "'while'", "'let'", "'var'", "'protocol'", "'get'",
        "'set'", "'willSet'", "'didSet'", "'repeat'",
        "'switch'", "'struct'", "'return'", "'throw'",
        "'throws'", "'rethrows'", "'indirect'", "'init'",
        "'deinit'", "'associatedtype'", "'extension'",
        "'subscript'", "'prefix'", "'infix'", "'left'",
        "'right'", "'none'", "'precedencegroup'", "'higherThan'",
        "'lowerThan'", "'assignment'", "'associativity'",
        "'postfix'", "'operator'", "'typealias'", "'os'",
        "'arch'", "'swift'", "'compiler'", "'canImport'",
        "'targetEnvironment'", "'convenience'", "'dynamic'",
        "'lazy'", "'optional'", "'override'", "'required'",
        "'static'", "'weak'", "'unowned'", "'safe'",
        "'unsafe'", "'mutating'", "'nonmutating'", "'fileprivate'",
        "'is'", "'try'", "'super'", "'Any'", "'false'",
        "'red'", "'blue'", "'green'", "'resourceName'",
        "'true'", "'nil'", "'inout'", "'some'", "'Type'",
        "'precedence'", "'self'", "'Self'", "'macOS'",
        "'iOS'", "'OSX'", "'watchOS'", "'tvOS'", "'Linux'",
        "'Windows'", "'i386'", "'x86_64'", "'arm'",
        "'arm64'", "'simulator'", "'macCatalyst'", "'iOSApplicationExtension'",
        "'macCatalystApplicationExtension'", "'macOSApplicationExtension'",
        "'#sourceLocation'", "'file'", "'line'", "'#error'",
        "'#warning'", "'#available'", "'#if'", "'#elseif'",
        "'#else'", "'#endif'", "'#file'", "'#fileID'",
        "'#filePath'", "'#line'", "'#column'", "'#function'",
        "'#dsohandle'", "'#selector'", "'#keyPath'",
        "'#colorLiteral'", "'#fileLiteral'", "'#imageLiteral'",
        "'getter'", "'setter'", null, "'.'", "'{'",
        "'('", "'['", "'}'", "')'", "']'", "','", "':'",
        "';'", "'<'", "'>'", "'_'", "'!'", "'?'", "'@'",
        "'&'", "'-'", "'='", "'|'", "'/'", "'+'", "'*'",
        "'%'", "'^'", "'~'", "'#'", "'`'", "'$'", "'\\'"];
    static symbolicNames = [null, "AS", "ALPHA", "BREAK", "CASE", "CATCH",
        "CLASS", "CONTINUE", "DEFAULT", "DEFER", "DO",
        "GUARD", "ELSE", "ENUM", "FOR", "FALLTHROUGH",
        "FUNC", "IN", "IF", "IMPORT", "INTERNAL", "FINAL",
        "OPEN", "PRIVATE", "PUBLIC", "WHERE", "WHILE",
        "LET", "VAR", "PROTOCOL", "GET", "SET", "WILL_SET",
        "DID_SET", "REPEAT", "SWITCH", "STRUCT", "RETURN",
        "THROW", "THROWS", "RETHROWS", "INDIRECT",
        "INIT", "DEINIT", "ASSOCIATED_TYPE", "EXTENSION",
        "SUBSCRIPT", "PREFIX", "INFIX", "LEFT", "RIGHT",
        "NONE", "PRECEDENCE_GROUP", "HIGHER_THAN",
        "LOWER_THAN", "ASSIGNMENT", "ASSOCIATIVITY",
        "POSTFIX", "OPERATOR", "TYPEALIAS", "OS", "ARCH",
        "SWIFT", "COMPILER", "CAN_IMPORT", "TARGET_ENVIRONMENT",
        "CONVENIENCE", "DYNAMIC", "LAZY", "OPTIONAL",
        "OVERRIDE", "REQUIRED", "STATIC", "WEAK", "UNOWNED",
        "SAFE", "UNSAFE", "MUTATING", "NONMUTATING",
        "FILE_PRIVATE", "IS", "TRY", "SUPER", "ANY",
        "FALSE", "RED", "BLUE", "GREEN", "RESOURCE_NAME",
        "TRUE", "NIL", "INOUT", "SOME", "TYPE", "PRECEDENCE",
        "SELF", "SELF_BIG", "MAC_OS", "I_OS", "OSX",
        "WATCH_OS", "TV_OS", "LINUX", "WINDOWS", "I386",
        "X86_64", "ARM", "ARM64", "SIMULATOR", "MAC_CATALYST",
        "I_OS_APPLICATION_EXTENSION", "MAC_CATALYST_APPLICATION_EXTENSION",
        "MAC_OS_APPLICATION_EXTENSION", "SOURCE_LOCATION",
        "FILE", "LINE", "ERROR", "WARNING", "AVAILABLE",
        "HASH_IF", "HASH_ELSEIF", "HASH_ELSE", "HASH_ENDIF",
        "HASH_FILE", "HASH_FILE_ID", "HASH_FILE_PATH",
        "HASH_LINE", "HASH_COLUMN", "HASH_FUNCTION",
        "HASH_DSO_HANDLE", "HASH_SELECTOR", "HASH_KEYPATH",
        "HASH_COLOR_LITERAL", "HASH_FILE_LITERAL",
        "HASH_IMAGE_LITERAL", "GETTER", "SETTER", "Identifier",
        "DOT", "LCURLY", "LPAREN", "LBRACK", "RCURLY",
        "RPAREN", "RBRACK", "COMMA", "COLON", "SEMI",
        "LT", "GT", "UNDERSCORE", "BANG", "QUESTION",
        "AT", "AND", "SUB", "EQUAL", "OR", "DIV", "ADD",
        "MUL", "MOD", "CARET", "TILDE", "HASH", "BACKTICK",
        "DOLLAR", "BACKSLASH", "Operator_head_other",
        "Operator_following_character", "Binary_literal",
        "Octal_literal", "Decimal_digits", "Decimal_literal",
        "Hexadecimal_literal", "Floating_point_literal",
        "WS", "HASHBANG", "Block_comment", "Line_comment",
        "Multi_line_extended_string_open", "Single_line_extended_string_open",
        "Multi_line_string_open", "Single_line_string_open",
        "Interpolataion_single_line", "Single_line_string_close",
        "Quoted_single_line_text", "Interpolataion_multi_line",
        "Multi_line_string_close", "Quoted_multi_line_text",
        "Single_line_extended_string_close", "Quoted_single_line_extended_text",
        "Multi_line_extended_string_close", "Quoted_multi_line_extended_text"];
    static ruleNames = ["top_level", "statement", "statements", "loop_statement",
        "for_in_statement", "while_statement", "condition_list",
        "condition", "case_condition", "optional_binding_condition",
        "repeat_while_statement", "branch_statement", "if_statement",
        "else_clause", "guard_statement", "switch_statement",
        "switch_cases", "switch_case", "case_label", "case_item_list",
        "default_label", "where_clause", "where_expression",
        "conditional_switch_case", "switch_if_directive_clause",
        "switch_elseif_directive_clauses", "switch_elseif_directive_clause",
        "switch_else_directive_clause", "labeled_statement",
        "statement_label", "label_name", "control_transfer_statement",
        "break_statement", "continue_statement", "fallthrough_statement",
        "return_statement", "throw_statement", "defer_statement",
        "do_statement", "catch_clauses", "catch_clause",
        "catch_pattern_list", "catch_pattern", "compiler_control_statement",
        "conditional_compilation_block", "if_directive_clause",
        "elseif_directive_clauses", "elseif_directive_clause",
        "else_directive_clause", "compilation_condition",
        "platform_condition", "swift_version", "swift_version_continuation",
        "operating_system", "architecture", "module_name",
        "environment", "line_control_statement", "line_number",
        "file_name", "diagnostic_statement", "diagnostic_message",
        "availability_condition", "availability_arguments",
        "availability_argument", "platform_name", "platform_version",
        "generic_parameter_clause", "generic_parameter_list",
        "generic_parameter", "generic_where_clause", "requirement_list",
        "requirement", "conformance_requirement", "same_type_requirement",
        "generic_argument_clause", "generic_argument_list",
        "generic_argument", "declaration", "declarations",
        "top_level_declaration", "code_block", "import_declaration",
        "import_kind", "import_path", "import_path_identifier",
        "constant_declaration", "pattern_initializer_list",
        "pattern_initializer", "initializer", "variable_declaration",
        "variable_declaration_head", "variable_name", "getter_setter_block",
        "getter_clause", "setter_clause", "setter_name",
        "getter_setter_keyword_block", "getter_keyword_clause",
        "setter_keyword_clause", "willSet_didSet_block",
        "willSet_clause", "didSet_clause", "typealias_declaration",
        "typealias_name", "typealias_assignment", "function_declaration",
        "function_head", "function_name", "function_signature",
        "function_result", "function_body", "parameter_clause",
        "parameter_list", "parameter", "external_parameter_name",
        "local_parameter_name", "default_argument_clause",
        "enum_declaration", "union_style_enum", "union_style_enum_members",
        "union_style_enum_member", "union_style_enum_case_clause",
        "union_style_enum_case_list", "union_style_enum_case",
        "enum_name", "enum_case_name", "raw_value_style_enum",
        "raw_value_style_enum_members", "raw_value_style_enum_member",
        "raw_value_style_enum_case_clause", "raw_value_style_enum_case_list",
        "raw_value_style_enum_case", "raw_value_assignment",
        "raw_value_literal", "struct_declaration", "struct_name",
        "struct_body", "struct_members", "struct_member",
        "class_declaration", "class_name", "class_body",
        "class_members", "class_member", "protocol_declaration",
        "protocol_name", "protocol_body", "protocol_members",
        "protocol_member", "protocol_member_declaration",
        "protocol_property_declaration", "protocol_method_declaration",
        "protocol_initializer_declaration", "protocol_subscript_declaration",
        "protocol_associated_type_declaration", "initializer_declaration",
        "initializer_head", "initializer_body", "deinitializer_declaration",
        "extension_declaration", "extension_body", "extension_members",
        "extension_member", "subscript_declaration", "subscript_head",
        "subscript_result", "operator_declaration", "prefix_operator_declaration",
        "postfix_operator_declaration", "infix_operator_declaration",
        "infix_operator_group", "precedence_group_declaration",
        "precedence_group_attributes", "precedence_group_attribute",
        "precedence_group_relation", "precedence_group_assignment",
        "precedence_group_associativity", "precedence_group_names",
        "precedence_group_name", "declaration_modifier",
        "declaration_modifiers", "access_level_modifier",
        "mutation_modifier", "pattern", "wildcard_pattern",
        "identifier_pattern", "value_binding_pattern",
        "tuple_pattern", "tuple_pattern_element_list",
        "tuple_pattern_element", "enum_case_pattern", "optional_pattern",
        "expression_pattern", "attribute", "attribute_name",
        "attribute_argument_clause", "attributes", "balanced_tokens",
        "balanced_token", "balanced_token_punctuation",
        "expression", "expression_list", "prefix_expression",
        "in_out_expression", "try_operator", "binary_expression",
        "binary_expressions", "conditional_operator", "type_casting_operator",
        "primary_expression", "unqualified_name", "literal_expression",
        "array_literal", "array_literal_items", "array_literal_item",
        "dictionary_literal", "dictionary_literal_items",
        "dictionary_literal_item", "playground_literal",
        "self_expression", "superclass_expression", "closure_expression",
        "closure_signature", "closure_parameter_clause",
        "closure_parameter_list", "closure_parameter",
        "capture_list", "capture_list_items", "capture_list_item",
        "capture_specifier", "implicit_member_expression",
        "parenthesized_operator", "parenthesized_expression",
        "tuple_expression", "tuple_element_list", "tuple_element",
        "wildcard_expression", "key_path_expression", "key_path_components",
        "key_path_component", "key_path_postfixes", "key_path_postfix",
        "selector_expression", "key_path_string_expression",
        "postfix_expression", "function_call_suffix", "initializer_suffix",
        "explicit_member_suffix", "postfix_self_suffix",
        "subscript_suffix", "forced_value_suffix", "optional_chaining_suffix",
        "function_call_argument_clause", "function_call_argument_list",
        "function_call_argument", "trailing_closures",
        "labeled_trailing_closures", "labeled_trailing_closure",
        "argument_names", "argument_name", "type", "type_annotation",
        "type_identifier", "type_name", "tuple_type", "tuple_type_element_list",
        "tuple_type_element", "element_name", "function_type",
        "function_type_argument_clause", "function_type_argument_list",
        "function_type_argument", "argument_label", "array_type",
        "dictionary_type", "protocol_composition_type",
        "trailing_composition_and", "opaque_type", "any_type",
        "self_type", "type_inheritance_clause", "type_inheritance_list",
        "identifier", "identifier_list", "keyword", "assignment_operator",
        "negate_prefix_operator", "compilation_condition_AND",
        "compilation_condition_OR", "compilation_condition_GE",
        "compilation_condition_L", "arrow_operator", "range_operator",
        "same_type_equals", "binary_operator", "prefix_operator",
        "postfix_operator", "operator", "operator_head",
        "operator_character", "operator_characters", "dot_operator_head",
        "dot_operator_character", "dot_operator_characters",
        "literal", "numeric_literal", "boolean_literal",
        "nil_literal", "integer_literal", "string_literal",
        "extended_string_literal", "static_string_literal",
        "interpolated_string_literal"];
    constructor(input) {
        super(input);
        this._interp = new antlr4_1.default.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = Swift5Parser.ruleNames;
        this.literalNames = Swift5Parser.literalNames;
        this.symbolicNames = Swift5Parser.symbolicNames;
    }
    get atn() {
        return atn;
    }
    sempred(localctx, ruleIndex, predIndex) {
        switch (ruleIndex) {
            case 2:
                return this.statements_sempred(localctx, predIndex);
            case 49:
                return this.compilation_condition_sempred(localctx, predIndex);
            case 184:
                return this.pattern_sempred(localctx, predIndex);
            case 200:
                return this.balanced_token_punctuation_sempred(localctx, predIndex);
            case 251:
                return this.forced_value_suffix_sempred(localctx, predIndex);
            case 252:
                return this.optional_chaining_suffix_sempred(localctx, predIndex);
            case 261:
                return this.type_sempred(localctx, predIndex);
            case 277:
                return this.trailing_composition_and_sempred(localctx, predIndex);
            case 286:
                return this.assignment_operator_sempred(localctx, predIndex);
            case 287:
                return this.negate_prefix_operator_sempred(localctx, predIndex);
            case 288:
                return this.compilation_condition_AND_sempred(localctx, predIndex);
            case 289:
                return this.compilation_condition_OR_sempred(localctx, predIndex);
            case 290:
                return this.compilation_condition_GE_sempred(localctx, predIndex);
            case 291:
                return this.compilation_condition_L_sempred(localctx, predIndex);
            case 292:
                return this.arrow_operator_sempred(localctx, predIndex);
            case 293:
                return this.range_operator_sempred(localctx, predIndex);
            case 294:
                return this.same_type_equals_sempred(localctx, predIndex);
            case 295:
                return this.binary_operator_sempred(localctx, predIndex);
            case 296:
                return this.prefix_operator_sempred(localctx, predIndex);
            case 297:
                return this.postfix_operator_sempred(localctx, predIndex);
            case 301:
                return this.operator_characters_sempred(localctx, predIndex);
            case 304:
                return this.dot_operator_characters_sempred(localctx, predIndex);
            default:
                throw "No predicate with index:" + ruleIndex;
        }
    }
    statements_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 0:
                return SwiftSupport_1.default.isSeparatedStatement(this._input, localctx.indexBefore);
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    compilation_condition_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 1:
                return this.precpred(this._ctx, 1);
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    pattern_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 2:
                return this.precpred(this._ctx, 2);
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    balanced_token_punctuation_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 3:
                return SwiftSupport_1.default.isPrefixOp(this._input);
            case 4:
                return SwiftSupport_1.default.isPostfixOp(this._input);
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    forced_value_suffix_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 5:
                return !SwiftSupport_1.default.isBinaryOp(this._input);
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    optional_chaining_suffix_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 6:
                return !SwiftSupport_1.default.isBinaryOp(this._input);
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    type_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 7:
                return this.precpred(this._ctx, 4);
            case 8:
                return !SwiftSupport_1.default.isBinaryOp(this._input);
            case 9:
                return !SwiftSupport_1.default.isBinaryOp(this._input);
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    trailing_composition_and_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 10:
                return !SwiftSupport_1.default.isBinaryOp(this._input);
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    assignment_operator_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 11:
                return SwiftSupport_1.default.isBinaryOp(this._input);
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    negate_prefix_operator_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 12:
                return SwiftSupport_1.default.isPrefixOp(this._input);
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    compilation_condition_AND_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 13:
                return SwiftSupport_1.default.isOperator(this._input, "&&");
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    compilation_condition_OR_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 14:
                return SwiftSupport_1.default.isOperator(this._input, "||");
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    compilation_condition_GE_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 15:
                return SwiftSupport_1.default.isOperator(this._input, ">=");
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    compilation_condition_L_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 16:
                return SwiftSupport_1.default.isOperator(this._input, "<");
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    arrow_operator_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 17:
                return SwiftSupport_1.default.isOperator(this._input, "->");
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    range_operator_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 18:
                return SwiftSupport_1.default.isOperator(this._input, "...");
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    same_type_equals_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 19:
                return SwiftSupport_1.default.isOperator(this._input, "==");
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    binary_operator_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 20:
                return SwiftSupport_1.default.isBinaryOp(this._input);
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    prefix_operator_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 21:
                return SwiftSupport_1.default.isPrefixOp(this._input);
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    postfix_operator_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 22:
                return SwiftSupport_1.default.isPostfixOp(this._input);
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    operator_characters_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 23:
                return this._input.get(this._input.index - 1).getType() != WS;
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    dot_operator_characters_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 24:
                return this._input.get(this._input.index - 1).getType() != WS;
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    top_level() {
        let localctx = new Top_levelContext(this, this._ctx, this.state);
        this.enterRule(localctx, 0, Swift5Parser.RULE_top_level);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 629;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 0, this._ctx);
            if (la_ === 1) {
                this.state = 628;
                this.statements();
            }
            this.state = 631;
            this.match(Swift5Parser.EOF);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    statement() {
        let localctx = new StatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 2, Swift5Parser.RULE_statement);
        try {
            this.state = 647;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 3, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 641;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 1, this._ctx);
                    switch (la_) {
                        case 1:
                            this.state = 633;
                            this.loop_statement();
                            break;
                        case 2:
                            this.state = 634;
                            this.declaration();
                            break;
                        case 3:
                            this.state = 635;
                            this.branch_statement();
                            break;
                        case 4:
                            this.state = 636;
                            this.labeled_statement();
                            break;
                        case 5:
                            this.state = 637;
                            this.control_transfer_statement();
                            break;
                        case 6:
                            this.state = 638;
                            this.defer_statement();
                            break;
                        case 7:
                            this.state = 639;
                            this.do_statement();
                            break;
                        case 8:
                            this.state = 640;
                            this.expression();
                            break;
                    }
                    this.state = 644;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 2, this._ctx);
                    if (la_ === 1) {
                        this.state = 643;
                        this.match(Swift5Parser.SEMI);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 646;
                    this.compiler_control_statement();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    statements() {
        let localctx = new StatementsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 4, Swift5Parser.RULE_statements);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 653;
            this._errHandler.sync(this);
            var _alt = 1;
            do {
                switch (_alt) {
                    case 1:
                        this.state = 649;
                        if (!(SwiftSupport_1.default.isSeparatedStatement(this._input, localctx.indexBefore))) {
                            throw new antlr4_1.default.error.FailedPredicateException(this, "SwiftSupport.isSeparatedStatement(this._input, $indexBefore)");
                        }
                        this.state = 650;
                        this.statement();
                        localctx.indexBefore = this._input.index;
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 655;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 4, this._ctx);
            } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    loop_statement() {
        let localctx = new Loop_statementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 6, Swift5Parser.RULE_loop_statement);
        try {
            this.state = 660;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.FOR:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 657;
                    this.for_in_statement();
                    break;
                case Swift5Parser.WHILE:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 658;
                    this.while_statement();
                    break;
                case Swift5Parser.REPEAT:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 659;
                    this.repeat_while_statement();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    for_in_statement() {
        let localctx = new For_in_statementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 8, Swift5Parser.RULE_for_in_statement);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 662;
            this.match(Swift5Parser.FOR);
            this.state = 664;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 6, this._ctx);
            if (la_ === 1) {
                this.state = 663;
                this.match(Swift5Parser.CASE);
            }
            this.state = 666;
            this.pattern(0);
            this.state = 667;
            this.match(Swift5Parser.IN);
            this.state = 668;
            this.expression();
            this.state = 670;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.WHERE) {
                this.state = 669;
                this.where_clause();
            }
            this.state = 672;
            this.code_block();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    while_statement() {
        let localctx = new While_statementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 10, Swift5Parser.RULE_while_statement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 674;
            this.match(Swift5Parser.WHILE);
            this.state = 675;
            this.condition_list();
            this.state = 676;
            this.code_block();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    condition_list() {
        let localctx = new Condition_listContext(this, this._ctx, this.state);
        this.enterRule(localctx, 12, Swift5Parser.RULE_condition_list);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 678;
            this.condition();
            this.state = 683;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === Swift5Parser.COMMA) {
                this.state = 679;
                this.match(Swift5Parser.COMMA);
                this.state = 680;
                this.condition();
                this.state = 685;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    condition() {
        let localctx = new ConditionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 14, Swift5Parser.RULE_condition);
        try {
            this.state = 690;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 9, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 686;
                    this.availability_condition();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 687;
                    this.expression();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 688;
                    this.case_condition();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 689;
                    this.optional_binding_condition();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    case_condition() {
        let localctx = new Case_conditionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 16, Swift5Parser.RULE_case_condition);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 692;
            this.match(Swift5Parser.CASE);
            this.state = 693;
            this.pattern(0);
            this.state = 694;
            this.initializer();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    optional_binding_condition() {
        let localctx = new Optional_binding_conditionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 18, Swift5Parser.RULE_optional_binding_condition);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 696;
            _la = this._input.LA(1);
            if (!(_la === Swift5Parser.LET || _la === Swift5Parser.VAR)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 697;
            this.pattern(0);
            this.state = 698;
            this.initializer();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    repeat_while_statement() {
        let localctx = new Repeat_while_statementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 20, Swift5Parser.RULE_repeat_while_statement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 700;
            this.match(Swift5Parser.REPEAT);
            this.state = 701;
            this.code_block();
            this.state = 702;
            this.match(Swift5Parser.WHILE);
            this.state = 703;
            this.expression();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    branch_statement() {
        let localctx = new Branch_statementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 22, Swift5Parser.RULE_branch_statement);
        try {
            this.state = 708;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.IF:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 705;
                    this.if_statement();
                    break;
                case Swift5Parser.GUARD:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 706;
                    this.guard_statement();
                    break;
                case Swift5Parser.SWITCH:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 707;
                    this.switch_statement();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    if_statement() {
        let localctx = new If_statementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 24, Swift5Parser.RULE_if_statement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 710;
            this.match(Swift5Parser.IF);
            this.state = 711;
            this.condition_list();
            this.state = 712;
            this.code_block();
            this.state = 714;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 11, this._ctx);
            if (la_ === 1) {
                this.state = 713;
                this.else_clause();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    else_clause() {
        let localctx = new Else_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 26, Swift5Parser.RULE_else_clause);
        try {
            this.state = 720;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 12, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 716;
                    this.match(Swift5Parser.ELSE);
                    this.state = 717;
                    this.code_block();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 718;
                    this.match(Swift5Parser.ELSE);
                    this.state = 719;
                    this.if_statement();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    guard_statement() {
        let localctx = new Guard_statementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 28, Swift5Parser.RULE_guard_statement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 722;
            this.match(Swift5Parser.GUARD);
            this.state = 723;
            this.condition_list();
            this.state = 724;
            this.match(Swift5Parser.ELSE);
            this.state = 725;
            this.code_block();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    switch_statement() {
        let localctx = new Switch_statementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 30, Swift5Parser.RULE_switch_statement);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 727;
            this.match(Swift5Parser.SWITCH);
            this.state = 728;
            this.expression();
            this.state = 729;
            this.match(Swift5Parser.LCURLY);
            this.state = 731;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.CASE || _la === Swift5Parser.DEFAULT || _la === Swift5Parser.HASH_IF || _la === Swift5Parser.AT) {
                this.state = 730;
                this.switch_cases();
            }
            this.state = 733;
            this.match(Swift5Parser.RCURLY);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    switch_cases() {
        let localctx = new Switch_casesContext(this, this._ctx, this.state);
        this.enterRule(localctx, 32, Swift5Parser.RULE_switch_cases);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 735;
            this.switch_case();
            this.state = 737;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.CASE || _la === Swift5Parser.DEFAULT || _la === Swift5Parser.HASH_IF || _la === Swift5Parser.AT) {
                this.state = 736;
                this.switch_cases();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    switch_case() {
        let localctx = new Switch_caseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 34, Swift5Parser.RULE_switch_case);
        try {
            this.state = 746;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.CASE:
                case Swift5Parser.DEFAULT:
                case Swift5Parser.AT:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 741;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 15, this._ctx);
                    switch (la_) {
                        case 1:
                            this.state = 739;
                            this.case_label();
                            break;
                        case 2:
                            this.state = 740;
                            this.default_label();
                            break;
                    }
                    this.state = 743;
                    this.statements();
                    break;
                case Swift5Parser.HASH_IF:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 745;
                    this.conditional_switch_case();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    case_label() {
        let localctx = new Case_labelContext(this, this._ctx, this.state);
        this.enterRule(localctx, 36, Swift5Parser.RULE_case_label);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 749;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.AT) {
                this.state = 748;
                this.attributes();
            }
            this.state = 751;
            this.match(Swift5Parser.CASE);
            this.state = 752;
            this.case_item_list();
            this.state = 753;
            this.match(Swift5Parser.COLON);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    case_item_list() {
        let localctx = new Case_item_listContext(this, this._ctx, this.state);
        this.enterRule(localctx, 38, Swift5Parser.RULE_case_item_list);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 755;
            this.pattern(0);
            this.state = 757;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.WHERE) {
                this.state = 756;
                this.where_clause();
            }
            this.state = 766;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === Swift5Parser.COMMA) {
                this.state = 759;
                this.match(Swift5Parser.COMMA);
                this.state = 760;
                this.pattern(0);
                this.state = 762;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === Swift5Parser.WHERE) {
                    this.state = 761;
                    this.where_clause();
                }
                this.state = 768;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    default_label() {
        let localctx = new Default_labelContext(this, this._ctx, this.state);
        this.enterRule(localctx, 40, Swift5Parser.RULE_default_label);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 770;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.AT) {
                this.state = 769;
                this.attributes();
            }
            this.state = 772;
            this.match(Swift5Parser.DEFAULT);
            this.state = 773;
            this.match(Swift5Parser.COLON);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    where_clause() {
        let localctx = new Where_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 42, Swift5Parser.RULE_where_clause);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 775;
            this.match(Swift5Parser.WHERE);
            this.state = 776;
            this.where_expression();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    where_expression() {
        let localctx = new Where_expressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 44, Swift5Parser.RULE_where_expression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 778;
            this.expression();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    conditional_switch_case() {
        let localctx = new Conditional_switch_caseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 46, Swift5Parser.RULE_conditional_switch_case);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 780;
            this.switch_if_directive_clause();
            this.state = 782;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.HASH_ELSEIF) {
                this.state = 781;
                this.switch_elseif_directive_clauses();
            }
            this.state = 785;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.HASH_ELSE) {
                this.state = 784;
                this.switch_else_directive_clause();
            }
            this.state = 787;
            this.match(Swift5Parser.HASH_ENDIF);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    switch_if_directive_clause() {
        let localctx = new Switch_if_directive_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 48, Swift5Parser.RULE_switch_if_directive_clause);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 789;
            this.match(Swift5Parser.HASH_IF);
            this.state = 790;
            this.compilation_condition(0);
            this.state = 792;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.CASE || _la === Swift5Parser.DEFAULT || _la === Swift5Parser.HASH_IF || _la === Swift5Parser.AT) {
                this.state = 791;
                this.switch_cases();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    switch_elseif_directive_clauses() {
        let localctx = new Switch_elseif_directive_clausesContext(this, this._ctx, this.state);
        this.enterRule(localctx, 50, Swift5Parser.RULE_switch_elseif_directive_clauses);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 794;
            this.elseif_directive_clause();
            this.state = 796;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.HASH_ELSEIF) {
                this.state = 795;
                this.switch_elseif_directive_clauses();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    switch_elseif_directive_clause() {
        let localctx = new Switch_elseif_directive_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 52, Swift5Parser.RULE_switch_elseif_directive_clause);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 798;
            this.match(Swift5Parser.HASH_ELSEIF);
            this.state = 799;
            this.compilation_condition(0);
            this.state = 801;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.CASE || _la === Swift5Parser.DEFAULT || _la === Swift5Parser.HASH_IF || _la === Swift5Parser.AT) {
                this.state = 800;
                this.switch_cases();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    switch_else_directive_clause() {
        let localctx = new Switch_else_directive_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 54, Swift5Parser.RULE_switch_else_directive_clause);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 803;
            this.match(Swift5Parser.HASH_ELSE);
            this.state = 805;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.CASE || _la === Swift5Parser.DEFAULT || _la === Swift5Parser.HASH_IF || _la === Swift5Parser.AT) {
                this.state = 804;
                this.switch_cases();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    labeled_statement() {
        let localctx = new Labeled_statementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 56, Swift5Parser.RULE_labeled_statement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 807;
            this.statement_label();
            this.state = 812;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.FOR:
                case Swift5Parser.WHILE:
                case Swift5Parser.REPEAT:
                    this.state = 808;
                    this.loop_statement();
                    break;
                case Swift5Parser.IF:
                    this.state = 809;
                    this.if_statement();
                    break;
                case Swift5Parser.SWITCH:
                    this.state = 810;
                    this.switch_statement();
                    break;
                case Swift5Parser.DO:
                    this.state = 811;
                    this.do_statement();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    statement_label() {
        let localctx = new Statement_labelContext(this, this._ctx, this.state);
        this.enterRule(localctx, 58, Swift5Parser.RULE_statement_label);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 814;
            this.label_name();
            this.state = 815;
            this.match(Swift5Parser.COLON);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    label_name() {
        let localctx = new Label_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 60, Swift5Parser.RULE_label_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 817;
            this.identifier();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    control_transfer_statement() {
        let localctx = new Control_transfer_statementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 62, Swift5Parser.RULE_control_transfer_statement);
        try {
            this.state = 824;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.BREAK:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 819;
                    this.break_statement();
                    break;
                case Swift5Parser.CONTINUE:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 820;
                    this.continue_statement();
                    break;
                case Swift5Parser.FALLTHROUGH:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 821;
                    this.fallthrough_statement();
                    break;
                case Swift5Parser.RETURN:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 822;
                    this.return_statement();
                    break;
                case Swift5Parser.THROW:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 823;
                    this.throw_statement();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    break_statement() {
        let localctx = new Break_statementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 64, Swift5Parser.RULE_break_statement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 826;
            this.match(Swift5Parser.BREAK);
            this.state = 828;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 30, this._ctx);
            if (la_ === 1) {
                this.state = 827;
                this.label_name();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    continue_statement() {
        let localctx = new Continue_statementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 66, Swift5Parser.RULE_continue_statement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 830;
            this.match(Swift5Parser.CONTINUE);
            this.state = 832;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 31, this._ctx);
            if (la_ === 1) {
                this.state = 831;
                this.label_name();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    fallthrough_statement() {
        let localctx = new Fallthrough_statementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 68, Swift5Parser.RULE_fallthrough_statement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 834;
            this.match(Swift5Parser.FALLTHROUGH);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    return_statement() {
        let localctx = new Return_statementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 70, Swift5Parser.RULE_return_statement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 836;
            this.match(Swift5Parser.RETURN);
            this.state = 838;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 32, this._ctx);
            if (la_ === 1) {
                this.state = 837;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    throw_statement() {
        let localctx = new Throw_statementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 72, Swift5Parser.RULE_throw_statement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 840;
            this.match(Swift5Parser.THROW);
            this.state = 841;
            this.expression();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    defer_statement() {
        let localctx = new Defer_statementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 74, Swift5Parser.RULE_defer_statement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 843;
            this.match(Swift5Parser.DEFER);
            this.state = 844;
            this.code_block();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    do_statement() {
        let localctx = new Do_statementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 76, Swift5Parser.RULE_do_statement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 846;
            this.match(Swift5Parser.DO);
            this.state = 847;
            this.code_block();
            this.state = 849;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 33, this._ctx);
            if (la_ === 1) {
                this.state = 848;
                this.catch_clauses();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    catch_clauses() {
        let localctx = new Catch_clausesContext(this, this._ctx, this.state);
        this.enterRule(localctx, 78, Swift5Parser.RULE_catch_clauses);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 852;
            this._errHandler.sync(this);
            var _alt = 1;
            do {
                switch (_alt) {
                    case 1:
                        this.state = 851;
                        this.catch_clause();
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 854;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 34, this._ctx);
            } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    catch_clause() {
        let localctx = new Catch_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 80, Swift5Parser.RULE_catch_clause);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 856;
            this.match(Swift5Parser.CATCH);
            this.state = 858;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 35, this._ctx);
            if (la_ === 1) {
                this.state = 857;
                this.catch_pattern_list();
            }
            this.state = 860;
            this.code_block();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    catch_pattern_list() {
        let localctx = new Catch_pattern_listContext(this, this._ctx, this.state);
        this.enterRule(localctx, 82, Swift5Parser.RULE_catch_pattern_list);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 862;
            this.catch_pattern();
            this.state = 869;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 36, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 863;
                    this.catch_pattern();
                    this.state = 864;
                    this.match(Swift5Parser.COMMA);
                    this.state = 865;
                    this.catch_pattern();
                }
                this.state = 871;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 36, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    catch_pattern() {
        let localctx = new Catch_patternContext(this, this._ctx, this.state);
        this.enterRule(localctx, 84, Swift5Parser.RULE_catch_pattern);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 872;
            this.pattern(0);
            this.state = 874;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 37, this._ctx);
            if (la_ === 1) {
                this.state = 873;
                this.where_clause();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    compiler_control_statement() {
        let localctx = new Compiler_control_statementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 86, Swift5Parser.RULE_compiler_control_statement);
        try {
            this.state = 879;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.HASH_IF:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 876;
                    this.conditional_compilation_block();
                    break;
                case Swift5Parser.SOURCE_LOCATION:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 877;
                    this.line_control_statement();
                    break;
                case Swift5Parser.ERROR:
                case Swift5Parser.WARNING:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 878;
                    this.diagnostic_statement();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    conditional_compilation_block() {
        let localctx = new Conditional_compilation_blockContext(this, this._ctx, this.state);
        this.enterRule(localctx, 88, Swift5Parser.RULE_conditional_compilation_block);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 881;
            this.if_directive_clause();
            this.state = 883;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.HASH_ELSEIF) {
                this.state = 882;
                this.elseif_directive_clauses();
            }
            this.state = 886;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.HASH_ELSE) {
                this.state = 885;
                this.else_directive_clause();
            }
            this.state = 888;
            this.match(Swift5Parser.HASH_ENDIF);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    if_directive_clause() {
        let localctx = new If_directive_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 90, Swift5Parser.RULE_if_directive_clause);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 890;
            this.match(Swift5Parser.HASH_IF);
            this.state = 891;
            this.compilation_condition(0);
            this.state = 893;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 41, this._ctx);
            if (la_ === 1) {
                this.state = 892;
                this.statements();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    elseif_directive_clauses() {
        let localctx = new Elseif_directive_clausesContext(this, this._ctx, this.state);
        this.enterRule(localctx, 92, Swift5Parser.RULE_elseif_directive_clauses);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 896;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 895;
                this.elseif_directive_clause();
                this.state = 898;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (_la === Swift5Parser.HASH_ELSEIF);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    elseif_directive_clause() {
        let localctx = new Elseif_directive_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 94, Swift5Parser.RULE_elseif_directive_clause);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 900;
            this.match(Swift5Parser.HASH_ELSEIF);
            this.state = 901;
            this.compilation_condition(0);
            this.state = 903;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 43, this._ctx);
            if (la_ === 1) {
                this.state = 902;
                this.statements();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    else_directive_clause() {
        let localctx = new Else_directive_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 96, Swift5Parser.RULE_else_directive_clause);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 905;
            this.match(Swift5Parser.HASH_ELSE);
            this.state = 907;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 44, this._ctx);
            if (la_ === 1) {
                this.state = 906;
                this.statements();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    compilation_condition(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        const _parentctx = this._ctx;
        const _parentState = this.state;
        let localctx = new Compilation_conditionContext(this, this._ctx, _parentState);
        let _prevctx = localctx;
        const _startState = 98;
        this.enterRecursionRule(localctx, 98, Swift5Parser.RULE_compilation_condition, _p);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 919;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 45, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 910;
                    this.platform_condition();
                    break;
                case 2:
                    this.state = 911;
                    this.identifier();
                    break;
                case 3:
                    this.state = 912;
                    this.boolean_literal();
                    break;
                case 4:
                    this.state = 913;
                    this.match(Swift5Parser.LPAREN);
                    this.state = 914;
                    this.compilation_condition(0);
                    this.state = 915;
                    this.match(Swift5Parser.RPAREN);
                    break;
                case 5:
                    this.state = 917;
                    this.match(Swift5Parser.BANG);
                    this.state = 918;
                    this.compilation_condition(2);
                    break;
            }
            this._ctx.stop = this._input.LT(-1);
            this.state = 930;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 47, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    if (this._parseListeners !== null) {
                        this.triggerExitRuleEvent();
                    }
                    _prevctx = localctx;
                    localctx = new Compilation_conditionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, Swift5Parser.RULE_compilation_condition);
                    this.state = 921;
                    if (!(this.precpred(this._ctx, 1))) {
                        throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 924;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 46, this._ctx);
                    switch (la_) {
                        case 1:
                            this.state = 922;
                            this.compilation_condition_AND();
                            break;
                        case 2:
                            this.state = 923;
                            this.compilation_condition_OR();
                            break;
                    }
                    this.state = 926;
                    this.compilation_condition(2);
                }
                this.state = 932;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 47, this._ctx);
            }
        }
        catch (error) {
            if (error instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = error;
                this._errHandler.reportError(this, error);
                this._errHandler.recover(this, error);
            }
            else {
                throw error;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }
    platform_condition() {
        let localctx = new Platform_conditionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 100, Swift5Parser.RULE_platform_condition);
        var _la = 0; // Token type
        try {
            this.state = 962;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.OS:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 933;
                    this.match(Swift5Parser.OS);
                    this.state = 934;
                    this.match(Swift5Parser.LPAREN);
                    this.state = 935;
                    this.operating_system();
                    this.state = 936;
                    this.match(Swift5Parser.RPAREN);
                    break;
                case Swift5Parser.ARCH:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 938;
                    this.match(Swift5Parser.ARCH);
                    this.state = 939;
                    this.match(Swift5Parser.LPAREN);
                    this.state = 940;
                    this.architecture();
                    this.state = 941;
                    this.match(Swift5Parser.RPAREN);
                    break;
                case Swift5Parser.SWIFT:
                case Swift5Parser.COMPILER:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 943;
                    _la = this._input.LA(1);
                    if (!(_la === Swift5Parser.SWIFT || _la === Swift5Parser.COMPILER)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 944;
                    this.match(Swift5Parser.LPAREN);
                    this.state = 947;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 48, this._ctx);
                    switch (la_) {
                        case 1:
                            this.state = 945;
                            this.compilation_condition_GE();
                            break;
                        case 2:
                            this.state = 946;
                            this.compilation_condition_L();
                            break;
                    }
                    this.state = 949;
                    this.swift_version();
                    this.state = 950;
                    this.match(Swift5Parser.RPAREN);
                    break;
                case Swift5Parser.CAN_IMPORT:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 952;
                    this.match(Swift5Parser.CAN_IMPORT);
                    this.state = 953;
                    this.match(Swift5Parser.LPAREN);
                    this.state = 954;
                    this.module_name();
                    this.state = 955;
                    this.match(Swift5Parser.RPAREN);
                    break;
                case Swift5Parser.TARGET_ENVIRONMENT:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 957;
                    this.match(Swift5Parser.TARGET_ENVIRONMENT);
                    this.state = 958;
                    this.match(Swift5Parser.LPAREN);
                    this.state = 959;
                    this.environment();
                    this.state = 960;
                    this.match(Swift5Parser.RPAREN);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    swift_version() {
        let localctx = new Swift_versionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 102, Swift5Parser.RULE_swift_version);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 964;
            this.match(Swift5Parser.Decimal_digits);
            this.state = 966;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.DOT) {
                this.state = 965;
                this.swift_version_continuation();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    swift_version_continuation() {
        let localctx = new Swift_version_continuationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 104, Swift5Parser.RULE_swift_version_continuation);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 968;
            this.match(Swift5Parser.DOT);
            this.state = 969;
            this.match(Swift5Parser.Decimal_digits);
            this.state = 971;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.DOT) {
                this.state = 970;
                this.swift_version_continuation();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    operating_system() {
        let localctx = new Operating_systemContext(this, this._ctx, this.state);
        this.enterRule(localctx, 106, Swift5Parser.RULE_operating_system);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 973;
            _la = this._input.LA(1);
            if (!(((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (Swift5Parser.MAC_OS - 97)) | (1 << (Swift5Parser.I_OS - 97)) | (1 << (Swift5Parser.OSX - 97)) | (1 << (Swift5Parser.WATCH_OS - 97)) | (1 << (Swift5Parser.TV_OS - 97)) | (1 << (Swift5Parser.LINUX - 97)) | (1 << (Swift5Parser.WINDOWS - 97)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    architecture() {
        let localctx = new ArchitectureContext(this, this._ctx, this.state);
        this.enterRule(localctx, 108, Swift5Parser.RULE_architecture);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 975;
            _la = this._input.LA(1);
            if (!(((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (Swift5Parser.I386 - 104)) | (1 << (Swift5Parser.X86_64 - 104)) | (1 << (Swift5Parser.ARM - 104)) | (1 << (Swift5Parser.ARM64 - 104)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    module_name() {
        let localctx = new Module_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 110, Swift5Parser.RULE_module_name);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 977;
            this.identifier();
            this.state = 982;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === Swift5Parser.DOT) {
                this.state = 978;
                this.match(Swift5Parser.DOT);
                this.state = 979;
                this.identifier();
                this.state = 984;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    environment() {
        let localctx = new EnvironmentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 112, Swift5Parser.RULE_environment);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 985;
            _la = this._input.LA(1);
            if (!(_la === Swift5Parser.SIMULATOR || _la === Swift5Parser.MAC_CATALYST)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    line_control_statement() {
        let localctx = new Line_control_statementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 114, Swift5Parser.RULE_line_control_statement);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 987;
            this.match(Swift5Parser.SOURCE_LOCATION);
            this.state = 988;
            this.match(Swift5Parser.LPAREN);
            this.state = 997;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.FILE) {
                this.state = 989;
                this.match(Swift5Parser.FILE);
                this.state = 990;
                this.match(Swift5Parser.COLON);
                this.state = 991;
                this.file_name();
                this.state = 992;
                this.match(Swift5Parser.COMMA);
                this.state = 993;
                this.match(Swift5Parser.LINE);
                this.state = 994;
                this.match(Swift5Parser.COLON);
                this.state = 995;
                this.line_number();
            }
            this.state = 999;
            this.match(Swift5Parser.RPAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    line_number() {
        let localctx = new Line_numberContext(this, this._ctx, this.state);
        this.enterRule(localctx, 116, Swift5Parser.RULE_line_number);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1001;
            this.match(Swift5Parser.Decimal_literal);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    file_name() {
        let localctx = new File_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 118, Swift5Parser.RULE_file_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1003;
            this.static_string_literal();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    diagnostic_statement() {
        let localctx = new Diagnostic_statementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 120, Swift5Parser.RULE_diagnostic_statement);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1005;
            _la = this._input.LA(1);
            if (!(_la === Swift5Parser.ERROR || _la === Swift5Parser.WARNING)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1006;
            this.match(Swift5Parser.LPAREN);
            this.state = 1007;
            this.diagnostic_message();
            this.state = 1008;
            this.match(Swift5Parser.RPAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    diagnostic_message() {
        let localctx = new Diagnostic_messageContext(this, this._ctx, this.state);
        this.enterRule(localctx, 122, Swift5Parser.RULE_diagnostic_message);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1010;
            this.static_string_literal();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    availability_condition() {
        let localctx = new Availability_conditionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 124, Swift5Parser.RULE_availability_condition);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1012;
            this.match(Swift5Parser.AVAILABLE);
            this.state = 1013;
            this.match(Swift5Parser.LPAREN);
            this.state = 1014;
            this.availability_arguments();
            this.state = 1015;
            this.match(Swift5Parser.RPAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    availability_arguments() {
        let localctx = new Availability_argumentsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 126, Swift5Parser.RULE_availability_arguments);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1017;
            this.availability_argument();
            this.state = 1022;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === Swift5Parser.COMMA) {
                this.state = 1018;
                this.match(Swift5Parser.COMMA);
                this.state = 1019;
                this.availability_argument();
                this.state = 1024;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    availability_argument() {
        let localctx = new Availability_argumentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 128, Swift5Parser.RULE_availability_argument);
        try {
            this.state = 1029;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.MAC_OS:
                case Swift5Parser.I_OS:
                case Swift5Parser.OSX:
                case Swift5Parser.WATCH_OS:
                case Swift5Parser.TV_OS:
                case Swift5Parser.MAC_CATALYST:
                case Swift5Parser.I_OS_APPLICATION_EXTENSION:
                case Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION:
                case Swift5Parser.MAC_OS_APPLICATION_EXTENSION:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1025;
                    this.platform_name();
                    this.state = 1026;
                    this.platform_version();
                    break;
                case Swift5Parser.MUL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1028;
                    this.match(Swift5Parser.MUL);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    platform_name() {
        let localctx = new Platform_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 130, Swift5Parser.RULE_platform_name);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1031;
            _la = this._input.LA(1);
            if (!(((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (Swift5Parser.MAC_OS - 97)) | (1 << (Swift5Parser.I_OS - 97)) | (1 << (Swift5Parser.OSX - 97)) | (1 << (Swift5Parser.WATCH_OS - 97)) | (1 << (Swift5Parser.TV_OS - 97)) | (1 << (Swift5Parser.MAC_CATALYST - 97)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 97)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 97)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 97)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    platform_version() {
        let localctx = new Platform_versionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 132, Swift5Parser.RULE_platform_version);
        var _la = 0; // Token type
        try {
            this.state = 1040;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.Decimal_literal:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1033;
                    this.match(Swift5Parser.Decimal_literal);
                    break;
                case Swift5Parser.Decimal_digits:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1034;
                    this.match(Swift5Parser.Decimal_digits);
                    break;
                case Swift5Parser.Floating_point_literal:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1035;
                    this.match(Swift5Parser.Floating_point_literal);
                    this.state = 1038;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === Swift5Parser.DOT) {
                        this.state = 1036;
                        this.match(Swift5Parser.DOT);
                        this.state = 1037;
                        this.match(Swift5Parser.Decimal_digits);
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    generic_parameter_clause() {
        let localctx = new Generic_parameter_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 134, Swift5Parser.RULE_generic_parameter_clause);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1042;
            this.match(Swift5Parser.LT);
            this.state = 1043;
            this.generic_parameter_list();
            this.state = 1044;
            this.match(Swift5Parser.GT);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    generic_parameter_list() {
        let localctx = new Generic_parameter_listContext(this, this._ctx, this.state);
        this.enterRule(localctx, 136, Swift5Parser.RULE_generic_parameter_list);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1046;
            this.generic_parameter();
            this.state = 1051;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === Swift5Parser.COMMA) {
                this.state = 1047;
                this.match(Swift5Parser.COMMA);
                this.state = 1048;
                this.generic_parameter();
                this.state = 1053;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    generic_parameter() {
        let localctx = new Generic_parameterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 138, Swift5Parser.RULE_generic_parameter);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1054;
            this.type_name();
            this.state = 1060;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.COLON) {
                this.state = 1055;
                this.match(Swift5Parser.COLON);
                this.state = 1058;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 59, this._ctx);
                switch (la_) {
                    case 1:
                        this.state = 1056;
                        this.type_identifier();
                        break;
                    case 2:
                        this.state = 1057;
                        this.protocol_composition_type();
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    generic_where_clause() {
        let localctx = new Generic_where_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 140, Swift5Parser.RULE_generic_where_clause);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1062;
            this.match(Swift5Parser.WHERE);
            this.state = 1063;
            this.requirement_list();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    requirement_list() {
        let localctx = new Requirement_listContext(this, this._ctx, this.state);
        this.enterRule(localctx, 142, Swift5Parser.RULE_requirement_list);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1065;
            this.requirement();
            this.state = 1070;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 61, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1066;
                    this.match(Swift5Parser.COMMA);
                    this.state = 1067;
                    this.requirement();
                }
                this.state = 1072;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 61, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    requirement() {
        let localctx = new RequirementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 144, Swift5Parser.RULE_requirement);
        try {
            this.state = 1075;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 62, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1073;
                    this.conformance_requirement();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1074;
                    this.same_type_requirement();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    conformance_requirement() {
        let localctx = new Conformance_requirementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 146, Swift5Parser.RULE_conformance_requirement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1077;
            this.type_identifier();
            this.state = 1078;
            this.match(Swift5Parser.COLON);
            this.state = 1081;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 63, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 1079;
                    this.type_identifier();
                    break;
                case 2:
                    this.state = 1080;
                    this.protocol_composition_type();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    same_type_requirement() {
        let localctx = new Same_type_requirementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 148, Swift5Parser.RULE_same_type_requirement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1083;
            this.type_identifier();
            this.state = 1084;
            this.same_type_equals();
            this.state = 1087;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 64, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 1085;
                    this.type_identifier();
                    break;
                case 2:
                    this.state = 1086;
                    this.type(0);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    generic_argument_clause() {
        let localctx = new Generic_argument_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 150, Swift5Parser.RULE_generic_argument_clause);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1089;
            this.match(Swift5Parser.LT);
            this.state = 1090;
            this.generic_argument_list();
            this.state = 1091;
            this.match(Swift5Parser.GT);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    generic_argument_list() {
        let localctx = new Generic_argument_listContext(this, this._ctx, this.state);
        this.enterRule(localctx, 152, Swift5Parser.RULE_generic_argument_list);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1093;
            this.generic_argument();
            this.state = 1098;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === Swift5Parser.COMMA) {
                this.state = 1094;
                this.match(Swift5Parser.COMMA);
                this.state = 1095;
                this.generic_argument();
                this.state = 1100;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    generic_argument() {
        let localctx = new Generic_argumentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 154, Swift5Parser.RULE_generic_argument);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1101;
            this.type(0);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    declaration() {
        let localctx = new DeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 156, Swift5Parser.RULE_declaration);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1118;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 66, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 1103;
                    this.import_declaration();
                    break;
                case 2:
                    this.state = 1104;
                    this.constant_declaration();
                    break;
                case 3:
                    this.state = 1105;
                    this.variable_declaration();
                    break;
                case 4:
                    this.state = 1106;
                    this.typealias_declaration();
                    break;
                case 5:
                    this.state = 1107;
                    this.function_declaration();
                    break;
                case 6:
                    this.state = 1108;
                    this.enum_declaration();
                    break;
                case 7:
                    this.state = 1109;
                    this.struct_declaration();
                    break;
                case 8:
                    this.state = 1110;
                    this.class_declaration();
                    break;
                case 9:
                    this.state = 1111;
                    this.protocol_declaration();
                    break;
                case 10:
                    this.state = 1112;
                    this.initializer_declaration();
                    break;
                case 11:
                    this.state = 1113;
                    this.deinitializer_declaration();
                    break;
                case 12:
                    this.state = 1114;
                    this.extension_declaration();
                    break;
                case 13:
                    this.state = 1115;
                    this.subscript_declaration();
                    break;
                case 14:
                    this.state = 1116;
                    this.operator_declaration();
                    break;
                case 15:
                    this.state = 1117;
                    this.precedence_group_declaration();
                    break;
            }
            this.state = 1121;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 67, this._ctx);
            if (la_ === 1) {
                this.state = 1120;
                this.match(Swift5Parser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    declarations() {
        let localctx = new DeclarationsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 158, Swift5Parser.RULE_declarations);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1124;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1123;
                this.declaration();
                this.state = 1126;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.ENUM) | (1 << Swift5Parser.FUNC) | (1 << Swift5Parser.IMPORT) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.LET) | (1 << Swift5Parser.VAR) | (1 << Swift5Parser.PROTOCOL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (Swift5Parser.STRUCT - 36)) | (1 << (Swift5Parser.INDIRECT - 36)) | (1 << (Swift5Parser.INIT - 36)) | (1 << (Swift5Parser.DEINIT - 36)) | (1 << (Swift5Parser.EXTENSION - 36)) | (1 << (Swift5Parser.SUBSCRIPT - 36)) | (1 << (Swift5Parser.PREFIX - 36)) | (1 << (Swift5Parser.INFIX - 36)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 36)) | (1 << (Swift5Parser.POSTFIX - 36)) | (1 << (Swift5Parser.TYPEALIAS - 36)) | (1 << (Swift5Parser.CONVENIENCE - 36)) | (1 << (Swift5Parser.DYNAMIC - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Swift5Parser.LAZY - 68)) | (1 << (Swift5Parser.OPTIONAL - 68)) | (1 << (Swift5Parser.OVERRIDE - 68)) | (1 << (Swift5Parser.REQUIRED - 68)) | (1 << (Swift5Parser.STATIC - 68)) | (1 << (Swift5Parser.WEAK - 68)) | (1 << (Swift5Parser.UNOWNED - 68)) | (1 << (Swift5Parser.MUTATING - 68)) | (1 << (Swift5Parser.NONMUTATING - 68)) | (1 << (Swift5Parser.FILE_PRIVATE - 68)))) !== 0) || _la === Swift5Parser.AT);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    top_level_declaration() {
        let localctx = new Top_level_declarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 160, Swift5Parser.RULE_top_level_declaration);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1129;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 69, this._ctx);
            if (la_ === 1) {
                this.state = 1128;
                this.statements();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    code_block() {
        let localctx = new Code_blockContext(this, this._ctx, this.state);
        this.enterRule(localctx, 162, Swift5Parser.RULE_code_block);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1131;
            this.match(Swift5Parser.LCURLY);
            this.state = 1133;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 70, this._ctx);
            if (la_ === 1) {
                this.state = 1132;
                this.statements();
            }
            this.state = 1135;
            this.match(Swift5Parser.RCURLY);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    import_declaration() {
        let localctx = new Import_declarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 164, Swift5Parser.RULE_import_declaration);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1138;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.AT) {
                this.state = 1137;
                this.attributes();
            }
            this.state = 1140;
            this.match(Swift5Parser.IMPORT);
            this.state = 1142;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 72, this._ctx);
            if (la_ === 1) {
                this.state = 1141;
                this.import_kind();
            }
            this.state = 1144;
            this.import_path();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    import_kind() {
        let localctx = new Import_kindContext(this, this._ctx, this.state);
        this.enterRule(localctx, 166, Swift5Parser.RULE_import_kind);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1146;
            _la = this._input.LA(1);
            if (!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.ENUM) | (1 << Swift5Parser.FUNC) | (1 << Swift5Parser.LET) | (1 << Swift5Parser.VAR) | (1 << Swift5Parser.PROTOCOL))) !== 0) || _la === Swift5Parser.STRUCT || _la === Swift5Parser.TYPEALIAS)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    import_path() {
        let localctx = new Import_pathContext(this, this._ctx, this.state);
        this.enterRule(localctx, 168, Swift5Parser.RULE_import_path);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1148;
            this.import_path_identifier();
            this.state = 1153;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 73, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1149;
                    this.match(Swift5Parser.DOT);
                    this.state = 1150;
                    this.import_path_identifier();
                }
                this.state = 1155;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 73, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    import_path_identifier() {
        let localctx = new Import_path_identifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 170, Swift5Parser.RULE_import_path_identifier);
        try {
            this.state = 1158;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.AS:
                case Swift5Parser.ALPHA:
                case Swift5Parser.CATCH:
                case Swift5Parser.CLASS:
                case Swift5Parser.DEFAULT:
                case Swift5Parser.DO:
                case Swift5Parser.GUARD:
                case Swift5Parser.FOR:
                case Swift5Parser.IN:
                case Swift5Parser.INTERNAL:
                case Swift5Parser.FINAL:
                case Swift5Parser.OPEN:
                case Swift5Parser.PRIVATE:
                case Swift5Parser.PUBLIC:
                case Swift5Parser.WHERE:
                case Swift5Parser.WHILE:
                case Swift5Parser.PROTOCOL:
                case Swift5Parser.GET:
                case Swift5Parser.SET:
                case Swift5Parser.WILL_SET:
                case Swift5Parser.DID_SET:
                case Swift5Parser.INDIRECT:
                case Swift5Parser.PREFIX:
                case Swift5Parser.INFIX:
                case Swift5Parser.LEFT:
                case Swift5Parser.RIGHT:
                case Swift5Parser.NONE:
                case Swift5Parser.PRECEDENCE_GROUP:
                case Swift5Parser.HIGHER_THAN:
                case Swift5Parser.LOWER_THAN:
                case Swift5Parser.ASSIGNMENT:
                case Swift5Parser.ASSOCIATIVITY:
                case Swift5Parser.POSTFIX:
                case Swift5Parser.OPERATOR:
                case Swift5Parser.OS:
                case Swift5Parser.ARCH:
                case Swift5Parser.SWIFT:
                case Swift5Parser.COMPILER:
                case Swift5Parser.CAN_IMPORT:
                case Swift5Parser.TARGET_ENVIRONMENT:
                case Swift5Parser.CONVENIENCE:
                case Swift5Parser.DYNAMIC:
                case Swift5Parser.LAZY:
                case Swift5Parser.OPTIONAL:
                case Swift5Parser.OVERRIDE:
                case Swift5Parser.REQUIRED:
                case Swift5Parser.WEAK:
                case Swift5Parser.UNOWNED:
                case Swift5Parser.SAFE:
                case Swift5Parser.UNSAFE:
                case Swift5Parser.MUTATING:
                case Swift5Parser.NONMUTATING:
                case Swift5Parser.RED:
                case Swift5Parser.BLUE:
                case Swift5Parser.GREEN:
                case Swift5Parser.RESOURCE_NAME:
                case Swift5Parser.SOME:
                case Swift5Parser.TYPE:
                case Swift5Parser.PRECEDENCE:
                case Swift5Parser.SELF:
                case Swift5Parser.SELF_BIG:
                case Swift5Parser.MAC_OS:
                case Swift5Parser.I_OS:
                case Swift5Parser.OSX:
                case Swift5Parser.WATCH_OS:
                case Swift5Parser.TV_OS:
                case Swift5Parser.LINUX:
                case Swift5Parser.WINDOWS:
                case Swift5Parser.I386:
                case Swift5Parser.X86_64:
                case Swift5Parser.ARM:
                case Swift5Parser.ARM64:
                case Swift5Parser.SIMULATOR:
                case Swift5Parser.MAC_CATALYST:
                case Swift5Parser.I_OS_APPLICATION_EXTENSION:
                case Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION:
                case Swift5Parser.MAC_OS_APPLICATION_EXTENSION:
                case Swift5Parser.FILE:
                case Swift5Parser.LINE:
                case Swift5Parser.GETTER:
                case Swift5Parser.SETTER:
                case Swift5Parser.Identifier:
                case Swift5Parser.BACKTICK:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1156;
                    this.identifier();
                    break;
                case Swift5Parser.DOT:
                case Swift5Parser.LT:
                case Swift5Parser.GT:
                case Swift5Parser.BANG:
                case Swift5Parser.QUESTION:
                case Swift5Parser.AND:
                case Swift5Parser.SUB:
                case Swift5Parser.EQUAL:
                case Swift5Parser.OR:
                case Swift5Parser.DIV:
                case Swift5Parser.ADD:
                case Swift5Parser.MUL:
                case Swift5Parser.MOD:
                case Swift5Parser.CARET:
                case Swift5Parser.TILDE:
                case Swift5Parser.Operator_head_other:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1157;
                    this.operator();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    constant_declaration() {
        let localctx = new Constant_declarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 172, Swift5Parser.RULE_constant_declaration);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1161;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.AT) {
                this.state = 1160;
                this.attributes();
            }
            this.state = 1164;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC))) !== 0) || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (Swift5Parser.PREFIX - 47)) | (1 << (Swift5Parser.INFIX - 47)) | (1 << (Swift5Parser.POSTFIX - 47)) | (1 << (Swift5Parser.CONVENIENCE - 47)) | (1 << (Swift5Parser.DYNAMIC - 47)) | (1 << (Swift5Parser.LAZY - 47)) | (1 << (Swift5Parser.OPTIONAL - 47)) | (1 << (Swift5Parser.OVERRIDE - 47)) | (1 << (Swift5Parser.REQUIRED - 47)) | (1 << (Swift5Parser.STATIC - 47)) | (1 << (Swift5Parser.WEAK - 47)) | (1 << (Swift5Parser.UNOWNED - 47)) | (1 << (Swift5Parser.MUTATING - 47)) | (1 << (Swift5Parser.NONMUTATING - 47)))) !== 0) || _la === Swift5Parser.FILE_PRIVATE) {
                this.state = 1163;
                this.declaration_modifiers();
            }
            this.state = 1166;
            this.match(Swift5Parser.LET);
            this.state = 1167;
            this.pattern_initializer_list();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    pattern_initializer_list() {
        let localctx = new Pattern_initializer_listContext(this, this._ctx, this.state);
        this.enterRule(localctx, 174, Swift5Parser.RULE_pattern_initializer_list);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1169;
            this.pattern_initializer();
            this.state = 1174;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 77, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1170;
                    this.match(Swift5Parser.COMMA);
                    this.state = 1171;
                    this.pattern_initializer();
                }
                this.state = 1176;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 77, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    pattern_initializer() {
        let localctx = new Pattern_initializerContext(this, this._ctx, this.state);
        this.enterRule(localctx, 176, Swift5Parser.RULE_pattern_initializer);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1177;
            this.pattern(0);
            this.state = 1179;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 78, this._ctx);
            if (la_ === 1) {
                this.state = 1178;
                this.initializer();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    initializer() {
        let localctx = new InitializerContext(this, this._ctx, this.state);
        this.enterRule(localctx, 178, Swift5Parser.RULE_initializer);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1181;
            this.match(Swift5Parser.EQUAL);
            this.state = 1182;
            this.expression();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    variable_declaration() {
        let localctx = new Variable_declarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 180, Swift5Parser.RULE_variable_declaration);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1184;
            this.variable_declaration_head();
            this.state = 1201;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 82, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 1185;
                    this.variable_name();
                    this.state = 1198;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case Swift5Parser.EQUAL:
                            this.state = 1186;
                            this.initializer();
                            this.state = 1187;
                            this.willSet_didSet_block();
                            break;
                        case Swift5Parser.COLON:
                            this.state = 1189;
                            this.type_annotation();
                            this.state = 1196;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 80, this._ctx);
                            switch (la_) {
                                case 1:
                                    this.state = 1190;
                                    this.getter_setter_block();
                                    break;
                                case 2:
                                    this.state = 1191;
                                    this.getter_setter_keyword_block();
                                    break;
                                case 3:
                                    this.state = 1193;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === Swift5Parser.EQUAL) {
                                        this.state = 1192;
                                        this.initializer();
                                    }
                                    this.state = 1195;
                                    this.willSet_didSet_block();
                                    break;
                            }
                            break;
                        default:
                            throw new antlr4_1.default.error.NoViableAltException(this);
                    }
                    break;
                case 2:
                    this.state = 1200;
                    this.pattern_initializer_list();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    variable_declaration_head() {
        let localctx = new Variable_declaration_headContext(this, this._ctx, this.state);
        this.enterRule(localctx, 182, Swift5Parser.RULE_variable_declaration_head);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1204;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.AT) {
                this.state = 1203;
                this.attributes();
            }
            this.state = 1207;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC))) !== 0) || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (Swift5Parser.PREFIX - 47)) | (1 << (Swift5Parser.INFIX - 47)) | (1 << (Swift5Parser.POSTFIX - 47)) | (1 << (Swift5Parser.CONVENIENCE - 47)) | (1 << (Swift5Parser.DYNAMIC - 47)) | (1 << (Swift5Parser.LAZY - 47)) | (1 << (Swift5Parser.OPTIONAL - 47)) | (1 << (Swift5Parser.OVERRIDE - 47)) | (1 << (Swift5Parser.REQUIRED - 47)) | (1 << (Swift5Parser.STATIC - 47)) | (1 << (Swift5Parser.WEAK - 47)) | (1 << (Swift5Parser.UNOWNED - 47)) | (1 << (Swift5Parser.MUTATING - 47)) | (1 << (Swift5Parser.NONMUTATING - 47)))) !== 0) || _la === Swift5Parser.FILE_PRIVATE) {
                this.state = 1206;
                this.declaration_modifiers();
            }
            this.state = 1209;
            this.match(Swift5Parser.VAR);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    variable_name() {
        let localctx = new Variable_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 184, Swift5Parser.RULE_variable_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1211;
            this.identifier();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    getter_setter_block() {
        let localctx = new Getter_setter_blockContext(this, this._ctx, this.state);
        this.enterRule(localctx, 186, Swift5Parser.RULE_getter_setter_block);
        var _la = 0; // Token type
        try {
            this.state = 1226;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 87, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1213;
                    this.match(Swift5Parser.LCURLY);
                    this.state = 1221;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 86, this._ctx);
                    switch (la_) {
                        case 1:
                            this.state = 1214;
                            this.getter_clause();
                            this.state = 1216;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === Swift5Parser.SET || _la === Swift5Parser.MUTATING || _la === Swift5Parser.NONMUTATING || _la === Swift5Parser.AT) {
                                this.state = 1215;
                                this.setter_clause();
                            }
                            break;
                        case 2:
                            this.state = 1218;
                            this.setter_clause();
                            this.state = 1219;
                            this.getter_clause();
                            break;
                    }
                    this.state = 1223;
                    this.match(Swift5Parser.RCURLY);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1225;
                    this.code_block();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    getter_clause() {
        let localctx = new Getter_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 188, Swift5Parser.RULE_getter_clause);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1229;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.AT) {
                this.state = 1228;
                this.attributes();
            }
            this.state = 1232;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.MUTATING || _la === Swift5Parser.NONMUTATING) {
                this.state = 1231;
                this.mutation_modifier();
            }
            this.state = 1234;
            this.match(Swift5Parser.GET);
            this.state = 1236;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.LCURLY) {
                this.state = 1235;
                this.code_block();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    setter_clause() {
        let localctx = new Setter_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 190, Swift5Parser.RULE_setter_clause);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1239;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.AT) {
                this.state = 1238;
                this.attributes();
            }
            this.state = 1242;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.MUTATING || _la === Swift5Parser.NONMUTATING) {
                this.state = 1241;
                this.mutation_modifier();
            }
            this.state = 1244;
            this.match(Swift5Parser.SET);
            this.state = 1246;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.LPAREN) {
                this.state = 1245;
                this.setter_name();
            }
            this.state = 1249;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.LCURLY) {
                this.state = 1248;
                this.code_block();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    setter_name() {
        let localctx = new Setter_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 192, Swift5Parser.RULE_setter_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1251;
            this.match(Swift5Parser.LPAREN);
            this.state = 1252;
            this.identifier();
            this.state = 1253;
            this.match(Swift5Parser.RPAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    getter_setter_keyword_block() {
        let localctx = new Getter_setter_keyword_blockContext(this, this._ctx, this.state);
        this.enterRule(localctx, 194, Swift5Parser.RULE_getter_setter_keyword_block);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1255;
            this.match(Swift5Parser.LCURLY);
            this.state = 1263;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 96, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 1256;
                    this.getter_keyword_clause();
                    this.state = 1258;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === Swift5Parser.SET || _la === Swift5Parser.MUTATING || _la === Swift5Parser.NONMUTATING || _la === Swift5Parser.AT) {
                        this.state = 1257;
                        this.setter_keyword_clause();
                    }
                    break;
                case 2:
                    this.state = 1260;
                    this.setter_keyword_clause();
                    this.state = 1261;
                    this.getter_keyword_clause();
                    break;
            }
            this.state = 1265;
            this.match(Swift5Parser.RCURLY);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    getter_keyword_clause() {
        let localctx = new Getter_keyword_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 196, Swift5Parser.RULE_getter_keyword_clause);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1268;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.AT) {
                this.state = 1267;
                this.attributes();
            }
            this.state = 1271;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.MUTATING || _la === Swift5Parser.NONMUTATING) {
                this.state = 1270;
                this.mutation_modifier();
            }
            this.state = 1273;
            this.match(Swift5Parser.GET);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    setter_keyword_clause() {
        let localctx = new Setter_keyword_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 198, Swift5Parser.RULE_setter_keyword_clause);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1276;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.AT) {
                this.state = 1275;
                this.attributes();
            }
            this.state = 1279;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.MUTATING || _la === Swift5Parser.NONMUTATING) {
                this.state = 1278;
                this.mutation_modifier();
            }
            this.state = 1281;
            this.match(Swift5Parser.SET);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    willSet_didSet_block() {
        let localctx = new WillSet_didSet_blockContext(this, this._ctx, this.state);
        this.enterRule(localctx, 200, Swift5Parser.RULE_willSet_didSet_block);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1283;
            this.match(Swift5Parser.LCURLY);
            this.state = 1292;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 103, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 1284;
                    this.willSet_clause();
                    this.state = 1286;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === Swift5Parser.DID_SET || _la === Swift5Parser.AT) {
                        this.state = 1285;
                        this.didSet_clause();
                    }
                    break;
                case 2:
                    this.state = 1288;
                    this.didSet_clause();
                    this.state = 1290;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === Swift5Parser.WILL_SET || _la === Swift5Parser.AT) {
                        this.state = 1289;
                        this.willSet_clause();
                    }
                    break;
            }
            this.state = 1294;
            this.match(Swift5Parser.RCURLY);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    willSet_clause() {
        let localctx = new WillSet_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 202, Swift5Parser.RULE_willSet_clause);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1297;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.AT) {
                this.state = 1296;
                this.attributes();
            }
            this.state = 1299;
            this.match(Swift5Parser.WILL_SET);
            this.state = 1301;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.LPAREN) {
                this.state = 1300;
                this.setter_name();
            }
            this.state = 1303;
            this.code_block();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    didSet_clause() {
        let localctx = new DidSet_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 204, Swift5Parser.RULE_didSet_clause);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1306;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.AT) {
                this.state = 1305;
                this.attributes();
            }
            this.state = 1308;
            this.match(Swift5Parser.DID_SET);
            this.state = 1310;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.LPAREN) {
                this.state = 1309;
                this.setter_name();
            }
            this.state = 1312;
            this.code_block();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typealias_declaration() {
        let localctx = new Typealias_declarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 206, Swift5Parser.RULE_typealias_declaration);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1315;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.AT) {
                this.state = 1314;
                this.attributes();
            }
            this.state = 1318;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC))) !== 0) || _la === Swift5Parser.FILE_PRIVATE) {
                this.state = 1317;
                this.access_level_modifier();
            }
            this.state = 1320;
            this.match(Swift5Parser.TYPEALIAS);
            this.state = 1321;
            this.typealias_name();
            this.state = 1323;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.LT) {
                this.state = 1322;
                this.generic_parameter_clause();
            }
            this.state = 1325;
            this.typealias_assignment();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typealias_name() {
        let localctx = new Typealias_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 208, Swift5Parser.RULE_typealias_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1327;
            this.identifier();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typealias_assignment() {
        let localctx = new Typealias_assignmentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 210, Swift5Parser.RULE_typealias_assignment);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1329;
            this.match(Swift5Parser.EQUAL);
            this.state = 1330;
            this.type(0);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    function_declaration() {
        let localctx = new Function_declarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 212, Swift5Parser.RULE_function_declaration);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1332;
            this.function_head();
            this.state = 1333;
            this.function_name();
            this.state = 1335;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.LT) {
                this.state = 1334;
                this.generic_parameter_clause();
            }
            this.state = 1337;
            this.function_signature();
            this.state = 1339;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 112, this._ctx);
            if (la_ === 1) {
                this.state = 1338;
                this.generic_where_clause();
            }
            this.state = 1342;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 113, this._ctx);
            if (la_ === 1) {
                this.state = 1341;
                this.function_body();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    function_head() {
        let localctx = new Function_headContext(this, this._ctx, this.state);
        this.enterRule(localctx, 214, Swift5Parser.RULE_function_head);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1345;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.AT) {
                this.state = 1344;
                this.attributes();
            }
            this.state = 1348;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC))) !== 0) || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (Swift5Parser.PREFIX - 47)) | (1 << (Swift5Parser.INFIX - 47)) | (1 << (Swift5Parser.POSTFIX - 47)) | (1 << (Swift5Parser.CONVENIENCE - 47)) | (1 << (Swift5Parser.DYNAMIC - 47)) | (1 << (Swift5Parser.LAZY - 47)) | (1 << (Swift5Parser.OPTIONAL - 47)) | (1 << (Swift5Parser.OVERRIDE - 47)) | (1 << (Swift5Parser.REQUIRED - 47)) | (1 << (Swift5Parser.STATIC - 47)) | (1 << (Swift5Parser.WEAK - 47)) | (1 << (Swift5Parser.UNOWNED - 47)) | (1 << (Swift5Parser.MUTATING - 47)) | (1 << (Swift5Parser.NONMUTATING - 47)))) !== 0) || _la === Swift5Parser.FILE_PRIVATE) {
                this.state = 1347;
                this.declaration_modifiers();
            }
            this.state = 1350;
            this.match(Swift5Parser.FUNC);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    function_name() {
        let localctx = new Function_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 216, Swift5Parser.RULE_function_name);
        try {
            this.state = 1354;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.AS:
                case Swift5Parser.ALPHA:
                case Swift5Parser.CATCH:
                case Swift5Parser.CLASS:
                case Swift5Parser.DEFAULT:
                case Swift5Parser.DO:
                case Swift5Parser.GUARD:
                case Swift5Parser.FOR:
                case Swift5Parser.IN:
                case Swift5Parser.INTERNAL:
                case Swift5Parser.FINAL:
                case Swift5Parser.OPEN:
                case Swift5Parser.PRIVATE:
                case Swift5Parser.PUBLIC:
                case Swift5Parser.WHERE:
                case Swift5Parser.WHILE:
                case Swift5Parser.PROTOCOL:
                case Swift5Parser.GET:
                case Swift5Parser.SET:
                case Swift5Parser.WILL_SET:
                case Swift5Parser.DID_SET:
                case Swift5Parser.INDIRECT:
                case Swift5Parser.PREFIX:
                case Swift5Parser.INFIX:
                case Swift5Parser.LEFT:
                case Swift5Parser.RIGHT:
                case Swift5Parser.NONE:
                case Swift5Parser.PRECEDENCE_GROUP:
                case Swift5Parser.HIGHER_THAN:
                case Swift5Parser.LOWER_THAN:
                case Swift5Parser.ASSIGNMENT:
                case Swift5Parser.ASSOCIATIVITY:
                case Swift5Parser.POSTFIX:
                case Swift5Parser.OPERATOR:
                case Swift5Parser.OS:
                case Swift5Parser.ARCH:
                case Swift5Parser.SWIFT:
                case Swift5Parser.COMPILER:
                case Swift5Parser.CAN_IMPORT:
                case Swift5Parser.TARGET_ENVIRONMENT:
                case Swift5Parser.CONVENIENCE:
                case Swift5Parser.DYNAMIC:
                case Swift5Parser.LAZY:
                case Swift5Parser.OPTIONAL:
                case Swift5Parser.OVERRIDE:
                case Swift5Parser.REQUIRED:
                case Swift5Parser.WEAK:
                case Swift5Parser.UNOWNED:
                case Swift5Parser.SAFE:
                case Swift5Parser.UNSAFE:
                case Swift5Parser.MUTATING:
                case Swift5Parser.NONMUTATING:
                case Swift5Parser.RED:
                case Swift5Parser.BLUE:
                case Swift5Parser.GREEN:
                case Swift5Parser.RESOURCE_NAME:
                case Swift5Parser.SOME:
                case Swift5Parser.TYPE:
                case Swift5Parser.PRECEDENCE:
                case Swift5Parser.SELF:
                case Swift5Parser.SELF_BIG:
                case Swift5Parser.MAC_OS:
                case Swift5Parser.I_OS:
                case Swift5Parser.OSX:
                case Swift5Parser.WATCH_OS:
                case Swift5Parser.TV_OS:
                case Swift5Parser.LINUX:
                case Swift5Parser.WINDOWS:
                case Swift5Parser.I386:
                case Swift5Parser.X86_64:
                case Swift5Parser.ARM:
                case Swift5Parser.ARM64:
                case Swift5Parser.SIMULATOR:
                case Swift5Parser.MAC_CATALYST:
                case Swift5Parser.I_OS_APPLICATION_EXTENSION:
                case Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION:
                case Swift5Parser.MAC_OS_APPLICATION_EXTENSION:
                case Swift5Parser.FILE:
                case Swift5Parser.LINE:
                case Swift5Parser.GETTER:
                case Swift5Parser.SETTER:
                case Swift5Parser.Identifier:
                case Swift5Parser.BACKTICK:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1352;
                    this.identifier();
                    break;
                case Swift5Parser.DOT:
                case Swift5Parser.LT:
                case Swift5Parser.GT:
                case Swift5Parser.BANG:
                case Swift5Parser.QUESTION:
                case Swift5Parser.AND:
                case Swift5Parser.SUB:
                case Swift5Parser.EQUAL:
                case Swift5Parser.OR:
                case Swift5Parser.DIV:
                case Swift5Parser.ADD:
                case Swift5Parser.MUL:
                case Swift5Parser.MOD:
                case Swift5Parser.CARET:
                case Swift5Parser.TILDE:
                case Swift5Parser.Operator_head_other:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1353;
                    this.operator();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    function_signature() {
        let localctx = new Function_signatureContext(this, this._ctx, this.state);
        this.enterRule(localctx, 218, Swift5Parser.RULE_function_signature);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1356;
            this.parameter_clause();
            this.state = 1361;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 118, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 1358;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 117, this._ctx);
                    if (la_ === 1) {
                        this.state = 1357;
                        this.match(Swift5Parser.THROWS);
                    }
                    break;
                case 2:
                    this.state = 1360;
                    this.match(Swift5Parser.RETHROWS);
                    break;
            }
            this.state = 1364;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 119, this._ctx);
            if (la_ === 1) {
                this.state = 1363;
                this.function_result();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    function_result() {
        let localctx = new Function_resultContext(this, this._ctx, this.state);
        this.enterRule(localctx, 220, Swift5Parser.RULE_function_result);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1366;
            this.arrow_operator();
            this.state = 1368;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 120, this._ctx);
            if (la_ === 1) {
                this.state = 1367;
                this.attributes();
            }
            this.state = 1370;
            this.type(0);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    function_body() {
        let localctx = new Function_bodyContext(this, this._ctx, this.state);
        this.enterRule(localctx, 222, Swift5Parser.RULE_function_body);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1372;
            this.code_block();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parameter_clause() {
        let localctx = new Parameter_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 224, Swift5Parser.RULE_parameter_clause);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1374;
            this.match(Swift5Parser.LPAREN);
            this.state = 1376;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.ALPHA) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.GET) | (1 << Swift5Parser.SET))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Swift5Parser.WILL_SET - 32)) | (1 << (Swift5Parser.DID_SET - 32)) | (1 << (Swift5Parser.INDIRECT - 32)) | (1 << (Swift5Parser.PREFIX - 32)) | (1 << (Swift5Parser.INFIX - 32)) | (1 << (Swift5Parser.LEFT - 32)) | (1 << (Swift5Parser.RIGHT - 32)) | (1 << (Swift5Parser.NONE - 32)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 32)) | (1 << (Swift5Parser.HIGHER_THAN - 32)) | (1 << (Swift5Parser.LOWER_THAN - 32)) | (1 << (Swift5Parser.ASSIGNMENT - 32)) | (1 << (Swift5Parser.ASSOCIATIVITY - 32)) | (1 << (Swift5Parser.POSTFIX - 32)) | (1 << (Swift5Parser.OPERATOR - 32)) | (1 << (Swift5Parser.OS - 32)) | (1 << (Swift5Parser.ARCH - 32)) | (1 << (Swift5Parser.SWIFT - 32)) | (1 << (Swift5Parser.COMPILER - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Swift5Parser.CAN_IMPORT - 64)) | (1 << (Swift5Parser.TARGET_ENVIRONMENT - 64)) | (1 << (Swift5Parser.CONVENIENCE - 64)) | (1 << (Swift5Parser.DYNAMIC - 64)) | (1 << (Swift5Parser.LAZY - 64)) | (1 << (Swift5Parser.OPTIONAL - 64)) | (1 << (Swift5Parser.OVERRIDE - 64)) | (1 << (Swift5Parser.REQUIRED - 64)) | (1 << (Swift5Parser.WEAK - 64)) | (1 << (Swift5Parser.UNOWNED - 64)) | (1 << (Swift5Parser.SAFE - 64)) | (1 << (Swift5Parser.UNSAFE - 64)) | (1 << (Swift5Parser.MUTATING - 64)) | (1 << (Swift5Parser.NONMUTATING - 64)) | (1 << (Swift5Parser.RED - 64)) | (1 << (Swift5Parser.BLUE - 64)) | (1 << (Swift5Parser.GREEN - 64)) | (1 << (Swift5Parser.RESOURCE_NAME - 64)) | (1 << (Swift5Parser.SOME - 64)) | (1 << (Swift5Parser.TYPE - 64)) | (1 << (Swift5Parser.PRECEDENCE - 64)) | (1 << (Swift5Parser.SELF - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (Swift5Parser.SELF_BIG - 96)) | (1 << (Swift5Parser.MAC_OS - 96)) | (1 << (Swift5Parser.I_OS - 96)) | (1 << (Swift5Parser.OSX - 96)) | (1 << (Swift5Parser.WATCH_OS - 96)) | (1 << (Swift5Parser.TV_OS - 96)) | (1 << (Swift5Parser.LINUX - 96)) | (1 << (Swift5Parser.WINDOWS - 96)) | (1 << (Swift5Parser.I386 - 96)) | (1 << (Swift5Parser.X86_64 - 96)) | (1 << (Swift5Parser.ARM - 96)) | (1 << (Swift5Parser.ARM64 - 96)) | (1 << (Swift5Parser.SIMULATOR - 96)) | (1 << (Swift5Parser.MAC_CATALYST - 96)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.FILE - 96)) | (1 << (Swift5Parser.LINE - 96)))) !== 0) || ((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (Swift5Parser.GETTER - 135)) | (1 << (Swift5Parser.SETTER - 135)) | (1 << (Swift5Parser.Identifier - 135)) | (1 << (Swift5Parser.AT - 135)) | (1 << (Swift5Parser.BACKTICK - 135)))) !== 0)) {
                this.state = 1375;
                this.parameter_list();
            }
            this.state = 1378;
            this.match(Swift5Parser.RPAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parameter_list() {
        let localctx = new Parameter_listContext(this, this._ctx, this.state);
        this.enterRule(localctx, 226, Swift5Parser.RULE_parameter_list);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1380;
            this.parameter();
            this.state = 1385;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === Swift5Parser.COMMA) {
                this.state = 1381;
                this.match(Swift5Parser.COMMA);
                this.state = 1382;
                this.parameter();
                this.state = 1387;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parameter() {
        let localctx = new ParameterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 228, Swift5Parser.RULE_parameter);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1389;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.AT) {
                this.state = 1388;
                this.attributes();
            }
            this.state = 1392;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 124, this._ctx);
            if (la_ === 1) {
                this.state = 1391;
                this.external_parameter_name();
            }
            this.state = 1394;
            this.local_parameter_name();
            this.state = 1395;
            this.type_annotation();
            this.state = 1400;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 126, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 1397;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === Swift5Parser.EQUAL) {
                        this.state = 1396;
                        this.default_argument_clause();
                    }
                    break;
                case 2:
                    this.state = 1399;
                    this.range_operator();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    external_parameter_name() {
        let localctx = new External_parameter_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 230, Swift5Parser.RULE_external_parameter_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1402;
            this.identifier();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    local_parameter_name() {
        let localctx = new Local_parameter_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 232, Swift5Parser.RULE_local_parameter_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1404;
            this.identifier();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    default_argument_clause() {
        let localctx = new Default_argument_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 234, Swift5Parser.RULE_default_argument_clause);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1406;
            this.match(Swift5Parser.EQUAL);
            this.state = 1407;
            this.expression();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    enum_declaration() {
        let localctx = new Enum_declarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 236, Swift5Parser.RULE_enum_declaration);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1410;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.AT) {
                this.state = 1409;
                this.attributes();
            }
            this.state = 1413;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC))) !== 0) || _la === Swift5Parser.FILE_PRIVATE) {
                this.state = 1412;
                this.access_level_modifier();
            }
            this.state = 1417;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 129, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 1415;
                    this.union_style_enum();
                    break;
                case 2:
                    this.state = 1416;
                    this.raw_value_style_enum();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    union_style_enum() {
        let localctx = new Union_style_enumContext(this, this._ctx, this.state);
        this.enterRule(localctx, 238, Swift5Parser.RULE_union_style_enum);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1420;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.INDIRECT) {
                this.state = 1419;
                this.match(Swift5Parser.INDIRECT);
            }
            this.state = 1422;
            this.match(Swift5Parser.ENUM);
            this.state = 1423;
            this.enum_name();
            this.state = 1425;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.LT) {
                this.state = 1424;
                this.generic_parameter_clause();
            }
            this.state = 1428;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.COLON) {
                this.state = 1427;
                this.type_inheritance_clause();
            }
            this.state = 1431;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.WHERE) {
                this.state = 1430;
                this.generic_where_clause();
            }
            this.state = 1433;
            this.match(Swift5Parser.LCURLY);
            this.state = 1435;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.CASE) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.ENUM) | (1 << Swift5Parser.FUNC) | (1 << Swift5Parser.IMPORT) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.LET) | (1 << Swift5Parser.VAR) | (1 << Swift5Parser.PROTOCOL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (Swift5Parser.STRUCT - 36)) | (1 << (Swift5Parser.INDIRECT - 36)) | (1 << (Swift5Parser.INIT - 36)) | (1 << (Swift5Parser.DEINIT - 36)) | (1 << (Swift5Parser.EXTENSION - 36)) | (1 << (Swift5Parser.SUBSCRIPT - 36)) | (1 << (Swift5Parser.PREFIX - 36)) | (1 << (Swift5Parser.INFIX - 36)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 36)) | (1 << (Swift5Parser.POSTFIX - 36)) | (1 << (Swift5Parser.TYPEALIAS - 36)) | (1 << (Swift5Parser.CONVENIENCE - 36)) | (1 << (Swift5Parser.DYNAMIC - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Swift5Parser.LAZY - 68)) | (1 << (Swift5Parser.OPTIONAL - 68)) | (1 << (Swift5Parser.OVERRIDE - 68)) | (1 << (Swift5Parser.REQUIRED - 68)) | (1 << (Swift5Parser.STATIC - 68)) | (1 << (Swift5Parser.WEAK - 68)) | (1 << (Swift5Parser.UNOWNED - 68)) | (1 << (Swift5Parser.MUTATING - 68)) | (1 << (Swift5Parser.NONMUTATING - 68)) | (1 << (Swift5Parser.FILE_PRIVATE - 68)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (Swift5Parser.SOURCE_LOCATION - 113)) | (1 << (Swift5Parser.ERROR - 113)) | (1 << (Swift5Parser.WARNING - 113)) | (1 << (Swift5Parser.HASH_IF - 113)))) !== 0) || _la === Swift5Parser.AT) {
                this.state = 1434;
                this.union_style_enum_members();
            }
            this.state = 1437;
            this.match(Swift5Parser.RCURLY);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    union_style_enum_members() {
        let localctx = new Union_style_enum_membersContext(this, this._ctx, this.state);
        this.enterRule(localctx, 240, Swift5Parser.RULE_union_style_enum_members);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1440;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1439;
                this.union_style_enum_member();
                this.state = 1442;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.CASE) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.ENUM) | (1 << Swift5Parser.FUNC) | (1 << Swift5Parser.IMPORT) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.LET) | (1 << Swift5Parser.VAR) | (1 << Swift5Parser.PROTOCOL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (Swift5Parser.STRUCT - 36)) | (1 << (Swift5Parser.INDIRECT - 36)) | (1 << (Swift5Parser.INIT - 36)) | (1 << (Swift5Parser.DEINIT - 36)) | (1 << (Swift5Parser.EXTENSION - 36)) | (1 << (Swift5Parser.SUBSCRIPT - 36)) | (1 << (Swift5Parser.PREFIX - 36)) | (1 << (Swift5Parser.INFIX - 36)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 36)) | (1 << (Swift5Parser.POSTFIX - 36)) | (1 << (Swift5Parser.TYPEALIAS - 36)) | (1 << (Swift5Parser.CONVENIENCE - 36)) | (1 << (Swift5Parser.DYNAMIC - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Swift5Parser.LAZY - 68)) | (1 << (Swift5Parser.OPTIONAL - 68)) | (1 << (Swift5Parser.OVERRIDE - 68)) | (1 << (Swift5Parser.REQUIRED - 68)) | (1 << (Swift5Parser.STATIC - 68)) | (1 << (Swift5Parser.WEAK - 68)) | (1 << (Swift5Parser.UNOWNED - 68)) | (1 << (Swift5Parser.MUTATING - 68)) | (1 << (Swift5Parser.NONMUTATING - 68)) | (1 << (Swift5Parser.FILE_PRIVATE - 68)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (Swift5Parser.SOURCE_LOCATION - 113)) | (1 << (Swift5Parser.ERROR - 113)) | (1 << (Swift5Parser.WARNING - 113)) | (1 << (Swift5Parser.HASH_IF - 113)))) !== 0) || _la === Swift5Parser.AT);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    union_style_enum_member() {
        let localctx = new Union_style_enum_memberContext(this, this._ctx, this.state);
        this.enterRule(localctx, 242, Swift5Parser.RULE_union_style_enum_member);
        try {
            this.state = 1447;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 136, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1444;
                    this.declaration();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1445;
                    this.union_style_enum_case_clause();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1446;
                    this.compiler_control_statement();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    union_style_enum_case_clause() {
        let localctx = new Union_style_enum_case_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 244, Swift5Parser.RULE_union_style_enum_case_clause);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1450;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.AT) {
                this.state = 1449;
                this.attributes();
            }
            this.state = 1453;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.INDIRECT) {
                this.state = 1452;
                this.match(Swift5Parser.INDIRECT);
            }
            this.state = 1455;
            this.match(Swift5Parser.CASE);
            this.state = 1456;
            this.union_style_enum_case_list();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    union_style_enum_case_list() {
        let localctx = new Union_style_enum_case_listContext(this, this._ctx, this.state);
        this.enterRule(localctx, 246, Swift5Parser.RULE_union_style_enum_case_list);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1458;
            this.union_style_enum_case();
            this.state = 1463;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === Swift5Parser.COMMA) {
                this.state = 1459;
                this.match(Swift5Parser.COMMA);
                this.state = 1460;
                this.union_style_enum_case();
                this.state = 1465;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    union_style_enum_case() {
        let localctx = new Union_style_enum_caseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 248, Swift5Parser.RULE_union_style_enum_case);
        try {
            this.state = 1475;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 141, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1466;
                    this.opaque_type();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1467;
                    this.enum_case_name();
                    this.state = 1473;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 140, this._ctx);
                    if (la_ === 1) {
                        this.state = 1468;
                        this.tuple_type();
                    }
                    else if (la_ === 2) {
                        this.state = 1469;
                        this.match(Swift5Parser.LPAREN);
                        this.state = 1470;
                        this.type(0);
                        this.state = 1471;
                        this.match(Swift5Parser.RPAREN);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    enum_name() {
        let localctx = new Enum_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 250, Swift5Parser.RULE_enum_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1477;
            this.identifier();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    enum_case_name() {
        let localctx = new Enum_case_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 252, Swift5Parser.RULE_enum_case_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1479;
            this.identifier();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    raw_value_style_enum() {
        let localctx = new Raw_value_style_enumContext(this, this._ctx, this.state);
        this.enterRule(localctx, 254, Swift5Parser.RULE_raw_value_style_enum);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1481;
            this.match(Swift5Parser.ENUM);
            this.state = 1482;
            this.enum_name();
            this.state = 1484;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.LT) {
                this.state = 1483;
                this.generic_parameter_clause();
            }
            this.state = 1486;
            this.type_inheritance_clause();
            this.state = 1488;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.WHERE) {
                this.state = 1487;
                this.generic_where_clause();
            }
            this.state = 1490;
            this.match(Swift5Parser.LCURLY);
            this.state = 1491;
            this.raw_value_style_enum_members();
            this.state = 1492;
            this.match(Swift5Parser.RCURLY);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    raw_value_style_enum_members() {
        let localctx = new Raw_value_style_enum_membersContext(this, this._ctx, this.state);
        this.enterRule(localctx, 256, Swift5Parser.RULE_raw_value_style_enum_members);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1495;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1494;
                this.raw_value_style_enum_member();
                this.state = 1497;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.CASE) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.ENUM) | (1 << Swift5Parser.FUNC) | (1 << Swift5Parser.IMPORT) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.LET) | (1 << Swift5Parser.VAR) | (1 << Swift5Parser.PROTOCOL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (Swift5Parser.STRUCT - 36)) | (1 << (Swift5Parser.INDIRECT - 36)) | (1 << (Swift5Parser.INIT - 36)) | (1 << (Swift5Parser.DEINIT - 36)) | (1 << (Swift5Parser.EXTENSION - 36)) | (1 << (Swift5Parser.SUBSCRIPT - 36)) | (1 << (Swift5Parser.PREFIX - 36)) | (1 << (Swift5Parser.INFIX - 36)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 36)) | (1 << (Swift5Parser.POSTFIX - 36)) | (1 << (Swift5Parser.TYPEALIAS - 36)) | (1 << (Swift5Parser.CONVENIENCE - 36)) | (1 << (Swift5Parser.DYNAMIC - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Swift5Parser.LAZY - 68)) | (1 << (Swift5Parser.OPTIONAL - 68)) | (1 << (Swift5Parser.OVERRIDE - 68)) | (1 << (Swift5Parser.REQUIRED - 68)) | (1 << (Swift5Parser.STATIC - 68)) | (1 << (Swift5Parser.WEAK - 68)) | (1 << (Swift5Parser.UNOWNED - 68)) | (1 << (Swift5Parser.MUTATING - 68)) | (1 << (Swift5Parser.NONMUTATING - 68)) | (1 << (Swift5Parser.FILE_PRIVATE - 68)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (Swift5Parser.SOURCE_LOCATION - 113)) | (1 << (Swift5Parser.ERROR - 113)) | (1 << (Swift5Parser.WARNING - 113)) | (1 << (Swift5Parser.HASH_IF - 113)))) !== 0) || _la === Swift5Parser.AT);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    raw_value_style_enum_member() {
        let localctx = new Raw_value_style_enum_memberContext(this, this._ctx, this.state);
        this.enterRule(localctx, 258, Swift5Parser.RULE_raw_value_style_enum_member);
        try {
            this.state = 1502;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 145, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1499;
                    this.declaration();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1500;
                    this.raw_value_style_enum_case_clause();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1501;
                    this.compiler_control_statement();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    raw_value_style_enum_case_clause() {
        let localctx = new Raw_value_style_enum_case_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 260, Swift5Parser.RULE_raw_value_style_enum_case_clause);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1505;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.AT) {
                this.state = 1504;
                this.attributes();
            }
            this.state = 1507;
            this.match(Swift5Parser.CASE);
            this.state = 1508;
            this.raw_value_style_enum_case_list();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    raw_value_style_enum_case_list() {
        let localctx = new Raw_value_style_enum_case_listContext(this, this._ctx, this.state);
        this.enterRule(localctx, 262, Swift5Parser.RULE_raw_value_style_enum_case_list);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1510;
            this.raw_value_style_enum_case();
            this.state = 1515;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === Swift5Parser.COMMA) {
                this.state = 1511;
                this.match(Swift5Parser.COMMA);
                this.state = 1512;
                this.raw_value_style_enum_case();
                this.state = 1517;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    raw_value_style_enum_case() {
        let localctx = new Raw_value_style_enum_caseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 264, Swift5Parser.RULE_raw_value_style_enum_case);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1518;
            this.enum_case_name();
            this.state = 1520;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.EQUAL) {
                this.state = 1519;
                this.raw_value_assignment();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    raw_value_assignment() {
        let localctx = new Raw_value_assignmentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 266, Swift5Parser.RULE_raw_value_assignment);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1522;
            this.match(Swift5Parser.EQUAL);
            this.state = 1523;
            this.raw_value_literal();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    raw_value_literal() {
        let localctx = new Raw_value_literalContext(this, this._ctx, this.state);
        this.enterRule(localctx, 268, Swift5Parser.RULE_raw_value_literal);
        try {
            this.state = 1528;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 149, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1525;
                    this.numeric_literal();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1526;
                    this.static_string_literal();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1527;
                    this.boolean_literal();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    struct_declaration() {
        let localctx = new Struct_declarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 270, Swift5Parser.RULE_struct_declaration);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1531;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.AT) {
                this.state = 1530;
                this.attributes();
            }
            this.state = 1534;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC))) !== 0) || _la === Swift5Parser.FILE_PRIVATE) {
                this.state = 1533;
                this.access_level_modifier();
            }
            this.state = 1536;
            this.match(Swift5Parser.STRUCT);
            this.state = 1537;
            this.struct_name();
            this.state = 1539;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.LT) {
                this.state = 1538;
                this.generic_parameter_clause();
            }
            this.state = 1542;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.COLON) {
                this.state = 1541;
                this.type_inheritance_clause();
            }
            this.state = 1545;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.WHERE) {
                this.state = 1544;
                this.generic_where_clause();
            }
            this.state = 1547;
            this.struct_body();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    struct_name() {
        let localctx = new Struct_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 272, Swift5Parser.RULE_struct_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1549;
            this.identifier();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    struct_body() {
        let localctx = new Struct_bodyContext(this, this._ctx, this.state);
        this.enterRule(localctx, 274, Swift5Parser.RULE_struct_body);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1551;
            this.match(Swift5Parser.LCURLY);
            this.state = 1552;
            this.struct_members();
            this.state = 1553;
            this.match(Swift5Parser.RCURLY);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    struct_members() {
        let localctx = new Struct_membersContext(this, this._ctx, this.state);
        this.enterRule(localctx, 276, Swift5Parser.RULE_struct_members);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1558;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.ENUM) | (1 << Swift5Parser.FUNC) | (1 << Swift5Parser.IMPORT) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.LET) | (1 << Swift5Parser.VAR) | (1 << Swift5Parser.PROTOCOL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (Swift5Parser.STRUCT - 36)) | (1 << (Swift5Parser.INDIRECT - 36)) | (1 << (Swift5Parser.INIT - 36)) | (1 << (Swift5Parser.DEINIT - 36)) | (1 << (Swift5Parser.EXTENSION - 36)) | (1 << (Swift5Parser.SUBSCRIPT - 36)) | (1 << (Swift5Parser.PREFIX - 36)) | (1 << (Swift5Parser.INFIX - 36)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 36)) | (1 << (Swift5Parser.POSTFIX - 36)) | (1 << (Swift5Parser.TYPEALIAS - 36)) | (1 << (Swift5Parser.CONVENIENCE - 36)) | (1 << (Swift5Parser.DYNAMIC - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Swift5Parser.LAZY - 68)) | (1 << (Swift5Parser.OPTIONAL - 68)) | (1 << (Swift5Parser.OVERRIDE - 68)) | (1 << (Swift5Parser.REQUIRED - 68)) | (1 << (Swift5Parser.STATIC - 68)) | (1 << (Swift5Parser.WEAK - 68)) | (1 << (Swift5Parser.UNOWNED - 68)) | (1 << (Swift5Parser.MUTATING - 68)) | (1 << (Swift5Parser.NONMUTATING - 68)) | (1 << (Swift5Parser.FILE_PRIVATE - 68)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (Swift5Parser.SOURCE_LOCATION - 113)) | (1 << (Swift5Parser.ERROR - 113)) | (1 << (Swift5Parser.WARNING - 113)) | (1 << (Swift5Parser.HASH_IF - 113)))) !== 0) || _la === Swift5Parser.AT) {
                this.state = 1555;
                this.struct_member();
                this.state = 1560;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    struct_member() {
        let localctx = new Struct_memberContext(this, this._ctx, this.state);
        this.enterRule(localctx, 278, Swift5Parser.RULE_struct_member);
        try {
            this.state = 1563;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.CLASS:
                case Swift5Parser.ENUM:
                case Swift5Parser.FUNC:
                case Swift5Parser.IMPORT:
                case Swift5Parser.INTERNAL:
                case Swift5Parser.FINAL:
                case Swift5Parser.OPEN:
                case Swift5Parser.PRIVATE:
                case Swift5Parser.PUBLIC:
                case Swift5Parser.LET:
                case Swift5Parser.VAR:
                case Swift5Parser.PROTOCOL:
                case Swift5Parser.STRUCT:
                case Swift5Parser.INDIRECT:
                case Swift5Parser.INIT:
                case Swift5Parser.DEINIT:
                case Swift5Parser.EXTENSION:
                case Swift5Parser.SUBSCRIPT:
                case Swift5Parser.PREFIX:
                case Swift5Parser.INFIX:
                case Swift5Parser.PRECEDENCE_GROUP:
                case Swift5Parser.POSTFIX:
                case Swift5Parser.TYPEALIAS:
                case Swift5Parser.CONVENIENCE:
                case Swift5Parser.DYNAMIC:
                case Swift5Parser.LAZY:
                case Swift5Parser.OPTIONAL:
                case Swift5Parser.OVERRIDE:
                case Swift5Parser.REQUIRED:
                case Swift5Parser.STATIC:
                case Swift5Parser.WEAK:
                case Swift5Parser.UNOWNED:
                case Swift5Parser.MUTATING:
                case Swift5Parser.NONMUTATING:
                case Swift5Parser.FILE_PRIVATE:
                case Swift5Parser.AT:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1561;
                    this.declaration();
                    break;
                case Swift5Parser.SOURCE_LOCATION:
                case Swift5Parser.ERROR:
                case Swift5Parser.WARNING:
                case Swift5Parser.HASH_IF:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1562;
                    this.compiler_control_statement();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    class_declaration() {
        let localctx = new Class_declarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 280, Swift5Parser.RULE_class_declaration);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1566;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.AT) {
                this.state = 1565;
                this.attributes();
            }
            this.state = 1578;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 161, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 1569;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC))) !== 0) || _la === Swift5Parser.FILE_PRIVATE) {
                        this.state = 1568;
                        this.access_level_modifier();
                    }
                    this.state = 1572;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === Swift5Parser.FINAL) {
                        this.state = 1571;
                        this.match(Swift5Parser.FINAL);
                    }
                    break;
                case 2:
                    this.state = 1574;
                    this.match(Swift5Parser.FINAL);
                    this.state = 1576;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC))) !== 0) || _la === Swift5Parser.FILE_PRIVATE) {
                        this.state = 1575;
                        this.access_level_modifier();
                    }
                    break;
            }
            this.state = 1580;
            this.match(Swift5Parser.CLASS);
            this.state = 1581;
            this.class_name();
            this.state = 1583;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.LT) {
                this.state = 1582;
                this.generic_parameter_clause();
            }
            this.state = 1586;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.COLON) {
                this.state = 1585;
                this.type_inheritance_clause();
            }
            this.state = 1589;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.WHERE) {
                this.state = 1588;
                this.generic_where_clause();
            }
            this.state = 1591;
            this.class_body();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    class_name() {
        let localctx = new Class_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 282, Swift5Parser.RULE_class_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1593;
            this.identifier();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    class_body() {
        let localctx = new Class_bodyContext(this, this._ctx, this.state);
        this.enterRule(localctx, 284, Swift5Parser.RULE_class_body);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1595;
            this.match(Swift5Parser.LCURLY);
            this.state = 1596;
            this.class_members();
            this.state = 1597;
            this.match(Swift5Parser.RCURLY);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    class_members() {
        let localctx = new Class_membersContext(this, this._ctx, this.state);
        this.enterRule(localctx, 286, Swift5Parser.RULE_class_members);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1602;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.ENUM) | (1 << Swift5Parser.FUNC) | (1 << Swift5Parser.IMPORT) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.LET) | (1 << Swift5Parser.VAR) | (1 << Swift5Parser.PROTOCOL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (Swift5Parser.STRUCT - 36)) | (1 << (Swift5Parser.INDIRECT - 36)) | (1 << (Swift5Parser.INIT - 36)) | (1 << (Swift5Parser.DEINIT - 36)) | (1 << (Swift5Parser.EXTENSION - 36)) | (1 << (Swift5Parser.SUBSCRIPT - 36)) | (1 << (Swift5Parser.PREFIX - 36)) | (1 << (Swift5Parser.INFIX - 36)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 36)) | (1 << (Swift5Parser.POSTFIX - 36)) | (1 << (Swift5Parser.TYPEALIAS - 36)) | (1 << (Swift5Parser.CONVENIENCE - 36)) | (1 << (Swift5Parser.DYNAMIC - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Swift5Parser.LAZY - 68)) | (1 << (Swift5Parser.OPTIONAL - 68)) | (1 << (Swift5Parser.OVERRIDE - 68)) | (1 << (Swift5Parser.REQUIRED - 68)) | (1 << (Swift5Parser.STATIC - 68)) | (1 << (Swift5Parser.WEAK - 68)) | (1 << (Swift5Parser.UNOWNED - 68)) | (1 << (Swift5Parser.MUTATING - 68)) | (1 << (Swift5Parser.NONMUTATING - 68)) | (1 << (Swift5Parser.FILE_PRIVATE - 68)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (Swift5Parser.SOURCE_LOCATION - 113)) | (1 << (Swift5Parser.ERROR - 113)) | (1 << (Swift5Parser.WARNING - 113)) | (1 << (Swift5Parser.HASH_IF - 113)))) !== 0) || _la === Swift5Parser.AT) {
                this.state = 1599;
                this.class_member();
                this.state = 1604;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    class_member() {
        let localctx = new Class_memberContext(this, this._ctx, this.state);
        this.enterRule(localctx, 288, Swift5Parser.RULE_class_member);
        try {
            this.state = 1607;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.CLASS:
                case Swift5Parser.ENUM:
                case Swift5Parser.FUNC:
                case Swift5Parser.IMPORT:
                case Swift5Parser.INTERNAL:
                case Swift5Parser.FINAL:
                case Swift5Parser.OPEN:
                case Swift5Parser.PRIVATE:
                case Swift5Parser.PUBLIC:
                case Swift5Parser.LET:
                case Swift5Parser.VAR:
                case Swift5Parser.PROTOCOL:
                case Swift5Parser.STRUCT:
                case Swift5Parser.INDIRECT:
                case Swift5Parser.INIT:
                case Swift5Parser.DEINIT:
                case Swift5Parser.EXTENSION:
                case Swift5Parser.SUBSCRIPT:
                case Swift5Parser.PREFIX:
                case Swift5Parser.INFIX:
                case Swift5Parser.PRECEDENCE_GROUP:
                case Swift5Parser.POSTFIX:
                case Swift5Parser.TYPEALIAS:
                case Swift5Parser.CONVENIENCE:
                case Swift5Parser.DYNAMIC:
                case Swift5Parser.LAZY:
                case Swift5Parser.OPTIONAL:
                case Swift5Parser.OVERRIDE:
                case Swift5Parser.REQUIRED:
                case Swift5Parser.STATIC:
                case Swift5Parser.WEAK:
                case Swift5Parser.UNOWNED:
                case Swift5Parser.MUTATING:
                case Swift5Parser.NONMUTATING:
                case Swift5Parser.FILE_PRIVATE:
                case Swift5Parser.AT:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1605;
                    this.declaration();
                    break;
                case Swift5Parser.SOURCE_LOCATION:
                case Swift5Parser.ERROR:
                case Swift5Parser.WARNING:
                case Swift5Parser.HASH_IF:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1606;
                    this.compiler_control_statement();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    protocol_declaration() {
        let localctx = new Protocol_declarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 290, Swift5Parser.RULE_protocol_declaration);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1610;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.AT) {
                this.state = 1609;
                this.attributes();
            }
            this.state = 1613;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC))) !== 0) || _la === Swift5Parser.FILE_PRIVATE) {
                this.state = 1612;
                this.access_level_modifier();
            }
            this.state = 1615;
            this.match(Swift5Parser.PROTOCOL);
            this.state = 1616;
            this.protocol_name();
            this.state = 1620;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 169, this._ctx);
            if (la_ === 1) {
                this.state = 1617;
                this.match(Swift5Parser.COLON);
                this.state = 1618;
                this.match(Swift5Parser.CLASS);
            }
            else if (la_ === 2) {
                this.state = 1619;
                this.type_inheritance_clause();
            }
            this.state = 1623;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.WHERE) {
                this.state = 1622;
                this.generic_where_clause();
            }
            this.state = 1625;
            this.protocol_body();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    protocol_name() {
        let localctx = new Protocol_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 292, Swift5Parser.RULE_protocol_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1627;
            this.identifier();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    protocol_body() {
        let localctx = new Protocol_bodyContext(this, this._ctx, this.state);
        this.enterRule(localctx, 294, Swift5Parser.RULE_protocol_body);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1629;
            this.match(Swift5Parser.LCURLY);
            this.state = 1630;
            this.protocol_members();
            this.state = 1631;
            this.match(Swift5Parser.RCURLY);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    protocol_members() {
        let localctx = new Protocol_membersContext(this, this._ctx, this.state);
        this.enterRule(localctx, 296, Swift5Parser.RULE_protocol_members);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1636;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.FUNC) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.VAR))) !== 0) || ((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (Swift5Parser.INIT - 42)) | (1 << (Swift5Parser.ASSOCIATED_TYPE - 42)) | (1 << (Swift5Parser.SUBSCRIPT - 42)) | (1 << (Swift5Parser.PREFIX - 42)) | (1 << (Swift5Parser.INFIX - 42)) | (1 << (Swift5Parser.POSTFIX - 42)) | (1 << (Swift5Parser.TYPEALIAS - 42)) | (1 << (Swift5Parser.CONVENIENCE - 42)) | (1 << (Swift5Parser.DYNAMIC - 42)) | (1 << (Swift5Parser.LAZY - 42)) | (1 << (Swift5Parser.OPTIONAL - 42)) | (1 << (Swift5Parser.OVERRIDE - 42)) | (1 << (Swift5Parser.REQUIRED - 42)) | (1 << (Swift5Parser.STATIC - 42)) | (1 << (Swift5Parser.WEAK - 42)))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (Swift5Parser.UNOWNED - 74)) | (1 << (Swift5Parser.MUTATING - 74)) | (1 << (Swift5Parser.NONMUTATING - 74)) | (1 << (Swift5Parser.FILE_PRIVATE - 74)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (Swift5Parser.SOURCE_LOCATION - 113)) | (1 << (Swift5Parser.ERROR - 113)) | (1 << (Swift5Parser.WARNING - 113)) | (1 << (Swift5Parser.HASH_IF - 113)))) !== 0) || _la === Swift5Parser.AT) {
                this.state = 1633;
                this.protocol_member();
                this.state = 1638;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    protocol_member() {
        let localctx = new Protocol_memberContext(this, this._ctx, this.state);
        this.enterRule(localctx, 298, Swift5Parser.RULE_protocol_member);
        try {
            this.state = 1641;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.CLASS:
                case Swift5Parser.FUNC:
                case Swift5Parser.INTERNAL:
                case Swift5Parser.FINAL:
                case Swift5Parser.OPEN:
                case Swift5Parser.PRIVATE:
                case Swift5Parser.PUBLIC:
                case Swift5Parser.VAR:
                case Swift5Parser.INIT:
                case Swift5Parser.ASSOCIATED_TYPE:
                case Swift5Parser.SUBSCRIPT:
                case Swift5Parser.PREFIX:
                case Swift5Parser.INFIX:
                case Swift5Parser.POSTFIX:
                case Swift5Parser.TYPEALIAS:
                case Swift5Parser.CONVENIENCE:
                case Swift5Parser.DYNAMIC:
                case Swift5Parser.LAZY:
                case Swift5Parser.OPTIONAL:
                case Swift5Parser.OVERRIDE:
                case Swift5Parser.REQUIRED:
                case Swift5Parser.STATIC:
                case Swift5Parser.WEAK:
                case Swift5Parser.UNOWNED:
                case Swift5Parser.MUTATING:
                case Swift5Parser.NONMUTATING:
                case Swift5Parser.FILE_PRIVATE:
                case Swift5Parser.AT:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1639;
                    this.protocol_member_declaration();
                    break;
                case Swift5Parser.SOURCE_LOCATION:
                case Swift5Parser.ERROR:
                case Swift5Parser.WARNING:
                case Swift5Parser.HASH_IF:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1640;
                    this.compiler_control_statement();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    protocol_member_declaration() {
        let localctx = new Protocol_member_declarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 300, Swift5Parser.RULE_protocol_member_declaration);
        try {
            this.state = 1649;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 173, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1643;
                    this.protocol_property_declaration();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1644;
                    this.protocol_method_declaration();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1645;
                    this.protocol_initializer_declaration();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 1646;
                    this.protocol_subscript_declaration();
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 1647;
                    this.protocol_associated_type_declaration();
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 1648;
                    this.typealias_declaration();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    protocol_property_declaration() {
        let localctx = new Protocol_property_declarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 302, Swift5Parser.RULE_protocol_property_declaration);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1651;
            this.variable_declaration_head();
            this.state = 1652;
            this.variable_name();
            this.state = 1653;
            this.type_annotation();
            this.state = 1654;
            this.getter_setter_keyword_block();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    protocol_method_declaration() {
        let localctx = new Protocol_method_declarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 304, Swift5Parser.RULE_protocol_method_declaration);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1656;
            this.function_head();
            this.state = 1657;
            this.function_name();
            this.state = 1659;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.LT) {
                this.state = 1658;
                this.generic_parameter_clause();
            }
            this.state = 1661;
            this.function_signature();
            this.state = 1663;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.WHERE) {
                this.state = 1662;
                this.generic_where_clause();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    protocol_initializer_declaration() {
        let localctx = new Protocol_initializer_declarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 306, Swift5Parser.RULE_protocol_initializer_declaration);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1665;
            this.initializer_head();
            this.state = 1667;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.LT) {
                this.state = 1666;
                this.generic_parameter_clause();
            }
            this.state = 1669;
            this.parameter_clause();
            this.state = 1674;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.CLASS:
                case Swift5Parser.FUNC:
                case Swift5Parser.INTERNAL:
                case Swift5Parser.FINAL:
                case Swift5Parser.OPEN:
                case Swift5Parser.PRIVATE:
                case Swift5Parser.PUBLIC:
                case Swift5Parser.WHERE:
                case Swift5Parser.VAR:
                case Swift5Parser.THROWS:
                case Swift5Parser.INIT:
                case Swift5Parser.ASSOCIATED_TYPE:
                case Swift5Parser.SUBSCRIPT:
                case Swift5Parser.PREFIX:
                case Swift5Parser.INFIX:
                case Swift5Parser.POSTFIX:
                case Swift5Parser.TYPEALIAS:
                case Swift5Parser.CONVENIENCE:
                case Swift5Parser.DYNAMIC:
                case Swift5Parser.LAZY:
                case Swift5Parser.OPTIONAL:
                case Swift5Parser.OVERRIDE:
                case Swift5Parser.REQUIRED:
                case Swift5Parser.STATIC:
                case Swift5Parser.WEAK:
                case Swift5Parser.UNOWNED:
                case Swift5Parser.MUTATING:
                case Swift5Parser.NONMUTATING:
                case Swift5Parser.FILE_PRIVATE:
                case Swift5Parser.SOURCE_LOCATION:
                case Swift5Parser.ERROR:
                case Swift5Parser.WARNING:
                case Swift5Parser.HASH_IF:
                case Swift5Parser.RCURLY:
                case Swift5Parser.AT:
                    this.state = 1671;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === Swift5Parser.THROWS) {
                        this.state = 1670;
                        this.match(Swift5Parser.THROWS);
                    }
                    break;
                case Swift5Parser.RETHROWS:
                    this.state = 1673;
                    this.match(Swift5Parser.RETHROWS);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this.state = 1677;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.WHERE) {
                this.state = 1676;
                this.generic_where_clause();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    protocol_subscript_declaration() {
        let localctx = new Protocol_subscript_declarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 308, Swift5Parser.RULE_protocol_subscript_declaration);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1679;
            this.subscript_head();
            this.state = 1680;
            this.subscript_result();
            this.state = 1682;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.WHERE) {
                this.state = 1681;
                this.generic_where_clause();
            }
            this.state = 1684;
            this.getter_setter_keyword_block();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    protocol_associated_type_declaration() {
        let localctx = new Protocol_associated_type_declarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 310, Swift5Parser.RULE_protocol_associated_type_declaration);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1687;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.AT) {
                this.state = 1686;
                this.attributes();
            }
            this.state = 1690;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC))) !== 0) || _la === Swift5Parser.FILE_PRIVATE) {
                this.state = 1689;
                this.access_level_modifier();
            }
            this.state = 1692;
            this.match(Swift5Parser.ASSOCIATED_TYPE);
            this.state = 1693;
            this.typealias_name();
            this.state = 1695;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.COLON) {
                this.state = 1694;
                this.type_inheritance_clause();
            }
            this.state = 1698;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.EQUAL) {
                this.state = 1697;
                this.typealias_assignment();
            }
            this.state = 1701;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.WHERE) {
                this.state = 1700;
                this.generic_where_clause();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    initializer_declaration() {
        let localctx = new Initializer_declarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 312, Swift5Parser.RULE_initializer_declaration);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1703;
            this.initializer_head();
            this.state = 1705;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.LT) {
                this.state = 1704;
                this.generic_parameter_clause();
            }
            this.state = 1707;
            this.parameter_clause();
            this.state = 1709;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.THROWS || _la === Swift5Parser.RETHROWS) {
                this.state = 1708;
                _la = this._input.LA(1);
                if (!(_la === Swift5Parser.THROWS || _la === Swift5Parser.RETHROWS)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
            this.state = 1712;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.WHERE) {
                this.state = 1711;
                this.generic_where_clause();
            }
            this.state = 1714;
            this.initializer_body();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    initializer_head() {
        let localctx = new Initializer_headContext(this, this._ctx, this.state);
        this.enterRule(localctx, 314, Swift5Parser.RULE_initializer_head);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1717;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.AT) {
                this.state = 1716;
                this.attributes();
            }
            this.state = 1720;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC))) !== 0) || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (Swift5Parser.PREFIX - 47)) | (1 << (Swift5Parser.INFIX - 47)) | (1 << (Swift5Parser.POSTFIX - 47)) | (1 << (Swift5Parser.CONVENIENCE - 47)) | (1 << (Swift5Parser.DYNAMIC - 47)) | (1 << (Swift5Parser.LAZY - 47)) | (1 << (Swift5Parser.OPTIONAL - 47)) | (1 << (Swift5Parser.OVERRIDE - 47)) | (1 << (Swift5Parser.REQUIRED - 47)) | (1 << (Swift5Parser.STATIC - 47)) | (1 << (Swift5Parser.WEAK - 47)) | (1 << (Swift5Parser.UNOWNED - 47)) | (1 << (Swift5Parser.MUTATING - 47)) | (1 << (Swift5Parser.NONMUTATING - 47)))) !== 0) || _la === Swift5Parser.FILE_PRIVATE) {
                this.state = 1719;
                this.declaration_modifiers();
            }
            this.state = 1722;
            this.match(Swift5Parser.INIT);
            this.state = 1724;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.BANG || _la === Swift5Parser.QUESTION) {
                this.state = 1723;
                _la = this._input.LA(1);
                if (!(_la === Swift5Parser.BANG || _la === Swift5Parser.QUESTION)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    initializer_body() {
        let localctx = new Initializer_bodyContext(this, this._ctx, this.state);
        this.enterRule(localctx, 316, Swift5Parser.RULE_initializer_body);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1726;
            this.code_block();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    deinitializer_declaration() {
        let localctx = new Deinitializer_declarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 318, Swift5Parser.RULE_deinitializer_declaration);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1729;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.AT) {
                this.state = 1728;
                this.attributes();
            }
            this.state = 1731;
            this.match(Swift5Parser.DEINIT);
            this.state = 1732;
            this.code_block();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extension_declaration() {
        let localctx = new Extension_declarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 320, Swift5Parser.RULE_extension_declaration);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1735;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.AT) {
                this.state = 1734;
                this.attributes();
            }
            this.state = 1738;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC))) !== 0) || _la === Swift5Parser.FILE_PRIVATE) {
                this.state = 1737;
                this.access_level_modifier();
            }
            this.state = 1740;
            this.match(Swift5Parser.EXTENSION);
            this.state = 1741;
            this.type_identifier();
            this.state = 1743;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.COLON) {
                this.state = 1742;
                this.type_inheritance_clause();
            }
            this.state = 1746;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.WHERE) {
                this.state = 1745;
                this.generic_where_clause();
            }
            this.state = 1748;
            this.extension_body();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extension_body() {
        let localctx = new Extension_bodyContext(this, this._ctx, this.state);
        this.enterRule(localctx, 322, Swift5Parser.RULE_extension_body);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1750;
            this.match(Swift5Parser.LCURLY);
            this.state = 1751;
            this.extension_members();
            this.state = 1752;
            this.match(Swift5Parser.RCURLY);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extension_members() {
        let localctx = new Extension_membersContext(this, this._ctx, this.state);
        this.enterRule(localctx, 324, Swift5Parser.RULE_extension_members);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1757;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.ENUM) | (1 << Swift5Parser.FUNC) | (1 << Swift5Parser.IMPORT) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.LET) | (1 << Swift5Parser.VAR) | (1 << Swift5Parser.PROTOCOL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (Swift5Parser.STRUCT - 36)) | (1 << (Swift5Parser.INDIRECT - 36)) | (1 << (Swift5Parser.INIT - 36)) | (1 << (Swift5Parser.DEINIT - 36)) | (1 << (Swift5Parser.EXTENSION - 36)) | (1 << (Swift5Parser.SUBSCRIPT - 36)) | (1 << (Swift5Parser.PREFIX - 36)) | (1 << (Swift5Parser.INFIX - 36)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 36)) | (1 << (Swift5Parser.POSTFIX - 36)) | (1 << (Swift5Parser.TYPEALIAS - 36)) | (1 << (Swift5Parser.CONVENIENCE - 36)) | (1 << (Swift5Parser.DYNAMIC - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Swift5Parser.LAZY - 68)) | (1 << (Swift5Parser.OPTIONAL - 68)) | (1 << (Swift5Parser.OVERRIDE - 68)) | (1 << (Swift5Parser.REQUIRED - 68)) | (1 << (Swift5Parser.STATIC - 68)) | (1 << (Swift5Parser.WEAK - 68)) | (1 << (Swift5Parser.UNOWNED - 68)) | (1 << (Swift5Parser.MUTATING - 68)) | (1 << (Swift5Parser.NONMUTATING - 68)) | (1 << (Swift5Parser.FILE_PRIVATE - 68)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (Swift5Parser.SOURCE_LOCATION - 113)) | (1 << (Swift5Parser.ERROR - 113)) | (1 << (Swift5Parser.WARNING - 113)) | (1 << (Swift5Parser.HASH_IF - 113)))) !== 0) || _la === Swift5Parser.AT) {
                this.state = 1754;
                this.extension_member();
                this.state = 1759;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extension_member() {
        let localctx = new Extension_memberContext(this, this._ctx, this.state);
        this.enterRule(localctx, 326, Swift5Parser.RULE_extension_member);
        try {
            this.state = 1762;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.CLASS:
                case Swift5Parser.ENUM:
                case Swift5Parser.FUNC:
                case Swift5Parser.IMPORT:
                case Swift5Parser.INTERNAL:
                case Swift5Parser.FINAL:
                case Swift5Parser.OPEN:
                case Swift5Parser.PRIVATE:
                case Swift5Parser.PUBLIC:
                case Swift5Parser.LET:
                case Swift5Parser.VAR:
                case Swift5Parser.PROTOCOL:
                case Swift5Parser.STRUCT:
                case Swift5Parser.INDIRECT:
                case Swift5Parser.INIT:
                case Swift5Parser.DEINIT:
                case Swift5Parser.EXTENSION:
                case Swift5Parser.SUBSCRIPT:
                case Swift5Parser.PREFIX:
                case Swift5Parser.INFIX:
                case Swift5Parser.PRECEDENCE_GROUP:
                case Swift5Parser.POSTFIX:
                case Swift5Parser.TYPEALIAS:
                case Swift5Parser.CONVENIENCE:
                case Swift5Parser.DYNAMIC:
                case Swift5Parser.LAZY:
                case Swift5Parser.OPTIONAL:
                case Swift5Parser.OVERRIDE:
                case Swift5Parser.REQUIRED:
                case Swift5Parser.STATIC:
                case Swift5Parser.WEAK:
                case Swift5Parser.UNOWNED:
                case Swift5Parser.MUTATING:
                case Swift5Parser.NONMUTATING:
                case Swift5Parser.FILE_PRIVATE:
                case Swift5Parser.AT:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1760;
                    this.declaration();
                    break;
                case Swift5Parser.SOURCE_LOCATION:
                case Swift5Parser.ERROR:
                case Swift5Parser.WARNING:
                case Swift5Parser.HASH_IF:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1761;
                    this.compiler_control_statement();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    subscript_declaration() {
        let localctx = new Subscript_declarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 328, Swift5Parser.RULE_subscript_declaration);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1764;
            this.subscript_head();
            this.state = 1765;
            this.subscript_result();
            this.state = 1767;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.WHERE) {
                this.state = 1766;
                this.generic_where_clause();
            }
            this.state = 1772;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 200, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 1769;
                    this.code_block();
                    break;
                case 2:
                    this.state = 1770;
                    this.getter_setter_block();
                    break;
                case 3:
                    this.state = 1771;
                    this.getter_setter_keyword_block();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    subscript_head() {
        let localctx = new Subscript_headContext(this, this._ctx, this.state);
        this.enterRule(localctx, 330, Swift5Parser.RULE_subscript_head);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1775;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.AT) {
                this.state = 1774;
                this.attributes();
            }
            this.state = 1778;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC))) !== 0) || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (Swift5Parser.PREFIX - 47)) | (1 << (Swift5Parser.INFIX - 47)) | (1 << (Swift5Parser.POSTFIX - 47)) | (1 << (Swift5Parser.CONVENIENCE - 47)) | (1 << (Swift5Parser.DYNAMIC - 47)) | (1 << (Swift5Parser.LAZY - 47)) | (1 << (Swift5Parser.OPTIONAL - 47)) | (1 << (Swift5Parser.OVERRIDE - 47)) | (1 << (Swift5Parser.REQUIRED - 47)) | (1 << (Swift5Parser.STATIC - 47)) | (1 << (Swift5Parser.WEAK - 47)) | (1 << (Swift5Parser.UNOWNED - 47)) | (1 << (Swift5Parser.MUTATING - 47)) | (1 << (Swift5Parser.NONMUTATING - 47)))) !== 0) || _la === Swift5Parser.FILE_PRIVATE) {
                this.state = 1777;
                this.declaration_modifiers();
            }
            this.state = 1780;
            this.match(Swift5Parser.SUBSCRIPT);
            this.state = 1782;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.LT) {
                this.state = 1781;
                this.generic_parameter_clause();
            }
            this.state = 1784;
            this.parameter_clause();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    subscript_result() {
        let localctx = new Subscript_resultContext(this, this._ctx, this.state);
        this.enterRule(localctx, 332, Swift5Parser.RULE_subscript_result);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1786;
            this.arrow_operator();
            this.state = 1788;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 204, this._ctx);
            if (la_ === 1) {
                this.state = 1787;
                this.attributes();
            }
            this.state = 1790;
            this.type(0);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    operator_declaration() {
        let localctx = new Operator_declarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 334, Swift5Parser.RULE_operator_declaration);
        try {
            this.state = 1795;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.PREFIX:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1792;
                    this.prefix_operator_declaration();
                    break;
                case Swift5Parser.POSTFIX:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1793;
                    this.postfix_operator_declaration();
                    break;
                case Swift5Parser.INFIX:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1794;
                    this.infix_operator_declaration();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    prefix_operator_declaration() {
        let localctx = new Prefix_operator_declarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 336, Swift5Parser.RULE_prefix_operator_declaration);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1797;
            this.match(Swift5Parser.PREFIX);
            this.state = 1798;
            this.match(Swift5Parser.OPERATOR);
            this.state = 1799;
            this.operator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    postfix_operator_declaration() {
        let localctx = new Postfix_operator_declarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 338, Swift5Parser.RULE_postfix_operator_declaration);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1801;
            this.match(Swift5Parser.POSTFIX);
            this.state = 1802;
            this.match(Swift5Parser.OPERATOR);
            this.state = 1803;
            this.operator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    infix_operator_declaration() {
        let localctx = new Infix_operator_declarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 340, Swift5Parser.RULE_infix_operator_declaration);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1805;
            this.match(Swift5Parser.INFIX);
            this.state = 1806;
            this.match(Swift5Parser.OPERATOR);
            this.state = 1807;
            this.operator();
            this.state = 1809;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 206, this._ctx);
            if (la_ === 1) {
                this.state = 1808;
                this.infix_operator_group();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    infix_operator_group() {
        let localctx = new Infix_operator_groupContext(this, this._ctx, this.state);
        this.enterRule(localctx, 342, Swift5Parser.RULE_infix_operator_group);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1811;
            this.match(Swift5Parser.COLON);
            this.state = 1812;
            this.precedence_group_name();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    precedence_group_declaration() {
        let localctx = new Precedence_group_declarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 344, Swift5Parser.RULE_precedence_group_declaration);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1814;
            this.match(Swift5Parser.PRECEDENCE_GROUP);
            this.state = 1815;
            this.precedence_group_name();
            this.state = 1816;
            this.match(Swift5Parser.LCURLY);
            this.state = 1818;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (Swift5Parser.HIGHER_THAN - 53)) | (1 << (Swift5Parser.LOWER_THAN - 53)) | (1 << (Swift5Parser.ASSIGNMENT - 53)) | (1 << (Swift5Parser.ASSOCIATIVITY - 53)))) !== 0)) {
                this.state = 1817;
                this.precedence_group_attributes();
            }
            this.state = 1820;
            this.match(Swift5Parser.RCURLY);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    precedence_group_attributes() {
        let localctx = new Precedence_group_attributesContext(this, this._ctx, this.state);
        this.enterRule(localctx, 346, Swift5Parser.RULE_precedence_group_attributes);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1823;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1822;
                this.precedence_group_attribute();
                this.state = 1825;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (Swift5Parser.HIGHER_THAN - 53)) | (1 << (Swift5Parser.LOWER_THAN - 53)) | (1 << (Swift5Parser.ASSIGNMENT - 53)) | (1 << (Swift5Parser.ASSOCIATIVITY - 53)))) !== 0));
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    precedence_group_attribute() {
        let localctx = new Precedence_group_attributeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 348, Swift5Parser.RULE_precedence_group_attribute);
        try {
            this.state = 1830;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.HIGHER_THAN:
                case Swift5Parser.LOWER_THAN:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1827;
                    this.precedence_group_relation();
                    break;
                case Swift5Parser.ASSIGNMENT:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1828;
                    this.precedence_group_assignment();
                    break;
                case Swift5Parser.ASSOCIATIVITY:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1829;
                    this.precedence_group_associativity();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    precedence_group_relation() {
        let localctx = new Precedence_group_relationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 350, Swift5Parser.RULE_precedence_group_relation);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1832;
            _la = this._input.LA(1);
            if (!(_la === Swift5Parser.HIGHER_THAN || _la === Swift5Parser.LOWER_THAN)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1833;
            this.match(Swift5Parser.COLON);
            this.state = 1834;
            this.precedence_group_names();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    precedence_group_assignment() {
        let localctx = new Precedence_group_assignmentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 352, Swift5Parser.RULE_precedence_group_assignment);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1836;
            this.match(Swift5Parser.ASSIGNMENT);
            this.state = 1837;
            this.match(Swift5Parser.COLON);
            this.state = 1838;
            this.boolean_literal();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    precedence_group_associativity() {
        let localctx = new Precedence_group_associativityContext(this, this._ctx, this.state);
        this.enterRule(localctx, 354, Swift5Parser.RULE_precedence_group_associativity);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1840;
            this.match(Swift5Parser.ASSOCIATIVITY);
            this.state = 1841;
            this.match(Swift5Parser.COLON);
            this.state = 1842;
            _la = this._input.LA(1);
            if (!(((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (Swift5Parser.LEFT - 49)) | (1 << (Swift5Parser.RIGHT - 49)) | (1 << (Swift5Parser.NONE - 49)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    precedence_group_names() {
        let localctx = new Precedence_group_namesContext(this, this._ctx, this.state);
        this.enterRule(localctx, 356, Swift5Parser.RULE_precedence_group_names);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1844;
            this.precedence_group_name();
            this.state = 1849;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === Swift5Parser.COMMA) {
                this.state = 1845;
                this.match(Swift5Parser.COMMA);
                this.state = 1846;
                this.precedence_group_name();
                this.state = 1851;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    precedence_group_name() {
        let localctx = new Precedence_group_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 358, Swift5Parser.RULE_precedence_group_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1852;
            this.identifier();
            this.state = 1857;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 211, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1853;
                    this.match(Swift5Parser.DOT);
                    this.state = 1854;
                    this.identifier();
                }
                this.state = 1859;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 211, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    declaration_modifier() {
        let localctx = new Declaration_modifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 360, Swift5Parser.RULE_declaration_modifier);
        var _la = 0; // Token type
        try {
            this.state = 1881;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.CLASS:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1860;
                    this.match(Swift5Parser.CLASS);
                    break;
                case Swift5Parser.CONVENIENCE:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1861;
                    this.match(Swift5Parser.CONVENIENCE);
                    break;
                case Swift5Parser.DYNAMIC:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1862;
                    this.match(Swift5Parser.DYNAMIC);
                    break;
                case Swift5Parser.FINAL:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 1863;
                    this.match(Swift5Parser.FINAL);
                    break;
                case Swift5Parser.INFIX:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 1864;
                    this.match(Swift5Parser.INFIX);
                    break;
                case Swift5Parser.LAZY:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 1865;
                    this.match(Swift5Parser.LAZY);
                    break;
                case Swift5Parser.OPTIONAL:
                    this.enterOuterAlt(localctx, 7);
                    this.state = 1866;
                    this.match(Swift5Parser.OPTIONAL);
                    break;
                case Swift5Parser.OVERRIDE:
                    this.enterOuterAlt(localctx, 8);
                    this.state = 1867;
                    this.match(Swift5Parser.OVERRIDE);
                    break;
                case Swift5Parser.POSTFIX:
                    this.enterOuterAlt(localctx, 9);
                    this.state = 1868;
                    this.match(Swift5Parser.POSTFIX);
                    break;
                case Swift5Parser.PREFIX:
                    this.enterOuterAlt(localctx, 10);
                    this.state = 1869;
                    this.match(Swift5Parser.PREFIX);
                    break;
                case Swift5Parser.REQUIRED:
                    this.enterOuterAlt(localctx, 11);
                    this.state = 1870;
                    this.match(Swift5Parser.REQUIRED);
                    break;
                case Swift5Parser.STATIC:
                    this.enterOuterAlt(localctx, 12);
                    this.state = 1871;
                    this.match(Swift5Parser.STATIC);
                    break;
                case Swift5Parser.UNOWNED:
                    this.enterOuterAlt(localctx, 13);
                    this.state = 1872;
                    this.match(Swift5Parser.UNOWNED);
                    this.state = 1876;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === Swift5Parser.LPAREN) {
                        this.state = 1873;
                        this.match(Swift5Parser.LPAREN);
                        this.state = 1874;
                        _la = this._input.LA(1);
                        if (!(_la === Swift5Parser.SAFE || _la === Swift5Parser.UNSAFE)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 1875;
                        this.match(Swift5Parser.RPAREN);
                    }
                    break;
                case Swift5Parser.WEAK:
                    this.enterOuterAlt(localctx, 14);
                    this.state = 1878;
                    this.match(Swift5Parser.WEAK);
                    break;
                case Swift5Parser.INTERNAL:
                case Swift5Parser.OPEN:
                case Swift5Parser.PRIVATE:
                case Swift5Parser.PUBLIC:
                case Swift5Parser.FILE_PRIVATE:
                    this.enterOuterAlt(localctx, 15);
                    this.state = 1879;
                    this.access_level_modifier();
                    break;
                case Swift5Parser.MUTATING:
                case Swift5Parser.NONMUTATING:
                    this.enterOuterAlt(localctx, 16);
                    this.state = 1880;
                    this.mutation_modifier();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    declaration_modifiers() {
        let localctx = new Declaration_modifiersContext(this, this._ctx, this.state);
        this.enterRule(localctx, 362, Swift5Parser.RULE_declaration_modifiers);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1884;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1883;
                this.declaration_modifier();
                this.state = 1886;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC))) !== 0) || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (Swift5Parser.PREFIX - 47)) | (1 << (Swift5Parser.INFIX - 47)) | (1 << (Swift5Parser.POSTFIX - 47)) | (1 << (Swift5Parser.CONVENIENCE - 47)) | (1 << (Swift5Parser.DYNAMIC - 47)) | (1 << (Swift5Parser.LAZY - 47)) | (1 << (Swift5Parser.OPTIONAL - 47)) | (1 << (Swift5Parser.OVERRIDE - 47)) | (1 << (Swift5Parser.REQUIRED - 47)) | (1 << (Swift5Parser.STATIC - 47)) | (1 << (Swift5Parser.WEAK - 47)) | (1 << (Swift5Parser.UNOWNED - 47)) | (1 << (Swift5Parser.MUTATING - 47)) | (1 << (Swift5Parser.NONMUTATING - 47)))) !== 0) || _la === Swift5Parser.FILE_PRIVATE);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    access_level_modifier() {
        let localctx = new Access_level_modifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 364, Swift5Parser.RULE_access_level_modifier);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1888;
            _la = this._input.LA(1);
            if (!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC))) !== 0) || _la === Swift5Parser.FILE_PRIVATE)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1892;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.LPAREN) {
                this.state = 1889;
                this.match(Swift5Parser.LPAREN);
                this.state = 1890;
                this.match(Swift5Parser.SET);
                this.state = 1891;
                this.match(Swift5Parser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    mutation_modifier() {
        let localctx = new Mutation_modifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 366, Swift5Parser.RULE_mutation_modifier);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1894;
            _la = this._input.LA(1);
            if (!(_la === Swift5Parser.MUTATING || _la === Swift5Parser.NONMUTATING)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    pattern(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        const _parentctx = this._ctx;
        const _parentState = this.state;
        let localctx = new PatternContext(this, this._ctx, _parentState);
        let _prevctx = localctx;
        const _startState = 368;
        this.enterRecursionRule(localctx, 368, Swift5Parser.RULE_pattern, _p);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1911;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 218, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 1900;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case Swift5Parser.UNDERSCORE:
                            this.state = 1897;
                            this.wildcard_pattern();
                            break;
                        case Swift5Parser.AS:
                        case Swift5Parser.ALPHA:
                        case Swift5Parser.CATCH:
                        case Swift5Parser.CLASS:
                        case Swift5Parser.DEFAULT:
                        case Swift5Parser.DO:
                        case Swift5Parser.GUARD:
                        case Swift5Parser.FOR:
                        case Swift5Parser.IN:
                        case Swift5Parser.INTERNAL:
                        case Swift5Parser.FINAL:
                        case Swift5Parser.OPEN:
                        case Swift5Parser.PRIVATE:
                        case Swift5Parser.PUBLIC:
                        case Swift5Parser.WHERE:
                        case Swift5Parser.WHILE:
                        case Swift5Parser.PROTOCOL:
                        case Swift5Parser.GET:
                        case Swift5Parser.SET:
                        case Swift5Parser.WILL_SET:
                        case Swift5Parser.DID_SET:
                        case Swift5Parser.INDIRECT:
                        case Swift5Parser.PREFIX:
                        case Swift5Parser.INFIX:
                        case Swift5Parser.LEFT:
                        case Swift5Parser.RIGHT:
                        case Swift5Parser.NONE:
                        case Swift5Parser.PRECEDENCE_GROUP:
                        case Swift5Parser.HIGHER_THAN:
                        case Swift5Parser.LOWER_THAN:
                        case Swift5Parser.ASSIGNMENT:
                        case Swift5Parser.ASSOCIATIVITY:
                        case Swift5Parser.POSTFIX:
                        case Swift5Parser.OPERATOR:
                        case Swift5Parser.OS:
                        case Swift5Parser.ARCH:
                        case Swift5Parser.SWIFT:
                        case Swift5Parser.COMPILER:
                        case Swift5Parser.CAN_IMPORT:
                        case Swift5Parser.TARGET_ENVIRONMENT:
                        case Swift5Parser.CONVENIENCE:
                        case Swift5Parser.DYNAMIC:
                        case Swift5Parser.LAZY:
                        case Swift5Parser.OPTIONAL:
                        case Swift5Parser.OVERRIDE:
                        case Swift5Parser.REQUIRED:
                        case Swift5Parser.WEAK:
                        case Swift5Parser.UNOWNED:
                        case Swift5Parser.SAFE:
                        case Swift5Parser.UNSAFE:
                        case Swift5Parser.MUTATING:
                        case Swift5Parser.NONMUTATING:
                        case Swift5Parser.RED:
                        case Swift5Parser.BLUE:
                        case Swift5Parser.GREEN:
                        case Swift5Parser.RESOURCE_NAME:
                        case Swift5Parser.SOME:
                        case Swift5Parser.TYPE:
                        case Swift5Parser.PRECEDENCE:
                        case Swift5Parser.SELF:
                        case Swift5Parser.SELF_BIG:
                        case Swift5Parser.MAC_OS:
                        case Swift5Parser.I_OS:
                        case Swift5Parser.OSX:
                        case Swift5Parser.WATCH_OS:
                        case Swift5Parser.TV_OS:
                        case Swift5Parser.LINUX:
                        case Swift5Parser.WINDOWS:
                        case Swift5Parser.I386:
                        case Swift5Parser.X86_64:
                        case Swift5Parser.ARM:
                        case Swift5Parser.ARM64:
                        case Swift5Parser.SIMULATOR:
                        case Swift5Parser.MAC_CATALYST:
                        case Swift5Parser.I_OS_APPLICATION_EXTENSION:
                        case Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION:
                        case Swift5Parser.MAC_OS_APPLICATION_EXTENSION:
                        case Swift5Parser.FILE:
                        case Swift5Parser.LINE:
                        case Swift5Parser.GETTER:
                        case Swift5Parser.SETTER:
                        case Swift5Parser.Identifier:
                        case Swift5Parser.BACKTICK:
                            this.state = 1898;
                            this.identifier_pattern();
                            break;
                        case Swift5Parser.LPAREN:
                            this.state = 1899;
                            this.tuple_pattern();
                            break;
                        default:
                            throw new antlr4_1.default.error.NoViableAltException(this);
                    }
                    this.state = 1903;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 217, this._ctx);
                    if (la_ === 1) {
                        this.state = 1902;
                        this.type_annotation();
                    }
                    break;
                case 2:
                    this.state = 1905;
                    this.value_binding_pattern();
                    break;
                case 3:
                    this.state = 1906;
                    this.enum_case_pattern();
                    break;
                case 4:
                    this.state = 1907;
                    this.optional_pattern();
                    break;
                case 5:
                    this.state = 1908;
                    this.match(Swift5Parser.IS);
                    this.state = 1909;
                    this.type(0);
                    break;
                case 6:
                    this.state = 1910;
                    this.expression_pattern();
                    break;
            }
            this._ctx.stop = this._input.LT(-1);
            this.state = 1918;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 219, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    if (this._parseListeners !== null) {
                        this.triggerExitRuleEvent();
                    }
                    _prevctx = localctx;
                    localctx = new PatternContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, Swift5Parser.RULE_pattern);
                    this.state = 1913;
                    if (!(this.precpred(this._ctx, 2))) {
                        throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 1914;
                    this.match(Swift5Parser.AS);
                    this.state = 1915;
                    this.type(0);
                }
                this.state = 1920;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 219, this._ctx);
            }
        }
        catch (error) {
            if (error instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = error;
                this._errHandler.reportError(this, error);
                this._errHandler.recover(this, error);
            }
            else {
                throw error;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }
    wildcard_pattern() {
        let localctx = new Wildcard_patternContext(this, this._ctx, this.state);
        this.enterRule(localctx, 370, Swift5Parser.RULE_wildcard_pattern);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1921;
            this.match(Swift5Parser.UNDERSCORE);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    identifier_pattern() {
        let localctx = new Identifier_patternContext(this, this._ctx, this.state);
        this.enterRule(localctx, 372, Swift5Parser.RULE_identifier_pattern);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1923;
            this.identifier();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    value_binding_pattern() {
        let localctx = new Value_binding_patternContext(this, this._ctx, this.state);
        this.enterRule(localctx, 374, Swift5Parser.RULE_value_binding_pattern);
        try {
            this.state = 1929;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.VAR:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1925;
                    this.match(Swift5Parser.VAR);
                    this.state = 1926;
                    this.pattern(0);
                    break;
                case Swift5Parser.LET:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1927;
                    this.match(Swift5Parser.LET);
                    this.state = 1928;
                    this.pattern(0);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    tuple_pattern() {
        let localctx = new Tuple_patternContext(this, this._ctx, this.state);
        this.enterRule(localctx, 376, Swift5Parser.RULE_tuple_pattern);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1931;
            this.match(Swift5Parser.LPAREN);
            this.state = 1933;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 221, this._ctx);
            if (la_ === 1) {
                this.state = 1932;
                this.tuple_pattern_element_list();
            }
            this.state = 1935;
            this.match(Swift5Parser.RPAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    tuple_pattern_element_list() {
        let localctx = new Tuple_pattern_element_listContext(this, this._ctx, this.state);
        this.enterRule(localctx, 378, Swift5Parser.RULE_tuple_pattern_element_list);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1937;
            this.tuple_pattern_element();
            this.state = 1942;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === Swift5Parser.COMMA) {
                this.state = 1938;
                this.match(Swift5Parser.COMMA);
                this.state = 1939;
                this.tuple_pattern_element();
                this.state = 1944;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    tuple_pattern_element() {
        let localctx = new Tuple_pattern_elementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 380, Swift5Parser.RULE_tuple_pattern_element);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1948;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 223, this._ctx);
            if (la_ === 1) {
                this.state = 1945;
                this.identifier();
                this.state = 1946;
                this.match(Swift5Parser.COLON);
            }
            this.state = 1950;
            this.pattern(0);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    enum_case_pattern() {
        let localctx = new Enum_case_patternContext(this, this._ctx, this.state);
        this.enterRule(localctx, 382, Swift5Parser.RULE_enum_case_pattern);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1953;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.ALPHA) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.GET) | (1 << Swift5Parser.SET))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Swift5Parser.WILL_SET - 32)) | (1 << (Swift5Parser.DID_SET - 32)) | (1 << (Swift5Parser.INDIRECT - 32)) | (1 << (Swift5Parser.PREFIX - 32)) | (1 << (Swift5Parser.INFIX - 32)) | (1 << (Swift5Parser.LEFT - 32)) | (1 << (Swift5Parser.RIGHT - 32)) | (1 << (Swift5Parser.NONE - 32)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 32)) | (1 << (Swift5Parser.HIGHER_THAN - 32)) | (1 << (Swift5Parser.LOWER_THAN - 32)) | (1 << (Swift5Parser.ASSIGNMENT - 32)) | (1 << (Swift5Parser.ASSOCIATIVITY - 32)) | (1 << (Swift5Parser.POSTFIX - 32)) | (1 << (Swift5Parser.OPERATOR - 32)) | (1 << (Swift5Parser.OS - 32)) | (1 << (Swift5Parser.ARCH - 32)) | (1 << (Swift5Parser.SWIFT - 32)) | (1 << (Swift5Parser.COMPILER - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Swift5Parser.CAN_IMPORT - 64)) | (1 << (Swift5Parser.TARGET_ENVIRONMENT - 64)) | (1 << (Swift5Parser.CONVENIENCE - 64)) | (1 << (Swift5Parser.DYNAMIC - 64)) | (1 << (Swift5Parser.LAZY - 64)) | (1 << (Swift5Parser.OPTIONAL - 64)) | (1 << (Swift5Parser.OVERRIDE - 64)) | (1 << (Swift5Parser.REQUIRED - 64)) | (1 << (Swift5Parser.WEAK - 64)) | (1 << (Swift5Parser.UNOWNED - 64)) | (1 << (Swift5Parser.SAFE - 64)) | (1 << (Swift5Parser.UNSAFE - 64)) | (1 << (Swift5Parser.MUTATING - 64)) | (1 << (Swift5Parser.NONMUTATING - 64)) | (1 << (Swift5Parser.RED - 64)) | (1 << (Swift5Parser.BLUE - 64)) | (1 << (Swift5Parser.GREEN - 64)) | (1 << (Swift5Parser.RESOURCE_NAME - 64)) | (1 << (Swift5Parser.SOME - 64)) | (1 << (Swift5Parser.TYPE - 64)) | (1 << (Swift5Parser.PRECEDENCE - 64)) | (1 << (Swift5Parser.SELF - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (Swift5Parser.SELF_BIG - 96)) | (1 << (Swift5Parser.MAC_OS - 96)) | (1 << (Swift5Parser.I_OS - 96)) | (1 << (Swift5Parser.OSX - 96)) | (1 << (Swift5Parser.WATCH_OS - 96)) | (1 << (Swift5Parser.TV_OS - 96)) | (1 << (Swift5Parser.LINUX - 96)) | (1 << (Swift5Parser.WINDOWS - 96)) | (1 << (Swift5Parser.I386 - 96)) | (1 << (Swift5Parser.X86_64 - 96)) | (1 << (Swift5Parser.ARM - 96)) | (1 << (Swift5Parser.ARM64 - 96)) | (1 << (Swift5Parser.SIMULATOR - 96)) | (1 << (Swift5Parser.MAC_CATALYST - 96)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.FILE - 96)) | (1 << (Swift5Parser.LINE - 96)))) !== 0) || ((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (Swift5Parser.GETTER - 135)) | (1 << (Swift5Parser.SETTER - 135)) | (1 << (Swift5Parser.Identifier - 135)) | (1 << (Swift5Parser.BACKTICK - 135)))) !== 0)) {
                this.state = 1952;
                this.type_identifier();
            }
            this.state = 1955;
            this.match(Swift5Parser.DOT);
            this.state = 1956;
            this.enum_case_name();
            this.state = 1958;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 225, this._ctx);
            if (la_ === 1) {
                this.state = 1957;
                this.tuple_pattern();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    optional_pattern() {
        let localctx = new Optional_patternContext(this, this._ctx, this.state);
        this.enterRule(localctx, 384, Swift5Parser.RULE_optional_pattern);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1960;
            this.identifier_pattern();
            this.state = 1961;
            this.match(Swift5Parser.QUESTION);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    expression_pattern() {
        let localctx = new Expression_patternContext(this, this._ctx, this.state);
        this.enterRule(localctx, 386, Swift5Parser.RULE_expression_pattern);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1963;
            this.expression();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    attribute() {
        let localctx = new AttributeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 388, Swift5Parser.RULE_attribute);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1965;
            this.match(Swift5Parser.AT);
            this.state = 1966;
            this.attribute_name();
            this.state = 1968;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 226, this._ctx);
            if (la_ === 1) {
                this.state = 1967;
                this.attribute_argument_clause();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    attribute_name() {
        let localctx = new Attribute_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 390, Swift5Parser.RULE_attribute_name);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1970;
            this.identifier();
            this.state = 1975;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === Swift5Parser.DOT) {
                this.state = 1971;
                this.match(Swift5Parser.DOT);
                this.state = 1972;
                this.identifier();
                this.state = 1977;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    attribute_argument_clause() {
        let localctx = new Attribute_argument_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 392, Swift5Parser.RULE_attribute_argument_clause);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1978;
            this.match(Swift5Parser.LPAREN);
            this.state = 1980;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 228, this._ctx);
            if (la_ === 1) {
                this.state = 1979;
                this.balanced_tokens();
            }
            this.state = 1982;
            this.match(Swift5Parser.RPAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    attributes() {
        let localctx = new AttributesContext(this, this._ctx, this.state);
        this.enterRule(localctx, 394, Swift5Parser.RULE_attributes);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1985;
            this._errHandler.sync(this);
            var _alt = 1;
            do {
                switch (_alt) {
                    case 1:
                        this.state = 1984;
                        this.attribute();
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 1987;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 229, this._ctx);
            } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    balanced_tokens() {
        let localctx = new Balanced_tokensContext(this, this._ctx, this.state);
        this.enterRule(localctx, 396, Swift5Parser.RULE_balanced_tokens);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1990;
            this._errHandler.sync(this);
            var _alt = 1;
            do {
                switch (_alt) {
                    case 1:
                        this.state = 1989;
                        this.balanced_token();
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 1992;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 230, this._ctx);
            } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    balanced_token() {
        let localctx = new Balanced_tokenContext(this, this._ctx, this.state);
        this.enterRule(localctx, 398, Swift5Parser.RULE_balanced_token);
        try {
            this.state = 2014;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 234, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1994;
                    this.match(Swift5Parser.LPAREN);
                    this.state = 1996;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 231, this._ctx);
                    if (la_ === 1) {
                        this.state = 1995;
                        this.balanced_tokens();
                    }
                    this.state = 1998;
                    this.match(Swift5Parser.RPAREN);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1999;
                    this.match(Swift5Parser.LBRACK);
                    this.state = 2001;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 232, this._ctx);
                    if (la_ === 1) {
                        this.state = 2000;
                        this.balanced_tokens();
                    }
                    this.state = 2003;
                    this.match(Swift5Parser.RBRACK);
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2004;
                    this.match(Swift5Parser.LCURLY);
                    this.state = 2006;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 233, this._ctx);
                    if (la_ === 1) {
                        this.state = 2005;
                        this.balanced_tokens();
                    }
                    this.state = 2008;
                    this.match(Swift5Parser.RCURLY);
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 2009;
                    this.identifier();
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 2010;
                    this.keyword();
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 2011;
                    this.literal();
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    this.state = 2012;
                    this.operator();
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    this.state = 2013;
                    this.balanced_token_punctuation();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    balanced_token_punctuation() {
        let localctx = new Balanced_token_punctuationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 400, Swift5Parser.RULE_balanced_token_punctuation);
        var _la = 0; // Token type
        try {
            this.state = 2022;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 235, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2016;
                    _la = this._input.LA(1);
                    if (!(((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Swift5Parser.DOT - 138)) | (1 << (Swift5Parser.COMMA - 138)) | (1 << (Swift5Parser.COLON - 138)) | (1 << (Swift5Parser.SEMI - 138)) | (1 << (Swift5Parser.QUESTION - 138)) | (1 << (Swift5Parser.AT - 138)) | (1 << (Swift5Parser.EQUAL - 138)) | (1 << (Swift5Parser.HASH - 138)) | (1 << (Swift5Parser.BACKTICK - 138)))) !== 0))) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2017;
                    this.arrow_operator();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2018;
                    if (!(SwiftSupport_1.default.isPrefixOp(this._input))) {
                        throw new antlr4_1.default.error.FailedPredicateException(this, "SwiftSupport.isPrefixOp(this._input)");
                    }
                    this.state = 2019;
                    this.match(Swift5Parser.AND);
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 2020;
                    if (!(SwiftSupport_1.default.isPostfixOp(this._input))) {
                        throw new antlr4_1.default.error.FailedPredicateException(this, "SwiftSupport.isPostfixOp(this._input)");
                    }
                    this.state = 2021;
                    this.match(Swift5Parser.BANG);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    expression() {
        let localctx = new ExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 402, Swift5Parser.RULE_expression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2025;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 236, this._ctx);
            if (la_ === 1) {
                this.state = 2024;
                this.try_operator();
            }
            this.state = 2027;
            this.prefix_expression();
            this.state = 2029;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 237, this._ctx);
            if (la_ === 1) {
                this.state = 2028;
                this.binary_expressions();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    expression_list() {
        let localctx = new Expression_listContext(this, this._ctx, this.state);
        this.enterRule(localctx, 404, Swift5Parser.RULE_expression_list);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2031;
            this.expression();
            this.state = 2036;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === Swift5Parser.COMMA) {
                this.state = 2032;
                this.match(Swift5Parser.COMMA);
                this.state = 2033;
                this.expression();
                this.state = 2038;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    prefix_expression() {
        let localctx = new Prefix_expressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 406, Swift5Parser.RULE_prefix_expression);
        try {
            this.state = 2044;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 240, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2040;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 239, this._ctx);
                    if (la_ === 1) {
                        this.state = 2039;
                        this.prefix_operator();
                    }
                    this.state = 2042;
                    this.postfix_expression();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2043;
                    this.in_out_expression();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    in_out_expression() {
        let localctx = new In_out_expressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 408, Swift5Parser.RULE_in_out_expression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2046;
            this.match(Swift5Parser.AND);
            this.state = 2047;
            this.identifier();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    try_operator() {
        let localctx = new Try_operatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 410, Swift5Parser.RULE_try_operator);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2049;
            this.match(Swift5Parser.TRY);
            this.state = 2051;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 241, this._ctx);
            if (la_ === 1) {
                this.state = 2050;
                _la = this._input.LA(1);
                if (!(_la === Swift5Parser.BANG || _la === Swift5Parser.QUESTION)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    binary_expression() {
        let localctx = new Binary_expressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 412, Swift5Parser.RULE_binary_expression);
        try {
            this.state = 2066;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 244, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2053;
                    this.binary_operator();
                    this.state = 2054;
                    this.prefix_expression();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2058;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 242, this._ctx);
                    switch (la_) {
                        case 1:
                            this.state = 2056;
                            this.assignment_operator();
                            break;
                        case 2:
                            this.state = 2057;
                            this.conditional_operator();
                            break;
                    }
                    this.state = 2061;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 243, this._ctx);
                    if (la_ === 1) {
                        this.state = 2060;
                        this.try_operator();
                    }
                    this.state = 2063;
                    this.prefix_expression();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2065;
                    this.type_casting_operator();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    binary_expressions() {
        let localctx = new Binary_expressionsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 414, Swift5Parser.RULE_binary_expressions);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2069;
            this._errHandler.sync(this);
            var _alt = 1;
            do {
                switch (_alt) {
                    case 1:
                        this.state = 2068;
                        this.binary_expression();
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 2071;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 245, this._ctx);
            } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    conditional_operator() {
        let localctx = new Conditional_operatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 416, Swift5Parser.RULE_conditional_operator);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2073;
            this.match(Swift5Parser.QUESTION);
            this.state = 2074;
            this.expression();
            this.state = 2075;
            this.match(Swift5Parser.COLON);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    type_casting_operator() {
        let localctx = new Type_casting_operatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 418, Swift5Parser.RULE_type_casting_operator);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2082;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.IS:
                    this.state = 2077;
                    this.match(Swift5Parser.IS);
                    break;
                case Swift5Parser.AS:
                    this.state = 2078;
                    this.match(Swift5Parser.AS);
                    this.state = 2080;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === Swift5Parser.BANG || _la === Swift5Parser.QUESTION) {
                        this.state = 2079;
                        _la = this._input.LA(1);
                        if (!(_la === Swift5Parser.BANG || _la === Swift5Parser.QUESTION)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this.state = 2084;
            this.type(0);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    primary_expression() {
        let localctx = new Primary_expressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 420, Swift5Parser.RULE_primary_expression);
        try {
            this.state = 2104;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 249, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2086;
                    this.unqualified_name();
                    this.state = 2088;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 248, this._ctx);
                    if (la_ === 1) {
                        this.state = 2087;
                        this.generic_argument_clause();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2090;
                    this.array_type();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2091;
                    this.dictionary_type();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 2092;
                    this.literal_expression();
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 2093;
                    this.self_expression();
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 2094;
                    this.superclass_expression();
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    this.state = 2095;
                    this.closure_expression();
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    this.state = 2096;
                    this.parenthesized_operator();
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    this.state = 2097;
                    this.parenthesized_expression();
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    this.state = 2098;
                    this.tuple_expression();
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    this.state = 2099;
                    this.implicit_member_expression();
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    this.state = 2100;
                    this.wildcard_expression();
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    this.state = 2101;
                    this.key_path_expression();
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    this.state = 2102;
                    this.selector_expression();
                    break;
                case 15:
                    this.enterOuterAlt(localctx, 15);
                    this.state = 2103;
                    this.key_path_string_expression();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    unqualified_name() {
        let localctx = new Unqualified_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 422, Swift5Parser.RULE_unqualified_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2106;
            this.identifier();
            this.state = 2111;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 250, this._ctx);
            if (la_ === 1) {
                this.state = 2107;
                this.match(Swift5Parser.LPAREN);
                this.state = 2108;
                this.argument_names();
                this.state = 2109;
                this.match(Swift5Parser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    literal_expression() {
        let localctx = new Literal_expressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 424, Swift5Parser.RULE_literal_expression);
        try {
            this.state = 2124;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 251, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2113;
                    this.literal();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2114;
                    this.array_literal();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2115;
                    this.dictionary_literal();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 2116;
                    this.playground_literal();
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 2117;
                    this.match(Swift5Parser.HASH_FILE);
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 2118;
                    this.match(Swift5Parser.HASH_FILE_ID);
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    this.state = 2119;
                    this.match(Swift5Parser.HASH_FILE_PATH);
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    this.state = 2120;
                    this.match(Swift5Parser.HASH_LINE);
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    this.state = 2121;
                    this.match(Swift5Parser.HASH_COLUMN);
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    this.state = 2122;
                    this.match(Swift5Parser.HASH_FUNCTION);
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    this.state = 2123;
                    this.match(Swift5Parser.HASH_DSO_HANDLE);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    array_literal() {
        let localctx = new Array_literalContext(this, this._ctx, this.state);
        this.enterRule(localctx, 426, Swift5Parser.RULE_array_literal);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2126;
            this.match(Swift5Parser.LBRACK);
            this.state = 2128;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 252, this._ctx);
            if (la_ === 1) {
                this.state = 2127;
                this.array_literal_items();
            }
            this.state = 2130;
            this.match(Swift5Parser.RBRACK);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    array_literal_items() {
        let localctx = new Array_literal_itemsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 428, Swift5Parser.RULE_array_literal_items);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2132;
            this.array_literal_item();
            this.state = 2137;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 253, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 2133;
                    this.match(Swift5Parser.COMMA);
                    this.state = 2134;
                    this.array_literal_item();
                }
                this.state = 2139;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 253, this._ctx);
            }
            this.state = 2141;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.COMMA) {
                this.state = 2140;
                this.match(Swift5Parser.COMMA);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    array_literal_item() {
        let localctx = new Array_literal_itemContext(this, this._ctx, this.state);
        this.enterRule(localctx, 430, Swift5Parser.RULE_array_literal_item);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2143;
            this.expression();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    dictionary_literal() {
        let localctx = new Dictionary_literalContext(this, this._ctx, this.state);
        this.enterRule(localctx, 432, Swift5Parser.RULE_dictionary_literal);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2145;
            this.match(Swift5Parser.LBRACK);
            this.state = 2148;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 255, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 2146;
                    this.dictionary_literal_items();
                    break;
                case 2:
                    this.state = 2147;
                    this.match(Swift5Parser.COLON);
                    break;
            }
            this.state = 2150;
            this.match(Swift5Parser.RBRACK);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    dictionary_literal_items() {
        let localctx = new Dictionary_literal_itemsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 434, Swift5Parser.RULE_dictionary_literal_items);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2152;
            this.dictionary_literal_item();
            this.state = 2157;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 256, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 2153;
                    this.match(Swift5Parser.COMMA);
                    this.state = 2154;
                    this.dictionary_literal_item();
                }
                this.state = 2159;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 256, this._ctx);
            }
            this.state = 2161;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.COMMA) {
                this.state = 2160;
                this.match(Swift5Parser.COMMA);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    dictionary_literal_item() {
        let localctx = new Dictionary_literal_itemContext(this, this._ctx, this.state);
        this.enterRule(localctx, 436, Swift5Parser.RULE_dictionary_literal_item);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2163;
            this.expression();
            this.state = 2164;
            this.match(Swift5Parser.COLON);
            this.state = 2165;
            this.expression();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    playground_literal() {
        let localctx = new Playground_literalContext(this, this._ctx, this.state);
        this.enterRule(localctx, 438, Swift5Parser.RULE_playground_literal);
        try {
            this.state = 2200;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.HASH_COLOR_LITERAL:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2167;
                    this.match(Swift5Parser.HASH_COLOR_LITERAL);
                    this.state = 2168;
                    this.match(Swift5Parser.LPAREN);
                    this.state = 2169;
                    this.match(Swift5Parser.RED);
                    this.state = 2170;
                    this.match(Swift5Parser.COLON);
                    this.state = 2171;
                    this.expression();
                    this.state = 2172;
                    this.match(Swift5Parser.COMMA);
                    this.state = 2173;
                    this.match(Swift5Parser.GREEN);
                    this.state = 2174;
                    this.match(Swift5Parser.COLON);
                    this.state = 2175;
                    this.expression();
                    this.state = 2176;
                    this.match(Swift5Parser.COMMA);
                    this.state = 2177;
                    this.match(Swift5Parser.BLUE);
                    this.state = 2178;
                    this.match(Swift5Parser.COLON);
                    this.state = 2179;
                    this.expression();
                    this.state = 2180;
                    this.match(Swift5Parser.COMMA);
                    this.state = 2181;
                    this.match(Swift5Parser.ALPHA);
                    this.state = 2182;
                    this.match(Swift5Parser.COLON);
                    this.state = 2183;
                    this.expression();
                    this.state = 2184;
                    this.match(Swift5Parser.RPAREN);
                    break;
                case Swift5Parser.HASH_FILE_LITERAL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2186;
                    this.match(Swift5Parser.HASH_FILE_LITERAL);
                    this.state = 2187;
                    this.match(Swift5Parser.LPAREN);
                    this.state = 2188;
                    this.match(Swift5Parser.RESOURCE_NAME);
                    this.state = 2189;
                    this.match(Swift5Parser.COLON);
                    this.state = 2190;
                    this.expression();
                    this.state = 2191;
                    this.match(Swift5Parser.RPAREN);
                    break;
                case Swift5Parser.HASH_IMAGE_LITERAL:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2193;
                    this.match(Swift5Parser.HASH_IMAGE_LITERAL);
                    this.state = 2194;
                    this.match(Swift5Parser.LPAREN);
                    this.state = 2195;
                    this.match(Swift5Parser.RESOURCE_NAME);
                    this.state = 2196;
                    this.match(Swift5Parser.COLON);
                    this.state = 2197;
                    this.expression();
                    this.state = 2198;
                    this.match(Swift5Parser.RPAREN);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    self_expression() {
        let localctx = new Self_expressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 440, Swift5Parser.RULE_self_expression);
        try {
            this.state = 2214;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 259, this._ctx);
            switch (la_) {
                case 1:
                    localctx = new Self_pure_expressionContext(this, localctx);
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2202;
                    this.match(Swift5Parser.SELF);
                    break;
                case 2:
                    localctx = new Self_method_expressionContext(this, localctx);
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2203;
                    this.match(Swift5Parser.SELF);
                    this.state = 2204;
                    this.match(Swift5Parser.DOT);
                    this.state = 2205;
                    this.identifier();
                    break;
                case 3:
                    localctx = new Self_subscript_expressionContext(this, localctx);
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2206;
                    this.match(Swift5Parser.SELF);
                    this.state = 2207;
                    this.match(Swift5Parser.LBRACK);
                    this.state = 2208;
                    this.function_call_argument_list();
                    this.state = 2209;
                    this.match(Swift5Parser.RBRACK);
                    break;
                case 4:
                    localctx = new Self_initializer_expressionContext(this, localctx);
                    this.enterOuterAlt(localctx, 4);
                    this.state = 2211;
                    this.match(Swift5Parser.SELF);
                    this.state = 2212;
                    this.match(Swift5Parser.DOT);
                    this.state = 2213;
                    this.match(Swift5Parser.INIT);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    superclass_expression() {
        let localctx = new Superclass_expressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 442, Swift5Parser.RULE_superclass_expression);
        try {
            this.state = 2227;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 260, this._ctx);
            switch (la_) {
                case 1:
                    localctx = new Superclass_method_expressionContext(this, localctx);
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2216;
                    this.match(Swift5Parser.SUPER);
                    this.state = 2217;
                    this.match(Swift5Parser.DOT);
                    this.state = 2218;
                    this.identifier();
                    break;
                case 2:
                    localctx = new Superclass_subscript_expressionContext(this, localctx);
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2219;
                    this.match(Swift5Parser.SUPER);
                    this.state = 2220;
                    this.match(Swift5Parser.LBRACK);
                    this.state = 2221;
                    this.function_call_argument_list();
                    this.state = 2222;
                    this.match(Swift5Parser.RBRACK);
                    break;
                case 3:
                    localctx = new Superclass_initializer_expressionContext(this, localctx);
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2224;
                    this.match(Swift5Parser.SUPER);
                    this.state = 2225;
                    this.match(Swift5Parser.DOT);
                    this.state = 2226;
                    this.match(Swift5Parser.INIT);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    closure_expression() {
        let localctx = new Closure_expressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 444, Swift5Parser.RULE_closure_expression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2229;
            this.match(Swift5Parser.LCURLY);
            this.state = 2231;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 261, this._ctx);
            if (la_ === 1) {
                this.state = 2230;
                this.closure_signature();
            }
            this.state = 2234;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 262, this._ctx);
            if (la_ === 1) {
                this.state = 2233;
                this.statements();
            }
            this.state = 2236;
            this.match(Swift5Parser.RCURLY);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    closure_signature() {
        let localctx = new Closure_signatureContext(this, this._ctx, this.state);
        this.enterRule(localctx, 446, Swift5Parser.RULE_closure_signature);
        var _la = 0; // Token type
        try {
            this.state = 2253;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 266, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2239;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === Swift5Parser.LBRACK) {
                        this.state = 2238;
                        this.capture_list();
                    }
                    this.state = 2241;
                    this.closure_parameter_clause();
                    this.state = 2243;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 264, this._ctx);
                    if (la_ === 1) {
                        this.state = 2242;
                        this.match(Swift5Parser.THROWS);
                    }
                    this.state = 2246;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 265, this._ctx);
                    if (la_ === 1) {
                        this.state = 2245;
                        this.function_result();
                    }
                    this.state = 2248;
                    this.match(Swift5Parser.IN);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2250;
                    this.capture_list();
                    this.state = 2251;
                    this.match(Swift5Parser.IN);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    closure_parameter_clause() {
        let localctx = new Closure_parameter_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 448, Swift5Parser.RULE_closure_parameter_clause);
        var _la = 0; // Token type
        try {
            this.state = 2261;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.LPAREN:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2255;
                    this.match(Swift5Parser.LPAREN);
                    this.state = 2257;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.ALPHA) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.GET) | (1 << Swift5Parser.SET))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Swift5Parser.WILL_SET - 32)) | (1 << (Swift5Parser.DID_SET - 32)) | (1 << (Swift5Parser.INDIRECT - 32)) | (1 << (Swift5Parser.PREFIX - 32)) | (1 << (Swift5Parser.INFIX - 32)) | (1 << (Swift5Parser.LEFT - 32)) | (1 << (Swift5Parser.RIGHT - 32)) | (1 << (Swift5Parser.NONE - 32)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 32)) | (1 << (Swift5Parser.HIGHER_THAN - 32)) | (1 << (Swift5Parser.LOWER_THAN - 32)) | (1 << (Swift5Parser.ASSIGNMENT - 32)) | (1 << (Swift5Parser.ASSOCIATIVITY - 32)) | (1 << (Swift5Parser.POSTFIX - 32)) | (1 << (Swift5Parser.OPERATOR - 32)) | (1 << (Swift5Parser.OS - 32)) | (1 << (Swift5Parser.ARCH - 32)) | (1 << (Swift5Parser.SWIFT - 32)) | (1 << (Swift5Parser.COMPILER - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Swift5Parser.CAN_IMPORT - 64)) | (1 << (Swift5Parser.TARGET_ENVIRONMENT - 64)) | (1 << (Swift5Parser.CONVENIENCE - 64)) | (1 << (Swift5Parser.DYNAMIC - 64)) | (1 << (Swift5Parser.LAZY - 64)) | (1 << (Swift5Parser.OPTIONAL - 64)) | (1 << (Swift5Parser.OVERRIDE - 64)) | (1 << (Swift5Parser.REQUIRED - 64)) | (1 << (Swift5Parser.WEAK - 64)) | (1 << (Swift5Parser.UNOWNED - 64)) | (1 << (Swift5Parser.SAFE - 64)) | (1 << (Swift5Parser.UNSAFE - 64)) | (1 << (Swift5Parser.MUTATING - 64)) | (1 << (Swift5Parser.NONMUTATING - 64)) | (1 << (Swift5Parser.RED - 64)) | (1 << (Swift5Parser.BLUE - 64)) | (1 << (Swift5Parser.GREEN - 64)) | (1 << (Swift5Parser.RESOURCE_NAME - 64)) | (1 << (Swift5Parser.SOME - 64)) | (1 << (Swift5Parser.TYPE - 64)) | (1 << (Swift5Parser.PRECEDENCE - 64)) | (1 << (Swift5Parser.SELF - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (Swift5Parser.SELF_BIG - 96)) | (1 << (Swift5Parser.MAC_OS - 96)) | (1 << (Swift5Parser.I_OS - 96)) | (1 << (Swift5Parser.OSX - 96)) | (1 << (Swift5Parser.WATCH_OS - 96)) | (1 << (Swift5Parser.TV_OS - 96)) | (1 << (Swift5Parser.LINUX - 96)) | (1 << (Swift5Parser.WINDOWS - 96)) | (1 << (Swift5Parser.I386 - 96)) | (1 << (Swift5Parser.X86_64 - 96)) | (1 << (Swift5Parser.ARM - 96)) | (1 << (Swift5Parser.ARM64 - 96)) | (1 << (Swift5Parser.SIMULATOR - 96)) | (1 << (Swift5Parser.MAC_CATALYST - 96)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.FILE - 96)) | (1 << (Swift5Parser.LINE - 96)))) !== 0) || ((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (Swift5Parser.GETTER - 135)) | (1 << (Swift5Parser.SETTER - 135)) | (1 << (Swift5Parser.Identifier - 135)) | (1 << (Swift5Parser.BACKTICK - 135)))) !== 0)) {
                        this.state = 2256;
                        this.closure_parameter_list();
                    }
                    this.state = 2259;
                    this.match(Swift5Parser.RPAREN);
                    break;
                case Swift5Parser.AS:
                case Swift5Parser.ALPHA:
                case Swift5Parser.CATCH:
                case Swift5Parser.CLASS:
                case Swift5Parser.DEFAULT:
                case Swift5Parser.DO:
                case Swift5Parser.GUARD:
                case Swift5Parser.FOR:
                case Swift5Parser.IN:
                case Swift5Parser.INTERNAL:
                case Swift5Parser.FINAL:
                case Swift5Parser.OPEN:
                case Swift5Parser.PRIVATE:
                case Swift5Parser.PUBLIC:
                case Swift5Parser.WHERE:
                case Swift5Parser.WHILE:
                case Swift5Parser.PROTOCOL:
                case Swift5Parser.GET:
                case Swift5Parser.SET:
                case Swift5Parser.WILL_SET:
                case Swift5Parser.DID_SET:
                case Swift5Parser.INDIRECT:
                case Swift5Parser.PREFIX:
                case Swift5Parser.INFIX:
                case Swift5Parser.LEFT:
                case Swift5Parser.RIGHT:
                case Swift5Parser.NONE:
                case Swift5Parser.PRECEDENCE_GROUP:
                case Swift5Parser.HIGHER_THAN:
                case Swift5Parser.LOWER_THAN:
                case Swift5Parser.ASSIGNMENT:
                case Swift5Parser.ASSOCIATIVITY:
                case Swift5Parser.POSTFIX:
                case Swift5Parser.OPERATOR:
                case Swift5Parser.OS:
                case Swift5Parser.ARCH:
                case Swift5Parser.SWIFT:
                case Swift5Parser.COMPILER:
                case Swift5Parser.CAN_IMPORT:
                case Swift5Parser.TARGET_ENVIRONMENT:
                case Swift5Parser.CONVENIENCE:
                case Swift5Parser.DYNAMIC:
                case Swift5Parser.LAZY:
                case Swift5Parser.OPTIONAL:
                case Swift5Parser.OVERRIDE:
                case Swift5Parser.REQUIRED:
                case Swift5Parser.WEAK:
                case Swift5Parser.UNOWNED:
                case Swift5Parser.SAFE:
                case Swift5Parser.UNSAFE:
                case Swift5Parser.MUTATING:
                case Swift5Parser.NONMUTATING:
                case Swift5Parser.RED:
                case Swift5Parser.BLUE:
                case Swift5Parser.GREEN:
                case Swift5Parser.RESOURCE_NAME:
                case Swift5Parser.SOME:
                case Swift5Parser.TYPE:
                case Swift5Parser.PRECEDENCE:
                case Swift5Parser.SELF:
                case Swift5Parser.SELF_BIG:
                case Swift5Parser.MAC_OS:
                case Swift5Parser.I_OS:
                case Swift5Parser.OSX:
                case Swift5Parser.WATCH_OS:
                case Swift5Parser.TV_OS:
                case Swift5Parser.LINUX:
                case Swift5Parser.WINDOWS:
                case Swift5Parser.I386:
                case Swift5Parser.X86_64:
                case Swift5Parser.ARM:
                case Swift5Parser.ARM64:
                case Swift5Parser.SIMULATOR:
                case Swift5Parser.MAC_CATALYST:
                case Swift5Parser.I_OS_APPLICATION_EXTENSION:
                case Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION:
                case Swift5Parser.MAC_OS_APPLICATION_EXTENSION:
                case Swift5Parser.FILE:
                case Swift5Parser.LINE:
                case Swift5Parser.GETTER:
                case Swift5Parser.SETTER:
                case Swift5Parser.Identifier:
                case Swift5Parser.BACKTICK:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2260;
                    this.identifier_list();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    closure_parameter_list() {
        let localctx = new Closure_parameter_listContext(this, this._ctx, this.state);
        this.enterRule(localctx, 450, Swift5Parser.RULE_closure_parameter_list);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2263;
            this.closure_parameter();
            this.state = 2268;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === Swift5Parser.COMMA) {
                this.state = 2264;
                this.match(Swift5Parser.COMMA);
                this.state = 2265;
                this.closure_parameter();
                this.state = 2270;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    closure_parameter() {
        let localctx = new Closure_parameterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 452, Swift5Parser.RULE_closure_parameter);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2271;
            localctx.closure_parameter_name = this.identifier();
            this.state = 2276;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.COLON) {
                this.state = 2272;
                this.type_annotation();
                this.state = 2274;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 270, this._ctx);
                if (la_ === 1) {
                    this.state = 2273;
                    this.range_operator();
                }
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    capture_list() {
        let localctx = new Capture_listContext(this, this._ctx, this.state);
        this.enterRule(localctx, 454, Swift5Parser.RULE_capture_list);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2278;
            this.match(Swift5Parser.LBRACK);
            this.state = 2279;
            this.capture_list_items();
            this.state = 2280;
            this.match(Swift5Parser.RBRACK);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    capture_list_items() {
        let localctx = new Capture_list_itemsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 456, Swift5Parser.RULE_capture_list_items);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2282;
            this.capture_list_item();
            this.state = 2287;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === Swift5Parser.COMMA) {
                this.state = 2283;
                this.match(Swift5Parser.COMMA);
                this.state = 2284;
                this.capture_list_item();
                this.state = 2289;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    capture_list_item() {
        let localctx = new Capture_list_itemContext(this, this._ctx, this.state);
        this.enterRule(localctx, 458, Swift5Parser.RULE_capture_list_item);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2291;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 273, this._ctx);
            if (la_ === 1) {
                this.state = 2290;
                this.capture_specifier();
            }
            this.state = 2300;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 275, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 2293;
                    this.identifier();
                    this.state = 2295;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 274, this._ctx);
                    if (la_ === 1) {
                        this.state = 2294;
                        this.match(Swift5Parser.EQUAL);
                    }
                    this.state = 2297;
                    this.expression();
                    break;
                case 2:
                    this.state = 2299;
                    this.self_expression();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    capture_specifier() {
        let localctx = new Capture_specifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 460, Swift5Parser.RULE_capture_specifier);
        var _la = 0; // Token type
        try {
            this.state = 2309;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.WEAK:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2302;
                    this.match(Swift5Parser.WEAK);
                    break;
                case Swift5Parser.UNOWNED:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2303;
                    this.match(Swift5Parser.UNOWNED);
                    this.state = 2307;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === Swift5Parser.LPAREN) {
                        this.state = 2304;
                        this.match(Swift5Parser.LPAREN);
                        this.state = 2305;
                        _la = this._input.LA(1);
                        if (!(_la === Swift5Parser.SAFE || _la === Swift5Parser.UNSAFE)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 2306;
                        this.match(Swift5Parser.RPAREN);
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    implicit_member_expression() {
        let localctx = new Implicit_member_expressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 462, Swift5Parser.RULE_implicit_member_expression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2311;
            this.match(Swift5Parser.DOT);
            this.state = 2314;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 278, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 2312;
                    this.identifier();
                    break;
                case 2:
                    this.state = 2313;
                    this.keyword();
                    break;
            }
            this.state = 2318;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 279, this._ctx);
            if (la_ === 1) {
                this.state = 2316;
                this.match(Swift5Parser.DOT);
                this.state = 2317;
                this.postfix_expression();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parenthesized_operator() {
        let localctx = new Parenthesized_operatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 464, Swift5Parser.RULE_parenthesized_operator);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2320;
            this.match(Swift5Parser.LPAREN);
            this.state = 2321;
            this.operator();
            this.state = 2322;
            this.match(Swift5Parser.RPAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parenthesized_expression() {
        let localctx = new Parenthesized_expressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 466, Swift5Parser.RULE_parenthesized_expression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2324;
            this.match(Swift5Parser.LPAREN);
            this.state = 2325;
            this.expression();
            this.state = 2326;
            this.match(Swift5Parser.RPAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    tuple_expression() {
        let localctx = new Tuple_expressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 468, Swift5Parser.RULE_tuple_expression);
        try {
            this.state = 2336;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 280, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2328;
                    this.match(Swift5Parser.LPAREN);
                    this.state = 2329;
                    this.match(Swift5Parser.RPAREN);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2330;
                    this.match(Swift5Parser.LPAREN);
                    this.state = 2331;
                    this.tuple_element();
                    this.state = 2332;
                    this.match(Swift5Parser.COMMA);
                    this.state = 2333;
                    this.tuple_element_list();
                    this.state = 2334;
                    this.match(Swift5Parser.RPAREN);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    tuple_element_list() {
        let localctx = new Tuple_element_listContext(this, this._ctx, this.state);
        this.enterRule(localctx, 470, Swift5Parser.RULE_tuple_element_list);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2338;
            this.tuple_element();
            this.state = 2343;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === Swift5Parser.COMMA) {
                this.state = 2339;
                this.match(Swift5Parser.COMMA);
                this.state = 2340;
                this.tuple_element();
                this.state = 2345;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    tuple_element() {
        let localctx = new Tuple_elementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 472, Swift5Parser.RULE_tuple_element);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2349;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 282, this._ctx);
            if (la_ === 1) {
                this.state = 2346;
                this.identifier();
                this.state = 2347;
                this.match(Swift5Parser.COLON);
            }
            this.state = 2351;
            this.expression();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    wildcard_expression() {
        let localctx = new Wildcard_expressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 474, Swift5Parser.RULE_wildcard_expression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2353;
            this.match(Swift5Parser.UNDERSCORE);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    key_path_expression() {
        let localctx = new Key_path_expressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 476, Swift5Parser.RULE_key_path_expression);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2355;
            this.match(Swift5Parser.BACKSLASH);
            this.state = 2357;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.ALPHA) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.GET) | (1 << Swift5Parser.SET))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Swift5Parser.WILL_SET - 32)) | (1 << (Swift5Parser.DID_SET - 32)) | (1 << (Swift5Parser.INDIRECT - 32)) | (1 << (Swift5Parser.PREFIX - 32)) | (1 << (Swift5Parser.INFIX - 32)) | (1 << (Swift5Parser.LEFT - 32)) | (1 << (Swift5Parser.RIGHT - 32)) | (1 << (Swift5Parser.NONE - 32)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 32)) | (1 << (Swift5Parser.HIGHER_THAN - 32)) | (1 << (Swift5Parser.LOWER_THAN - 32)) | (1 << (Swift5Parser.ASSIGNMENT - 32)) | (1 << (Swift5Parser.ASSOCIATIVITY - 32)) | (1 << (Swift5Parser.POSTFIX - 32)) | (1 << (Swift5Parser.OPERATOR - 32)) | (1 << (Swift5Parser.OS - 32)) | (1 << (Swift5Parser.ARCH - 32)) | (1 << (Swift5Parser.SWIFT - 32)) | (1 << (Swift5Parser.COMPILER - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Swift5Parser.CAN_IMPORT - 64)) | (1 << (Swift5Parser.TARGET_ENVIRONMENT - 64)) | (1 << (Swift5Parser.CONVENIENCE - 64)) | (1 << (Swift5Parser.DYNAMIC - 64)) | (1 << (Swift5Parser.LAZY - 64)) | (1 << (Swift5Parser.OPTIONAL - 64)) | (1 << (Swift5Parser.OVERRIDE - 64)) | (1 << (Swift5Parser.REQUIRED - 64)) | (1 << (Swift5Parser.WEAK - 64)) | (1 << (Swift5Parser.UNOWNED - 64)) | (1 << (Swift5Parser.SAFE - 64)) | (1 << (Swift5Parser.UNSAFE - 64)) | (1 << (Swift5Parser.MUTATING - 64)) | (1 << (Swift5Parser.NONMUTATING - 64)) | (1 << (Swift5Parser.ANY - 64)) | (1 << (Swift5Parser.RED - 64)) | (1 << (Swift5Parser.BLUE - 64)) | (1 << (Swift5Parser.GREEN - 64)) | (1 << (Swift5Parser.RESOURCE_NAME - 64)) | (1 << (Swift5Parser.SOME - 64)) | (1 << (Swift5Parser.TYPE - 64)) | (1 << (Swift5Parser.PRECEDENCE - 64)) | (1 << (Swift5Parser.SELF - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (Swift5Parser.SELF_BIG - 96)) | (1 << (Swift5Parser.MAC_OS - 96)) | (1 << (Swift5Parser.I_OS - 96)) | (1 << (Swift5Parser.OSX - 96)) | (1 << (Swift5Parser.WATCH_OS - 96)) | (1 << (Swift5Parser.TV_OS - 96)) | (1 << (Swift5Parser.LINUX - 96)) | (1 << (Swift5Parser.WINDOWS - 96)) | (1 << (Swift5Parser.I386 - 96)) | (1 << (Swift5Parser.X86_64 - 96)) | (1 << (Swift5Parser.ARM - 96)) | (1 << (Swift5Parser.ARM64 - 96)) | (1 << (Swift5Parser.SIMULATOR - 96)) | (1 << (Swift5Parser.MAC_CATALYST - 96)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.FILE - 96)) | (1 << (Swift5Parser.LINE - 96)))) !== 0) || ((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (Swift5Parser.GETTER - 135)) | (1 << (Swift5Parser.SETTER - 135)) | (1 << (Swift5Parser.Identifier - 135)) | (1 << (Swift5Parser.LPAREN - 135)) | (1 << (Swift5Parser.LBRACK - 135)) | (1 << (Swift5Parser.AT - 135)) | (1 << (Swift5Parser.BACKTICK - 135)))) !== 0)) {
                this.state = 2356;
                this.type(0);
            }
            this.state = 2359;
            this.match(Swift5Parser.DOT);
            this.state = 2360;
            this.key_path_components();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    key_path_components() {
        let localctx = new Key_path_componentsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 478, Swift5Parser.RULE_key_path_components);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2362;
            this.key_path_component();
            this.state = 2367;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 284, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 2363;
                    this.match(Swift5Parser.DOT);
                    this.state = 2364;
                    this.key_path_component();
                }
                this.state = 2369;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 284, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    key_path_component() {
        let localctx = new Key_path_componentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 480, Swift5Parser.RULE_key_path_component);
        try {
            this.state = 2375;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 286, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2370;
                    this.identifier();
                    this.state = 2372;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 285, this._ctx);
                    if (la_ === 1) {
                        this.state = 2371;
                        this.key_path_postfixes();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2374;
                    this.key_path_postfixes();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    key_path_postfixes() {
        let localctx = new Key_path_postfixesContext(this, this._ctx, this.state);
        this.enterRule(localctx, 482, Swift5Parser.RULE_key_path_postfixes);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2378;
            this._errHandler.sync(this);
            var _alt = 1;
            do {
                switch (_alt) {
                    case 1:
                        this.state = 2377;
                        this.key_path_postfix();
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 2380;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 287, this._ctx);
            } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    key_path_postfix() {
        let localctx = new Key_path_postfixContext(this, this._ctx, this.state);
        this.enterRule(localctx, 484, Swift5Parser.RULE_key_path_postfix);
        try {
            this.state = 2389;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.QUESTION:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2382;
                    this.match(Swift5Parser.QUESTION);
                    break;
                case Swift5Parser.BANG:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2383;
                    this.match(Swift5Parser.BANG);
                    break;
                case Swift5Parser.SELF:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2384;
                    this.match(Swift5Parser.SELF);
                    break;
                case Swift5Parser.LBRACK:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 2385;
                    this.match(Swift5Parser.LBRACK);
                    this.state = 2386;
                    this.function_call_argument_list();
                    this.state = 2387;
                    this.match(Swift5Parser.RBRACK);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    selector_expression() {
        let localctx = new Selector_expressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 486, Swift5Parser.RULE_selector_expression);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2391;
            this.match(Swift5Parser.HASH_SELECTOR);
            this.state = 2392;
            this.match(Swift5Parser.LPAREN);
            this.state = 2395;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 289, this._ctx);
            if (la_ === 1) {
                this.state = 2393;
                _la = this._input.LA(1);
                if (!(_la === Swift5Parser.GETTER || _la === Swift5Parser.SETTER)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2394;
                this.match(Swift5Parser.COLON);
            }
            this.state = 2397;
            this.expression();
            this.state = 2398;
            this.match(Swift5Parser.RPAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    key_path_string_expression() {
        let localctx = new Key_path_string_expressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 488, Swift5Parser.RULE_key_path_string_expression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2400;
            this.match(Swift5Parser.HASH_KEYPATH);
            this.state = 2401;
            this.match(Swift5Parser.LPAREN);
            this.state = 2402;
            this.expression();
            this.state = 2403;
            this.match(Swift5Parser.RPAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    postfix_expression() {
        let localctx = new Postfix_expressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 490, Swift5Parser.RULE_postfix_expression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2405;
            this.primary_expression();
            this.state = 2415;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 291, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 2413;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 290, this._ctx);
                    switch (la_) {
                        case 1:
                            this.state = 2406;
                            this.function_call_suffix();
                            break;
                        case 2:
                            this.state = 2407;
                            this.initializer_suffix();
                            break;
                        case 3:
                            this.state = 2408;
                            this.explicit_member_suffix();
                            break;
                        case 4:
                            this.state = 2409;
                            this.postfix_self_suffix();
                            break;
                        case 5:
                            this.state = 2410;
                            this.subscript_suffix();
                            break;
                        case 6:
                            this.state = 2411;
                            this.forced_value_suffix();
                            break;
                        case 7:
                            this.state = 2412;
                            this.optional_chaining_suffix();
                            break;
                    }
                }
                this.state = 2417;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 291, this._ctx);
            }
            this.state = 2421;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 292, this._ctx);
            while (_alt != 1 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1 + 1) {
                    this.state = 2418;
                    this.postfix_operator();
                }
                this.state = 2423;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 292, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    function_call_suffix() {
        let localctx = new Function_call_suffixContext(this, this._ctx, this.state);
        this.enterRule(localctx, 492, Swift5Parser.RULE_function_call_suffix);
        var _la = 0; // Token type
        try {
            this.state = 2429;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 294, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2425;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === Swift5Parser.LPAREN) {
                        this.state = 2424;
                        this.function_call_argument_clause();
                    }
                    this.state = 2427;
                    this.trailing_closures();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2428;
                    this.function_call_argument_clause();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    initializer_suffix() {
        let localctx = new Initializer_suffixContext(this, this._ctx, this.state);
        this.enterRule(localctx, 494, Swift5Parser.RULE_initializer_suffix);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2431;
            this.match(Swift5Parser.DOT);
            this.state = 2432;
            this.match(Swift5Parser.INIT);
            this.state = 2437;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 295, this._ctx);
            if (la_ === 1) {
                this.state = 2433;
                this.match(Swift5Parser.LPAREN);
                this.state = 2434;
                this.argument_names();
                this.state = 2435;
                this.match(Swift5Parser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    explicit_member_suffix() {
        let localctx = new Explicit_member_suffixContext(this, this._ctx, this.state);
        this.enterRule(localctx, 496, Swift5Parser.RULE_explicit_member_suffix);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2439;
            this.match(Swift5Parser.DOT);
            this.state = 2449;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.Decimal_digits:
                    this.state = 2440;
                    this.match(Swift5Parser.Decimal_digits);
                    break;
                case Swift5Parser.AS:
                case Swift5Parser.ALPHA:
                case Swift5Parser.CATCH:
                case Swift5Parser.CLASS:
                case Swift5Parser.DEFAULT:
                case Swift5Parser.DO:
                case Swift5Parser.GUARD:
                case Swift5Parser.FOR:
                case Swift5Parser.IN:
                case Swift5Parser.INTERNAL:
                case Swift5Parser.FINAL:
                case Swift5Parser.OPEN:
                case Swift5Parser.PRIVATE:
                case Swift5Parser.PUBLIC:
                case Swift5Parser.WHERE:
                case Swift5Parser.WHILE:
                case Swift5Parser.PROTOCOL:
                case Swift5Parser.GET:
                case Swift5Parser.SET:
                case Swift5Parser.WILL_SET:
                case Swift5Parser.DID_SET:
                case Swift5Parser.INDIRECT:
                case Swift5Parser.PREFIX:
                case Swift5Parser.INFIX:
                case Swift5Parser.LEFT:
                case Swift5Parser.RIGHT:
                case Swift5Parser.NONE:
                case Swift5Parser.PRECEDENCE_GROUP:
                case Swift5Parser.HIGHER_THAN:
                case Swift5Parser.LOWER_THAN:
                case Swift5Parser.ASSIGNMENT:
                case Swift5Parser.ASSOCIATIVITY:
                case Swift5Parser.POSTFIX:
                case Swift5Parser.OPERATOR:
                case Swift5Parser.OS:
                case Swift5Parser.ARCH:
                case Swift5Parser.SWIFT:
                case Swift5Parser.COMPILER:
                case Swift5Parser.CAN_IMPORT:
                case Swift5Parser.TARGET_ENVIRONMENT:
                case Swift5Parser.CONVENIENCE:
                case Swift5Parser.DYNAMIC:
                case Swift5Parser.LAZY:
                case Swift5Parser.OPTIONAL:
                case Swift5Parser.OVERRIDE:
                case Swift5Parser.REQUIRED:
                case Swift5Parser.WEAK:
                case Swift5Parser.UNOWNED:
                case Swift5Parser.SAFE:
                case Swift5Parser.UNSAFE:
                case Swift5Parser.MUTATING:
                case Swift5Parser.NONMUTATING:
                case Swift5Parser.RED:
                case Swift5Parser.BLUE:
                case Swift5Parser.GREEN:
                case Swift5Parser.RESOURCE_NAME:
                case Swift5Parser.SOME:
                case Swift5Parser.TYPE:
                case Swift5Parser.PRECEDENCE:
                case Swift5Parser.SELF:
                case Swift5Parser.SELF_BIG:
                case Swift5Parser.MAC_OS:
                case Swift5Parser.I_OS:
                case Swift5Parser.OSX:
                case Swift5Parser.WATCH_OS:
                case Swift5Parser.TV_OS:
                case Swift5Parser.LINUX:
                case Swift5Parser.WINDOWS:
                case Swift5Parser.I386:
                case Swift5Parser.X86_64:
                case Swift5Parser.ARM:
                case Swift5Parser.ARM64:
                case Swift5Parser.SIMULATOR:
                case Swift5Parser.MAC_CATALYST:
                case Swift5Parser.I_OS_APPLICATION_EXTENSION:
                case Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION:
                case Swift5Parser.MAC_OS_APPLICATION_EXTENSION:
                case Swift5Parser.FILE:
                case Swift5Parser.LINE:
                case Swift5Parser.GETTER:
                case Swift5Parser.SETTER:
                case Swift5Parser.Identifier:
                case Swift5Parser.BACKTICK:
                    this.state = 2441;
                    this.identifier();
                    this.state = 2447;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 296, this._ctx);
                    if (la_ === 1) {
                        this.state = 2442;
                        this.generic_argument_clause();
                    }
                    else if (la_ === 2) {
                        this.state = 2443;
                        this.match(Swift5Parser.LPAREN);
                        this.state = 2444;
                        this.argument_names();
                        this.state = 2445;
                        this.match(Swift5Parser.RPAREN);
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    postfix_self_suffix() {
        let localctx = new Postfix_self_suffixContext(this, this._ctx, this.state);
        this.enterRule(localctx, 498, Swift5Parser.RULE_postfix_self_suffix);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2451;
            this.match(Swift5Parser.DOT);
            this.state = 2452;
            this.match(Swift5Parser.SELF);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    subscript_suffix() {
        let localctx = new Subscript_suffixContext(this, this._ctx, this.state);
        this.enterRule(localctx, 500, Swift5Parser.RULE_subscript_suffix);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2454;
            this.match(Swift5Parser.LBRACK);
            this.state = 2455;
            this.function_call_argument_list();
            this.state = 2456;
            this.match(Swift5Parser.RBRACK);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    forced_value_suffix() {
        let localctx = new Forced_value_suffixContext(this, this._ctx, this.state);
        this.enterRule(localctx, 502, Swift5Parser.RULE_forced_value_suffix);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2458;
            if (!(!SwiftSupport_1.default.isBinaryOp(this._input))) {
                throw new antlr4_1.default.error.FailedPredicateException(this, "!SwiftSupport.isBinaryOp(this._input)");
            }
            this.state = 2459;
            this.match(Swift5Parser.BANG);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    optional_chaining_suffix() {
        let localctx = new Optional_chaining_suffixContext(this, this._ctx, this.state);
        this.enterRule(localctx, 504, Swift5Parser.RULE_optional_chaining_suffix);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2461;
            if (!(!SwiftSupport_1.default.isBinaryOp(this._input))) {
                throw new antlr4_1.default.error.FailedPredicateException(this, "!SwiftSupport.isBinaryOp(this._input)");
            }
            this.state = 2462;
            this.match(Swift5Parser.QUESTION);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    function_call_argument_clause() {
        let localctx = new Function_call_argument_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 506, Swift5Parser.RULE_function_call_argument_clause);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2464;
            this.match(Swift5Parser.LPAREN);
            this.state = 2466;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 298, this._ctx);
            if (la_ === 1) {
                this.state = 2465;
                this.function_call_argument_list();
            }
            this.state = 2468;
            this.match(Swift5Parser.RPAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    function_call_argument_list() {
        let localctx = new Function_call_argument_listContext(this, this._ctx, this.state);
        this.enterRule(localctx, 508, Swift5Parser.RULE_function_call_argument_list);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2470;
            this.function_call_argument();
            this.state = 2475;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === Swift5Parser.COMMA) {
                this.state = 2471;
                this.match(Swift5Parser.COMMA);
                this.state = 2472;
                this.function_call_argument();
                this.state = 2477;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    function_call_argument() {
        let localctx = new Function_call_argumentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 510, Swift5Parser.RULE_function_call_argument);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2479;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 300, this._ctx);
            if (la_ === 1) {
                this.state = 2478;
                this.argument_name();
            }
            this.state = 2484;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 301, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 2481;
                    this.identifier();
                    break;
                case 2:
                    this.state = 2482;
                    this.expression();
                    break;
                case 3:
                    this.state = 2483;
                    this.operator();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    trailing_closures() {
        let localctx = new Trailing_closuresContext(this, this._ctx, this.state);
        this.enterRule(localctx, 512, Swift5Parser.RULE_trailing_closures);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2486;
            this.closure_expression();
            this.state = 2488;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 302, this._ctx);
            if (la_ === 1) {
                this.state = 2487;
                this.labeled_trailing_closures();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    labeled_trailing_closures() {
        let localctx = new Labeled_trailing_closuresContext(this, this._ctx, this.state);
        this.enterRule(localctx, 514, Swift5Parser.RULE_labeled_trailing_closures);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2491;
            this._errHandler.sync(this);
            var _alt = 1;
            do {
                switch (_alt) {
                    case 1:
                        this.state = 2490;
                        this.labeled_trailing_closure();
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 2493;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 303, this._ctx);
            } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    labeled_trailing_closure() {
        let localctx = new Labeled_trailing_closureContext(this, this._ctx, this.state);
        this.enterRule(localctx, 516, Swift5Parser.RULE_labeled_trailing_closure);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2495;
            this.identifier();
            this.state = 2496;
            this.match(Swift5Parser.COLON);
            this.state = 2497;
            this.closure_expression();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    argument_names() {
        let localctx = new Argument_namesContext(this, this._ctx, this.state);
        this.enterRule(localctx, 518, Swift5Parser.RULE_argument_names);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2500;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2499;
                this.argument_name();
                this.state = 2502;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.ALPHA) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.GET) | (1 << Swift5Parser.SET))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Swift5Parser.WILL_SET - 32)) | (1 << (Swift5Parser.DID_SET - 32)) | (1 << (Swift5Parser.INDIRECT - 32)) | (1 << (Swift5Parser.PREFIX - 32)) | (1 << (Swift5Parser.INFIX - 32)) | (1 << (Swift5Parser.LEFT - 32)) | (1 << (Swift5Parser.RIGHT - 32)) | (1 << (Swift5Parser.NONE - 32)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 32)) | (1 << (Swift5Parser.HIGHER_THAN - 32)) | (1 << (Swift5Parser.LOWER_THAN - 32)) | (1 << (Swift5Parser.ASSIGNMENT - 32)) | (1 << (Swift5Parser.ASSOCIATIVITY - 32)) | (1 << (Swift5Parser.POSTFIX - 32)) | (1 << (Swift5Parser.OPERATOR - 32)) | (1 << (Swift5Parser.OS - 32)) | (1 << (Swift5Parser.ARCH - 32)) | (1 << (Swift5Parser.SWIFT - 32)) | (1 << (Swift5Parser.COMPILER - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Swift5Parser.CAN_IMPORT - 64)) | (1 << (Swift5Parser.TARGET_ENVIRONMENT - 64)) | (1 << (Swift5Parser.CONVENIENCE - 64)) | (1 << (Swift5Parser.DYNAMIC - 64)) | (1 << (Swift5Parser.LAZY - 64)) | (1 << (Swift5Parser.OPTIONAL - 64)) | (1 << (Swift5Parser.OVERRIDE - 64)) | (1 << (Swift5Parser.REQUIRED - 64)) | (1 << (Swift5Parser.WEAK - 64)) | (1 << (Swift5Parser.UNOWNED - 64)) | (1 << (Swift5Parser.SAFE - 64)) | (1 << (Swift5Parser.UNSAFE - 64)) | (1 << (Swift5Parser.MUTATING - 64)) | (1 << (Swift5Parser.NONMUTATING - 64)) | (1 << (Swift5Parser.RED - 64)) | (1 << (Swift5Parser.BLUE - 64)) | (1 << (Swift5Parser.GREEN - 64)) | (1 << (Swift5Parser.RESOURCE_NAME - 64)) | (1 << (Swift5Parser.SOME - 64)) | (1 << (Swift5Parser.TYPE - 64)) | (1 << (Swift5Parser.PRECEDENCE - 64)) | (1 << (Swift5Parser.SELF - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (Swift5Parser.SELF_BIG - 96)) | (1 << (Swift5Parser.MAC_OS - 96)) | (1 << (Swift5Parser.I_OS - 96)) | (1 << (Swift5Parser.OSX - 96)) | (1 << (Swift5Parser.WATCH_OS - 96)) | (1 << (Swift5Parser.TV_OS - 96)) | (1 << (Swift5Parser.LINUX - 96)) | (1 << (Swift5Parser.WINDOWS - 96)) | (1 << (Swift5Parser.I386 - 96)) | (1 << (Swift5Parser.X86_64 - 96)) | (1 << (Swift5Parser.ARM - 96)) | (1 << (Swift5Parser.ARM64 - 96)) | (1 << (Swift5Parser.SIMULATOR - 96)) | (1 << (Swift5Parser.MAC_CATALYST - 96)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.FILE - 96)) | (1 << (Swift5Parser.LINE - 96)))) !== 0) || ((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (Swift5Parser.GETTER - 135)) | (1 << (Swift5Parser.SETTER - 135)) | (1 << (Swift5Parser.Identifier - 135)) | (1 << (Swift5Parser.BACKTICK - 135)))) !== 0));
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    argument_name() {
        let localctx = new Argument_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 520, Swift5Parser.RULE_argument_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2504;
            this.identifier();
            this.state = 2505;
            this.match(Swift5Parser.COLON);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    type(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        const _parentctx = this._ctx;
        const _parentState = this.state;
        let localctx = new TypeContext(this, this._ctx, _parentState);
        let _prevctx = localctx;
        const _startState = 522;
        this.enterRecursionRule(localctx, 522, Swift5Parser.RULE_type, _p);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2521;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 305, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 2508;
                    this.function_type();
                    break;
                case 2:
                    this.state = 2509;
                    this.array_type();
                    break;
                case 3:
                    this.state = 2510;
                    this.dictionary_type();
                    break;
                case 4:
                    this.state = 2511;
                    this.protocol_composition_type();
                    break;
                case 5:
                    this.state = 2512;
                    this.type_identifier();
                    break;
                case 6:
                    this.state = 2513;
                    this.tuple_type();
                    break;
                case 7:
                    this.state = 2514;
                    this.opaque_type();
                    break;
                case 8:
                    this.state = 2515;
                    this.any_type();
                    break;
                case 9:
                    this.state = 2516;
                    this.self_type();
                    break;
                case 10:
                    this.state = 2517;
                    this.match(Swift5Parser.LPAREN);
                    this.state = 2518;
                    this.type(0);
                    this.state = 2519;
                    this.match(Swift5Parser.RPAREN);
                    break;
            }
            this._ctx.stop = this._input.LT(-1);
            this.state = 2536;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 307, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    if (this._parseListeners !== null) {
                        this.triggerExitRuleEvent();
                    }
                    _prevctx = localctx;
                    localctx = new TypeContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, Swift5Parser.RULE_type);
                    this.state = 2523;
                    if (!(this.precpred(this._ctx, 4))) {
                        throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 2532;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 306, this._ctx);
                    switch (la_) {
                        case 1:
                            this.state = 2524;
                            if (!(!SwiftSupport_1.default.isBinaryOp(this._input))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "!SwiftSupport.isBinaryOp(this._input)");
                            }
                            this.state = 2525;
                            this.match(Swift5Parser.QUESTION);
                            break;
                        case 2:
                            this.state = 2526;
                            if (!(!SwiftSupport_1.default.isBinaryOp(this._input))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "!SwiftSupport.isBinaryOp(this._input)");
                            }
                            this.state = 2527;
                            this.match(Swift5Parser.BANG);
                            break;
                        case 3:
                            this.state = 2528;
                            this.match(Swift5Parser.DOT);
                            this.state = 2529;
                            this.match(Swift5Parser.TYPE);
                            break;
                        case 4:
                            this.state = 2530;
                            this.match(Swift5Parser.DOT);
                            this.state = 2531;
                            this.match(Swift5Parser.PROTOCOL);
                            break;
                    }
                }
                this.state = 2538;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 307, this._ctx);
            }
        }
        catch (error) {
            if (error instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = error;
                this._errHandler.reportError(this, error);
                this._errHandler.recover(this, error);
            }
            else {
                throw error;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }
    type_annotation() {
        let localctx = new Type_annotationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 524, Swift5Parser.RULE_type_annotation);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2539;
            this.match(Swift5Parser.COLON);
            this.state = 2541;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 308, this._ctx);
            if (la_ === 1) {
                this.state = 2540;
                this.attributes();
            }
            this.state = 2544;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.INOUT) {
                this.state = 2543;
                this.match(Swift5Parser.INOUT);
            }
            this.state = 2546;
            this.type(0);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    type_identifier() {
        let localctx = new Type_identifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 526, Swift5Parser.RULE_type_identifier);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2548;
            this.type_name();
            this.state = 2550;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 310, this._ctx);
            if (la_ === 1) {
                this.state = 2549;
                this.generic_argument_clause();
            }
            this.state = 2554;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 311, this._ctx);
            if (la_ === 1) {
                this.state = 2552;
                this.match(Swift5Parser.DOT);
                this.state = 2553;
                this.type_identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    type_name() {
        let localctx = new Type_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 528, Swift5Parser.RULE_type_name);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2556;
            this.identifier();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    tuple_type() {
        let localctx = new Tuple_typeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 530, Swift5Parser.RULE_tuple_type);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2558;
            this.match(Swift5Parser.LPAREN);
            this.state = 2560;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.ALPHA) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.GET) | (1 << Swift5Parser.SET))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Swift5Parser.WILL_SET - 32)) | (1 << (Swift5Parser.DID_SET - 32)) | (1 << (Swift5Parser.INDIRECT - 32)) | (1 << (Swift5Parser.PREFIX - 32)) | (1 << (Swift5Parser.INFIX - 32)) | (1 << (Swift5Parser.LEFT - 32)) | (1 << (Swift5Parser.RIGHT - 32)) | (1 << (Swift5Parser.NONE - 32)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 32)) | (1 << (Swift5Parser.HIGHER_THAN - 32)) | (1 << (Swift5Parser.LOWER_THAN - 32)) | (1 << (Swift5Parser.ASSIGNMENT - 32)) | (1 << (Swift5Parser.ASSOCIATIVITY - 32)) | (1 << (Swift5Parser.POSTFIX - 32)) | (1 << (Swift5Parser.OPERATOR - 32)) | (1 << (Swift5Parser.OS - 32)) | (1 << (Swift5Parser.ARCH - 32)) | (1 << (Swift5Parser.SWIFT - 32)) | (1 << (Swift5Parser.COMPILER - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Swift5Parser.CAN_IMPORT - 64)) | (1 << (Swift5Parser.TARGET_ENVIRONMENT - 64)) | (1 << (Swift5Parser.CONVENIENCE - 64)) | (1 << (Swift5Parser.DYNAMIC - 64)) | (1 << (Swift5Parser.LAZY - 64)) | (1 << (Swift5Parser.OPTIONAL - 64)) | (1 << (Swift5Parser.OVERRIDE - 64)) | (1 << (Swift5Parser.REQUIRED - 64)) | (1 << (Swift5Parser.WEAK - 64)) | (1 << (Swift5Parser.UNOWNED - 64)) | (1 << (Swift5Parser.SAFE - 64)) | (1 << (Swift5Parser.UNSAFE - 64)) | (1 << (Swift5Parser.MUTATING - 64)) | (1 << (Swift5Parser.NONMUTATING - 64)) | (1 << (Swift5Parser.ANY - 64)) | (1 << (Swift5Parser.RED - 64)) | (1 << (Swift5Parser.BLUE - 64)) | (1 << (Swift5Parser.GREEN - 64)) | (1 << (Swift5Parser.RESOURCE_NAME - 64)) | (1 << (Swift5Parser.SOME - 64)) | (1 << (Swift5Parser.TYPE - 64)) | (1 << (Swift5Parser.PRECEDENCE - 64)) | (1 << (Swift5Parser.SELF - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (Swift5Parser.SELF_BIG - 96)) | (1 << (Swift5Parser.MAC_OS - 96)) | (1 << (Swift5Parser.I_OS - 96)) | (1 << (Swift5Parser.OSX - 96)) | (1 << (Swift5Parser.WATCH_OS - 96)) | (1 << (Swift5Parser.TV_OS - 96)) | (1 << (Swift5Parser.LINUX - 96)) | (1 << (Swift5Parser.WINDOWS - 96)) | (1 << (Swift5Parser.I386 - 96)) | (1 << (Swift5Parser.X86_64 - 96)) | (1 << (Swift5Parser.ARM - 96)) | (1 << (Swift5Parser.ARM64 - 96)) | (1 << (Swift5Parser.SIMULATOR - 96)) | (1 << (Swift5Parser.MAC_CATALYST - 96)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.FILE - 96)) | (1 << (Swift5Parser.LINE - 96)))) !== 0) || ((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (Swift5Parser.GETTER - 135)) | (1 << (Swift5Parser.SETTER - 135)) | (1 << (Swift5Parser.Identifier - 135)) | (1 << (Swift5Parser.LPAREN - 135)) | (1 << (Swift5Parser.LBRACK - 135)) | (1 << (Swift5Parser.AT - 135)) | (1 << (Swift5Parser.BACKTICK - 135)))) !== 0)) {
                this.state = 2559;
                this.tuple_type_element_list();
            }
            this.state = 2562;
            this.match(Swift5Parser.RPAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    tuple_type_element_list() {
        let localctx = new Tuple_type_element_listContext(this, this._ctx, this.state);
        this.enterRule(localctx, 532, Swift5Parser.RULE_tuple_type_element_list);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2564;
            this.tuple_type_element();
            this.state = 2569;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === Swift5Parser.COMMA) {
                this.state = 2565;
                this.match(Swift5Parser.COMMA);
                this.state = 2566;
                this.tuple_type_element();
                this.state = 2571;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    tuple_type_element() {
        let localctx = new Tuple_type_elementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 534, Swift5Parser.RULE_tuple_type_element);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2576;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 314, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 2572;
                    this.element_name();
                    this.state = 2573;
                    this.type_annotation();
                    break;
                case 2:
                    this.state = 2575;
                    this.type(0);
                    break;
            }
            this.state = 2580;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.EQUAL) {
                this.state = 2578;
                this.match(Swift5Parser.EQUAL);
                this.state = 2579;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    element_name() {
        let localctx = new Element_nameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 536, Swift5Parser.RULE_element_name);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2583;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2582;
                this.identifier();
                this.state = 2585;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.ALPHA) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.GET) | (1 << Swift5Parser.SET))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Swift5Parser.WILL_SET - 32)) | (1 << (Swift5Parser.DID_SET - 32)) | (1 << (Swift5Parser.INDIRECT - 32)) | (1 << (Swift5Parser.PREFIX - 32)) | (1 << (Swift5Parser.INFIX - 32)) | (1 << (Swift5Parser.LEFT - 32)) | (1 << (Swift5Parser.RIGHT - 32)) | (1 << (Swift5Parser.NONE - 32)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 32)) | (1 << (Swift5Parser.HIGHER_THAN - 32)) | (1 << (Swift5Parser.LOWER_THAN - 32)) | (1 << (Swift5Parser.ASSIGNMENT - 32)) | (1 << (Swift5Parser.ASSOCIATIVITY - 32)) | (1 << (Swift5Parser.POSTFIX - 32)) | (1 << (Swift5Parser.OPERATOR - 32)) | (1 << (Swift5Parser.OS - 32)) | (1 << (Swift5Parser.ARCH - 32)) | (1 << (Swift5Parser.SWIFT - 32)) | (1 << (Swift5Parser.COMPILER - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Swift5Parser.CAN_IMPORT - 64)) | (1 << (Swift5Parser.TARGET_ENVIRONMENT - 64)) | (1 << (Swift5Parser.CONVENIENCE - 64)) | (1 << (Swift5Parser.DYNAMIC - 64)) | (1 << (Swift5Parser.LAZY - 64)) | (1 << (Swift5Parser.OPTIONAL - 64)) | (1 << (Swift5Parser.OVERRIDE - 64)) | (1 << (Swift5Parser.REQUIRED - 64)) | (1 << (Swift5Parser.WEAK - 64)) | (1 << (Swift5Parser.UNOWNED - 64)) | (1 << (Swift5Parser.SAFE - 64)) | (1 << (Swift5Parser.UNSAFE - 64)) | (1 << (Swift5Parser.MUTATING - 64)) | (1 << (Swift5Parser.NONMUTATING - 64)) | (1 << (Swift5Parser.RED - 64)) | (1 << (Swift5Parser.BLUE - 64)) | (1 << (Swift5Parser.GREEN - 64)) | (1 << (Swift5Parser.RESOURCE_NAME - 64)) | (1 << (Swift5Parser.SOME - 64)) | (1 << (Swift5Parser.TYPE - 64)) | (1 << (Swift5Parser.PRECEDENCE - 64)) | (1 << (Swift5Parser.SELF - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (Swift5Parser.SELF_BIG - 96)) | (1 << (Swift5Parser.MAC_OS - 96)) | (1 << (Swift5Parser.I_OS - 96)) | (1 << (Swift5Parser.OSX - 96)) | (1 << (Swift5Parser.WATCH_OS - 96)) | (1 << (Swift5Parser.TV_OS - 96)) | (1 << (Swift5Parser.LINUX - 96)) | (1 << (Swift5Parser.WINDOWS - 96)) | (1 << (Swift5Parser.I386 - 96)) | (1 << (Swift5Parser.X86_64 - 96)) | (1 << (Swift5Parser.ARM - 96)) | (1 << (Swift5Parser.ARM64 - 96)) | (1 << (Swift5Parser.SIMULATOR - 96)) | (1 << (Swift5Parser.MAC_CATALYST - 96)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.FILE - 96)) | (1 << (Swift5Parser.LINE - 96)))) !== 0) || ((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (Swift5Parser.GETTER - 135)) | (1 << (Swift5Parser.SETTER - 135)) | (1 << (Swift5Parser.Identifier - 135)) | (1 << (Swift5Parser.BACKTICK - 135)))) !== 0));
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    function_type() {
        let localctx = new Function_typeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 538, Swift5Parser.RULE_function_type);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2588;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Swift5Parser.AT) {
                this.state = 2587;
                this.attributes();
            }
            this.state = 2590;
            this.function_type_argument_clause();
            this.state = 2592;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 318, this._ctx);
            if (la_ === 1) {
                this.state = 2591;
                this.match(Swift5Parser.THROWS);
            }
            this.state = 2594;
            this.arrow_operator();
            this.state = 2595;
            this.type(0);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    function_type_argument_clause() {
        let localctx = new Function_type_argument_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 540, Swift5Parser.RULE_function_type_argument_clause);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2597;
            this.match(Swift5Parser.LPAREN);
            this.state = 2602;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.ALPHA) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.GET) | (1 << Swift5Parser.SET))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Swift5Parser.WILL_SET - 32)) | (1 << (Swift5Parser.DID_SET - 32)) | (1 << (Swift5Parser.INDIRECT - 32)) | (1 << (Swift5Parser.PREFIX - 32)) | (1 << (Swift5Parser.INFIX - 32)) | (1 << (Swift5Parser.LEFT - 32)) | (1 << (Swift5Parser.RIGHT - 32)) | (1 << (Swift5Parser.NONE - 32)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 32)) | (1 << (Swift5Parser.HIGHER_THAN - 32)) | (1 << (Swift5Parser.LOWER_THAN - 32)) | (1 << (Swift5Parser.ASSIGNMENT - 32)) | (1 << (Swift5Parser.ASSOCIATIVITY - 32)) | (1 << (Swift5Parser.POSTFIX - 32)) | (1 << (Swift5Parser.OPERATOR - 32)) | (1 << (Swift5Parser.OS - 32)) | (1 << (Swift5Parser.ARCH - 32)) | (1 << (Swift5Parser.SWIFT - 32)) | (1 << (Swift5Parser.COMPILER - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Swift5Parser.CAN_IMPORT - 64)) | (1 << (Swift5Parser.TARGET_ENVIRONMENT - 64)) | (1 << (Swift5Parser.CONVENIENCE - 64)) | (1 << (Swift5Parser.DYNAMIC - 64)) | (1 << (Swift5Parser.LAZY - 64)) | (1 << (Swift5Parser.OPTIONAL - 64)) | (1 << (Swift5Parser.OVERRIDE - 64)) | (1 << (Swift5Parser.REQUIRED - 64)) | (1 << (Swift5Parser.WEAK - 64)) | (1 << (Swift5Parser.UNOWNED - 64)) | (1 << (Swift5Parser.SAFE - 64)) | (1 << (Swift5Parser.UNSAFE - 64)) | (1 << (Swift5Parser.MUTATING - 64)) | (1 << (Swift5Parser.NONMUTATING - 64)) | (1 << (Swift5Parser.ANY - 64)) | (1 << (Swift5Parser.RED - 64)) | (1 << (Swift5Parser.BLUE - 64)) | (1 << (Swift5Parser.GREEN - 64)) | (1 << (Swift5Parser.RESOURCE_NAME - 64)) | (1 << (Swift5Parser.INOUT - 64)) | (1 << (Swift5Parser.SOME - 64)) | (1 << (Swift5Parser.TYPE - 64)) | (1 << (Swift5Parser.PRECEDENCE - 64)) | (1 << (Swift5Parser.SELF - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (Swift5Parser.SELF_BIG - 96)) | (1 << (Swift5Parser.MAC_OS - 96)) | (1 << (Swift5Parser.I_OS - 96)) | (1 << (Swift5Parser.OSX - 96)) | (1 << (Swift5Parser.WATCH_OS - 96)) | (1 << (Swift5Parser.TV_OS - 96)) | (1 << (Swift5Parser.LINUX - 96)) | (1 << (Swift5Parser.WINDOWS - 96)) | (1 << (Swift5Parser.I386 - 96)) | (1 << (Swift5Parser.X86_64 - 96)) | (1 << (Swift5Parser.ARM - 96)) | (1 << (Swift5Parser.ARM64 - 96)) | (1 << (Swift5Parser.SIMULATOR - 96)) | (1 << (Swift5Parser.MAC_CATALYST - 96)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.FILE - 96)) | (1 << (Swift5Parser.LINE - 96)))) !== 0) || ((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (Swift5Parser.GETTER - 135)) | (1 << (Swift5Parser.SETTER - 135)) | (1 << (Swift5Parser.Identifier - 135)) | (1 << (Swift5Parser.LPAREN - 135)) | (1 << (Swift5Parser.LBRACK - 135)) | (1 << (Swift5Parser.AT - 135)) | (1 << (Swift5Parser.BACKTICK - 135)))) !== 0)) {
                this.state = 2598;
                this.function_type_argument_list();
                this.state = 2600;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 319, this._ctx);
                if (la_ === 1) {
                    this.state = 2599;
                    this.range_operator();
                }
            }
            this.state = 2604;
            this.match(Swift5Parser.RPAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    function_type_argument_list() {
        let localctx = new Function_type_argument_listContext(this, this._ctx, this.state);
        this.enterRule(localctx, 542, Swift5Parser.RULE_function_type_argument_list);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2606;
            this.function_type_argument();
            this.state = 2611;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 321, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 2607;
                    this.match(Swift5Parser.COMMA);
                    this.state = 2608;
                    this.function_type_argument();
                }
                this.state = 2613;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 321, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    function_type_argument() {
        let localctx = new Function_type_argumentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 544, Swift5Parser.RULE_function_type_argument);
        var _la = 0; // Token type
        try {
            this.state = 2624;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 324, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2615;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 322, this._ctx);
                    if (la_ === 1) {
                        this.state = 2614;
                        this.attributes();
                    }
                    this.state = 2618;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === Swift5Parser.INOUT) {
                        this.state = 2617;
                        this.match(Swift5Parser.INOUT);
                    }
                    this.state = 2620;
                    this.type(0);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2621;
                    this.argument_label();
                    this.state = 2622;
                    this.type_annotation();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    argument_label() {
        let localctx = new Argument_labelContext(this, this._ctx, this.state);
        this.enterRule(localctx, 546, Swift5Parser.RULE_argument_label);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2627;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2626;
                this.identifier();
                this.state = 2629;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.ALPHA) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.GET) | (1 << Swift5Parser.SET))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Swift5Parser.WILL_SET - 32)) | (1 << (Swift5Parser.DID_SET - 32)) | (1 << (Swift5Parser.INDIRECT - 32)) | (1 << (Swift5Parser.PREFIX - 32)) | (1 << (Swift5Parser.INFIX - 32)) | (1 << (Swift5Parser.LEFT - 32)) | (1 << (Swift5Parser.RIGHT - 32)) | (1 << (Swift5Parser.NONE - 32)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 32)) | (1 << (Swift5Parser.HIGHER_THAN - 32)) | (1 << (Swift5Parser.LOWER_THAN - 32)) | (1 << (Swift5Parser.ASSIGNMENT - 32)) | (1 << (Swift5Parser.ASSOCIATIVITY - 32)) | (1 << (Swift5Parser.POSTFIX - 32)) | (1 << (Swift5Parser.OPERATOR - 32)) | (1 << (Swift5Parser.OS - 32)) | (1 << (Swift5Parser.ARCH - 32)) | (1 << (Swift5Parser.SWIFT - 32)) | (1 << (Swift5Parser.COMPILER - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Swift5Parser.CAN_IMPORT - 64)) | (1 << (Swift5Parser.TARGET_ENVIRONMENT - 64)) | (1 << (Swift5Parser.CONVENIENCE - 64)) | (1 << (Swift5Parser.DYNAMIC - 64)) | (1 << (Swift5Parser.LAZY - 64)) | (1 << (Swift5Parser.OPTIONAL - 64)) | (1 << (Swift5Parser.OVERRIDE - 64)) | (1 << (Swift5Parser.REQUIRED - 64)) | (1 << (Swift5Parser.WEAK - 64)) | (1 << (Swift5Parser.UNOWNED - 64)) | (1 << (Swift5Parser.SAFE - 64)) | (1 << (Swift5Parser.UNSAFE - 64)) | (1 << (Swift5Parser.MUTATING - 64)) | (1 << (Swift5Parser.NONMUTATING - 64)) | (1 << (Swift5Parser.RED - 64)) | (1 << (Swift5Parser.BLUE - 64)) | (1 << (Swift5Parser.GREEN - 64)) | (1 << (Swift5Parser.RESOURCE_NAME - 64)) | (1 << (Swift5Parser.SOME - 64)) | (1 << (Swift5Parser.TYPE - 64)) | (1 << (Swift5Parser.PRECEDENCE - 64)) | (1 << (Swift5Parser.SELF - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (Swift5Parser.SELF_BIG - 96)) | (1 << (Swift5Parser.MAC_OS - 96)) | (1 << (Swift5Parser.I_OS - 96)) | (1 << (Swift5Parser.OSX - 96)) | (1 << (Swift5Parser.WATCH_OS - 96)) | (1 << (Swift5Parser.TV_OS - 96)) | (1 << (Swift5Parser.LINUX - 96)) | (1 << (Swift5Parser.WINDOWS - 96)) | (1 << (Swift5Parser.I386 - 96)) | (1 << (Swift5Parser.X86_64 - 96)) | (1 << (Swift5Parser.ARM - 96)) | (1 << (Swift5Parser.ARM64 - 96)) | (1 << (Swift5Parser.SIMULATOR - 96)) | (1 << (Swift5Parser.MAC_CATALYST - 96)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.FILE - 96)) | (1 << (Swift5Parser.LINE - 96)))) !== 0) || ((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (Swift5Parser.GETTER - 135)) | (1 << (Swift5Parser.SETTER - 135)) | (1 << (Swift5Parser.Identifier - 135)) | (1 << (Swift5Parser.BACKTICK - 135)))) !== 0));
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    array_type() {
        let localctx = new Array_typeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 548, Swift5Parser.RULE_array_type);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2631;
            this.match(Swift5Parser.LBRACK);
            this.state = 2632;
            this.type(0);
            this.state = 2633;
            this.match(Swift5Parser.RBRACK);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    dictionary_type() {
        let localctx = new Dictionary_typeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 550, Swift5Parser.RULE_dictionary_type);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2635;
            this.match(Swift5Parser.LBRACK);
            this.state = 2636;
            this.type(0);
            this.state = 2637;
            this.match(Swift5Parser.COLON);
            this.state = 2638;
            this.type(0);
            this.state = 2639;
            this.match(Swift5Parser.RBRACK);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    protocol_composition_type() {
        let localctx = new Protocol_composition_typeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 552, Swift5Parser.RULE_protocol_composition_type);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2641;
            this.type_identifier();
            this.state = 2646;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 326, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 2642;
                    this.match(Swift5Parser.AND);
                    this.state = 2643;
                    this.type_identifier();
                }
                this.state = 2648;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 326, this._ctx);
            }
            this.state = 2650;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 327, this._ctx);
            if (la_ === 1) {
                this.state = 2649;
                this.trailing_composition_and();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    trailing_composition_and() {
        let localctx = new Trailing_composition_andContext(this, this._ctx, this.state);
        this.enterRule(localctx, 554, Swift5Parser.RULE_trailing_composition_and);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2652;
            if (!(!SwiftSupport_1.default.isBinaryOp(this._input))) {
                throw new antlr4_1.default.error.FailedPredicateException(this, "!SwiftSupport.isBinaryOp(this._input)");
            }
            this.state = 2653;
            this.match(Swift5Parser.AND);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    opaque_type() {
        let localctx = new Opaque_typeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 556, Swift5Parser.RULE_opaque_type);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2655;
            this.match(Swift5Parser.SOME);
            this.state = 2656;
            this.type(0);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    any_type() {
        let localctx = new Any_typeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 558, Swift5Parser.RULE_any_type);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2658;
            this.match(Swift5Parser.ANY);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    self_type() {
        let localctx = new Self_typeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 560, Swift5Parser.RULE_self_type);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2660;
            this.match(Swift5Parser.SELF_BIG);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    type_inheritance_clause() {
        let localctx = new Type_inheritance_clauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 562, Swift5Parser.RULE_type_inheritance_clause);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2662;
            this.match(Swift5Parser.COLON);
            this.state = 2663;
            this.type_inheritance_list();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    type_inheritance_list() {
        let localctx = new Type_inheritance_listContext(this, this._ctx, this.state);
        this.enterRule(localctx, 564, Swift5Parser.RULE_type_inheritance_list);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2665;
            this.type_identifier();
            this.state = 2670;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === Swift5Parser.COMMA) {
                this.state = 2666;
                this.match(Swift5Parser.COMMA);
                this.state = 2667;
                this.type_identifier();
                this.state = 2672;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    identifier() {
        let localctx = new IdentifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 566, Swift5Parser.RULE_identifier);
        var _la = 0; // Token type
        try {
            this.state = 2682;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.AS:
                case Swift5Parser.ALPHA:
                case Swift5Parser.CATCH:
                case Swift5Parser.CLASS:
                case Swift5Parser.DEFAULT:
                case Swift5Parser.DO:
                case Swift5Parser.GUARD:
                case Swift5Parser.FOR:
                case Swift5Parser.IN:
                case Swift5Parser.INTERNAL:
                case Swift5Parser.FINAL:
                case Swift5Parser.OPEN:
                case Swift5Parser.PRIVATE:
                case Swift5Parser.PUBLIC:
                case Swift5Parser.WHERE:
                case Swift5Parser.WHILE:
                case Swift5Parser.PROTOCOL:
                case Swift5Parser.GET:
                case Swift5Parser.SET:
                case Swift5Parser.WILL_SET:
                case Swift5Parser.DID_SET:
                case Swift5Parser.INDIRECT:
                case Swift5Parser.PREFIX:
                case Swift5Parser.INFIX:
                case Swift5Parser.LEFT:
                case Swift5Parser.RIGHT:
                case Swift5Parser.NONE:
                case Swift5Parser.PRECEDENCE_GROUP:
                case Swift5Parser.HIGHER_THAN:
                case Swift5Parser.LOWER_THAN:
                case Swift5Parser.ASSIGNMENT:
                case Swift5Parser.ASSOCIATIVITY:
                case Swift5Parser.POSTFIX:
                case Swift5Parser.OPERATOR:
                case Swift5Parser.OS:
                case Swift5Parser.ARCH:
                case Swift5Parser.SWIFT:
                case Swift5Parser.COMPILER:
                case Swift5Parser.CAN_IMPORT:
                case Swift5Parser.TARGET_ENVIRONMENT:
                case Swift5Parser.CONVENIENCE:
                case Swift5Parser.DYNAMIC:
                case Swift5Parser.LAZY:
                case Swift5Parser.OPTIONAL:
                case Swift5Parser.OVERRIDE:
                case Swift5Parser.REQUIRED:
                case Swift5Parser.WEAK:
                case Swift5Parser.UNOWNED:
                case Swift5Parser.SAFE:
                case Swift5Parser.UNSAFE:
                case Swift5Parser.MUTATING:
                case Swift5Parser.NONMUTATING:
                case Swift5Parser.RED:
                case Swift5Parser.BLUE:
                case Swift5Parser.GREEN:
                case Swift5Parser.RESOURCE_NAME:
                case Swift5Parser.SOME:
                case Swift5Parser.TYPE:
                case Swift5Parser.PRECEDENCE:
                case Swift5Parser.SELF:
                case Swift5Parser.SELF_BIG:
                case Swift5Parser.MAC_OS:
                case Swift5Parser.I_OS:
                case Swift5Parser.OSX:
                case Swift5Parser.WATCH_OS:
                case Swift5Parser.TV_OS:
                case Swift5Parser.LINUX:
                case Swift5Parser.WINDOWS:
                case Swift5Parser.I386:
                case Swift5Parser.X86_64:
                case Swift5Parser.ARM:
                case Swift5Parser.ARM64:
                case Swift5Parser.SIMULATOR:
                case Swift5Parser.MAC_CATALYST:
                case Swift5Parser.I_OS_APPLICATION_EXTENSION:
                case Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION:
                case Swift5Parser.MAC_OS_APPLICATION_EXTENSION:
                case Swift5Parser.FILE:
                case Swift5Parser.LINE:
                case Swift5Parser.GETTER:
                case Swift5Parser.SETTER:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2673;
                    _la = this._input.LA(1);
                    if (!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.ALPHA) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.GET) | (1 << Swift5Parser.SET))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Swift5Parser.WILL_SET - 32)) | (1 << (Swift5Parser.DID_SET - 32)) | (1 << (Swift5Parser.INDIRECT - 32)) | (1 << (Swift5Parser.PREFIX - 32)) | (1 << (Swift5Parser.INFIX - 32)) | (1 << (Swift5Parser.LEFT - 32)) | (1 << (Swift5Parser.RIGHT - 32)) | (1 << (Swift5Parser.NONE - 32)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 32)) | (1 << (Swift5Parser.HIGHER_THAN - 32)) | (1 << (Swift5Parser.LOWER_THAN - 32)) | (1 << (Swift5Parser.ASSIGNMENT - 32)) | (1 << (Swift5Parser.ASSOCIATIVITY - 32)) | (1 << (Swift5Parser.POSTFIX - 32)) | (1 << (Swift5Parser.OPERATOR - 32)) | (1 << (Swift5Parser.OS - 32)) | (1 << (Swift5Parser.ARCH - 32)) | (1 << (Swift5Parser.SWIFT - 32)) | (1 << (Swift5Parser.COMPILER - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Swift5Parser.CAN_IMPORT - 64)) | (1 << (Swift5Parser.TARGET_ENVIRONMENT - 64)) | (1 << (Swift5Parser.CONVENIENCE - 64)) | (1 << (Swift5Parser.DYNAMIC - 64)) | (1 << (Swift5Parser.LAZY - 64)) | (1 << (Swift5Parser.OPTIONAL - 64)) | (1 << (Swift5Parser.OVERRIDE - 64)) | (1 << (Swift5Parser.REQUIRED - 64)) | (1 << (Swift5Parser.WEAK - 64)) | (1 << (Swift5Parser.UNOWNED - 64)) | (1 << (Swift5Parser.SAFE - 64)) | (1 << (Swift5Parser.UNSAFE - 64)) | (1 << (Swift5Parser.MUTATING - 64)) | (1 << (Swift5Parser.NONMUTATING - 64)) | (1 << (Swift5Parser.RED - 64)) | (1 << (Swift5Parser.BLUE - 64)) | (1 << (Swift5Parser.GREEN - 64)) | (1 << (Swift5Parser.RESOURCE_NAME - 64)) | (1 << (Swift5Parser.SOME - 64)) | (1 << (Swift5Parser.TYPE - 64)) | (1 << (Swift5Parser.PRECEDENCE - 64)) | (1 << (Swift5Parser.SELF - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (Swift5Parser.SELF_BIG - 96)) | (1 << (Swift5Parser.MAC_OS - 96)) | (1 << (Swift5Parser.I_OS - 96)) | (1 << (Swift5Parser.OSX - 96)) | (1 << (Swift5Parser.WATCH_OS - 96)) | (1 << (Swift5Parser.TV_OS - 96)) | (1 << (Swift5Parser.LINUX - 96)) | (1 << (Swift5Parser.WINDOWS - 96)) | (1 << (Swift5Parser.I386 - 96)) | (1 << (Swift5Parser.X86_64 - 96)) | (1 << (Swift5Parser.ARM - 96)) | (1 << (Swift5Parser.ARM64 - 96)) | (1 << (Swift5Parser.SIMULATOR - 96)) | (1 << (Swift5Parser.MAC_CATALYST - 96)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.FILE - 96)) | (1 << (Swift5Parser.LINE - 96)))) !== 0) || _la === Swift5Parser.GETTER || _la === Swift5Parser.SETTER)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case Swift5Parser.Identifier:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2674;
                    this.match(Swift5Parser.Identifier);
                    break;
                case Swift5Parser.BACKTICK:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2675;
                    this.match(Swift5Parser.BACKTICK);
                    this.state = 2679;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case Swift5Parser.AS:
                        case Swift5Parser.BREAK:
                        case Swift5Parser.CASE:
                        case Swift5Parser.CATCH:
                        case Swift5Parser.CLASS:
                        case Swift5Parser.CONTINUE:
                        case Swift5Parser.DEFAULT:
                        case Swift5Parser.DEFER:
                        case Swift5Parser.DO:
                        case Swift5Parser.GUARD:
                        case Swift5Parser.ELSE:
                        case Swift5Parser.ENUM:
                        case Swift5Parser.FOR:
                        case Swift5Parser.FALLTHROUGH:
                        case Swift5Parser.FUNC:
                        case Swift5Parser.IN:
                        case Swift5Parser.IF:
                        case Swift5Parser.IMPORT:
                        case Swift5Parser.INTERNAL:
                        case Swift5Parser.OPEN:
                        case Swift5Parser.PRIVATE:
                        case Swift5Parser.PUBLIC:
                        case Swift5Parser.WHERE:
                        case Swift5Parser.WHILE:
                        case Swift5Parser.LET:
                        case Swift5Parser.VAR:
                        case Swift5Parser.PROTOCOL:
                        case Swift5Parser.REPEAT:
                        case Swift5Parser.SWITCH:
                        case Swift5Parser.STRUCT:
                        case Swift5Parser.RETURN:
                        case Swift5Parser.THROW:
                        case Swift5Parser.THROWS:
                        case Swift5Parser.RETHROWS:
                        case Swift5Parser.INIT:
                        case Swift5Parser.DEINIT:
                        case Swift5Parser.ASSOCIATED_TYPE:
                        case Swift5Parser.EXTENSION:
                        case Swift5Parser.SUBSCRIPT:
                        case Swift5Parser.OPERATOR:
                        case Swift5Parser.TYPEALIAS:
                        case Swift5Parser.STATIC:
                        case Swift5Parser.FILE_PRIVATE:
                        case Swift5Parser.IS:
                        case Swift5Parser.TRY:
                        case Swift5Parser.SUPER:
                        case Swift5Parser.ANY:
                        case Swift5Parser.FALSE:
                        case Swift5Parser.TRUE:
                        case Swift5Parser.NIL:
                        case Swift5Parser.INOUT:
                        case Swift5Parser.SELF:
                        case Swift5Parser.SELF_BIG:
                        case Swift5Parser.SOURCE_LOCATION:
                        case Swift5Parser.ERROR:
                        case Swift5Parser.WARNING:
                        case Swift5Parser.AVAILABLE:
                        case Swift5Parser.HASH_IF:
                        case Swift5Parser.HASH_ELSEIF:
                        case Swift5Parser.HASH_ELSE:
                        case Swift5Parser.HASH_ENDIF:
                        case Swift5Parser.HASH_FILE:
                        case Swift5Parser.HASH_FILE_ID:
                        case Swift5Parser.HASH_FILE_PATH:
                        case Swift5Parser.HASH_LINE:
                        case Swift5Parser.HASH_COLUMN:
                        case Swift5Parser.HASH_FUNCTION:
                        case Swift5Parser.HASH_SELECTOR:
                        case Swift5Parser.HASH_COLOR_LITERAL:
                        case Swift5Parser.HASH_FILE_LITERAL:
                        case Swift5Parser.HASH_IMAGE_LITERAL:
                        case Swift5Parser.UNDERSCORE:
                            this.state = 2676;
                            this.keyword();
                            break;
                        case Swift5Parser.Identifier:
                            this.state = 2677;
                            this.match(Swift5Parser.Identifier);
                            break;
                        case Swift5Parser.DOLLAR:
                            this.state = 2678;
                            this.match(Swift5Parser.DOLLAR);
                            break;
                        default:
                            throw new antlr4_1.default.error.NoViableAltException(this);
                    }
                    this.state = 2681;
                    this.match(Swift5Parser.BACKTICK);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    identifier_list() {
        let localctx = new Identifier_listContext(this, this._ctx, this.state);
        this.enterRule(localctx, 568, Swift5Parser.RULE_identifier_list);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2684;
            this.identifier();
            this.state = 2689;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 331, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 2685;
                    this.match(Swift5Parser.COMMA);
                    this.state = 2686;
                    this.identifier();
                }
                this.state = 2691;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 331, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    keyword() {
        let localctx = new KeywordContext(this, this._ctx, this.state);
        this.enterRule(localctx, 570, Swift5Parser.RULE_keyword);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2692;
            _la = this._input.LA(1);
            if (!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.BREAK) | (1 << Swift5Parser.CASE) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.CONTINUE) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DEFER) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.ELSE) | (1 << Swift5Parser.ENUM) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.FALLTHROUGH) | (1 << Swift5Parser.FUNC) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.IF) | (1 << Swift5Parser.IMPORT) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.LET) | (1 << Swift5Parser.VAR) | (1 << Swift5Parser.PROTOCOL))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (Swift5Parser.REPEAT - 34)) | (1 << (Swift5Parser.SWITCH - 34)) | (1 << (Swift5Parser.STRUCT - 34)) | (1 << (Swift5Parser.RETURN - 34)) | (1 << (Swift5Parser.THROW - 34)) | (1 << (Swift5Parser.THROWS - 34)) | (1 << (Swift5Parser.RETHROWS - 34)) | (1 << (Swift5Parser.INIT - 34)) | (1 << (Swift5Parser.DEINIT - 34)) | (1 << (Swift5Parser.ASSOCIATED_TYPE - 34)) | (1 << (Swift5Parser.EXTENSION - 34)) | (1 << (Swift5Parser.SUBSCRIPT - 34)) | (1 << (Swift5Parser.OPERATOR - 34)) | (1 << (Swift5Parser.TYPEALIAS - 34)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (Swift5Parser.STATIC - 72)) | (1 << (Swift5Parser.FILE_PRIVATE - 72)) | (1 << (Swift5Parser.IS - 72)) | (1 << (Swift5Parser.TRY - 72)) | (1 << (Swift5Parser.SUPER - 72)) | (1 << (Swift5Parser.ANY - 72)) | (1 << (Swift5Parser.FALSE - 72)) | (1 << (Swift5Parser.TRUE - 72)) | (1 << (Swift5Parser.NIL - 72)) | (1 << (Swift5Parser.INOUT - 72)) | (1 << (Swift5Parser.SELF - 72)) | (1 << (Swift5Parser.SELF_BIG - 72)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (Swift5Parser.SOURCE_LOCATION - 113)) | (1 << (Swift5Parser.ERROR - 113)) | (1 << (Swift5Parser.WARNING - 113)) | (1 << (Swift5Parser.AVAILABLE - 113)) | (1 << (Swift5Parser.HASH_IF - 113)) | (1 << (Swift5Parser.HASH_ELSEIF - 113)) | (1 << (Swift5Parser.HASH_ELSE - 113)) | (1 << (Swift5Parser.HASH_ENDIF - 113)) | (1 << (Swift5Parser.HASH_FILE - 113)) | (1 << (Swift5Parser.HASH_FILE_ID - 113)) | (1 << (Swift5Parser.HASH_FILE_PATH - 113)) | (1 << (Swift5Parser.HASH_LINE - 113)) | (1 << (Swift5Parser.HASH_COLUMN - 113)) | (1 << (Swift5Parser.HASH_FUNCTION - 113)) | (1 << (Swift5Parser.HASH_SELECTOR - 113)) | (1 << (Swift5Parser.HASH_COLOR_LITERAL - 113)) | (1 << (Swift5Parser.HASH_FILE_LITERAL - 113)) | (1 << (Swift5Parser.HASH_IMAGE_LITERAL - 113)))) !== 0) || _la === Swift5Parser.UNDERSCORE)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    assignment_operator() {
        let localctx = new Assignment_operatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 572, Swift5Parser.RULE_assignment_operator);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2694;
            if (!(SwiftSupport_1.default.isBinaryOp(this._input))) {
                throw new antlr4_1.default.error.FailedPredicateException(this, "SwiftSupport.isBinaryOp(this._input)");
            }
            this.state = 2695;
            this.match(Swift5Parser.EQUAL);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    negate_prefix_operator() {
        let localctx = new Negate_prefix_operatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 574, Swift5Parser.RULE_negate_prefix_operator);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2697;
            if (!(SwiftSupport_1.default.isPrefixOp(this._input))) {
                throw new antlr4_1.default.error.FailedPredicateException(this, "SwiftSupport.isPrefixOp(this._input)");
            }
            this.state = 2698;
            this.match(Swift5Parser.SUB);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    compilation_condition_AND() {
        let localctx = new Compilation_condition_ANDContext(this, this._ctx, this.state);
        this.enterRule(localctx, 576, Swift5Parser.RULE_compilation_condition_AND);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2700;
            if (!(SwiftSupport_1.default.isOperator(this._input, "&&"))) {
                throw new antlr4_1.default.error.FailedPredicateException(this, "SwiftSupport.isOperator(this._input,\"&&\")");
            }
            this.state = 2701;
            this.match(Swift5Parser.AND);
            this.state = 2702;
            this.match(Swift5Parser.AND);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    compilation_condition_OR() {
        let localctx = new Compilation_condition_ORContext(this, this._ctx, this.state);
        this.enterRule(localctx, 578, Swift5Parser.RULE_compilation_condition_OR);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2704;
            if (!(SwiftSupport_1.default.isOperator(this._input, "||"))) {
                throw new antlr4_1.default.error.FailedPredicateException(this, "SwiftSupport.isOperator(this._input,\"||\")");
            }
            this.state = 2705;
            this.match(Swift5Parser.OR);
            this.state = 2706;
            this.match(Swift5Parser.OR);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    compilation_condition_GE() {
        let localctx = new Compilation_condition_GEContext(this, this._ctx, this.state);
        this.enterRule(localctx, 580, Swift5Parser.RULE_compilation_condition_GE);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2708;
            if (!(SwiftSupport_1.default.isOperator(this._input, ">="))) {
                throw new antlr4_1.default.error.FailedPredicateException(this, "SwiftSupport.isOperator(this._input,\">=\")");
            }
            this.state = 2709;
            this.match(Swift5Parser.GT);
            this.state = 2710;
            this.match(Swift5Parser.EQUAL);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    compilation_condition_L() {
        let localctx = new Compilation_condition_LContext(this, this._ctx, this.state);
        this.enterRule(localctx, 582, Swift5Parser.RULE_compilation_condition_L);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2712;
            if (!(SwiftSupport_1.default.isOperator(this._input, "<"))) {
                throw new antlr4_1.default.error.FailedPredicateException(this, "SwiftSupport.isOperator(this._input,\"<\")");
            }
            this.state = 2713;
            this.match(Swift5Parser.LT);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    arrow_operator() {
        let localctx = new Arrow_operatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 584, Swift5Parser.RULE_arrow_operator);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2715;
            if (!(SwiftSupport_1.default.isOperator(this._input, "->"))) {
                throw new antlr4_1.default.error.FailedPredicateException(this, "SwiftSupport.isOperator(this._input,\"->\")");
            }
            this.state = 2716;
            this.match(Swift5Parser.SUB);
            this.state = 2717;
            this.match(Swift5Parser.GT);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    range_operator() {
        let localctx = new Range_operatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 586, Swift5Parser.RULE_range_operator);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2719;
            if (!(SwiftSupport_1.default.isOperator(this._input, "..."))) {
                throw new antlr4_1.default.error.FailedPredicateException(this, "SwiftSupport.isOperator(this._input,\"...\")");
            }
            this.state = 2720;
            this.match(Swift5Parser.DOT);
            this.state = 2721;
            this.match(Swift5Parser.DOT);
            this.state = 2722;
            this.match(Swift5Parser.DOT);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    same_type_equals() {
        let localctx = new Same_type_equalsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 588, Swift5Parser.RULE_same_type_equals);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2724;
            if (!(SwiftSupport_1.default.isOperator(this._input, "=="))) {
                throw new antlr4_1.default.error.FailedPredicateException(this, "SwiftSupport.isOperator(this._input,\"==\")");
            }
            this.state = 2725;
            this.match(Swift5Parser.EQUAL);
            this.state = 2726;
            this.match(Swift5Parser.EQUAL);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    binary_operator() {
        let localctx = new Binary_operatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 590, Swift5Parser.RULE_binary_operator);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2728;
            if (!(SwiftSupport_1.default.isBinaryOp(this._input))) {
                throw new antlr4_1.default.error.FailedPredicateException(this, "SwiftSupport.isBinaryOp(this._input)");
            }
            this.state = 2729;
            this.operator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    prefix_operator() {
        let localctx = new Prefix_operatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 592, Swift5Parser.RULE_prefix_operator);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2731;
            if (!(SwiftSupport_1.default.isPrefixOp(this._input))) {
                throw new antlr4_1.default.error.FailedPredicateException(this, "SwiftSupport.isPrefixOp(this._input)");
            }
            this.state = 2732;
            this.operator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    postfix_operator() {
        let localctx = new Postfix_operatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 594, Swift5Parser.RULE_postfix_operator);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2734;
            if (!(SwiftSupport_1.default.isPostfixOp(this._input))) {
                throw new antlr4_1.default.error.FailedPredicateException(this, "SwiftSupport.isPostfixOp(this._input)");
            }
            this.state = 2735;
            this.operator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    operator() {
        let localctx = new OperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 596, Swift5Parser.RULE_operator);
        try {
            this.state = 2744;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.LT:
                case Swift5Parser.GT:
                case Swift5Parser.BANG:
                case Swift5Parser.QUESTION:
                case Swift5Parser.AND:
                case Swift5Parser.SUB:
                case Swift5Parser.EQUAL:
                case Swift5Parser.OR:
                case Swift5Parser.DIV:
                case Swift5Parser.ADD:
                case Swift5Parser.MUL:
                case Swift5Parser.MOD:
                case Swift5Parser.CARET:
                case Swift5Parser.TILDE:
                case Swift5Parser.Operator_head_other:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2737;
                    this.operator_head();
                    this.state = 2739;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 332, this._ctx);
                    if (la_ === 1) {
                        this.state = 2738;
                        this.operator_characters();
                    }
                    break;
                case Swift5Parser.DOT:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2741;
                    this.dot_operator_head();
                    this.state = 2742;
                    this.dot_operator_characters();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    operator_head() {
        let localctx = new Operator_headContext(this, this._ctx, this.state);
        this.enterRule(localctx, 598, Swift5Parser.RULE_operator_head);
        var _la = 0; // Token type
        try {
            this.state = 2748;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.LT:
                case Swift5Parser.GT:
                case Swift5Parser.BANG:
                case Swift5Parser.QUESTION:
                case Swift5Parser.AND:
                case Swift5Parser.SUB:
                case Swift5Parser.EQUAL:
                case Swift5Parser.OR:
                case Swift5Parser.DIV:
                case Swift5Parser.ADD:
                case Swift5Parser.MUL:
                case Swift5Parser.MOD:
                case Swift5Parser.CARET:
                case Swift5Parser.TILDE:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2746;
                    _la = this._input.LA(1);
                    if (!(((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (Swift5Parser.LT - 148)) | (1 << (Swift5Parser.GT - 148)) | (1 << (Swift5Parser.BANG - 148)) | (1 << (Swift5Parser.QUESTION - 148)) | (1 << (Swift5Parser.AND - 148)) | (1 << (Swift5Parser.SUB - 148)) | (1 << (Swift5Parser.EQUAL - 148)) | (1 << (Swift5Parser.OR - 148)) | (1 << (Swift5Parser.DIV - 148)) | (1 << (Swift5Parser.ADD - 148)) | (1 << (Swift5Parser.MUL - 148)) | (1 << (Swift5Parser.MOD - 148)) | (1 << (Swift5Parser.CARET - 148)) | (1 << (Swift5Parser.TILDE - 148)))) !== 0))) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case Swift5Parser.Operator_head_other:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2747;
                    this.match(Swift5Parser.Operator_head_other);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    operator_character() {
        let localctx = new Operator_characterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 600, Swift5Parser.RULE_operator_character);
        try {
            this.state = 2752;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.LT:
                case Swift5Parser.GT:
                case Swift5Parser.BANG:
                case Swift5Parser.QUESTION:
                case Swift5Parser.AND:
                case Swift5Parser.SUB:
                case Swift5Parser.EQUAL:
                case Swift5Parser.OR:
                case Swift5Parser.DIV:
                case Swift5Parser.ADD:
                case Swift5Parser.MUL:
                case Swift5Parser.MOD:
                case Swift5Parser.CARET:
                case Swift5Parser.TILDE:
                case Swift5Parser.Operator_head_other:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2750;
                    this.operator_head();
                    break;
                case Swift5Parser.Operator_following_character:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2751;
                    this.match(Swift5Parser.Operator_following_character);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    operator_characters() {
        let localctx = new Operator_charactersContext(this, this._ctx, this.state);
        this.enterRule(localctx, 602, Swift5Parser.RULE_operator_characters);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2756;
            this._errHandler.sync(this);
            var _alt = 1;
            do {
                switch (_alt) {
                    case 1:
                        this.state = 2754;
                        if (!(this._input.get(this._input.index - 1).getType() != WS)) {
                            throw new antlr4_1.default.error.FailedPredicateException(this, "this._input.get(this._input.index-1).getType()!=WS");
                        }
                        this.state = 2755;
                        this.operator_character();
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 2758;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 336, this._ctx);
            } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    dot_operator_head() {
        let localctx = new Dot_operator_headContext(this, this._ctx, this.state);
        this.enterRule(localctx, 604, Swift5Parser.RULE_dot_operator_head);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2760;
            this.match(Swift5Parser.DOT);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    dot_operator_character() {
        let localctx = new Dot_operator_characterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 606, Swift5Parser.RULE_dot_operator_character);
        try {
            this.state = 2764;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.DOT:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2762;
                    this.match(Swift5Parser.DOT);
                    break;
                case Swift5Parser.LT:
                case Swift5Parser.GT:
                case Swift5Parser.BANG:
                case Swift5Parser.QUESTION:
                case Swift5Parser.AND:
                case Swift5Parser.SUB:
                case Swift5Parser.EQUAL:
                case Swift5Parser.OR:
                case Swift5Parser.DIV:
                case Swift5Parser.ADD:
                case Swift5Parser.MUL:
                case Swift5Parser.MOD:
                case Swift5Parser.CARET:
                case Swift5Parser.TILDE:
                case Swift5Parser.Operator_head_other:
                case Swift5Parser.Operator_following_character:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2763;
                    this.operator_character();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    dot_operator_characters() {
        let localctx = new Dot_operator_charactersContext(this, this._ctx, this.state);
        this.enterRule(localctx, 608, Swift5Parser.RULE_dot_operator_characters);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2768;
            this._errHandler.sync(this);
            var _alt = 1;
            do {
                switch (_alt) {
                    case 1:
                        this.state = 2766;
                        if (!(this._input.get(this._input.index - 1).getType() != WS)) {
                            throw new antlr4_1.default.error.FailedPredicateException(this, "this._input.get(this._input.index-1).getType()!=WS");
                        }
                        this.state = 2767;
                        this.dot_operator_character();
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 2770;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 338, this._ctx);
            } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    literal() {
        let localctx = new LiteralContext(this, this._ctx, this.state);
        this.enterRule(localctx, 610, Swift5Parser.RULE_literal);
        try {
            this.state = 2776;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 339, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2772;
                    this.numeric_literal();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2773;
                    this.string_literal();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2774;
                    this.boolean_literal();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 2775;
                    this.nil_literal();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    numeric_literal() {
        let localctx = new Numeric_literalContext(this, this._ctx, this.state);
        this.enterRule(localctx, 612, Swift5Parser.RULE_numeric_literal);
        try {
            this.state = 2786;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 342, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2779;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 340, this._ctx);
                    if (la_ === 1) {
                        this.state = 2778;
                        this.negate_prefix_operator();
                    }
                    this.state = 2781;
                    this.integer_literal();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2783;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 341, this._ctx);
                    if (la_ === 1) {
                        this.state = 2782;
                        this.negate_prefix_operator();
                    }
                    this.state = 2785;
                    this.match(Swift5Parser.Floating_point_literal);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    boolean_literal() {
        let localctx = new Boolean_literalContext(this, this._ctx, this.state);
        this.enterRule(localctx, 614, Swift5Parser.RULE_boolean_literal);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2788;
            _la = this._input.LA(1);
            if (!(_la === Swift5Parser.FALSE || _la === Swift5Parser.TRUE)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    nil_literal() {
        let localctx = new Nil_literalContext(this, this._ctx, this.state);
        this.enterRule(localctx, 616, Swift5Parser.RULE_nil_literal);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2790;
            this.match(Swift5Parser.NIL);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    integer_literal() {
        let localctx = new Integer_literalContext(this, this._ctx, this.state);
        this.enterRule(localctx, 618, Swift5Parser.RULE_integer_literal);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2792;
            _la = this._input.LA(1);
            if (!(((((_la - 170)) & ~0x1f) == 0 && ((1 << (_la - 170)) & ((1 << (Swift5Parser.Binary_literal - 170)) | (1 << (Swift5Parser.Octal_literal - 170)) | (1 << (Swift5Parser.Decimal_digits - 170)) | (1 << (Swift5Parser.Decimal_literal - 170)) | (1 << (Swift5Parser.Hexadecimal_literal - 170)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    string_literal() {
        let localctx = new String_literalContext(this, this._ctx, this.state);
        this.enterRule(localctx, 620, Swift5Parser.RULE_string_literal);
        try {
            this.state = 2797;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 343, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2794;
                    this.extended_string_literal();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2795;
                    this.interpolated_string_literal();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2796;
                    this.static_string_literal();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extended_string_literal() {
        let localctx = new Extended_string_literalContext(this, this._ctx, this.state);
        this.enterRule(localctx, 622, Swift5Parser.RULE_extended_string_literal);
        var _la = 0; // Token type
        try {
            this.state = 2813;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.Multi_line_extended_string_open:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2799;
                    this.match(Swift5Parser.Multi_line_extended_string_open);
                    this.state = 2801;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        this.state = 2800;
                        this.match(Swift5Parser.Quoted_multi_line_extended_text);
                        this.state = 2803;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while (_la === Swift5Parser.Quoted_multi_line_extended_text);
                    this.state = 2805;
                    this.match(Swift5Parser.Multi_line_extended_string_close);
                    break;
                case Swift5Parser.Single_line_extended_string_open:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2806;
                    this.match(Swift5Parser.Single_line_extended_string_open);
                    this.state = 2808;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        this.state = 2807;
                        this.match(Swift5Parser.Quoted_single_line_extended_text);
                        this.state = 2810;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while (_la === Swift5Parser.Quoted_single_line_extended_text);
                    this.state = 2812;
                    this.match(Swift5Parser.Single_line_extended_string_close);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    static_string_literal() {
        let localctx = new Static_string_literalContext(this, this._ctx, this.state);
        this.enterRule(localctx, 624, Swift5Parser.RULE_static_string_literal);
        var _la = 0; // Token type
        try {
            this.state = 2831;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.Single_line_string_open:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2815;
                    this.match(Swift5Parser.Single_line_string_open);
                    this.state = 2819;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === Swift5Parser.Quoted_single_line_text) {
                        this.state = 2816;
                        this.match(Swift5Parser.Quoted_single_line_text);
                        this.state = 2821;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2822;
                    this.match(Swift5Parser.Single_line_string_close);
                    break;
                case Swift5Parser.Multi_line_string_open:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2823;
                    this.match(Swift5Parser.Multi_line_string_open);
                    this.state = 2827;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === Swift5Parser.Quoted_multi_line_text) {
                        this.state = 2824;
                        this.match(Swift5Parser.Quoted_multi_line_text);
                        this.state = 2829;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2830;
                    this.match(Swift5Parser.Multi_line_string_close);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    interpolated_string_literal() {
        let localctx = new Interpolated_string_literalContext(this, this._ctx, this.state);
        this.enterRule(localctx, 626, Swift5Parser.RULE_interpolated_string_literal);
        var _la = 0; // Token type
        try {
            this.state = 2869;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case Swift5Parser.Single_line_string_open:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2833;
                    this.match(Swift5Parser.Single_line_string_open);
                    this.state = 2847;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === Swift5Parser.Interpolataion_single_line || _la === Swift5Parser.Quoted_single_line_text) {
                        this.state = 2845;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case Swift5Parser.Quoted_single_line_text:
                                this.state = 2834;
                                this.match(Swift5Parser.Quoted_single_line_text);
                                break;
                            case Swift5Parser.Interpolataion_single_line:
                                this.state = 2835;
                                this.match(Swift5Parser.Interpolataion_single_line);
                                this.state = 2841;
                                this._errHandler.sync(this);
                                var la_ = this._interp.adaptivePredict(this._input, 350, this._ctx);
                                switch (la_) {
                                    case 1:
                                        this.state = 2836;
                                        this.expression();
                                        break;
                                    case 2:
                                        this.state = 2837;
                                        this.tuple_element();
                                        this.state = 2838;
                                        this.match(Swift5Parser.COMMA);
                                        this.state = 2839;
                                        this.tuple_element_list();
                                        break;
                                }
                                this.state = 2843;
                                this.match(Swift5Parser.RPAREN);
                                break;
                            default:
                                throw new antlr4_1.default.error.NoViableAltException(this);
                        }
                        this.state = 2849;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2850;
                    this.match(Swift5Parser.Single_line_string_close);
                    break;
                case Swift5Parser.Multi_line_string_open:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2851;
                    this.match(Swift5Parser.Multi_line_string_open);
                    this.state = 2865;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === Swift5Parser.Interpolataion_multi_line || _la === Swift5Parser.Quoted_multi_line_text) {
                        this.state = 2863;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case Swift5Parser.Quoted_multi_line_text:
                                this.state = 2852;
                                this.match(Swift5Parser.Quoted_multi_line_text);
                                break;
                            case Swift5Parser.Interpolataion_multi_line:
                                this.state = 2853;
                                this.match(Swift5Parser.Interpolataion_multi_line);
                                this.state = 2859;
                                this._errHandler.sync(this);
                                var la_ = this._interp.adaptivePredict(this._input, 353, this._ctx);
                                switch (la_) {
                                    case 1:
                                        this.state = 2854;
                                        this.expression();
                                        break;
                                    case 2:
                                        this.state = 2855;
                                        this.tuple_element();
                                        this.state = 2856;
                                        this.match(Swift5Parser.COMMA);
                                        this.state = 2857;
                                        this.tuple_element_list();
                                        break;
                                }
                                this.state = 2861;
                                this.match(Swift5Parser.RPAREN);
                                break;
                            default:
                                throw new antlr4_1.default.error.NoViableAltException(this);
                        }
                        this.state = 2867;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2868;
                    this.match(Swift5Parser.Multi_line_string_close);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
}
exports["default"] = Swift5Parser;
Swift5Parser.EOF = antlr4_1.default.Token.EOF;
Swift5Parser.AS = 1;
Swift5Parser.ALPHA = 2;
Swift5Parser.BREAK = 3;
Swift5Parser.CASE = 4;
Swift5Parser.CATCH = 5;
Swift5Parser.CLASS = 6;
Swift5Parser.CONTINUE = 7;
Swift5Parser.DEFAULT = 8;
Swift5Parser.DEFER = 9;
Swift5Parser.DO = 10;
Swift5Parser.GUARD = 11;
Swift5Parser.ELSE = 12;
Swift5Parser.ENUM = 13;
Swift5Parser.FOR = 14;
Swift5Parser.FALLTHROUGH = 15;
Swift5Parser.FUNC = 16;
Swift5Parser.IN = 17;
Swift5Parser.IF = 18;
Swift5Parser.IMPORT = 19;
Swift5Parser.INTERNAL = 20;
Swift5Parser.FINAL = 21;
Swift5Parser.OPEN = 22;
Swift5Parser.PRIVATE = 23;
Swift5Parser.PUBLIC = 24;
Swift5Parser.WHERE = 25;
Swift5Parser.WHILE = 26;
Swift5Parser.LET = 27;
Swift5Parser.VAR = 28;
Swift5Parser.PROTOCOL = 29;
Swift5Parser.GET = 30;
Swift5Parser.SET = 31;
Swift5Parser.WILL_SET = 32;
Swift5Parser.DID_SET = 33;
Swift5Parser.REPEAT = 34;
Swift5Parser.SWITCH = 35;
Swift5Parser.STRUCT = 36;
Swift5Parser.RETURN = 37;
Swift5Parser.THROW = 38;
Swift5Parser.THROWS = 39;
Swift5Parser.RETHROWS = 40;
Swift5Parser.INDIRECT = 41;
Swift5Parser.INIT = 42;
Swift5Parser.DEINIT = 43;
Swift5Parser.ASSOCIATED_TYPE = 44;
Swift5Parser.EXTENSION = 45;
Swift5Parser.SUBSCRIPT = 46;
Swift5Parser.PREFIX = 47;
Swift5Parser.INFIX = 48;
Swift5Parser.LEFT = 49;
Swift5Parser.RIGHT = 50;
Swift5Parser.NONE = 51;
Swift5Parser.PRECEDENCE_GROUP = 52;
Swift5Parser.HIGHER_THAN = 53;
Swift5Parser.LOWER_THAN = 54;
Swift5Parser.ASSIGNMENT = 55;
Swift5Parser.ASSOCIATIVITY = 56;
Swift5Parser.POSTFIX = 57;
Swift5Parser.OPERATOR = 58;
Swift5Parser.TYPEALIAS = 59;
Swift5Parser.OS = 60;
Swift5Parser.ARCH = 61;
Swift5Parser.SWIFT = 62;
Swift5Parser.COMPILER = 63;
Swift5Parser.CAN_IMPORT = 64;
Swift5Parser.TARGET_ENVIRONMENT = 65;
Swift5Parser.CONVENIENCE = 66;
Swift5Parser.DYNAMIC = 67;
Swift5Parser.LAZY = 68;
Swift5Parser.OPTIONAL = 69;
Swift5Parser.OVERRIDE = 70;
Swift5Parser.REQUIRED = 71;
Swift5Parser.STATIC = 72;
Swift5Parser.WEAK = 73;
Swift5Parser.UNOWNED = 74;
Swift5Parser.SAFE = 75;
Swift5Parser.UNSAFE = 76;
Swift5Parser.MUTATING = 77;
Swift5Parser.NONMUTATING = 78;
Swift5Parser.FILE_PRIVATE = 79;
Swift5Parser.IS = 80;
Swift5Parser.TRY = 81;
Swift5Parser.SUPER = 82;
Swift5Parser.ANY = 83;
Swift5Parser.FALSE = 84;
Swift5Parser.RED = 85;
Swift5Parser.BLUE = 86;
Swift5Parser.GREEN = 87;
Swift5Parser.RESOURCE_NAME = 88;
Swift5Parser.TRUE = 89;
Swift5Parser.NIL = 90;
Swift5Parser.INOUT = 91;
Swift5Parser.SOME = 92;
Swift5Parser.TYPE = 93;
Swift5Parser.PRECEDENCE = 94;
Swift5Parser.SELF = 95;
Swift5Parser.SELF_BIG = 96;
Swift5Parser.MAC_OS = 97;
Swift5Parser.I_OS = 98;
Swift5Parser.OSX = 99;
Swift5Parser.WATCH_OS = 100;
Swift5Parser.TV_OS = 101;
Swift5Parser.LINUX = 102;
Swift5Parser.WINDOWS = 103;
Swift5Parser.I386 = 104;
Swift5Parser.X86_64 = 105;
Swift5Parser.ARM = 106;
Swift5Parser.ARM64 = 107;
Swift5Parser.SIMULATOR = 108;
Swift5Parser.MAC_CATALYST = 109;
Swift5Parser.I_OS_APPLICATION_EXTENSION = 110;
Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION = 111;
Swift5Parser.MAC_OS_APPLICATION_EXTENSION = 112;
Swift5Parser.SOURCE_LOCATION = 113;
Swift5Parser.FILE = 114;
Swift5Parser.LINE = 115;
Swift5Parser.ERROR = 116;
Swift5Parser.WARNING = 117;
Swift5Parser.AVAILABLE = 118;
Swift5Parser.HASH_IF = 119;
Swift5Parser.HASH_ELSEIF = 120;
Swift5Parser.HASH_ELSE = 121;
Swift5Parser.HASH_ENDIF = 122;
Swift5Parser.HASH_FILE = 123;
Swift5Parser.HASH_FILE_ID = 124;
Swift5Parser.HASH_FILE_PATH = 125;
Swift5Parser.HASH_LINE = 126;
Swift5Parser.HASH_COLUMN = 127;
Swift5Parser.HASH_FUNCTION = 128;
Swift5Parser.HASH_DSO_HANDLE = 129;
Swift5Parser.HASH_SELECTOR = 130;
Swift5Parser.HASH_KEYPATH = 131;
Swift5Parser.HASH_COLOR_LITERAL = 132;
Swift5Parser.HASH_FILE_LITERAL = 133;
Swift5Parser.HASH_IMAGE_LITERAL = 134;
Swift5Parser.GETTER = 135;
Swift5Parser.SETTER = 136;
Swift5Parser.Identifier = 137;
Swift5Parser.DOT = 138;
Swift5Parser.LCURLY = 139;
Swift5Parser.LPAREN = 140;
Swift5Parser.LBRACK = 141;
Swift5Parser.RCURLY = 142;
Swift5Parser.RPAREN = 143;
Swift5Parser.RBRACK = 144;
Swift5Parser.COMMA = 145;
Swift5Parser.COLON = 146;
Swift5Parser.SEMI = 147;
Swift5Parser.LT = 148;
Swift5Parser.GT = 149;
Swift5Parser.UNDERSCORE = 150;
Swift5Parser.BANG = 151;
Swift5Parser.QUESTION = 152;
Swift5Parser.AT = 153;
Swift5Parser.AND = 154;
Swift5Parser.SUB = 155;
Swift5Parser.EQUAL = 156;
Swift5Parser.OR = 157;
Swift5Parser.DIV = 158;
Swift5Parser.ADD = 159;
Swift5Parser.MUL = 160;
Swift5Parser.MOD = 161;
Swift5Parser.CARET = 162;
Swift5Parser.TILDE = 163;
Swift5Parser.HASH = 164;
Swift5Parser.BACKTICK = 165;
Swift5Parser.DOLLAR = 166;
Swift5Parser.BACKSLASH = 167;
Swift5Parser.Operator_head_other = 168;
Swift5Parser.Operator_following_character = 169;
Swift5Parser.Binary_literal = 170;
Swift5Parser.Octal_literal = 171;
Swift5Parser.Decimal_digits = 172;
Swift5Parser.Decimal_literal = 173;
Swift5Parser.Hexadecimal_literal = 174;
Swift5Parser.Floating_point_literal = 175;
Swift5Parser.WS = 176;
Swift5Parser.HASHBANG = 177;
Swift5Parser.Block_comment = 178;
Swift5Parser.Line_comment = 179;
Swift5Parser.Multi_line_extended_string_open = 180;
Swift5Parser.Single_line_extended_string_open = 181;
Swift5Parser.Multi_line_string_open = 182;
Swift5Parser.Single_line_string_open = 183;
Swift5Parser.Interpolataion_single_line = 184;
Swift5Parser.Single_line_string_close = 185;
Swift5Parser.Quoted_single_line_text = 186;
Swift5Parser.Interpolataion_multi_line = 187;
Swift5Parser.Multi_line_string_close = 188;
Swift5Parser.Quoted_multi_line_text = 189;
Swift5Parser.Single_line_extended_string_close = 190;
Swift5Parser.Quoted_single_line_extended_text = 191;
Swift5Parser.Multi_line_extended_string_close = 192;
Swift5Parser.Quoted_multi_line_extended_text = 193;
Swift5Parser.RULE_top_level = 0;
Swift5Parser.RULE_statement = 1;
Swift5Parser.RULE_statements = 2;
Swift5Parser.RULE_loop_statement = 3;
Swift5Parser.RULE_for_in_statement = 4;
Swift5Parser.RULE_while_statement = 5;
Swift5Parser.RULE_condition_list = 6;
Swift5Parser.RULE_condition = 7;
Swift5Parser.RULE_case_condition = 8;
Swift5Parser.RULE_optional_binding_condition = 9;
Swift5Parser.RULE_repeat_while_statement = 10;
Swift5Parser.RULE_branch_statement = 11;
Swift5Parser.RULE_if_statement = 12;
Swift5Parser.RULE_else_clause = 13;
Swift5Parser.RULE_guard_statement = 14;
Swift5Parser.RULE_switch_statement = 15;
Swift5Parser.RULE_switch_cases = 16;
Swift5Parser.RULE_switch_case = 17;
Swift5Parser.RULE_case_label = 18;
Swift5Parser.RULE_case_item_list = 19;
Swift5Parser.RULE_default_label = 20;
Swift5Parser.RULE_where_clause = 21;
Swift5Parser.RULE_where_expression = 22;
Swift5Parser.RULE_conditional_switch_case = 23;
Swift5Parser.RULE_switch_if_directive_clause = 24;
Swift5Parser.RULE_switch_elseif_directive_clauses = 25;
Swift5Parser.RULE_switch_elseif_directive_clause = 26;
Swift5Parser.RULE_switch_else_directive_clause = 27;
Swift5Parser.RULE_labeled_statement = 28;
Swift5Parser.RULE_statement_label = 29;
Swift5Parser.RULE_label_name = 30;
Swift5Parser.RULE_control_transfer_statement = 31;
Swift5Parser.RULE_break_statement = 32;
Swift5Parser.RULE_continue_statement = 33;
Swift5Parser.RULE_fallthrough_statement = 34;
Swift5Parser.RULE_return_statement = 35;
Swift5Parser.RULE_throw_statement = 36;
Swift5Parser.RULE_defer_statement = 37;
Swift5Parser.RULE_do_statement = 38;
Swift5Parser.RULE_catch_clauses = 39;
Swift5Parser.RULE_catch_clause = 40;
Swift5Parser.RULE_catch_pattern_list = 41;
Swift5Parser.RULE_catch_pattern = 42;
Swift5Parser.RULE_compiler_control_statement = 43;
Swift5Parser.RULE_conditional_compilation_block = 44;
Swift5Parser.RULE_if_directive_clause = 45;
Swift5Parser.RULE_elseif_directive_clauses = 46;
Swift5Parser.RULE_elseif_directive_clause = 47;
Swift5Parser.RULE_else_directive_clause = 48;
Swift5Parser.RULE_compilation_condition = 49;
Swift5Parser.RULE_platform_condition = 50;
Swift5Parser.RULE_swift_version = 51;
Swift5Parser.RULE_swift_version_continuation = 52;
Swift5Parser.RULE_operating_system = 53;
Swift5Parser.RULE_architecture = 54;
Swift5Parser.RULE_module_name = 55;
Swift5Parser.RULE_environment = 56;
Swift5Parser.RULE_line_control_statement = 57;
Swift5Parser.RULE_line_number = 58;
Swift5Parser.RULE_file_name = 59;
Swift5Parser.RULE_diagnostic_statement = 60;
Swift5Parser.RULE_diagnostic_message = 61;
Swift5Parser.RULE_availability_condition = 62;
Swift5Parser.RULE_availability_arguments = 63;
Swift5Parser.RULE_availability_argument = 64;
Swift5Parser.RULE_platform_name = 65;
Swift5Parser.RULE_platform_version = 66;
Swift5Parser.RULE_generic_parameter_clause = 67;
Swift5Parser.RULE_generic_parameter_list = 68;
Swift5Parser.RULE_generic_parameter = 69;
Swift5Parser.RULE_generic_where_clause = 70;
Swift5Parser.RULE_requirement_list = 71;
Swift5Parser.RULE_requirement = 72;
Swift5Parser.RULE_conformance_requirement = 73;
Swift5Parser.RULE_same_type_requirement = 74;
Swift5Parser.RULE_generic_argument_clause = 75;
Swift5Parser.RULE_generic_argument_list = 76;
Swift5Parser.RULE_generic_argument = 77;
Swift5Parser.RULE_declaration = 78;
Swift5Parser.RULE_declarations = 79;
Swift5Parser.RULE_top_level_declaration = 80;
Swift5Parser.RULE_code_block = 81;
Swift5Parser.RULE_import_declaration = 82;
Swift5Parser.RULE_import_kind = 83;
Swift5Parser.RULE_import_path = 84;
Swift5Parser.RULE_import_path_identifier = 85;
Swift5Parser.RULE_constant_declaration = 86;
Swift5Parser.RULE_pattern_initializer_list = 87;
Swift5Parser.RULE_pattern_initializer = 88;
Swift5Parser.RULE_initializer = 89;
Swift5Parser.RULE_variable_declaration = 90;
Swift5Parser.RULE_variable_declaration_head = 91;
Swift5Parser.RULE_variable_name = 92;
Swift5Parser.RULE_getter_setter_block = 93;
Swift5Parser.RULE_getter_clause = 94;
Swift5Parser.RULE_setter_clause = 95;
Swift5Parser.RULE_setter_name = 96;
Swift5Parser.RULE_getter_setter_keyword_block = 97;
Swift5Parser.RULE_getter_keyword_clause = 98;
Swift5Parser.RULE_setter_keyword_clause = 99;
Swift5Parser.RULE_willSet_didSet_block = 100;
Swift5Parser.RULE_willSet_clause = 101;
Swift5Parser.RULE_didSet_clause = 102;
Swift5Parser.RULE_typealias_declaration = 103;
Swift5Parser.RULE_typealias_name = 104;
Swift5Parser.RULE_typealias_assignment = 105;
Swift5Parser.RULE_function_declaration = 106;
Swift5Parser.RULE_function_head = 107;
Swift5Parser.RULE_function_name = 108;
Swift5Parser.RULE_function_signature = 109;
Swift5Parser.RULE_function_result = 110;
Swift5Parser.RULE_function_body = 111;
Swift5Parser.RULE_parameter_clause = 112;
Swift5Parser.RULE_parameter_list = 113;
Swift5Parser.RULE_parameter = 114;
Swift5Parser.RULE_external_parameter_name = 115;
Swift5Parser.RULE_local_parameter_name = 116;
Swift5Parser.RULE_default_argument_clause = 117;
Swift5Parser.RULE_enum_declaration = 118;
Swift5Parser.RULE_union_style_enum = 119;
Swift5Parser.RULE_union_style_enum_members = 120;
Swift5Parser.RULE_union_style_enum_member = 121;
Swift5Parser.RULE_union_style_enum_case_clause = 122;
Swift5Parser.RULE_union_style_enum_case_list = 123;
Swift5Parser.RULE_union_style_enum_case = 124;
Swift5Parser.RULE_enum_name = 125;
Swift5Parser.RULE_enum_case_name = 126;
Swift5Parser.RULE_raw_value_style_enum = 127;
Swift5Parser.RULE_raw_value_style_enum_members = 128;
Swift5Parser.RULE_raw_value_style_enum_member = 129;
Swift5Parser.RULE_raw_value_style_enum_case_clause = 130;
Swift5Parser.RULE_raw_value_style_enum_case_list = 131;
Swift5Parser.RULE_raw_value_style_enum_case = 132;
Swift5Parser.RULE_raw_value_assignment = 133;
Swift5Parser.RULE_raw_value_literal = 134;
Swift5Parser.RULE_struct_declaration = 135;
Swift5Parser.RULE_struct_name = 136;
Swift5Parser.RULE_struct_body = 137;
Swift5Parser.RULE_struct_members = 138;
Swift5Parser.RULE_struct_member = 139;
Swift5Parser.RULE_class_declaration = 140;
Swift5Parser.RULE_class_name = 141;
Swift5Parser.RULE_class_body = 142;
Swift5Parser.RULE_class_members = 143;
Swift5Parser.RULE_class_member = 144;
Swift5Parser.RULE_protocol_declaration = 145;
Swift5Parser.RULE_protocol_name = 146;
Swift5Parser.RULE_protocol_body = 147;
Swift5Parser.RULE_protocol_members = 148;
Swift5Parser.RULE_protocol_member = 149;
Swift5Parser.RULE_protocol_member_declaration = 150;
Swift5Parser.RULE_protocol_property_declaration = 151;
Swift5Parser.RULE_protocol_method_declaration = 152;
Swift5Parser.RULE_protocol_initializer_declaration = 153;
Swift5Parser.RULE_protocol_subscript_declaration = 154;
Swift5Parser.RULE_protocol_associated_type_declaration = 155;
Swift5Parser.RULE_initializer_declaration = 156;
Swift5Parser.RULE_initializer_head = 157;
Swift5Parser.RULE_initializer_body = 158;
Swift5Parser.RULE_deinitializer_declaration = 159;
Swift5Parser.RULE_extension_declaration = 160;
Swift5Parser.RULE_extension_body = 161;
Swift5Parser.RULE_extension_members = 162;
Swift5Parser.RULE_extension_member = 163;
Swift5Parser.RULE_subscript_declaration = 164;
Swift5Parser.RULE_subscript_head = 165;
Swift5Parser.RULE_subscript_result = 166;
Swift5Parser.RULE_operator_declaration = 167;
Swift5Parser.RULE_prefix_operator_declaration = 168;
Swift5Parser.RULE_postfix_operator_declaration = 169;
Swift5Parser.RULE_infix_operator_declaration = 170;
Swift5Parser.RULE_infix_operator_group = 171;
Swift5Parser.RULE_precedence_group_declaration = 172;
Swift5Parser.RULE_precedence_group_attributes = 173;
Swift5Parser.RULE_precedence_group_attribute = 174;
Swift5Parser.RULE_precedence_group_relation = 175;
Swift5Parser.RULE_precedence_group_assignment = 176;
Swift5Parser.RULE_precedence_group_associativity = 177;
Swift5Parser.RULE_precedence_group_names = 178;
Swift5Parser.RULE_precedence_group_name = 179;
Swift5Parser.RULE_declaration_modifier = 180;
Swift5Parser.RULE_declaration_modifiers = 181;
Swift5Parser.RULE_access_level_modifier = 182;
Swift5Parser.RULE_mutation_modifier = 183;
Swift5Parser.RULE_pattern = 184;
Swift5Parser.RULE_wildcard_pattern = 185;
Swift5Parser.RULE_identifier_pattern = 186;
Swift5Parser.RULE_value_binding_pattern = 187;
Swift5Parser.RULE_tuple_pattern = 188;
Swift5Parser.RULE_tuple_pattern_element_list = 189;
Swift5Parser.RULE_tuple_pattern_element = 190;
Swift5Parser.RULE_enum_case_pattern = 191;
Swift5Parser.RULE_optional_pattern = 192;
Swift5Parser.RULE_expression_pattern = 193;
Swift5Parser.RULE_attribute = 194;
Swift5Parser.RULE_attribute_name = 195;
Swift5Parser.RULE_attribute_argument_clause = 196;
Swift5Parser.RULE_attributes = 197;
Swift5Parser.RULE_balanced_tokens = 198;
Swift5Parser.RULE_balanced_token = 199;
Swift5Parser.RULE_balanced_token_punctuation = 200;
Swift5Parser.RULE_expression = 201;
Swift5Parser.RULE_expression_list = 202;
Swift5Parser.RULE_prefix_expression = 203;
Swift5Parser.RULE_in_out_expression = 204;
Swift5Parser.RULE_try_operator = 205;
Swift5Parser.RULE_binary_expression = 206;
Swift5Parser.RULE_binary_expressions = 207;
Swift5Parser.RULE_conditional_operator = 208;
Swift5Parser.RULE_type_casting_operator = 209;
Swift5Parser.RULE_primary_expression = 210;
Swift5Parser.RULE_unqualified_name = 211;
Swift5Parser.RULE_literal_expression = 212;
Swift5Parser.RULE_array_literal = 213;
Swift5Parser.RULE_array_literal_items = 214;
Swift5Parser.RULE_array_literal_item = 215;
Swift5Parser.RULE_dictionary_literal = 216;
Swift5Parser.RULE_dictionary_literal_items = 217;
Swift5Parser.RULE_dictionary_literal_item = 218;
Swift5Parser.RULE_playground_literal = 219;
Swift5Parser.RULE_self_expression = 220;
Swift5Parser.RULE_superclass_expression = 221;
Swift5Parser.RULE_closure_expression = 222;
Swift5Parser.RULE_closure_signature = 223;
Swift5Parser.RULE_closure_parameter_clause = 224;
Swift5Parser.RULE_closure_parameter_list = 225;
Swift5Parser.RULE_closure_parameter = 226;
Swift5Parser.RULE_capture_list = 227;
Swift5Parser.RULE_capture_list_items = 228;
Swift5Parser.RULE_capture_list_item = 229;
Swift5Parser.RULE_capture_specifier = 230;
Swift5Parser.RULE_implicit_member_expression = 231;
Swift5Parser.RULE_parenthesized_operator = 232;
Swift5Parser.RULE_parenthesized_expression = 233;
Swift5Parser.RULE_tuple_expression = 234;
Swift5Parser.RULE_tuple_element_list = 235;
Swift5Parser.RULE_tuple_element = 236;
Swift5Parser.RULE_wildcard_expression = 237;
Swift5Parser.RULE_key_path_expression = 238;
Swift5Parser.RULE_key_path_components = 239;
Swift5Parser.RULE_key_path_component = 240;
Swift5Parser.RULE_key_path_postfixes = 241;
Swift5Parser.RULE_key_path_postfix = 242;
Swift5Parser.RULE_selector_expression = 243;
Swift5Parser.RULE_key_path_string_expression = 244;
Swift5Parser.RULE_postfix_expression = 245;
Swift5Parser.RULE_function_call_suffix = 246;
Swift5Parser.RULE_initializer_suffix = 247;
Swift5Parser.RULE_explicit_member_suffix = 248;
Swift5Parser.RULE_postfix_self_suffix = 249;
Swift5Parser.RULE_subscript_suffix = 250;
Swift5Parser.RULE_forced_value_suffix = 251;
Swift5Parser.RULE_optional_chaining_suffix = 252;
Swift5Parser.RULE_function_call_argument_clause = 253;
Swift5Parser.RULE_function_call_argument_list = 254;
Swift5Parser.RULE_function_call_argument = 255;
Swift5Parser.RULE_trailing_closures = 256;
Swift5Parser.RULE_labeled_trailing_closures = 257;
Swift5Parser.RULE_labeled_trailing_closure = 258;
Swift5Parser.RULE_argument_names = 259;
Swift5Parser.RULE_argument_name = 260;
Swift5Parser.RULE_type = 261;
Swift5Parser.RULE_type_annotation = 262;
Swift5Parser.RULE_type_identifier = 263;
Swift5Parser.RULE_type_name = 264;
Swift5Parser.RULE_tuple_type = 265;
Swift5Parser.RULE_tuple_type_element_list = 266;
Swift5Parser.RULE_tuple_type_element = 267;
Swift5Parser.RULE_element_name = 268;
Swift5Parser.RULE_function_type = 269;
Swift5Parser.RULE_function_type_argument_clause = 270;
Swift5Parser.RULE_function_type_argument_list = 271;
Swift5Parser.RULE_function_type_argument = 272;
Swift5Parser.RULE_argument_label = 273;
Swift5Parser.RULE_array_type = 274;
Swift5Parser.RULE_dictionary_type = 275;
Swift5Parser.RULE_protocol_composition_type = 276;
Swift5Parser.RULE_trailing_composition_and = 277;
Swift5Parser.RULE_opaque_type = 278;
Swift5Parser.RULE_any_type = 279;
Swift5Parser.RULE_self_type = 280;
Swift5Parser.RULE_type_inheritance_clause = 281;
Swift5Parser.RULE_type_inheritance_list = 282;
Swift5Parser.RULE_identifier = 283;
Swift5Parser.RULE_identifier_list = 284;
Swift5Parser.RULE_keyword = 285;
Swift5Parser.RULE_assignment_operator = 286;
Swift5Parser.RULE_negate_prefix_operator = 287;
Swift5Parser.RULE_compilation_condition_AND = 288;
Swift5Parser.RULE_compilation_condition_OR = 289;
Swift5Parser.RULE_compilation_condition_GE = 290;
Swift5Parser.RULE_compilation_condition_L = 291;
Swift5Parser.RULE_arrow_operator = 292;
Swift5Parser.RULE_range_operator = 293;
Swift5Parser.RULE_same_type_equals = 294;
Swift5Parser.RULE_binary_operator = 295;
Swift5Parser.RULE_prefix_operator = 296;
Swift5Parser.RULE_postfix_operator = 297;
Swift5Parser.RULE_operator = 298;
Swift5Parser.RULE_operator_head = 299;
Swift5Parser.RULE_operator_character = 300;
Swift5Parser.RULE_operator_characters = 301;
Swift5Parser.RULE_dot_operator_head = 302;
Swift5Parser.RULE_dot_operator_character = 303;
Swift5Parser.RULE_dot_operator_characters = 304;
Swift5Parser.RULE_literal = 305;
Swift5Parser.RULE_numeric_literal = 306;
Swift5Parser.RULE_boolean_literal = 307;
Swift5Parser.RULE_nil_literal = 308;
Swift5Parser.RULE_integer_literal = 309;
Swift5Parser.RULE_string_literal = 310;
Swift5Parser.RULE_extended_string_literal = 311;
Swift5Parser.RULE_static_string_literal = 312;
Swift5Parser.RULE_interpolated_string_literal = 313;
class Top_levelContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_top_level;
    }
    EOF() {
        return this.getToken(Swift5Parser.EOF, 0);
    }
    ;
    statements() {
        return this.getTypedRuleContext(StatementsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterTop_level(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitTop_level(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitTop_level(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class StatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_statement;
    }
    loop_statement() {
        return this.getTypedRuleContext(Loop_statementContext, 0);
    }
    ;
    declaration() {
        return this.getTypedRuleContext(DeclarationContext, 0);
    }
    ;
    branch_statement() {
        return this.getTypedRuleContext(Branch_statementContext, 0);
    }
    ;
    labeled_statement() {
        return this.getTypedRuleContext(Labeled_statementContext, 0);
    }
    ;
    control_transfer_statement() {
        return this.getTypedRuleContext(Control_transfer_statementContext, 0);
    }
    ;
    defer_statement() {
        return this.getTypedRuleContext(Defer_statementContext, 0);
    }
    ;
    do_statement() {
        return this.getTypedRuleContext(Do_statementContext, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    SEMI() {
        return this.getToken(Swift5Parser.SEMI, 0);
    }
    ;
    compiler_control_statement() {
        return this.getTypedRuleContext(Compiler_control_statementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class StatementsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_statements;
        this.indexBefore = -1;
    }
    statement = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(StatementContext);
        }
        else {
            return this.getTypedRuleContext(StatementContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterStatements(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitStatements(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitStatements(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Loop_statementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_loop_statement;
    }
    for_in_statement() {
        return this.getTypedRuleContext(For_in_statementContext, 0);
    }
    ;
    while_statement() {
        return this.getTypedRuleContext(While_statementContext, 0);
    }
    ;
    repeat_while_statement() {
        return this.getTypedRuleContext(Repeat_while_statementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterLoop_statement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitLoop_statement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitLoop_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class For_in_statementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_for_in_statement;
    }
    FOR() {
        return this.getToken(Swift5Parser.FOR, 0);
    }
    ;
    pattern() {
        return this.getTypedRuleContext(PatternContext, 0);
    }
    ;
    IN() {
        return this.getToken(Swift5Parser.IN, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    code_block() {
        return this.getTypedRuleContext(Code_blockContext, 0);
    }
    ;
    CASE() {
        return this.getToken(Swift5Parser.CASE, 0);
    }
    ;
    where_clause() {
        return this.getTypedRuleContext(Where_clauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterFor_in_statement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitFor_in_statement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitFor_in_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class While_statementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_while_statement;
    }
    WHILE() {
        return this.getToken(Swift5Parser.WHILE, 0);
    }
    ;
    condition_list() {
        return this.getTypedRuleContext(Condition_listContext, 0);
    }
    ;
    code_block() {
        return this.getTypedRuleContext(Code_blockContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterWhile_statement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitWhile_statement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitWhile_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Condition_listContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_condition_list;
    }
    condition = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(ConditionContext);
        }
        else {
            return this.getTypedRuleContext(ConditionContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.COMMA);
        }
        else {
            return this.getToken(Swift5Parser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterCondition_list(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitCondition_list(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitCondition_list(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ConditionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_condition;
    }
    availability_condition() {
        return this.getTypedRuleContext(Availability_conditionContext, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    case_condition() {
        return this.getTypedRuleContext(Case_conditionContext, 0);
    }
    ;
    optional_binding_condition() {
        return this.getTypedRuleContext(Optional_binding_conditionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterCondition(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitCondition(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitCondition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Case_conditionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_case_condition;
    }
    CASE() {
        return this.getToken(Swift5Parser.CASE, 0);
    }
    ;
    pattern() {
        return this.getTypedRuleContext(PatternContext, 0);
    }
    ;
    initializer() {
        return this.getTypedRuleContext(InitializerContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterCase_condition(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitCase_condition(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitCase_condition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Optional_binding_conditionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_optional_binding_condition;
    }
    pattern() {
        return this.getTypedRuleContext(PatternContext, 0);
    }
    ;
    initializer() {
        return this.getTypedRuleContext(InitializerContext, 0);
    }
    ;
    LET() {
        return this.getToken(Swift5Parser.LET, 0);
    }
    ;
    VAR() {
        return this.getToken(Swift5Parser.VAR, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterOptional_binding_condition(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitOptional_binding_condition(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitOptional_binding_condition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Repeat_while_statementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_repeat_while_statement;
    }
    REPEAT() {
        return this.getToken(Swift5Parser.REPEAT, 0);
    }
    ;
    code_block() {
        return this.getTypedRuleContext(Code_blockContext, 0);
    }
    ;
    WHILE() {
        return this.getToken(Swift5Parser.WHILE, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterRepeat_while_statement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitRepeat_while_statement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitRepeat_while_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Branch_statementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_branch_statement;
    }
    if_statement() {
        return this.getTypedRuleContext(If_statementContext, 0);
    }
    ;
    guard_statement() {
        return this.getTypedRuleContext(Guard_statementContext, 0);
    }
    ;
    switch_statement() {
        return this.getTypedRuleContext(Switch_statementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterBranch_statement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitBranch_statement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitBranch_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class If_statementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_if_statement;
    }
    IF() {
        return this.getToken(Swift5Parser.IF, 0);
    }
    ;
    condition_list() {
        return this.getTypedRuleContext(Condition_listContext, 0);
    }
    ;
    code_block() {
        return this.getTypedRuleContext(Code_blockContext, 0);
    }
    ;
    else_clause() {
        return this.getTypedRuleContext(Else_clauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterIf_statement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitIf_statement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitIf_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Else_clauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_else_clause;
    }
    ELSE() {
        return this.getToken(Swift5Parser.ELSE, 0);
    }
    ;
    code_block() {
        return this.getTypedRuleContext(Code_blockContext, 0);
    }
    ;
    if_statement() {
        return this.getTypedRuleContext(If_statementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterElse_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitElse_clause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitElse_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Guard_statementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_guard_statement;
    }
    GUARD() {
        return this.getToken(Swift5Parser.GUARD, 0);
    }
    ;
    condition_list() {
        return this.getTypedRuleContext(Condition_listContext, 0);
    }
    ;
    ELSE() {
        return this.getToken(Swift5Parser.ELSE, 0);
    }
    ;
    code_block() {
        return this.getTypedRuleContext(Code_blockContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterGuard_statement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitGuard_statement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitGuard_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Switch_statementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_switch_statement;
    }
    SWITCH() {
        return this.getToken(Swift5Parser.SWITCH, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    LCURLY() {
        return this.getToken(Swift5Parser.LCURLY, 0);
    }
    ;
    RCURLY() {
        return this.getToken(Swift5Parser.RCURLY, 0);
    }
    ;
    switch_cases() {
        return this.getTypedRuleContext(Switch_casesContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterSwitch_statement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitSwitch_statement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitSwitch_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Switch_casesContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_switch_cases;
    }
    switch_case() {
        return this.getTypedRuleContext(Switch_caseContext, 0);
    }
    ;
    switch_cases() {
        return this.getTypedRuleContext(Switch_casesContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterSwitch_cases(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitSwitch_cases(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitSwitch_cases(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Switch_caseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_switch_case;
    }
    statements() {
        return this.getTypedRuleContext(StatementsContext, 0);
    }
    ;
    case_label() {
        return this.getTypedRuleContext(Case_labelContext, 0);
    }
    ;
    default_label() {
        return this.getTypedRuleContext(Default_labelContext, 0);
    }
    ;
    conditional_switch_case() {
        return this.getTypedRuleContext(Conditional_switch_caseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterSwitch_case(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitSwitch_case(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitSwitch_case(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Case_labelContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_case_label;
    }
    CASE() {
        return this.getToken(Swift5Parser.CASE, 0);
    }
    ;
    case_item_list() {
        return this.getTypedRuleContext(Case_item_listContext, 0);
    }
    ;
    COLON() {
        return this.getToken(Swift5Parser.COLON, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterCase_label(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitCase_label(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitCase_label(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Case_item_listContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_case_item_list;
    }
    pattern = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(PatternContext);
        }
        else {
            return this.getTypedRuleContext(PatternContext, i);
        }
    };
    where_clause = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Where_clauseContext);
        }
        else {
            return this.getTypedRuleContext(Where_clauseContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.COMMA);
        }
        else {
            return this.getToken(Swift5Parser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterCase_item_list(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitCase_item_list(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitCase_item_list(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Default_labelContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_default_label;
    }
    DEFAULT() {
        return this.getToken(Swift5Parser.DEFAULT, 0);
    }
    ;
    COLON() {
        return this.getToken(Swift5Parser.COLON, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterDefault_label(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitDefault_label(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitDefault_label(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Where_clauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_where_clause;
    }
    WHERE() {
        return this.getToken(Swift5Parser.WHERE, 0);
    }
    ;
    where_expression() {
        return this.getTypedRuleContext(Where_expressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterWhere_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitWhere_clause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitWhere_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Where_expressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_where_expression;
    }
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterWhere_expression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitWhere_expression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitWhere_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Conditional_switch_caseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_conditional_switch_case;
    }
    switch_if_directive_clause() {
        return this.getTypedRuleContext(Switch_if_directive_clauseContext, 0);
    }
    ;
    HASH_ENDIF() {
        return this.getToken(Swift5Parser.HASH_ENDIF, 0);
    }
    ;
    switch_elseif_directive_clauses() {
        return this.getTypedRuleContext(Switch_elseif_directive_clausesContext, 0);
    }
    ;
    switch_else_directive_clause() {
        return this.getTypedRuleContext(Switch_else_directive_clauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterConditional_switch_case(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitConditional_switch_case(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitConditional_switch_case(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Switch_if_directive_clauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_switch_if_directive_clause;
    }
    HASH_IF() {
        return this.getToken(Swift5Parser.HASH_IF, 0);
    }
    ;
    compilation_condition() {
        return this.getTypedRuleContext(Compilation_conditionContext, 0);
    }
    ;
    switch_cases() {
        return this.getTypedRuleContext(Switch_casesContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterSwitch_if_directive_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitSwitch_if_directive_clause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitSwitch_if_directive_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Switch_elseif_directive_clausesContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_switch_elseif_directive_clauses;
    }
    elseif_directive_clause() {
        return this.getTypedRuleContext(Elseif_directive_clauseContext, 0);
    }
    ;
    switch_elseif_directive_clauses() {
        return this.getTypedRuleContext(Switch_elseif_directive_clausesContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterSwitch_elseif_directive_clauses(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitSwitch_elseif_directive_clauses(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitSwitch_elseif_directive_clauses(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Switch_elseif_directive_clauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_switch_elseif_directive_clause;
    }
    HASH_ELSEIF() {
        return this.getToken(Swift5Parser.HASH_ELSEIF, 0);
    }
    ;
    compilation_condition() {
        return this.getTypedRuleContext(Compilation_conditionContext, 0);
    }
    ;
    switch_cases() {
        return this.getTypedRuleContext(Switch_casesContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterSwitch_elseif_directive_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitSwitch_elseif_directive_clause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitSwitch_elseif_directive_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Switch_else_directive_clauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_switch_else_directive_clause;
    }
    HASH_ELSE() {
        return this.getToken(Swift5Parser.HASH_ELSE, 0);
    }
    ;
    switch_cases() {
        return this.getTypedRuleContext(Switch_casesContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterSwitch_else_directive_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitSwitch_else_directive_clause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitSwitch_else_directive_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Labeled_statementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_labeled_statement;
    }
    statement_label() {
        return this.getTypedRuleContext(Statement_labelContext, 0);
    }
    ;
    loop_statement() {
        return this.getTypedRuleContext(Loop_statementContext, 0);
    }
    ;
    if_statement() {
        return this.getTypedRuleContext(If_statementContext, 0);
    }
    ;
    switch_statement() {
        return this.getTypedRuleContext(Switch_statementContext, 0);
    }
    ;
    do_statement() {
        return this.getTypedRuleContext(Do_statementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterLabeled_statement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitLabeled_statement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitLabeled_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Statement_labelContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_statement_label;
    }
    label_name() {
        return this.getTypedRuleContext(Label_nameContext, 0);
    }
    ;
    COLON() {
        return this.getToken(Swift5Parser.COLON, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterStatement_label(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitStatement_label(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitStatement_label(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Label_nameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_label_name;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterLabel_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitLabel_name(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitLabel_name(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Control_transfer_statementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_control_transfer_statement;
    }
    break_statement() {
        return this.getTypedRuleContext(Break_statementContext, 0);
    }
    ;
    continue_statement() {
        return this.getTypedRuleContext(Continue_statementContext, 0);
    }
    ;
    fallthrough_statement() {
        return this.getTypedRuleContext(Fallthrough_statementContext, 0);
    }
    ;
    return_statement() {
        return this.getTypedRuleContext(Return_statementContext, 0);
    }
    ;
    throw_statement() {
        return this.getTypedRuleContext(Throw_statementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterControl_transfer_statement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitControl_transfer_statement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitControl_transfer_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Break_statementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_break_statement;
    }
    BREAK() {
        return this.getToken(Swift5Parser.BREAK, 0);
    }
    ;
    label_name() {
        return this.getTypedRuleContext(Label_nameContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterBreak_statement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitBreak_statement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitBreak_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Continue_statementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_continue_statement;
    }
    CONTINUE() {
        return this.getToken(Swift5Parser.CONTINUE, 0);
    }
    ;
    label_name() {
        return this.getTypedRuleContext(Label_nameContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterContinue_statement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitContinue_statement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitContinue_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Fallthrough_statementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_fallthrough_statement;
    }
    FALLTHROUGH() {
        return this.getToken(Swift5Parser.FALLTHROUGH, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterFallthrough_statement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitFallthrough_statement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitFallthrough_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Return_statementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_return_statement;
    }
    RETURN() {
        return this.getToken(Swift5Parser.RETURN, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterReturn_statement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitReturn_statement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitReturn_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Throw_statementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_throw_statement;
    }
    THROW() {
        return this.getToken(Swift5Parser.THROW, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterThrow_statement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitThrow_statement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitThrow_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Defer_statementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_defer_statement;
    }
    DEFER() {
        return this.getToken(Swift5Parser.DEFER, 0);
    }
    ;
    code_block() {
        return this.getTypedRuleContext(Code_blockContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterDefer_statement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitDefer_statement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitDefer_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Do_statementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_do_statement;
    }
    DO() {
        return this.getToken(Swift5Parser.DO, 0);
    }
    ;
    code_block() {
        return this.getTypedRuleContext(Code_blockContext, 0);
    }
    ;
    catch_clauses() {
        return this.getTypedRuleContext(Catch_clausesContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterDo_statement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitDo_statement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitDo_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Catch_clausesContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_catch_clauses;
    }
    catch_clause = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Catch_clauseContext);
        }
        else {
            return this.getTypedRuleContext(Catch_clauseContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterCatch_clauses(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitCatch_clauses(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitCatch_clauses(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Catch_clauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_catch_clause;
    }
    CATCH() {
        return this.getToken(Swift5Parser.CATCH, 0);
    }
    ;
    code_block() {
        return this.getTypedRuleContext(Code_blockContext, 0);
    }
    ;
    catch_pattern_list() {
        return this.getTypedRuleContext(Catch_pattern_listContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterCatch_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitCatch_clause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitCatch_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Catch_pattern_listContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_catch_pattern_list;
    }
    catch_pattern = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Catch_patternContext);
        }
        else {
            return this.getTypedRuleContext(Catch_patternContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.COMMA);
        }
        else {
            return this.getToken(Swift5Parser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterCatch_pattern_list(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitCatch_pattern_list(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitCatch_pattern_list(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Catch_patternContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_catch_pattern;
    }
    pattern() {
        return this.getTypedRuleContext(PatternContext, 0);
    }
    ;
    where_clause() {
        return this.getTypedRuleContext(Where_clauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterCatch_pattern(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitCatch_pattern(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitCatch_pattern(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Compiler_control_statementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_compiler_control_statement;
    }
    conditional_compilation_block() {
        return this.getTypedRuleContext(Conditional_compilation_blockContext, 0);
    }
    ;
    line_control_statement() {
        return this.getTypedRuleContext(Line_control_statementContext, 0);
    }
    ;
    diagnostic_statement() {
        return this.getTypedRuleContext(Diagnostic_statementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterCompiler_control_statement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitCompiler_control_statement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitCompiler_control_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Conditional_compilation_blockContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_conditional_compilation_block;
    }
    if_directive_clause() {
        return this.getTypedRuleContext(If_directive_clauseContext, 0);
    }
    ;
    HASH_ENDIF() {
        return this.getToken(Swift5Parser.HASH_ENDIF, 0);
    }
    ;
    elseif_directive_clauses() {
        return this.getTypedRuleContext(Elseif_directive_clausesContext, 0);
    }
    ;
    else_directive_clause() {
        return this.getTypedRuleContext(Else_directive_clauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterConditional_compilation_block(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitConditional_compilation_block(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitConditional_compilation_block(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class If_directive_clauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_if_directive_clause;
    }
    HASH_IF() {
        return this.getToken(Swift5Parser.HASH_IF, 0);
    }
    ;
    compilation_condition() {
        return this.getTypedRuleContext(Compilation_conditionContext, 0);
    }
    ;
    statements() {
        return this.getTypedRuleContext(StatementsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterIf_directive_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitIf_directive_clause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitIf_directive_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Elseif_directive_clausesContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_elseif_directive_clauses;
    }
    elseif_directive_clause = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Elseif_directive_clauseContext);
        }
        else {
            return this.getTypedRuleContext(Elseif_directive_clauseContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterElseif_directive_clauses(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitElseif_directive_clauses(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitElseif_directive_clauses(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Elseif_directive_clauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_elseif_directive_clause;
    }
    HASH_ELSEIF() {
        return this.getToken(Swift5Parser.HASH_ELSEIF, 0);
    }
    ;
    compilation_condition() {
        return this.getTypedRuleContext(Compilation_conditionContext, 0);
    }
    ;
    statements() {
        return this.getTypedRuleContext(StatementsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterElseif_directive_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitElseif_directive_clause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitElseif_directive_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Else_directive_clauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_else_directive_clause;
    }
    HASH_ELSE() {
        return this.getToken(Swift5Parser.HASH_ELSE, 0);
    }
    ;
    statements() {
        return this.getTypedRuleContext(StatementsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterElse_directive_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitElse_directive_clause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitElse_directive_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Compilation_conditionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_compilation_condition;
    }
    platform_condition() {
        return this.getTypedRuleContext(Platform_conditionContext, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    boolean_literal() {
        return this.getTypedRuleContext(Boolean_literalContext, 0);
    }
    ;
    LPAREN() {
        return this.getToken(Swift5Parser.LPAREN, 0);
    }
    ;
    compilation_condition = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Compilation_conditionContext);
        }
        else {
            return this.getTypedRuleContext(Compilation_conditionContext, i);
        }
    };
    RPAREN() {
        return this.getToken(Swift5Parser.RPAREN, 0);
    }
    ;
    BANG() {
        return this.getToken(Swift5Parser.BANG, 0);
    }
    ;
    compilation_condition_AND() {
        return this.getTypedRuleContext(Compilation_condition_ANDContext, 0);
    }
    ;
    compilation_condition_OR() {
        return this.getTypedRuleContext(Compilation_condition_ORContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterCompilation_condition(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitCompilation_condition(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitCompilation_condition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Platform_conditionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_platform_condition;
    }
    OS() {
        return this.getToken(Swift5Parser.OS, 0);
    }
    ;
    LPAREN() {
        return this.getToken(Swift5Parser.LPAREN, 0);
    }
    ;
    operating_system() {
        return this.getTypedRuleContext(Operating_systemContext, 0);
    }
    ;
    RPAREN() {
        return this.getToken(Swift5Parser.RPAREN, 0);
    }
    ;
    ARCH() {
        return this.getToken(Swift5Parser.ARCH, 0);
    }
    ;
    architecture() {
        return this.getTypedRuleContext(ArchitectureContext, 0);
    }
    ;
    swift_version() {
        return this.getTypedRuleContext(Swift_versionContext, 0);
    }
    ;
    SWIFT() {
        return this.getToken(Swift5Parser.SWIFT, 0);
    }
    ;
    COMPILER() {
        return this.getToken(Swift5Parser.COMPILER, 0);
    }
    ;
    compilation_condition_GE() {
        return this.getTypedRuleContext(Compilation_condition_GEContext, 0);
    }
    ;
    compilation_condition_L() {
        return this.getTypedRuleContext(Compilation_condition_LContext, 0);
    }
    ;
    CAN_IMPORT() {
        return this.getToken(Swift5Parser.CAN_IMPORT, 0);
    }
    ;
    module_name() {
        return this.getTypedRuleContext(Module_nameContext, 0);
    }
    ;
    TARGET_ENVIRONMENT() {
        return this.getToken(Swift5Parser.TARGET_ENVIRONMENT, 0);
    }
    ;
    environment() {
        return this.getTypedRuleContext(EnvironmentContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterPlatform_condition(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitPlatform_condition(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitPlatform_condition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Swift_versionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_swift_version;
    }
    Decimal_digits() {
        return this.getToken(Swift5Parser.Decimal_digits, 0);
    }
    ;
    swift_version_continuation() {
        return this.getTypedRuleContext(Swift_version_continuationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterSwift_version(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitSwift_version(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitSwift_version(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Swift_version_continuationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_swift_version_continuation;
    }
    DOT() {
        return this.getToken(Swift5Parser.DOT, 0);
    }
    ;
    Decimal_digits() {
        return this.getToken(Swift5Parser.Decimal_digits, 0);
    }
    ;
    swift_version_continuation() {
        return this.getTypedRuleContext(Swift_version_continuationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterSwift_version_continuation(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitSwift_version_continuation(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitSwift_version_continuation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Operating_systemContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_operating_system;
    }
    MAC_OS() {
        return this.getToken(Swift5Parser.MAC_OS, 0);
    }
    ;
    I_OS() {
        return this.getToken(Swift5Parser.I_OS, 0);
    }
    ;
    OSX() {
        return this.getToken(Swift5Parser.OSX, 0);
    }
    ;
    WATCH_OS() {
        return this.getToken(Swift5Parser.WATCH_OS, 0);
    }
    ;
    TV_OS() {
        return this.getToken(Swift5Parser.TV_OS, 0);
    }
    ;
    LINUX() {
        return this.getToken(Swift5Parser.LINUX, 0);
    }
    ;
    WINDOWS() {
        return this.getToken(Swift5Parser.WINDOWS, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterOperating_system(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitOperating_system(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitOperating_system(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ArchitectureContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_architecture;
    }
    I386() {
        return this.getToken(Swift5Parser.I386, 0);
    }
    ;
    X86_64() {
        return this.getToken(Swift5Parser.X86_64, 0);
    }
    ;
    ARM() {
        return this.getToken(Swift5Parser.ARM, 0);
    }
    ;
    ARM64() {
        return this.getToken(Swift5Parser.ARM64, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterArchitecture(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitArchitecture(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitArchitecture(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Module_nameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_module_name;
    }
    identifier = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(IdentifierContext);
        }
        else {
            return this.getTypedRuleContext(IdentifierContext, i);
        }
    };
    DOT = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.DOT);
        }
        else {
            return this.getToken(Swift5Parser.DOT, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterModule_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitModule_name(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitModule_name(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class EnvironmentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_environment;
    }
    SIMULATOR() {
        return this.getToken(Swift5Parser.SIMULATOR, 0);
    }
    ;
    MAC_CATALYST() {
        return this.getToken(Swift5Parser.MAC_CATALYST, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterEnvironment(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitEnvironment(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitEnvironment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Line_control_statementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_line_control_statement;
    }
    SOURCE_LOCATION() {
        return this.getToken(Swift5Parser.SOURCE_LOCATION, 0);
    }
    ;
    LPAREN() {
        return this.getToken(Swift5Parser.LPAREN, 0);
    }
    ;
    RPAREN() {
        return this.getToken(Swift5Parser.RPAREN, 0);
    }
    ;
    FILE() {
        return this.getToken(Swift5Parser.FILE, 0);
    }
    ;
    COLON = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.COLON);
        }
        else {
            return this.getToken(Swift5Parser.COLON, i);
        }
    };
    file_name() {
        return this.getTypedRuleContext(File_nameContext, 0);
    }
    ;
    COMMA() {
        return this.getToken(Swift5Parser.COMMA, 0);
    }
    ;
    LINE() {
        return this.getToken(Swift5Parser.LINE, 0);
    }
    ;
    line_number() {
        return this.getTypedRuleContext(Line_numberContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterLine_control_statement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitLine_control_statement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitLine_control_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Line_numberContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_line_number;
    }
    Decimal_literal() {
        return this.getToken(Swift5Parser.Decimal_literal, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterLine_number(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitLine_number(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitLine_number(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class File_nameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_file_name;
    }
    static_string_literal() {
        return this.getTypedRuleContext(Static_string_literalContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterFile_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitFile_name(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitFile_name(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Diagnostic_statementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_diagnostic_statement;
    }
    LPAREN() {
        return this.getToken(Swift5Parser.LPAREN, 0);
    }
    ;
    diagnostic_message() {
        return this.getTypedRuleContext(Diagnostic_messageContext, 0);
    }
    ;
    RPAREN() {
        return this.getToken(Swift5Parser.RPAREN, 0);
    }
    ;
    ERROR() {
        return this.getToken(Swift5Parser.ERROR, 0);
    }
    ;
    WARNING() {
        return this.getToken(Swift5Parser.WARNING, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterDiagnostic_statement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitDiagnostic_statement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitDiagnostic_statement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Diagnostic_messageContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_diagnostic_message;
    }
    static_string_literal() {
        return this.getTypedRuleContext(Static_string_literalContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterDiagnostic_message(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitDiagnostic_message(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitDiagnostic_message(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Availability_conditionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_availability_condition;
    }
    AVAILABLE() {
        return this.getToken(Swift5Parser.AVAILABLE, 0);
    }
    ;
    LPAREN() {
        return this.getToken(Swift5Parser.LPAREN, 0);
    }
    ;
    availability_arguments() {
        return this.getTypedRuleContext(Availability_argumentsContext, 0);
    }
    ;
    RPAREN() {
        return this.getToken(Swift5Parser.RPAREN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterAvailability_condition(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitAvailability_condition(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitAvailability_condition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Availability_argumentsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_availability_arguments;
    }
    availability_argument = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Availability_argumentContext);
        }
        else {
            return this.getTypedRuleContext(Availability_argumentContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.COMMA);
        }
        else {
            return this.getToken(Swift5Parser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterAvailability_arguments(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitAvailability_arguments(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitAvailability_arguments(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Availability_argumentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_availability_argument;
    }
    platform_name() {
        return this.getTypedRuleContext(Platform_nameContext, 0);
    }
    ;
    platform_version() {
        return this.getTypedRuleContext(Platform_versionContext, 0);
    }
    ;
    MUL() {
        return this.getToken(Swift5Parser.MUL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterAvailability_argument(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitAvailability_argument(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitAvailability_argument(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Platform_nameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_platform_name;
    }
    I_OS() {
        return this.getToken(Swift5Parser.I_OS, 0);
    }
    ;
    OSX() {
        return this.getToken(Swift5Parser.OSX, 0);
    }
    ;
    I_OS_APPLICATION_EXTENSION() {
        return this.getToken(Swift5Parser.I_OS_APPLICATION_EXTENSION, 0);
    }
    ;
    MAC_OS() {
        return this.getToken(Swift5Parser.MAC_OS, 0);
    }
    ;
    MAC_OS_APPLICATION_EXTENSION() {
        return this.getToken(Swift5Parser.MAC_OS_APPLICATION_EXTENSION, 0);
    }
    ;
    MAC_CATALYST() {
        return this.getToken(Swift5Parser.MAC_CATALYST, 0);
    }
    ;
    MAC_CATALYST_APPLICATION_EXTENSION() {
        return this.getToken(Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION, 0);
    }
    ;
    WATCH_OS() {
        return this.getToken(Swift5Parser.WATCH_OS, 0);
    }
    ;
    TV_OS() {
        return this.getToken(Swift5Parser.TV_OS, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterPlatform_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitPlatform_name(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitPlatform_name(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Platform_versionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_platform_version;
    }
    Decimal_literal() {
        return this.getToken(Swift5Parser.Decimal_literal, 0);
    }
    ;
    Decimal_digits() {
        return this.getToken(Swift5Parser.Decimal_digits, 0);
    }
    ;
    Floating_point_literal() {
        return this.getToken(Swift5Parser.Floating_point_literal, 0);
    }
    ;
    DOT() {
        return this.getToken(Swift5Parser.DOT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterPlatform_version(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitPlatform_version(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitPlatform_version(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Generic_parameter_clauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_generic_parameter_clause;
    }
    LT() {
        return this.getToken(Swift5Parser.LT, 0);
    }
    ;
    generic_parameter_list() {
        return this.getTypedRuleContext(Generic_parameter_listContext, 0);
    }
    ;
    GT() {
        return this.getToken(Swift5Parser.GT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterGeneric_parameter_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitGeneric_parameter_clause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitGeneric_parameter_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Generic_parameter_listContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_generic_parameter_list;
    }
    generic_parameter = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Generic_parameterContext);
        }
        else {
            return this.getTypedRuleContext(Generic_parameterContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.COMMA);
        }
        else {
            return this.getToken(Swift5Parser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterGeneric_parameter_list(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitGeneric_parameter_list(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitGeneric_parameter_list(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Generic_parameterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_generic_parameter;
    }
    type_name() {
        return this.getTypedRuleContext(Type_nameContext, 0);
    }
    ;
    COLON() {
        return this.getToken(Swift5Parser.COLON, 0);
    }
    ;
    type_identifier() {
        return this.getTypedRuleContext(Type_identifierContext, 0);
    }
    ;
    protocol_composition_type() {
        return this.getTypedRuleContext(Protocol_composition_typeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterGeneric_parameter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitGeneric_parameter(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitGeneric_parameter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Generic_where_clauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_generic_where_clause;
    }
    WHERE() {
        return this.getToken(Swift5Parser.WHERE, 0);
    }
    ;
    requirement_list() {
        return this.getTypedRuleContext(Requirement_listContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterGeneric_where_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitGeneric_where_clause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitGeneric_where_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Requirement_listContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_requirement_list;
    }
    requirement = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(RequirementContext);
        }
        else {
            return this.getTypedRuleContext(RequirementContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.COMMA);
        }
        else {
            return this.getToken(Swift5Parser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterRequirement_list(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitRequirement_list(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitRequirement_list(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class RequirementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_requirement;
    }
    conformance_requirement() {
        return this.getTypedRuleContext(Conformance_requirementContext, 0);
    }
    ;
    same_type_requirement() {
        return this.getTypedRuleContext(Same_type_requirementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterRequirement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitRequirement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitRequirement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Conformance_requirementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_conformance_requirement;
    }
    type_identifier = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Type_identifierContext);
        }
        else {
            return this.getTypedRuleContext(Type_identifierContext, i);
        }
    };
    COLON() {
        return this.getToken(Swift5Parser.COLON, 0);
    }
    ;
    protocol_composition_type() {
        return this.getTypedRuleContext(Protocol_composition_typeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterConformance_requirement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitConformance_requirement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitConformance_requirement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Same_type_requirementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_same_type_requirement;
    }
    type_identifier = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Type_identifierContext);
        }
        else {
            return this.getTypedRuleContext(Type_identifierContext, i);
        }
    };
    same_type_equals() {
        return this.getTypedRuleContext(Same_type_equalsContext, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterSame_type_requirement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitSame_type_requirement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitSame_type_requirement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Generic_argument_clauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_generic_argument_clause;
    }
    LT() {
        return this.getToken(Swift5Parser.LT, 0);
    }
    ;
    generic_argument_list() {
        return this.getTypedRuleContext(Generic_argument_listContext, 0);
    }
    ;
    GT() {
        return this.getToken(Swift5Parser.GT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterGeneric_argument_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitGeneric_argument_clause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitGeneric_argument_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Generic_argument_listContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_generic_argument_list;
    }
    generic_argument = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Generic_argumentContext);
        }
        else {
            return this.getTypedRuleContext(Generic_argumentContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.COMMA);
        }
        else {
            return this.getToken(Swift5Parser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterGeneric_argument_list(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitGeneric_argument_list(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitGeneric_argument_list(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Generic_argumentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_generic_argument;
    }
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterGeneric_argument(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitGeneric_argument(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitGeneric_argument(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_declaration;
    }
    import_declaration() {
        return this.getTypedRuleContext(Import_declarationContext, 0);
    }
    ;
    constant_declaration() {
        return this.getTypedRuleContext(Constant_declarationContext, 0);
    }
    ;
    variable_declaration() {
        return this.getTypedRuleContext(Variable_declarationContext, 0);
    }
    ;
    typealias_declaration() {
        return this.getTypedRuleContext(Typealias_declarationContext, 0);
    }
    ;
    function_declaration() {
        return this.getTypedRuleContext(Function_declarationContext, 0);
    }
    ;
    enum_declaration() {
        return this.getTypedRuleContext(Enum_declarationContext, 0);
    }
    ;
    struct_declaration() {
        return this.getTypedRuleContext(Struct_declarationContext, 0);
    }
    ;
    class_declaration() {
        return this.getTypedRuleContext(Class_declarationContext, 0);
    }
    ;
    protocol_declaration() {
        return this.getTypedRuleContext(Protocol_declarationContext, 0);
    }
    ;
    initializer_declaration() {
        return this.getTypedRuleContext(Initializer_declarationContext, 0);
    }
    ;
    deinitializer_declaration() {
        return this.getTypedRuleContext(Deinitializer_declarationContext, 0);
    }
    ;
    extension_declaration() {
        return this.getTypedRuleContext(Extension_declarationContext, 0);
    }
    ;
    subscript_declaration() {
        return this.getTypedRuleContext(Subscript_declarationContext, 0);
    }
    ;
    operator_declaration() {
        return this.getTypedRuleContext(Operator_declarationContext, 0);
    }
    ;
    precedence_group_declaration() {
        return this.getTypedRuleContext(Precedence_group_declarationContext, 0);
    }
    ;
    SEMI() {
        return this.getToken(Swift5Parser.SEMI, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DeclarationsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_declarations;
    }
    declaration = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(DeclarationContext);
        }
        else {
            return this.getTypedRuleContext(DeclarationContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterDeclarations(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitDeclarations(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitDeclarations(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Top_level_declarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_top_level_declaration;
    }
    statements() {
        return this.getTypedRuleContext(StatementsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterTop_level_declaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitTop_level_declaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitTop_level_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Code_blockContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_code_block;
    }
    LCURLY() {
        return this.getToken(Swift5Parser.LCURLY, 0);
    }
    ;
    RCURLY() {
        return this.getToken(Swift5Parser.RCURLY, 0);
    }
    ;
    statements() {
        return this.getTypedRuleContext(StatementsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterCode_block(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitCode_block(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitCode_block(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Import_declarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_import_declaration;
    }
    IMPORT() {
        return this.getToken(Swift5Parser.IMPORT, 0);
    }
    ;
    import_path() {
        return this.getTypedRuleContext(Import_pathContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    import_kind() {
        return this.getTypedRuleContext(Import_kindContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterImport_declaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitImport_declaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitImport_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Import_kindContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_import_kind;
    }
    TYPEALIAS() {
        return this.getToken(Swift5Parser.TYPEALIAS, 0);
    }
    ;
    STRUCT() {
        return this.getToken(Swift5Parser.STRUCT, 0);
    }
    ;
    CLASS() {
        return this.getToken(Swift5Parser.CLASS, 0);
    }
    ;
    ENUM() {
        return this.getToken(Swift5Parser.ENUM, 0);
    }
    ;
    PROTOCOL() {
        return this.getToken(Swift5Parser.PROTOCOL, 0);
    }
    ;
    LET() {
        return this.getToken(Swift5Parser.LET, 0);
    }
    ;
    VAR() {
        return this.getToken(Swift5Parser.VAR, 0);
    }
    ;
    FUNC() {
        return this.getToken(Swift5Parser.FUNC, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterImport_kind(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitImport_kind(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitImport_kind(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Import_pathContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_import_path;
    }
    import_path_identifier = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Import_path_identifierContext);
        }
        else {
            return this.getTypedRuleContext(Import_path_identifierContext, i);
        }
    };
    DOT = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.DOT);
        }
        else {
            return this.getToken(Swift5Parser.DOT, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterImport_path(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitImport_path(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitImport_path(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Import_path_identifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_import_path_identifier;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    operator() {
        return this.getTypedRuleContext(OperatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterImport_path_identifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitImport_path_identifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitImport_path_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Constant_declarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_constant_declaration;
    }
    LET() {
        return this.getToken(Swift5Parser.LET, 0);
    }
    ;
    pattern_initializer_list() {
        return this.getTypedRuleContext(Pattern_initializer_listContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    declaration_modifiers() {
        return this.getTypedRuleContext(Declaration_modifiersContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterConstant_declaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitConstant_declaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitConstant_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Pattern_initializer_listContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_pattern_initializer_list;
    }
    pattern_initializer = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Pattern_initializerContext);
        }
        else {
            return this.getTypedRuleContext(Pattern_initializerContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.COMMA);
        }
        else {
            return this.getToken(Swift5Parser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterPattern_initializer_list(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitPattern_initializer_list(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitPattern_initializer_list(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Pattern_initializerContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_pattern_initializer;
    }
    pattern() {
        return this.getTypedRuleContext(PatternContext, 0);
    }
    ;
    initializer() {
        return this.getTypedRuleContext(InitializerContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterPattern_initializer(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitPattern_initializer(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitPattern_initializer(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InitializerContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_initializer;
    }
    EQUAL() {
        return this.getToken(Swift5Parser.EQUAL, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterInitializer(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitInitializer(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitInitializer(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Variable_declarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_variable_declaration;
    }
    variable_declaration_head() {
        return this.getTypedRuleContext(Variable_declaration_headContext, 0);
    }
    ;
    variable_name() {
        return this.getTypedRuleContext(Variable_nameContext, 0);
    }
    ;
    pattern_initializer_list() {
        return this.getTypedRuleContext(Pattern_initializer_listContext, 0);
    }
    ;
    initializer() {
        return this.getTypedRuleContext(InitializerContext, 0);
    }
    ;
    willSet_didSet_block() {
        return this.getTypedRuleContext(WillSet_didSet_blockContext, 0);
    }
    ;
    type_annotation() {
        return this.getTypedRuleContext(Type_annotationContext, 0);
    }
    ;
    getter_setter_block() {
        return this.getTypedRuleContext(Getter_setter_blockContext, 0);
    }
    ;
    getter_setter_keyword_block() {
        return this.getTypedRuleContext(Getter_setter_keyword_blockContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterVariable_declaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitVariable_declaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitVariable_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Variable_declaration_headContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_variable_declaration_head;
    }
    VAR() {
        return this.getToken(Swift5Parser.VAR, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    declaration_modifiers() {
        return this.getTypedRuleContext(Declaration_modifiersContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterVariable_declaration_head(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitVariable_declaration_head(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitVariable_declaration_head(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Variable_nameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_variable_name;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterVariable_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitVariable_name(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitVariable_name(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Getter_setter_blockContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_getter_setter_block;
    }
    LCURLY() {
        return this.getToken(Swift5Parser.LCURLY, 0);
    }
    ;
    RCURLY() {
        return this.getToken(Swift5Parser.RCURLY, 0);
    }
    ;
    getter_clause() {
        return this.getTypedRuleContext(Getter_clauseContext, 0);
    }
    ;
    setter_clause() {
        return this.getTypedRuleContext(Setter_clauseContext, 0);
    }
    ;
    code_block() {
        return this.getTypedRuleContext(Code_blockContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterGetter_setter_block(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitGetter_setter_block(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitGetter_setter_block(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Getter_clauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_getter_clause;
    }
    GET() {
        return this.getToken(Swift5Parser.GET, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    mutation_modifier() {
        return this.getTypedRuleContext(Mutation_modifierContext, 0);
    }
    ;
    code_block() {
        return this.getTypedRuleContext(Code_blockContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterGetter_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitGetter_clause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitGetter_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Setter_clauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_setter_clause;
    }
    SET() {
        return this.getToken(Swift5Parser.SET, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    mutation_modifier() {
        return this.getTypedRuleContext(Mutation_modifierContext, 0);
    }
    ;
    setter_name() {
        return this.getTypedRuleContext(Setter_nameContext, 0);
    }
    ;
    code_block() {
        return this.getTypedRuleContext(Code_blockContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterSetter_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitSetter_clause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitSetter_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Setter_nameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_setter_name;
    }
    LPAREN() {
        return this.getToken(Swift5Parser.LPAREN, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    RPAREN() {
        return this.getToken(Swift5Parser.RPAREN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterSetter_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitSetter_name(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitSetter_name(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Getter_setter_keyword_blockContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_getter_setter_keyword_block;
    }
    LCURLY() {
        return this.getToken(Swift5Parser.LCURLY, 0);
    }
    ;
    RCURLY() {
        return this.getToken(Swift5Parser.RCURLY, 0);
    }
    ;
    getter_keyword_clause() {
        return this.getTypedRuleContext(Getter_keyword_clauseContext, 0);
    }
    ;
    setter_keyword_clause() {
        return this.getTypedRuleContext(Setter_keyword_clauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterGetter_setter_keyword_block(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitGetter_setter_keyword_block(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitGetter_setter_keyword_block(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Getter_keyword_clauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_getter_keyword_clause;
    }
    GET() {
        return this.getToken(Swift5Parser.GET, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    mutation_modifier() {
        return this.getTypedRuleContext(Mutation_modifierContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterGetter_keyword_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitGetter_keyword_clause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitGetter_keyword_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Setter_keyword_clauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_setter_keyword_clause;
    }
    SET() {
        return this.getToken(Swift5Parser.SET, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    mutation_modifier() {
        return this.getTypedRuleContext(Mutation_modifierContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterSetter_keyword_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitSetter_keyword_clause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitSetter_keyword_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class WillSet_didSet_blockContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_willSet_didSet_block;
    }
    LCURLY() {
        return this.getToken(Swift5Parser.LCURLY, 0);
    }
    ;
    RCURLY() {
        return this.getToken(Swift5Parser.RCURLY, 0);
    }
    ;
    willSet_clause() {
        return this.getTypedRuleContext(WillSet_clauseContext, 0);
    }
    ;
    didSet_clause() {
        return this.getTypedRuleContext(DidSet_clauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterWillSet_didSet_block(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitWillSet_didSet_block(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitWillSet_didSet_block(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class WillSet_clauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_willSet_clause;
    }
    WILL_SET() {
        return this.getToken(Swift5Parser.WILL_SET, 0);
    }
    ;
    code_block() {
        return this.getTypedRuleContext(Code_blockContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    setter_name() {
        return this.getTypedRuleContext(Setter_nameContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterWillSet_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitWillSet_clause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitWillSet_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DidSet_clauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_didSet_clause;
    }
    DID_SET() {
        return this.getToken(Swift5Parser.DID_SET, 0);
    }
    ;
    code_block() {
        return this.getTypedRuleContext(Code_blockContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    setter_name() {
        return this.getTypedRuleContext(Setter_nameContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterDidSet_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitDidSet_clause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitDidSet_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Typealias_declarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_typealias_declaration;
    }
    TYPEALIAS() {
        return this.getToken(Swift5Parser.TYPEALIAS, 0);
    }
    ;
    typealias_name() {
        return this.getTypedRuleContext(Typealias_nameContext, 0);
    }
    ;
    typealias_assignment() {
        return this.getTypedRuleContext(Typealias_assignmentContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    access_level_modifier() {
        return this.getTypedRuleContext(Access_level_modifierContext, 0);
    }
    ;
    generic_parameter_clause() {
        return this.getTypedRuleContext(Generic_parameter_clauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterTypealias_declaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitTypealias_declaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitTypealias_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Typealias_nameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_typealias_name;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterTypealias_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitTypealias_name(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitTypealias_name(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Typealias_assignmentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_typealias_assignment;
    }
    EQUAL() {
        return this.getToken(Swift5Parser.EQUAL, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterTypealias_assignment(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitTypealias_assignment(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitTypealias_assignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Function_declarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_function_declaration;
    }
    function_head() {
        return this.getTypedRuleContext(Function_headContext, 0);
    }
    ;
    function_name() {
        return this.getTypedRuleContext(Function_nameContext, 0);
    }
    ;
    function_signature() {
        return this.getTypedRuleContext(Function_signatureContext, 0);
    }
    ;
    generic_parameter_clause() {
        return this.getTypedRuleContext(Generic_parameter_clauseContext, 0);
    }
    ;
    generic_where_clause() {
        return this.getTypedRuleContext(Generic_where_clauseContext, 0);
    }
    ;
    function_body() {
        return this.getTypedRuleContext(Function_bodyContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterFunction_declaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitFunction_declaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitFunction_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Function_headContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_function_head;
    }
    FUNC() {
        return this.getToken(Swift5Parser.FUNC, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    declaration_modifiers() {
        return this.getTypedRuleContext(Declaration_modifiersContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterFunction_head(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitFunction_head(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitFunction_head(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Function_nameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_function_name;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    operator() {
        return this.getTypedRuleContext(OperatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterFunction_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitFunction_name(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitFunction_name(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Function_signatureContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_function_signature;
    }
    parameter_clause() {
        return this.getTypedRuleContext(Parameter_clauseContext, 0);
    }
    ;
    RETHROWS() {
        return this.getToken(Swift5Parser.RETHROWS, 0);
    }
    ;
    function_result() {
        return this.getTypedRuleContext(Function_resultContext, 0);
    }
    ;
    THROWS() {
        return this.getToken(Swift5Parser.THROWS, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterFunction_signature(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitFunction_signature(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitFunction_signature(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Function_resultContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_function_result;
    }
    arrow_operator() {
        return this.getTypedRuleContext(Arrow_operatorContext, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterFunction_result(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitFunction_result(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitFunction_result(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Function_bodyContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_function_body;
    }
    code_block() {
        return this.getTypedRuleContext(Code_blockContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterFunction_body(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitFunction_body(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitFunction_body(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Parameter_clauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_parameter_clause;
    }
    LPAREN() {
        return this.getToken(Swift5Parser.LPAREN, 0);
    }
    ;
    RPAREN() {
        return this.getToken(Swift5Parser.RPAREN, 0);
    }
    ;
    parameter_list() {
        return this.getTypedRuleContext(Parameter_listContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterParameter_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitParameter_clause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitParameter_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Parameter_listContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_parameter_list;
    }
    parameter = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(ParameterContext);
        }
        else {
            return this.getTypedRuleContext(ParameterContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.COMMA);
        }
        else {
            return this.getToken(Swift5Parser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterParameter_list(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitParameter_list(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitParameter_list(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ParameterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_parameter;
    }
    local_parameter_name() {
        return this.getTypedRuleContext(Local_parameter_nameContext, 0);
    }
    ;
    type_annotation() {
        return this.getTypedRuleContext(Type_annotationContext, 0);
    }
    ;
    range_operator() {
        return this.getTypedRuleContext(Range_operatorContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    external_parameter_name() {
        return this.getTypedRuleContext(External_parameter_nameContext, 0);
    }
    ;
    default_argument_clause() {
        return this.getTypedRuleContext(Default_argument_clauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterParameter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitParameter(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitParameter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class External_parameter_nameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_external_parameter_name;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterExternal_parameter_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitExternal_parameter_name(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitExternal_parameter_name(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Local_parameter_nameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_local_parameter_name;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterLocal_parameter_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitLocal_parameter_name(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitLocal_parameter_name(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Default_argument_clauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_default_argument_clause;
    }
    EQUAL() {
        return this.getToken(Swift5Parser.EQUAL, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterDefault_argument_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitDefault_argument_clause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitDefault_argument_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Enum_declarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_enum_declaration;
    }
    union_style_enum() {
        return this.getTypedRuleContext(Union_style_enumContext, 0);
    }
    ;
    raw_value_style_enum() {
        return this.getTypedRuleContext(Raw_value_style_enumContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    access_level_modifier() {
        return this.getTypedRuleContext(Access_level_modifierContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterEnum_declaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitEnum_declaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitEnum_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Union_style_enumContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_union_style_enum;
    }
    ENUM() {
        return this.getToken(Swift5Parser.ENUM, 0);
    }
    ;
    enum_name() {
        return this.getTypedRuleContext(Enum_nameContext, 0);
    }
    ;
    LCURLY() {
        return this.getToken(Swift5Parser.LCURLY, 0);
    }
    ;
    RCURLY() {
        return this.getToken(Swift5Parser.RCURLY, 0);
    }
    ;
    INDIRECT() {
        return this.getToken(Swift5Parser.INDIRECT, 0);
    }
    ;
    generic_parameter_clause() {
        return this.getTypedRuleContext(Generic_parameter_clauseContext, 0);
    }
    ;
    type_inheritance_clause() {
        return this.getTypedRuleContext(Type_inheritance_clauseContext, 0);
    }
    ;
    generic_where_clause() {
        return this.getTypedRuleContext(Generic_where_clauseContext, 0);
    }
    ;
    union_style_enum_members() {
        return this.getTypedRuleContext(Union_style_enum_membersContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterUnion_style_enum(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitUnion_style_enum(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitUnion_style_enum(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Union_style_enum_membersContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_union_style_enum_members;
    }
    union_style_enum_member = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Union_style_enum_memberContext);
        }
        else {
            return this.getTypedRuleContext(Union_style_enum_memberContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterUnion_style_enum_members(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitUnion_style_enum_members(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitUnion_style_enum_members(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Union_style_enum_memberContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_union_style_enum_member;
    }
    declaration() {
        return this.getTypedRuleContext(DeclarationContext, 0);
    }
    ;
    union_style_enum_case_clause() {
        return this.getTypedRuleContext(Union_style_enum_case_clauseContext, 0);
    }
    ;
    compiler_control_statement() {
        return this.getTypedRuleContext(Compiler_control_statementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterUnion_style_enum_member(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitUnion_style_enum_member(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitUnion_style_enum_member(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Union_style_enum_case_clauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_union_style_enum_case_clause;
    }
    CASE() {
        return this.getToken(Swift5Parser.CASE, 0);
    }
    ;
    union_style_enum_case_list() {
        return this.getTypedRuleContext(Union_style_enum_case_listContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    INDIRECT() {
        return this.getToken(Swift5Parser.INDIRECT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterUnion_style_enum_case_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitUnion_style_enum_case_clause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitUnion_style_enum_case_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Union_style_enum_case_listContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_union_style_enum_case_list;
    }
    union_style_enum_case = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Union_style_enum_caseContext);
        }
        else {
            return this.getTypedRuleContext(Union_style_enum_caseContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.COMMA);
        }
        else {
            return this.getToken(Swift5Parser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterUnion_style_enum_case_list(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitUnion_style_enum_case_list(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitUnion_style_enum_case_list(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Union_style_enum_caseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_union_style_enum_case;
    }
    opaque_type() {
        return this.getTypedRuleContext(Opaque_typeContext, 0);
    }
    ;
    enum_case_name() {
        return this.getTypedRuleContext(Enum_case_nameContext, 0);
    }
    ;
    tuple_type() {
        return this.getTypedRuleContext(Tuple_typeContext, 0);
    }
    ;
    LPAREN() {
        return this.getToken(Swift5Parser.LPAREN, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    RPAREN() {
        return this.getToken(Swift5Parser.RPAREN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterUnion_style_enum_case(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitUnion_style_enum_case(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitUnion_style_enum_case(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Enum_nameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_enum_name;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterEnum_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitEnum_name(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitEnum_name(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Enum_case_nameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_enum_case_name;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterEnum_case_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitEnum_case_name(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitEnum_case_name(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Raw_value_style_enumContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_raw_value_style_enum;
    }
    ENUM() {
        return this.getToken(Swift5Parser.ENUM, 0);
    }
    ;
    enum_name() {
        return this.getTypedRuleContext(Enum_nameContext, 0);
    }
    ;
    type_inheritance_clause() {
        return this.getTypedRuleContext(Type_inheritance_clauseContext, 0);
    }
    ;
    LCURLY() {
        return this.getToken(Swift5Parser.LCURLY, 0);
    }
    ;
    raw_value_style_enum_members() {
        return this.getTypedRuleContext(Raw_value_style_enum_membersContext, 0);
    }
    ;
    RCURLY() {
        return this.getToken(Swift5Parser.RCURLY, 0);
    }
    ;
    generic_parameter_clause() {
        return this.getTypedRuleContext(Generic_parameter_clauseContext, 0);
    }
    ;
    generic_where_clause() {
        return this.getTypedRuleContext(Generic_where_clauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterRaw_value_style_enum(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitRaw_value_style_enum(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitRaw_value_style_enum(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Raw_value_style_enum_membersContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_raw_value_style_enum_members;
    }
    raw_value_style_enum_member = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Raw_value_style_enum_memberContext);
        }
        else {
            return this.getTypedRuleContext(Raw_value_style_enum_memberContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterRaw_value_style_enum_members(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitRaw_value_style_enum_members(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitRaw_value_style_enum_members(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Raw_value_style_enum_memberContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_raw_value_style_enum_member;
    }
    declaration() {
        return this.getTypedRuleContext(DeclarationContext, 0);
    }
    ;
    raw_value_style_enum_case_clause() {
        return this.getTypedRuleContext(Raw_value_style_enum_case_clauseContext, 0);
    }
    ;
    compiler_control_statement() {
        return this.getTypedRuleContext(Compiler_control_statementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterRaw_value_style_enum_member(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitRaw_value_style_enum_member(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitRaw_value_style_enum_member(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Raw_value_style_enum_case_clauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_raw_value_style_enum_case_clause;
    }
    CASE() {
        return this.getToken(Swift5Parser.CASE, 0);
    }
    ;
    raw_value_style_enum_case_list() {
        return this.getTypedRuleContext(Raw_value_style_enum_case_listContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterRaw_value_style_enum_case_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitRaw_value_style_enum_case_clause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitRaw_value_style_enum_case_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Raw_value_style_enum_case_listContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_raw_value_style_enum_case_list;
    }
    raw_value_style_enum_case = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Raw_value_style_enum_caseContext);
        }
        else {
            return this.getTypedRuleContext(Raw_value_style_enum_caseContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.COMMA);
        }
        else {
            return this.getToken(Swift5Parser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterRaw_value_style_enum_case_list(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitRaw_value_style_enum_case_list(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitRaw_value_style_enum_case_list(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Raw_value_style_enum_caseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_raw_value_style_enum_case;
    }
    enum_case_name() {
        return this.getTypedRuleContext(Enum_case_nameContext, 0);
    }
    ;
    raw_value_assignment() {
        return this.getTypedRuleContext(Raw_value_assignmentContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterRaw_value_style_enum_case(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitRaw_value_style_enum_case(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitRaw_value_style_enum_case(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Raw_value_assignmentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_raw_value_assignment;
    }
    EQUAL() {
        return this.getToken(Swift5Parser.EQUAL, 0);
    }
    ;
    raw_value_literal() {
        return this.getTypedRuleContext(Raw_value_literalContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterRaw_value_assignment(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitRaw_value_assignment(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitRaw_value_assignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Raw_value_literalContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_raw_value_literal;
    }
    numeric_literal() {
        return this.getTypedRuleContext(Numeric_literalContext, 0);
    }
    ;
    static_string_literal() {
        return this.getTypedRuleContext(Static_string_literalContext, 0);
    }
    ;
    boolean_literal() {
        return this.getTypedRuleContext(Boolean_literalContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterRaw_value_literal(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitRaw_value_literal(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitRaw_value_literal(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Struct_declarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_struct_declaration;
    }
    STRUCT() {
        return this.getToken(Swift5Parser.STRUCT, 0);
    }
    ;
    struct_name() {
        return this.getTypedRuleContext(Struct_nameContext, 0);
    }
    ;
    struct_body() {
        return this.getTypedRuleContext(Struct_bodyContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    access_level_modifier() {
        return this.getTypedRuleContext(Access_level_modifierContext, 0);
    }
    ;
    generic_parameter_clause() {
        return this.getTypedRuleContext(Generic_parameter_clauseContext, 0);
    }
    ;
    type_inheritance_clause() {
        return this.getTypedRuleContext(Type_inheritance_clauseContext, 0);
    }
    ;
    generic_where_clause() {
        return this.getTypedRuleContext(Generic_where_clauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterStruct_declaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitStruct_declaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitStruct_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Struct_nameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_struct_name;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterStruct_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitStruct_name(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitStruct_name(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Struct_bodyContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_struct_body;
    }
    LCURLY() {
        return this.getToken(Swift5Parser.LCURLY, 0);
    }
    ;
    struct_members() {
        return this.getTypedRuleContext(Struct_membersContext, 0);
    }
    ;
    RCURLY() {
        return this.getToken(Swift5Parser.RCURLY, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterStruct_body(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitStruct_body(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitStruct_body(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Struct_membersContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_struct_members;
    }
    struct_member = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Struct_memberContext);
        }
        else {
            return this.getTypedRuleContext(Struct_memberContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterStruct_members(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitStruct_members(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitStruct_members(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Struct_memberContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_struct_member;
    }
    declaration() {
        return this.getTypedRuleContext(DeclarationContext, 0);
    }
    ;
    compiler_control_statement() {
        return this.getTypedRuleContext(Compiler_control_statementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterStruct_member(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitStruct_member(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitStruct_member(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Class_declarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_class_declaration;
    }
    CLASS() {
        return this.getToken(Swift5Parser.CLASS, 0);
    }
    ;
    class_name() {
        return this.getTypedRuleContext(Class_nameContext, 0);
    }
    ;
    class_body() {
        return this.getTypedRuleContext(Class_bodyContext, 0);
    }
    ;
    FINAL() {
        return this.getToken(Swift5Parser.FINAL, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    generic_parameter_clause() {
        return this.getTypedRuleContext(Generic_parameter_clauseContext, 0);
    }
    ;
    type_inheritance_clause() {
        return this.getTypedRuleContext(Type_inheritance_clauseContext, 0);
    }
    ;
    generic_where_clause() {
        return this.getTypedRuleContext(Generic_where_clauseContext, 0);
    }
    ;
    access_level_modifier() {
        return this.getTypedRuleContext(Access_level_modifierContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterClass_declaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitClass_declaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitClass_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Class_nameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_class_name;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterClass_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitClass_name(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitClass_name(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Class_bodyContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_class_body;
    }
    LCURLY() {
        return this.getToken(Swift5Parser.LCURLY, 0);
    }
    ;
    class_members() {
        return this.getTypedRuleContext(Class_membersContext, 0);
    }
    ;
    RCURLY() {
        return this.getToken(Swift5Parser.RCURLY, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterClass_body(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitClass_body(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitClass_body(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Class_membersContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_class_members;
    }
    class_member = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Class_memberContext);
        }
        else {
            return this.getTypedRuleContext(Class_memberContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterClass_members(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitClass_members(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitClass_members(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Class_memberContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_class_member;
    }
    declaration() {
        return this.getTypedRuleContext(DeclarationContext, 0);
    }
    ;
    compiler_control_statement() {
        return this.getTypedRuleContext(Compiler_control_statementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterClass_member(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitClass_member(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitClass_member(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Protocol_declarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_protocol_declaration;
    }
    PROTOCOL() {
        return this.getToken(Swift5Parser.PROTOCOL, 0);
    }
    ;
    protocol_name() {
        return this.getTypedRuleContext(Protocol_nameContext, 0);
    }
    ;
    protocol_body() {
        return this.getTypedRuleContext(Protocol_bodyContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    access_level_modifier() {
        return this.getTypedRuleContext(Access_level_modifierContext, 0);
    }
    ;
    COLON() {
        return this.getToken(Swift5Parser.COLON, 0);
    }
    ;
    CLASS() {
        return this.getToken(Swift5Parser.CLASS, 0);
    }
    ;
    type_inheritance_clause() {
        return this.getTypedRuleContext(Type_inheritance_clauseContext, 0);
    }
    ;
    generic_where_clause() {
        return this.getTypedRuleContext(Generic_where_clauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterProtocol_declaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitProtocol_declaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitProtocol_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Protocol_nameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_protocol_name;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterProtocol_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitProtocol_name(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitProtocol_name(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Protocol_bodyContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_protocol_body;
    }
    LCURLY() {
        return this.getToken(Swift5Parser.LCURLY, 0);
    }
    ;
    protocol_members() {
        return this.getTypedRuleContext(Protocol_membersContext, 0);
    }
    ;
    RCURLY() {
        return this.getToken(Swift5Parser.RCURLY, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterProtocol_body(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitProtocol_body(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitProtocol_body(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Protocol_membersContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_protocol_members;
    }
    protocol_member = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Protocol_memberContext);
        }
        else {
            return this.getTypedRuleContext(Protocol_memberContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterProtocol_members(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitProtocol_members(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitProtocol_members(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Protocol_memberContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_protocol_member;
    }
    protocol_member_declaration() {
        return this.getTypedRuleContext(Protocol_member_declarationContext, 0);
    }
    ;
    compiler_control_statement() {
        return this.getTypedRuleContext(Compiler_control_statementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterProtocol_member(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitProtocol_member(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitProtocol_member(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Protocol_member_declarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_protocol_member_declaration;
    }
    protocol_property_declaration() {
        return this.getTypedRuleContext(Protocol_property_declarationContext, 0);
    }
    ;
    protocol_method_declaration() {
        return this.getTypedRuleContext(Protocol_method_declarationContext, 0);
    }
    ;
    protocol_initializer_declaration() {
        return this.getTypedRuleContext(Protocol_initializer_declarationContext, 0);
    }
    ;
    protocol_subscript_declaration() {
        return this.getTypedRuleContext(Protocol_subscript_declarationContext, 0);
    }
    ;
    protocol_associated_type_declaration() {
        return this.getTypedRuleContext(Protocol_associated_type_declarationContext, 0);
    }
    ;
    typealias_declaration() {
        return this.getTypedRuleContext(Typealias_declarationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterProtocol_member_declaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitProtocol_member_declaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitProtocol_member_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Protocol_property_declarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_protocol_property_declaration;
    }
    variable_declaration_head() {
        return this.getTypedRuleContext(Variable_declaration_headContext, 0);
    }
    ;
    variable_name() {
        return this.getTypedRuleContext(Variable_nameContext, 0);
    }
    ;
    type_annotation() {
        return this.getTypedRuleContext(Type_annotationContext, 0);
    }
    ;
    getter_setter_keyword_block() {
        return this.getTypedRuleContext(Getter_setter_keyword_blockContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterProtocol_property_declaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitProtocol_property_declaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitProtocol_property_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Protocol_method_declarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_protocol_method_declaration;
    }
    function_head() {
        return this.getTypedRuleContext(Function_headContext, 0);
    }
    ;
    function_name() {
        return this.getTypedRuleContext(Function_nameContext, 0);
    }
    ;
    function_signature() {
        return this.getTypedRuleContext(Function_signatureContext, 0);
    }
    ;
    generic_parameter_clause() {
        return this.getTypedRuleContext(Generic_parameter_clauseContext, 0);
    }
    ;
    generic_where_clause() {
        return this.getTypedRuleContext(Generic_where_clauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterProtocol_method_declaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitProtocol_method_declaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitProtocol_method_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Protocol_initializer_declarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_protocol_initializer_declaration;
    }
    initializer_head() {
        return this.getTypedRuleContext(Initializer_headContext, 0);
    }
    ;
    parameter_clause() {
        return this.getTypedRuleContext(Parameter_clauseContext, 0);
    }
    ;
    RETHROWS() {
        return this.getToken(Swift5Parser.RETHROWS, 0);
    }
    ;
    generic_parameter_clause() {
        return this.getTypedRuleContext(Generic_parameter_clauseContext, 0);
    }
    ;
    generic_where_clause() {
        return this.getTypedRuleContext(Generic_where_clauseContext, 0);
    }
    ;
    THROWS() {
        return this.getToken(Swift5Parser.THROWS, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterProtocol_initializer_declaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitProtocol_initializer_declaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitProtocol_initializer_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Protocol_subscript_declarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_protocol_subscript_declaration;
    }
    subscript_head() {
        return this.getTypedRuleContext(Subscript_headContext, 0);
    }
    ;
    subscript_result() {
        return this.getTypedRuleContext(Subscript_resultContext, 0);
    }
    ;
    getter_setter_keyword_block() {
        return this.getTypedRuleContext(Getter_setter_keyword_blockContext, 0);
    }
    ;
    generic_where_clause() {
        return this.getTypedRuleContext(Generic_where_clauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterProtocol_subscript_declaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitProtocol_subscript_declaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitProtocol_subscript_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Protocol_associated_type_declarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_protocol_associated_type_declaration;
    }
    ASSOCIATED_TYPE() {
        return this.getToken(Swift5Parser.ASSOCIATED_TYPE, 0);
    }
    ;
    typealias_name() {
        return this.getTypedRuleContext(Typealias_nameContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    access_level_modifier() {
        return this.getTypedRuleContext(Access_level_modifierContext, 0);
    }
    ;
    type_inheritance_clause() {
        return this.getTypedRuleContext(Type_inheritance_clauseContext, 0);
    }
    ;
    typealias_assignment() {
        return this.getTypedRuleContext(Typealias_assignmentContext, 0);
    }
    ;
    generic_where_clause() {
        return this.getTypedRuleContext(Generic_where_clauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterProtocol_associated_type_declaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitProtocol_associated_type_declaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitProtocol_associated_type_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Initializer_declarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_initializer_declaration;
    }
    initializer_head() {
        return this.getTypedRuleContext(Initializer_headContext, 0);
    }
    ;
    parameter_clause() {
        return this.getTypedRuleContext(Parameter_clauseContext, 0);
    }
    ;
    initializer_body() {
        return this.getTypedRuleContext(Initializer_bodyContext, 0);
    }
    ;
    generic_parameter_clause() {
        return this.getTypedRuleContext(Generic_parameter_clauseContext, 0);
    }
    ;
    generic_where_clause() {
        return this.getTypedRuleContext(Generic_where_clauseContext, 0);
    }
    ;
    THROWS() {
        return this.getToken(Swift5Parser.THROWS, 0);
    }
    ;
    RETHROWS() {
        return this.getToken(Swift5Parser.RETHROWS, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterInitializer_declaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitInitializer_declaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitInitializer_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Initializer_headContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_initializer_head;
    }
    INIT() {
        return this.getToken(Swift5Parser.INIT, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    declaration_modifiers() {
        return this.getTypedRuleContext(Declaration_modifiersContext, 0);
    }
    ;
    QUESTION() {
        return this.getToken(Swift5Parser.QUESTION, 0);
    }
    ;
    BANG() {
        return this.getToken(Swift5Parser.BANG, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterInitializer_head(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitInitializer_head(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitInitializer_head(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Initializer_bodyContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_initializer_body;
    }
    code_block() {
        return this.getTypedRuleContext(Code_blockContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterInitializer_body(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitInitializer_body(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitInitializer_body(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Deinitializer_declarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_deinitializer_declaration;
    }
    DEINIT() {
        return this.getToken(Swift5Parser.DEINIT, 0);
    }
    ;
    code_block() {
        return this.getTypedRuleContext(Code_blockContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterDeinitializer_declaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitDeinitializer_declaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitDeinitializer_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Extension_declarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_extension_declaration;
    }
    EXTENSION() {
        return this.getToken(Swift5Parser.EXTENSION, 0);
    }
    ;
    type_identifier() {
        return this.getTypedRuleContext(Type_identifierContext, 0);
    }
    ;
    extension_body() {
        return this.getTypedRuleContext(Extension_bodyContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    access_level_modifier() {
        return this.getTypedRuleContext(Access_level_modifierContext, 0);
    }
    ;
    type_inheritance_clause() {
        return this.getTypedRuleContext(Type_inheritance_clauseContext, 0);
    }
    ;
    generic_where_clause() {
        return this.getTypedRuleContext(Generic_where_clauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterExtension_declaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitExtension_declaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitExtension_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Extension_bodyContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_extension_body;
    }
    LCURLY() {
        return this.getToken(Swift5Parser.LCURLY, 0);
    }
    ;
    extension_members() {
        return this.getTypedRuleContext(Extension_membersContext, 0);
    }
    ;
    RCURLY() {
        return this.getToken(Swift5Parser.RCURLY, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterExtension_body(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitExtension_body(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitExtension_body(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Extension_membersContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_extension_members;
    }
    extension_member = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Extension_memberContext);
        }
        else {
            return this.getTypedRuleContext(Extension_memberContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterExtension_members(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitExtension_members(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitExtension_members(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Extension_memberContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_extension_member;
    }
    declaration() {
        return this.getTypedRuleContext(DeclarationContext, 0);
    }
    ;
    compiler_control_statement() {
        return this.getTypedRuleContext(Compiler_control_statementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterExtension_member(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitExtension_member(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitExtension_member(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Subscript_declarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_subscript_declaration;
    }
    subscript_head() {
        return this.getTypedRuleContext(Subscript_headContext, 0);
    }
    ;
    subscript_result() {
        return this.getTypedRuleContext(Subscript_resultContext, 0);
    }
    ;
    code_block() {
        return this.getTypedRuleContext(Code_blockContext, 0);
    }
    ;
    getter_setter_block() {
        return this.getTypedRuleContext(Getter_setter_blockContext, 0);
    }
    ;
    getter_setter_keyword_block() {
        return this.getTypedRuleContext(Getter_setter_keyword_blockContext, 0);
    }
    ;
    generic_where_clause() {
        return this.getTypedRuleContext(Generic_where_clauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterSubscript_declaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitSubscript_declaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitSubscript_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Subscript_headContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_subscript_head;
    }
    SUBSCRIPT() {
        return this.getToken(Swift5Parser.SUBSCRIPT, 0);
    }
    ;
    parameter_clause() {
        return this.getTypedRuleContext(Parameter_clauseContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    declaration_modifiers() {
        return this.getTypedRuleContext(Declaration_modifiersContext, 0);
    }
    ;
    generic_parameter_clause() {
        return this.getTypedRuleContext(Generic_parameter_clauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterSubscript_head(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitSubscript_head(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitSubscript_head(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Subscript_resultContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_subscript_result;
    }
    arrow_operator() {
        return this.getTypedRuleContext(Arrow_operatorContext, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterSubscript_result(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitSubscript_result(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitSubscript_result(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Operator_declarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_operator_declaration;
    }
    prefix_operator_declaration() {
        return this.getTypedRuleContext(Prefix_operator_declarationContext, 0);
    }
    ;
    postfix_operator_declaration() {
        return this.getTypedRuleContext(Postfix_operator_declarationContext, 0);
    }
    ;
    infix_operator_declaration() {
        return this.getTypedRuleContext(Infix_operator_declarationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterOperator_declaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitOperator_declaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitOperator_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Prefix_operator_declarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_prefix_operator_declaration;
    }
    PREFIX() {
        return this.getToken(Swift5Parser.PREFIX, 0);
    }
    ;
    OPERATOR() {
        return this.getToken(Swift5Parser.OPERATOR, 0);
    }
    ;
    operator() {
        return this.getTypedRuleContext(OperatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterPrefix_operator_declaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitPrefix_operator_declaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitPrefix_operator_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Postfix_operator_declarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_postfix_operator_declaration;
    }
    POSTFIX() {
        return this.getToken(Swift5Parser.POSTFIX, 0);
    }
    ;
    OPERATOR() {
        return this.getToken(Swift5Parser.OPERATOR, 0);
    }
    ;
    operator() {
        return this.getTypedRuleContext(OperatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterPostfix_operator_declaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitPostfix_operator_declaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitPostfix_operator_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Infix_operator_declarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_infix_operator_declaration;
    }
    INFIX() {
        return this.getToken(Swift5Parser.INFIX, 0);
    }
    ;
    OPERATOR() {
        return this.getToken(Swift5Parser.OPERATOR, 0);
    }
    ;
    operator() {
        return this.getTypedRuleContext(OperatorContext, 0);
    }
    ;
    infix_operator_group() {
        return this.getTypedRuleContext(Infix_operator_groupContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterInfix_operator_declaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitInfix_operator_declaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitInfix_operator_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Infix_operator_groupContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_infix_operator_group;
    }
    COLON() {
        return this.getToken(Swift5Parser.COLON, 0);
    }
    ;
    precedence_group_name() {
        return this.getTypedRuleContext(Precedence_group_nameContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterInfix_operator_group(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitInfix_operator_group(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitInfix_operator_group(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Precedence_group_declarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_precedence_group_declaration;
    }
    PRECEDENCE_GROUP() {
        return this.getToken(Swift5Parser.PRECEDENCE_GROUP, 0);
    }
    ;
    precedence_group_name() {
        return this.getTypedRuleContext(Precedence_group_nameContext, 0);
    }
    ;
    LCURLY() {
        return this.getToken(Swift5Parser.LCURLY, 0);
    }
    ;
    RCURLY() {
        return this.getToken(Swift5Parser.RCURLY, 0);
    }
    ;
    precedence_group_attributes() {
        return this.getTypedRuleContext(Precedence_group_attributesContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterPrecedence_group_declaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitPrecedence_group_declaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitPrecedence_group_declaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Precedence_group_attributesContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_precedence_group_attributes;
    }
    precedence_group_attribute = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Precedence_group_attributeContext);
        }
        else {
            return this.getTypedRuleContext(Precedence_group_attributeContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterPrecedence_group_attributes(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitPrecedence_group_attributes(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitPrecedence_group_attributes(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Precedence_group_attributeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_precedence_group_attribute;
    }
    precedence_group_relation() {
        return this.getTypedRuleContext(Precedence_group_relationContext, 0);
    }
    ;
    precedence_group_assignment() {
        return this.getTypedRuleContext(Precedence_group_assignmentContext, 0);
    }
    ;
    precedence_group_associativity() {
        return this.getTypedRuleContext(Precedence_group_associativityContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterPrecedence_group_attribute(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitPrecedence_group_attribute(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitPrecedence_group_attribute(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Precedence_group_relationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_precedence_group_relation;
    }
    COLON() {
        return this.getToken(Swift5Parser.COLON, 0);
    }
    ;
    precedence_group_names() {
        return this.getTypedRuleContext(Precedence_group_namesContext, 0);
    }
    ;
    HIGHER_THAN() {
        return this.getToken(Swift5Parser.HIGHER_THAN, 0);
    }
    ;
    LOWER_THAN() {
        return this.getToken(Swift5Parser.LOWER_THAN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterPrecedence_group_relation(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitPrecedence_group_relation(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitPrecedence_group_relation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Precedence_group_assignmentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_precedence_group_assignment;
    }
    ASSIGNMENT() {
        return this.getToken(Swift5Parser.ASSIGNMENT, 0);
    }
    ;
    COLON() {
        return this.getToken(Swift5Parser.COLON, 0);
    }
    ;
    boolean_literal() {
        return this.getTypedRuleContext(Boolean_literalContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterPrecedence_group_assignment(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitPrecedence_group_assignment(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitPrecedence_group_assignment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Precedence_group_associativityContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_precedence_group_associativity;
    }
    ASSOCIATIVITY() {
        return this.getToken(Swift5Parser.ASSOCIATIVITY, 0);
    }
    ;
    COLON() {
        return this.getToken(Swift5Parser.COLON, 0);
    }
    ;
    LEFT() {
        return this.getToken(Swift5Parser.LEFT, 0);
    }
    ;
    RIGHT() {
        return this.getToken(Swift5Parser.RIGHT, 0);
    }
    ;
    NONE() {
        return this.getToken(Swift5Parser.NONE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterPrecedence_group_associativity(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitPrecedence_group_associativity(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitPrecedence_group_associativity(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Precedence_group_namesContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_precedence_group_names;
    }
    precedence_group_name = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Precedence_group_nameContext);
        }
        else {
            return this.getTypedRuleContext(Precedence_group_nameContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.COMMA);
        }
        else {
            return this.getToken(Swift5Parser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterPrecedence_group_names(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitPrecedence_group_names(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitPrecedence_group_names(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Precedence_group_nameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_precedence_group_name;
    }
    identifier = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(IdentifierContext);
        }
        else {
            return this.getTypedRuleContext(IdentifierContext, i);
        }
    };
    DOT = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.DOT);
        }
        else {
            return this.getToken(Swift5Parser.DOT, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterPrecedence_group_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitPrecedence_group_name(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitPrecedence_group_name(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Declaration_modifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_declaration_modifier;
    }
    CLASS() {
        return this.getToken(Swift5Parser.CLASS, 0);
    }
    ;
    CONVENIENCE() {
        return this.getToken(Swift5Parser.CONVENIENCE, 0);
    }
    ;
    DYNAMIC() {
        return this.getToken(Swift5Parser.DYNAMIC, 0);
    }
    ;
    FINAL() {
        return this.getToken(Swift5Parser.FINAL, 0);
    }
    ;
    INFIX() {
        return this.getToken(Swift5Parser.INFIX, 0);
    }
    ;
    LAZY() {
        return this.getToken(Swift5Parser.LAZY, 0);
    }
    ;
    OPTIONAL() {
        return this.getToken(Swift5Parser.OPTIONAL, 0);
    }
    ;
    OVERRIDE() {
        return this.getToken(Swift5Parser.OVERRIDE, 0);
    }
    ;
    POSTFIX() {
        return this.getToken(Swift5Parser.POSTFIX, 0);
    }
    ;
    PREFIX() {
        return this.getToken(Swift5Parser.PREFIX, 0);
    }
    ;
    REQUIRED() {
        return this.getToken(Swift5Parser.REQUIRED, 0);
    }
    ;
    STATIC() {
        return this.getToken(Swift5Parser.STATIC, 0);
    }
    ;
    UNOWNED() {
        return this.getToken(Swift5Parser.UNOWNED, 0);
    }
    ;
    LPAREN() {
        return this.getToken(Swift5Parser.LPAREN, 0);
    }
    ;
    RPAREN() {
        return this.getToken(Swift5Parser.RPAREN, 0);
    }
    ;
    SAFE() {
        return this.getToken(Swift5Parser.SAFE, 0);
    }
    ;
    UNSAFE() {
        return this.getToken(Swift5Parser.UNSAFE, 0);
    }
    ;
    WEAK() {
        return this.getToken(Swift5Parser.WEAK, 0);
    }
    ;
    access_level_modifier() {
        return this.getTypedRuleContext(Access_level_modifierContext, 0);
    }
    ;
    mutation_modifier() {
        return this.getTypedRuleContext(Mutation_modifierContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterDeclaration_modifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitDeclaration_modifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitDeclaration_modifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Declaration_modifiersContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_declaration_modifiers;
    }
    declaration_modifier = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Declaration_modifierContext);
        }
        else {
            return this.getTypedRuleContext(Declaration_modifierContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterDeclaration_modifiers(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitDeclaration_modifiers(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitDeclaration_modifiers(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Access_level_modifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_access_level_modifier;
    }
    PRIVATE() {
        return this.getToken(Swift5Parser.PRIVATE, 0);
    }
    ;
    FILE_PRIVATE() {
        return this.getToken(Swift5Parser.FILE_PRIVATE, 0);
    }
    ;
    INTERNAL() {
        return this.getToken(Swift5Parser.INTERNAL, 0);
    }
    ;
    PUBLIC() {
        return this.getToken(Swift5Parser.PUBLIC, 0);
    }
    ;
    OPEN() {
        return this.getToken(Swift5Parser.OPEN, 0);
    }
    ;
    LPAREN() {
        return this.getToken(Swift5Parser.LPAREN, 0);
    }
    ;
    SET() {
        return this.getToken(Swift5Parser.SET, 0);
    }
    ;
    RPAREN() {
        return this.getToken(Swift5Parser.RPAREN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterAccess_level_modifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitAccess_level_modifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitAccess_level_modifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Mutation_modifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_mutation_modifier;
    }
    MUTATING() {
        return this.getToken(Swift5Parser.MUTATING, 0);
    }
    ;
    NONMUTATING() {
        return this.getToken(Swift5Parser.NONMUTATING, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterMutation_modifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitMutation_modifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitMutation_modifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PatternContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_pattern;
    }
    wildcard_pattern() {
        return this.getTypedRuleContext(Wildcard_patternContext, 0);
    }
    ;
    identifier_pattern() {
        return this.getTypedRuleContext(Identifier_patternContext, 0);
    }
    ;
    tuple_pattern() {
        return this.getTypedRuleContext(Tuple_patternContext, 0);
    }
    ;
    type_annotation() {
        return this.getTypedRuleContext(Type_annotationContext, 0);
    }
    ;
    value_binding_pattern() {
        return this.getTypedRuleContext(Value_binding_patternContext, 0);
    }
    ;
    enum_case_pattern() {
        return this.getTypedRuleContext(Enum_case_patternContext, 0);
    }
    ;
    optional_pattern() {
        return this.getTypedRuleContext(Optional_patternContext, 0);
    }
    ;
    IS() {
        return this.getToken(Swift5Parser.IS, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    expression_pattern() {
        return this.getTypedRuleContext(Expression_patternContext, 0);
    }
    ;
    pattern() {
        return this.getTypedRuleContext(PatternContext, 0);
    }
    ;
    AS() {
        return this.getToken(Swift5Parser.AS, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterPattern(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitPattern(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitPattern(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Wildcard_patternContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_wildcard_pattern;
    }
    UNDERSCORE() {
        return this.getToken(Swift5Parser.UNDERSCORE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterWildcard_pattern(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitWildcard_pattern(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitWildcard_pattern(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Identifier_patternContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_identifier_pattern;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterIdentifier_pattern(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitIdentifier_pattern(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitIdentifier_pattern(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Value_binding_patternContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_value_binding_pattern;
    }
    VAR() {
        return this.getToken(Swift5Parser.VAR, 0);
    }
    ;
    pattern() {
        return this.getTypedRuleContext(PatternContext, 0);
    }
    ;
    LET() {
        return this.getToken(Swift5Parser.LET, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterValue_binding_pattern(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitValue_binding_pattern(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitValue_binding_pattern(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Tuple_patternContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_tuple_pattern;
    }
    LPAREN() {
        return this.getToken(Swift5Parser.LPAREN, 0);
    }
    ;
    RPAREN() {
        return this.getToken(Swift5Parser.RPAREN, 0);
    }
    ;
    tuple_pattern_element_list() {
        return this.getTypedRuleContext(Tuple_pattern_element_listContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterTuple_pattern(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitTuple_pattern(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitTuple_pattern(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Tuple_pattern_element_listContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_tuple_pattern_element_list;
    }
    tuple_pattern_element = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Tuple_pattern_elementContext);
        }
        else {
            return this.getTypedRuleContext(Tuple_pattern_elementContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.COMMA);
        }
        else {
            return this.getToken(Swift5Parser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterTuple_pattern_element_list(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitTuple_pattern_element_list(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitTuple_pattern_element_list(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Tuple_pattern_elementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_tuple_pattern_element;
    }
    pattern() {
        return this.getTypedRuleContext(PatternContext, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    COLON() {
        return this.getToken(Swift5Parser.COLON, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterTuple_pattern_element(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitTuple_pattern_element(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitTuple_pattern_element(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Enum_case_patternContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_enum_case_pattern;
    }
    DOT() {
        return this.getToken(Swift5Parser.DOT, 0);
    }
    ;
    enum_case_name() {
        return this.getTypedRuleContext(Enum_case_nameContext, 0);
    }
    ;
    type_identifier() {
        return this.getTypedRuleContext(Type_identifierContext, 0);
    }
    ;
    tuple_pattern() {
        return this.getTypedRuleContext(Tuple_patternContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterEnum_case_pattern(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitEnum_case_pattern(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitEnum_case_pattern(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Optional_patternContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_optional_pattern;
    }
    identifier_pattern() {
        return this.getTypedRuleContext(Identifier_patternContext, 0);
    }
    ;
    QUESTION() {
        return this.getToken(Swift5Parser.QUESTION, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterOptional_pattern(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitOptional_pattern(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitOptional_pattern(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Expression_patternContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_expression_pattern;
    }
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterExpression_pattern(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitExpression_pattern(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitExpression_pattern(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AttributeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_attribute;
    }
    AT() {
        return this.getToken(Swift5Parser.AT, 0);
    }
    ;
    attribute_name() {
        return this.getTypedRuleContext(Attribute_nameContext, 0);
    }
    ;
    attribute_argument_clause() {
        return this.getTypedRuleContext(Attribute_argument_clauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterAttribute(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitAttribute(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitAttribute(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Attribute_nameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_attribute_name;
    }
    identifier = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(IdentifierContext);
        }
        else {
            return this.getTypedRuleContext(IdentifierContext, i);
        }
    };
    DOT = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.DOT);
        }
        else {
            return this.getToken(Swift5Parser.DOT, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterAttribute_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitAttribute_name(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitAttribute_name(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Attribute_argument_clauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_attribute_argument_clause;
    }
    LPAREN() {
        return this.getToken(Swift5Parser.LPAREN, 0);
    }
    ;
    RPAREN() {
        return this.getToken(Swift5Parser.RPAREN, 0);
    }
    ;
    balanced_tokens() {
        return this.getTypedRuleContext(Balanced_tokensContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterAttribute_argument_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitAttribute_argument_clause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitAttribute_argument_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AttributesContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_attributes;
    }
    attribute = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(AttributeContext);
        }
        else {
            return this.getTypedRuleContext(AttributeContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterAttributes(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitAttributes(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitAttributes(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Balanced_tokensContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_balanced_tokens;
    }
    balanced_token = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Balanced_tokenContext);
        }
        else {
            return this.getTypedRuleContext(Balanced_tokenContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterBalanced_tokens(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitBalanced_tokens(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitBalanced_tokens(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Balanced_tokenContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_balanced_token;
    }
    LPAREN() {
        return this.getToken(Swift5Parser.LPAREN, 0);
    }
    ;
    RPAREN() {
        return this.getToken(Swift5Parser.RPAREN, 0);
    }
    ;
    balanced_tokens() {
        return this.getTypedRuleContext(Balanced_tokensContext, 0);
    }
    ;
    LBRACK() {
        return this.getToken(Swift5Parser.LBRACK, 0);
    }
    ;
    RBRACK() {
        return this.getToken(Swift5Parser.RBRACK, 0);
    }
    ;
    LCURLY() {
        return this.getToken(Swift5Parser.LCURLY, 0);
    }
    ;
    RCURLY() {
        return this.getToken(Swift5Parser.RCURLY, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    keyword() {
        return this.getTypedRuleContext(KeywordContext, 0);
    }
    ;
    literal() {
        return this.getTypedRuleContext(LiteralContext, 0);
    }
    ;
    operator() {
        return this.getTypedRuleContext(OperatorContext, 0);
    }
    ;
    balanced_token_punctuation() {
        return this.getTypedRuleContext(Balanced_token_punctuationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterBalanced_token(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitBalanced_token(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitBalanced_token(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Balanced_token_punctuationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_balanced_token_punctuation;
    }
    DOT() {
        return this.getToken(Swift5Parser.DOT, 0);
    }
    ;
    COMMA() {
        return this.getToken(Swift5Parser.COMMA, 0);
    }
    ;
    COLON() {
        return this.getToken(Swift5Parser.COLON, 0);
    }
    ;
    SEMI() {
        return this.getToken(Swift5Parser.SEMI, 0);
    }
    ;
    EQUAL() {
        return this.getToken(Swift5Parser.EQUAL, 0);
    }
    ;
    AT() {
        return this.getToken(Swift5Parser.AT, 0);
    }
    ;
    HASH() {
        return this.getToken(Swift5Parser.HASH, 0);
    }
    ;
    BACKTICK() {
        return this.getToken(Swift5Parser.BACKTICK, 0);
    }
    ;
    QUESTION() {
        return this.getToken(Swift5Parser.QUESTION, 0);
    }
    ;
    arrow_operator() {
        return this.getTypedRuleContext(Arrow_operatorContext, 0);
    }
    ;
    AND() {
        return this.getToken(Swift5Parser.AND, 0);
    }
    ;
    BANG() {
        return this.getToken(Swift5Parser.BANG, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterBalanced_token_punctuation(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitBalanced_token_punctuation(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitBalanced_token_punctuation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_expression;
    }
    prefix_expression() {
        return this.getTypedRuleContext(Prefix_expressionContext, 0);
    }
    ;
    try_operator() {
        return this.getTypedRuleContext(Try_operatorContext, 0);
    }
    ;
    binary_expressions() {
        return this.getTypedRuleContext(Binary_expressionsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Expression_listContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_expression_list;
    }
    expression = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(ExpressionContext);
        }
        else {
            return this.getTypedRuleContext(ExpressionContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.COMMA);
        }
        else {
            return this.getToken(Swift5Parser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterExpression_list(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitExpression_list(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitExpression_list(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Prefix_expressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_prefix_expression;
    }
    postfix_expression() {
        return this.getTypedRuleContext(Postfix_expressionContext, 0);
    }
    ;
    prefix_operator() {
        return this.getTypedRuleContext(Prefix_operatorContext, 0);
    }
    ;
    in_out_expression() {
        return this.getTypedRuleContext(In_out_expressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterPrefix_expression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitPrefix_expression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitPrefix_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class In_out_expressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_in_out_expression;
    }
    AND() {
        return this.getToken(Swift5Parser.AND, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterIn_out_expression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitIn_out_expression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitIn_out_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Try_operatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_try_operator;
    }
    TRY() {
        return this.getToken(Swift5Parser.TRY, 0);
    }
    ;
    QUESTION() {
        return this.getToken(Swift5Parser.QUESTION, 0);
    }
    ;
    BANG() {
        return this.getToken(Swift5Parser.BANG, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterTry_operator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitTry_operator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitTry_operator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Binary_expressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_binary_expression;
    }
    binary_operator() {
        return this.getTypedRuleContext(Binary_operatorContext, 0);
    }
    ;
    prefix_expression() {
        return this.getTypedRuleContext(Prefix_expressionContext, 0);
    }
    ;
    assignment_operator() {
        return this.getTypedRuleContext(Assignment_operatorContext, 0);
    }
    ;
    conditional_operator() {
        return this.getTypedRuleContext(Conditional_operatorContext, 0);
    }
    ;
    try_operator() {
        return this.getTypedRuleContext(Try_operatorContext, 0);
    }
    ;
    type_casting_operator() {
        return this.getTypedRuleContext(Type_casting_operatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterBinary_expression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitBinary_expression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitBinary_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Binary_expressionsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_binary_expressions;
    }
    binary_expression = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Binary_expressionContext);
        }
        else {
            return this.getTypedRuleContext(Binary_expressionContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterBinary_expressions(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitBinary_expressions(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitBinary_expressions(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Conditional_operatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_conditional_operator;
    }
    QUESTION() {
        return this.getToken(Swift5Parser.QUESTION, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    COLON() {
        return this.getToken(Swift5Parser.COLON, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterConditional_operator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitConditional_operator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitConditional_operator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Type_casting_operatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_type_casting_operator;
    }
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    IS() {
        return this.getToken(Swift5Parser.IS, 0);
    }
    ;
    AS() {
        return this.getToken(Swift5Parser.AS, 0);
    }
    ;
    QUESTION() {
        return this.getToken(Swift5Parser.QUESTION, 0);
    }
    ;
    BANG() {
        return this.getToken(Swift5Parser.BANG, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterType_casting_operator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitType_casting_operator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitType_casting_operator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Primary_expressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_primary_expression;
    }
    unqualified_name() {
        return this.getTypedRuleContext(Unqualified_nameContext, 0);
    }
    ;
    generic_argument_clause() {
        return this.getTypedRuleContext(Generic_argument_clauseContext, 0);
    }
    ;
    array_type() {
        return this.getTypedRuleContext(Array_typeContext, 0);
    }
    ;
    dictionary_type() {
        return this.getTypedRuleContext(Dictionary_typeContext, 0);
    }
    ;
    literal_expression() {
        return this.getTypedRuleContext(Literal_expressionContext, 0);
    }
    ;
    self_expression() {
        return this.getTypedRuleContext(Self_expressionContext, 0);
    }
    ;
    superclass_expression() {
        return this.getTypedRuleContext(Superclass_expressionContext, 0);
    }
    ;
    closure_expression() {
        return this.getTypedRuleContext(Closure_expressionContext, 0);
    }
    ;
    parenthesized_operator() {
        return this.getTypedRuleContext(Parenthesized_operatorContext, 0);
    }
    ;
    parenthesized_expression() {
        return this.getTypedRuleContext(Parenthesized_expressionContext, 0);
    }
    ;
    tuple_expression() {
        return this.getTypedRuleContext(Tuple_expressionContext, 0);
    }
    ;
    implicit_member_expression() {
        return this.getTypedRuleContext(Implicit_member_expressionContext, 0);
    }
    ;
    wildcard_expression() {
        return this.getTypedRuleContext(Wildcard_expressionContext, 0);
    }
    ;
    key_path_expression() {
        return this.getTypedRuleContext(Key_path_expressionContext, 0);
    }
    ;
    selector_expression() {
        return this.getTypedRuleContext(Selector_expressionContext, 0);
    }
    ;
    key_path_string_expression() {
        return this.getTypedRuleContext(Key_path_string_expressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterPrimary_expression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitPrimary_expression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitPrimary_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Unqualified_nameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_unqualified_name;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    LPAREN() {
        return this.getToken(Swift5Parser.LPAREN, 0);
    }
    ;
    argument_names() {
        return this.getTypedRuleContext(Argument_namesContext, 0);
    }
    ;
    RPAREN() {
        return this.getToken(Swift5Parser.RPAREN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterUnqualified_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitUnqualified_name(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitUnqualified_name(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Literal_expressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_literal_expression;
    }
    literal() {
        return this.getTypedRuleContext(LiteralContext, 0);
    }
    ;
    array_literal() {
        return this.getTypedRuleContext(Array_literalContext, 0);
    }
    ;
    dictionary_literal() {
        return this.getTypedRuleContext(Dictionary_literalContext, 0);
    }
    ;
    playground_literal() {
        return this.getTypedRuleContext(Playground_literalContext, 0);
    }
    ;
    HASH_FILE() {
        return this.getToken(Swift5Parser.HASH_FILE, 0);
    }
    ;
    HASH_FILE_ID() {
        return this.getToken(Swift5Parser.HASH_FILE_ID, 0);
    }
    ;
    HASH_FILE_PATH() {
        return this.getToken(Swift5Parser.HASH_FILE_PATH, 0);
    }
    ;
    HASH_LINE() {
        return this.getToken(Swift5Parser.HASH_LINE, 0);
    }
    ;
    HASH_COLUMN() {
        return this.getToken(Swift5Parser.HASH_COLUMN, 0);
    }
    ;
    HASH_FUNCTION() {
        return this.getToken(Swift5Parser.HASH_FUNCTION, 0);
    }
    ;
    HASH_DSO_HANDLE() {
        return this.getToken(Swift5Parser.HASH_DSO_HANDLE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterLiteral_expression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitLiteral_expression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitLiteral_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Array_literalContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_array_literal;
    }
    LBRACK() {
        return this.getToken(Swift5Parser.LBRACK, 0);
    }
    ;
    RBRACK() {
        return this.getToken(Swift5Parser.RBRACK, 0);
    }
    ;
    array_literal_items() {
        return this.getTypedRuleContext(Array_literal_itemsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterArray_literal(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitArray_literal(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitArray_literal(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Array_literal_itemsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_array_literal_items;
    }
    array_literal_item = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Array_literal_itemContext);
        }
        else {
            return this.getTypedRuleContext(Array_literal_itemContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.COMMA);
        }
        else {
            return this.getToken(Swift5Parser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterArray_literal_items(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitArray_literal_items(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitArray_literal_items(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Array_literal_itemContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_array_literal_item;
    }
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterArray_literal_item(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitArray_literal_item(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitArray_literal_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Dictionary_literalContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_dictionary_literal;
    }
    LBRACK() {
        return this.getToken(Swift5Parser.LBRACK, 0);
    }
    ;
    RBRACK() {
        return this.getToken(Swift5Parser.RBRACK, 0);
    }
    ;
    dictionary_literal_items() {
        return this.getTypedRuleContext(Dictionary_literal_itemsContext, 0);
    }
    ;
    COLON() {
        return this.getToken(Swift5Parser.COLON, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterDictionary_literal(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitDictionary_literal(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitDictionary_literal(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Dictionary_literal_itemsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_dictionary_literal_items;
    }
    dictionary_literal_item = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Dictionary_literal_itemContext);
        }
        else {
            return this.getTypedRuleContext(Dictionary_literal_itemContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.COMMA);
        }
        else {
            return this.getToken(Swift5Parser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterDictionary_literal_items(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitDictionary_literal_items(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitDictionary_literal_items(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Dictionary_literal_itemContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_dictionary_literal_item;
    }
    expression = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(ExpressionContext);
        }
        else {
            return this.getTypedRuleContext(ExpressionContext, i);
        }
    };
    COLON() {
        return this.getToken(Swift5Parser.COLON, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterDictionary_literal_item(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitDictionary_literal_item(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitDictionary_literal_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Playground_literalContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_playground_literal;
    }
    HASH_COLOR_LITERAL() {
        return this.getToken(Swift5Parser.HASH_COLOR_LITERAL, 0);
    }
    ;
    LPAREN() {
        return this.getToken(Swift5Parser.LPAREN, 0);
    }
    ;
    RED() {
        return this.getToken(Swift5Parser.RED, 0);
    }
    ;
    COLON = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.COLON);
        }
        else {
            return this.getToken(Swift5Parser.COLON, i);
        }
    };
    expression = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(ExpressionContext);
        }
        else {
            return this.getTypedRuleContext(ExpressionContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.COMMA);
        }
        else {
            return this.getToken(Swift5Parser.COMMA, i);
        }
    };
    GREEN() {
        return this.getToken(Swift5Parser.GREEN, 0);
    }
    ;
    BLUE() {
        return this.getToken(Swift5Parser.BLUE, 0);
    }
    ;
    ALPHA() {
        return this.getToken(Swift5Parser.ALPHA, 0);
    }
    ;
    RPAREN() {
        return this.getToken(Swift5Parser.RPAREN, 0);
    }
    ;
    HASH_FILE_LITERAL() {
        return this.getToken(Swift5Parser.HASH_FILE_LITERAL, 0);
    }
    ;
    RESOURCE_NAME() {
        return this.getToken(Swift5Parser.RESOURCE_NAME, 0);
    }
    ;
    HASH_IMAGE_LITERAL() {
        return this.getToken(Swift5Parser.HASH_IMAGE_LITERAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterPlayground_literal(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitPlayground_literal(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitPlayground_literal(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Self_expressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_self_expression;
    }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
class Self_initializer_expressionContext extends Self_expressionContext {
    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }
    SELF() {
        return this.getToken(Swift5Parser.SELF, 0);
    }
    ;
    DOT() {
        return this.getToken(Swift5Parser.DOT, 0);
    }
    ;
    INIT() {
        return this.getToken(Swift5Parser.INIT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterSelf_initializer_expression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitSelf_initializer_expression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitSelf_initializer_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
Swift5Parser.Self_initializer_expressionContext = Self_initializer_expressionContext;
class Self_pure_expressionContext extends Self_expressionContext {
    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }
    SELF() {
        return this.getToken(Swift5Parser.SELF, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterSelf_pure_expression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitSelf_pure_expression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitSelf_pure_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
Swift5Parser.Self_pure_expressionContext = Self_pure_expressionContext;
class Self_subscript_expressionContext extends Self_expressionContext {
    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }
    SELF() {
        return this.getToken(Swift5Parser.SELF, 0);
    }
    ;
    LBRACK() {
        return this.getToken(Swift5Parser.LBRACK, 0);
    }
    ;
    function_call_argument_list() {
        return this.getTypedRuleContext(Function_call_argument_listContext, 0);
    }
    ;
    RBRACK() {
        return this.getToken(Swift5Parser.RBRACK, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterSelf_subscript_expression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitSelf_subscript_expression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitSelf_subscript_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
Swift5Parser.Self_subscript_expressionContext = Self_subscript_expressionContext;
class Self_method_expressionContext extends Self_expressionContext {
    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }
    SELF() {
        return this.getToken(Swift5Parser.SELF, 0);
    }
    ;
    DOT() {
        return this.getToken(Swift5Parser.DOT, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterSelf_method_expression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitSelf_method_expression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitSelf_method_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
Swift5Parser.Self_method_expressionContext = Self_method_expressionContext;
class Superclass_expressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_superclass_expression;
    }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
class Superclass_subscript_expressionContext extends Superclass_expressionContext {
    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }
    SUPER() {
        return this.getToken(Swift5Parser.SUPER, 0);
    }
    ;
    LBRACK() {
        return this.getToken(Swift5Parser.LBRACK, 0);
    }
    ;
    function_call_argument_list() {
        return this.getTypedRuleContext(Function_call_argument_listContext, 0);
    }
    ;
    RBRACK() {
        return this.getToken(Swift5Parser.RBRACK, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterSuperclass_subscript_expression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitSuperclass_subscript_expression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitSuperclass_subscript_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
Swift5Parser.Superclass_subscript_expressionContext = Superclass_subscript_expressionContext;
class Superclass_initializer_expressionContext extends Superclass_expressionContext {
    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }
    SUPER() {
        return this.getToken(Swift5Parser.SUPER, 0);
    }
    ;
    DOT() {
        return this.getToken(Swift5Parser.DOT, 0);
    }
    ;
    INIT() {
        return this.getToken(Swift5Parser.INIT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterSuperclass_initializer_expression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitSuperclass_initializer_expression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitSuperclass_initializer_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
Swift5Parser.Superclass_initializer_expressionContext = Superclass_initializer_expressionContext;
class Superclass_method_expressionContext extends Superclass_expressionContext {
    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }
    SUPER() {
        return this.getToken(Swift5Parser.SUPER, 0);
    }
    ;
    DOT() {
        return this.getToken(Swift5Parser.DOT, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterSuperclass_method_expression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitSuperclass_method_expression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitSuperclass_method_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
Swift5Parser.Superclass_method_expressionContext = Superclass_method_expressionContext;
class Closure_expressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_closure_expression;
    }
    LCURLY() {
        return this.getToken(Swift5Parser.LCURLY, 0);
    }
    ;
    RCURLY() {
        return this.getToken(Swift5Parser.RCURLY, 0);
    }
    ;
    closure_signature() {
        return this.getTypedRuleContext(Closure_signatureContext, 0);
    }
    ;
    statements() {
        return this.getTypedRuleContext(StatementsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterClosure_expression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitClosure_expression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitClosure_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Closure_signatureContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_closure_signature;
    }
    closure_parameter_clause() {
        return this.getTypedRuleContext(Closure_parameter_clauseContext, 0);
    }
    ;
    IN() {
        return this.getToken(Swift5Parser.IN, 0);
    }
    ;
    capture_list() {
        return this.getTypedRuleContext(Capture_listContext, 0);
    }
    ;
    THROWS() {
        return this.getToken(Swift5Parser.THROWS, 0);
    }
    ;
    function_result() {
        return this.getTypedRuleContext(Function_resultContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterClosure_signature(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitClosure_signature(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitClosure_signature(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Closure_parameter_clauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_closure_parameter_clause;
    }
    LPAREN() {
        return this.getToken(Swift5Parser.LPAREN, 0);
    }
    ;
    RPAREN() {
        return this.getToken(Swift5Parser.RPAREN, 0);
    }
    ;
    closure_parameter_list() {
        return this.getTypedRuleContext(Closure_parameter_listContext, 0);
    }
    ;
    identifier_list() {
        return this.getTypedRuleContext(Identifier_listContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterClosure_parameter_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitClosure_parameter_clause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitClosure_parameter_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Closure_parameter_listContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_closure_parameter_list;
    }
    closure_parameter = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Closure_parameterContext);
        }
        else {
            return this.getTypedRuleContext(Closure_parameterContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.COMMA);
        }
        else {
            return this.getToken(Swift5Parser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterClosure_parameter_list(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitClosure_parameter_list(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitClosure_parameter_list(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Closure_parameterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_closure_parameter;
        this.closure_parameter_name = null; // IdentifierContext
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    type_annotation() {
        return this.getTypedRuleContext(Type_annotationContext, 0);
    }
    ;
    range_operator() {
        return this.getTypedRuleContext(Range_operatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterClosure_parameter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitClosure_parameter(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitClosure_parameter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Capture_listContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_capture_list;
    }
    LBRACK() {
        return this.getToken(Swift5Parser.LBRACK, 0);
    }
    ;
    capture_list_items() {
        return this.getTypedRuleContext(Capture_list_itemsContext, 0);
    }
    ;
    RBRACK() {
        return this.getToken(Swift5Parser.RBRACK, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterCapture_list(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitCapture_list(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitCapture_list(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Capture_list_itemsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_capture_list_items;
    }
    capture_list_item = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Capture_list_itemContext);
        }
        else {
            return this.getTypedRuleContext(Capture_list_itemContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.COMMA);
        }
        else {
            return this.getToken(Swift5Parser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterCapture_list_items(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitCapture_list_items(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitCapture_list_items(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Capture_list_itemContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_capture_list_item;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    self_expression() {
        return this.getTypedRuleContext(Self_expressionContext, 0);
    }
    ;
    capture_specifier() {
        return this.getTypedRuleContext(Capture_specifierContext, 0);
    }
    ;
    EQUAL() {
        return this.getToken(Swift5Parser.EQUAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterCapture_list_item(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitCapture_list_item(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitCapture_list_item(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Capture_specifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_capture_specifier;
    }
    WEAK() {
        return this.getToken(Swift5Parser.WEAK, 0);
    }
    ;
    UNOWNED() {
        return this.getToken(Swift5Parser.UNOWNED, 0);
    }
    ;
    LPAREN() {
        return this.getToken(Swift5Parser.LPAREN, 0);
    }
    ;
    RPAREN() {
        return this.getToken(Swift5Parser.RPAREN, 0);
    }
    ;
    SAFE() {
        return this.getToken(Swift5Parser.SAFE, 0);
    }
    ;
    UNSAFE() {
        return this.getToken(Swift5Parser.UNSAFE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterCapture_specifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitCapture_specifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitCapture_specifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Implicit_member_expressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_implicit_member_expression;
    }
    DOT = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.DOT);
        }
        else {
            return this.getToken(Swift5Parser.DOT, i);
        }
    };
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    keyword() {
        return this.getTypedRuleContext(KeywordContext, 0);
    }
    ;
    postfix_expression() {
        return this.getTypedRuleContext(Postfix_expressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterImplicit_member_expression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitImplicit_member_expression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitImplicit_member_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Parenthesized_operatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_parenthesized_operator;
    }
    LPAREN() {
        return this.getToken(Swift5Parser.LPAREN, 0);
    }
    ;
    operator() {
        return this.getTypedRuleContext(OperatorContext, 0);
    }
    ;
    RPAREN() {
        return this.getToken(Swift5Parser.RPAREN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterParenthesized_operator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitParenthesized_operator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitParenthesized_operator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Parenthesized_expressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_parenthesized_expression;
    }
    LPAREN() {
        return this.getToken(Swift5Parser.LPAREN, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    RPAREN() {
        return this.getToken(Swift5Parser.RPAREN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterParenthesized_expression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitParenthesized_expression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitParenthesized_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Tuple_expressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_tuple_expression;
    }
    LPAREN() {
        return this.getToken(Swift5Parser.LPAREN, 0);
    }
    ;
    RPAREN() {
        return this.getToken(Swift5Parser.RPAREN, 0);
    }
    ;
    tuple_element() {
        return this.getTypedRuleContext(Tuple_elementContext, 0);
    }
    ;
    COMMA() {
        return this.getToken(Swift5Parser.COMMA, 0);
    }
    ;
    tuple_element_list() {
        return this.getTypedRuleContext(Tuple_element_listContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterTuple_expression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitTuple_expression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitTuple_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Tuple_element_listContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_tuple_element_list;
    }
    tuple_element = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Tuple_elementContext);
        }
        else {
            return this.getTypedRuleContext(Tuple_elementContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.COMMA);
        }
        else {
            return this.getToken(Swift5Parser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterTuple_element_list(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitTuple_element_list(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitTuple_element_list(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Tuple_elementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_tuple_element;
    }
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    COLON() {
        return this.getToken(Swift5Parser.COLON, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterTuple_element(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitTuple_element(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitTuple_element(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Wildcard_expressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_wildcard_expression;
    }
    UNDERSCORE() {
        return this.getToken(Swift5Parser.UNDERSCORE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterWildcard_expression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitWildcard_expression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitWildcard_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Key_path_expressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_key_path_expression;
    }
    BACKSLASH() {
        return this.getToken(Swift5Parser.BACKSLASH, 0);
    }
    ;
    DOT() {
        return this.getToken(Swift5Parser.DOT, 0);
    }
    ;
    key_path_components() {
        return this.getTypedRuleContext(Key_path_componentsContext, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterKey_path_expression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitKey_path_expression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitKey_path_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Key_path_componentsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_key_path_components;
    }
    key_path_component = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Key_path_componentContext);
        }
        else {
            return this.getTypedRuleContext(Key_path_componentContext, i);
        }
    };
    DOT = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.DOT);
        }
        else {
            return this.getToken(Swift5Parser.DOT, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterKey_path_components(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitKey_path_components(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitKey_path_components(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Key_path_componentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_key_path_component;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    key_path_postfixes() {
        return this.getTypedRuleContext(Key_path_postfixesContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterKey_path_component(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitKey_path_component(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitKey_path_component(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Key_path_postfixesContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_key_path_postfixes;
    }
    key_path_postfix = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Key_path_postfixContext);
        }
        else {
            return this.getTypedRuleContext(Key_path_postfixContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterKey_path_postfixes(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitKey_path_postfixes(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitKey_path_postfixes(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Key_path_postfixContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_key_path_postfix;
    }
    QUESTION() {
        return this.getToken(Swift5Parser.QUESTION, 0);
    }
    ;
    BANG() {
        return this.getToken(Swift5Parser.BANG, 0);
    }
    ;
    SELF() {
        return this.getToken(Swift5Parser.SELF, 0);
    }
    ;
    LBRACK() {
        return this.getToken(Swift5Parser.LBRACK, 0);
    }
    ;
    function_call_argument_list() {
        return this.getTypedRuleContext(Function_call_argument_listContext, 0);
    }
    ;
    RBRACK() {
        return this.getToken(Swift5Parser.RBRACK, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterKey_path_postfix(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitKey_path_postfix(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitKey_path_postfix(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Selector_expressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_selector_expression;
    }
    HASH_SELECTOR() {
        return this.getToken(Swift5Parser.HASH_SELECTOR, 0);
    }
    ;
    LPAREN() {
        return this.getToken(Swift5Parser.LPAREN, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    RPAREN() {
        return this.getToken(Swift5Parser.RPAREN, 0);
    }
    ;
    COLON() {
        return this.getToken(Swift5Parser.COLON, 0);
    }
    ;
    GETTER() {
        return this.getToken(Swift5Parser.GETTER, 0);
    }
    ;
    SETTER() {
        return this.getToken(Swift5Parser.SETTER, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterSelector_expression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitSelector_expression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitSelector_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Key_path_string_expressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_key_path_string_expression;
    }
    HASH_KEYPATH() {
        return this.getToken(Swift5Parser.HASH_KEYPATH, 0);
    }
    ;
    LPAREN() {
        return this.getToken(Swift5Parser.LPAREN, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    RPAREN() {
        return this.getToken(Swift5Parser.RPAREN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterKey_path_string_expression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitKey_path_string_expression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitKey_path_string_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Postfix_expressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_postfix_expression;
    }
    primary_expression() {
        return this.getTypedRuleContext(Primary_expressionContext, 0);
    }
    ;
    function_call_suffix = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Function_call_suffixContext);
        }
        else {
            return this.getTypedRuleContext(Function_call_suffixContext, i);
        }
    };
    initializer_suffix = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Initializer_suffixContext);
        }
        else {
            return this.getTypedRuleContext(Initializer_suffixContext, i);
        }
    };
    explicit_member_suffix = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Explicit_member_suffixContext);
        }
        else {
            return this.getTypedRuleContext(Explicit_member_suffixContext, i);
        }
    };
    postfix_self_suffix = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Postfix_self_suffixContext);
        }
        else {
            return this.getTypedRuleContext(Postfix_self_suffixContext, i);
        }
    };
    subscript_suffix = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Subscript_suffixContext);
        }
        else {
            return this.getTypedRuleContext(Subscript_suffixContext, i);
        }
    };
    forced_value_suffix = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Forced_value_suffixContext);
        }
        else {
            return this.getTypedRuleContext(Forced_value_suffixContext, i);
        }
    };
    optional_chaining_suffix = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Optional_chaining_suffixContext);
        }
        else {
            return this.getTypedRuleContext(Optional_chaining_suffixContext, i);
        }
    };
    postfix_operator = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Postfix_operatorContext);
        }
        else {
            return this.getTypedRuleContext(Postfix_operatorContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterPostfix_expression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitPostfix_expression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitPostfix_expression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Function_call_suffixContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_function_call_suffix;
    }
    trailing_closures() {
        return this.getTypedRuleContext(Trailing_closuresContext, 0);
    }
    ;
    function_call_argument_clause() {
        return this.getTypedRuleContext(Function_call_argument_clauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterFunction_call_suffix(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitFunction_call_suffix(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitFunction_call_suffix(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Initializer_suffixContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_initializer_suffix;
    }
    DOT() {
        return this.getToken(Swift5Parser.DOT, 0);
    }
    ;
    INIT() {
        return this.getToken(Swift5Parser.INIT, 0);
    }
    ;
    LPAREN() {
        return this.getToken(Swift5Parser.LPAREN, 0);
    }
    ;
    argument_names() {
        return this.getTypedRuleContext(Argument_namesContext, 0);
    }
    ;
    RPAREN() {
        return this.getToken(Swift5Parser.RPAREN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterInitializer_suffix(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitInitializer_suffix(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitInitializer_suffix(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Explicit_member_suffixContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_explicit_member_suffix;
    }
    DOT() {
        return this.getToken(Swift5Parser.DOT, 0);
    }
    ;
    Decimal_digits() {
        return this.getToken(Swift5Parser.Decimal_digits, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    generic_argument_clause() {
        return this.getTypedRuleContext(Generic_argument_clauseContext, 0);
    }
    ;
    LPAREN() {
        return this.getToken(Swift5Parser.LPAREN, 0);
    }
    ;
    argument_names() {
        return this.getTypedRuleContext(Argument_namesContext, 0);
    }
    ;
    RPAREN() {
        return this.getToken(Swift5Parser.RPAREN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterExplicit_member_suffix(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitExplicit_member_suffix(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitExplicit_member_suffix(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Postfix_self_suffixContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_postfix_self_suffix;
    }
    DOT() {
        return this.getToken(Swift5Parser.DOT, 0);
    }
    ;
    SELF() {
        return this.getToken(Swift5Parser.SELF, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterPostfix_self_suffix(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitPostfix_self_suffix(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitPostfix_self_suffix(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Subscript_suffixContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_subscript_suffix;
    }
    LBRACK() {
        return this.getToken(Swift5Parser.LBRACK, 0);
    }
    ;
    function_call_argument_list() {
        return this.getTypedRuleContext(Function_call_argument_listContext, 0);
    }
    ;
    RBRACK() {
        return this.getToken(Swift5Parser.RBRACK, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterSubscript_suffix(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitSubscript_suffix(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitSubscript_suffix(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Forced_value_suffixContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_forced_value_suffix;
    }
    BANG() {
        return this.getToken(Swift5Parser.BANG, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterForced_value_suffix(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitForced_value_suffix(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitForced_value_suffix(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Optional_chaining_suffixContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_optional_chaining_suffix;
    }
    QUESTION() {
        return this.getToken(Swift5Parser.QUESTION, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterOptional_chaining_suffix(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitOptional_chaining_suffix(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitOptional_chaining_suffix(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Function_call_argument_clauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_function_call_argument_clause;
    }
    LPAREN() {
        return this.getToken(Swift5Parser.LPAREN, 0);
    }
    ;
    RPAREN() {
        return this.getToken(Swift5Parser.RPAREN, 0);
    }
    ;
    function_call_argument_list() {
        return this.getTypedRuleContext(Function_call_argument_listContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterFunction_call_argument_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitFunction_call_argument_clause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitFunction_call_argument_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Function_call_argument_listContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_function_call_argument_list;
    }
    function_call_argument = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Function_call_argumentContext);
        }
        else {
            return this.getTypedRuleContext(Function_call_argumentContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.COMMA);
        }
        else {
            return this.getToken(Swift5Parser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterFunction_call_argument_list(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitFunction_call_argument_list(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitFunction_call_argument_list(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Function_call_argumentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_function_call_argument;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    operator() {
        return this.getTypedRuleContext(OperatorContext, 0);
    }
    ;
    argument_name() {
        return this.getTypedRuleContext(Argument_nameContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterFunction_call_argument(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitFunction_call_argument(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitFunction_call_argument(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Trailing_closuresContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_trailing_closures;
    }
    closure_expression() {
        return this.getTypedRuleContext(Closure_expressionContext, 0);
    }
    ;
    labeled_trailing_closures() {
        return this.getTypedRuleContext(Labeled_trailing_closuresContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterTrailing_closures(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitTrailing_closures(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitTrailing_closures(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Labeled_trailing_closuresContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_labeled_trailing_closures;
    }
    labeled_trailing_closure = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Labeled_trailing_closureContext);
        }
        else {
            return this.getTypedRuleContext(Labeled_trailing_closureContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterLabeled_trailing_closures(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitLabeled_trailing_closures(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitLabeled_trailing_closures(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Labeled_trailing_closureContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_labeled_trailing_closure;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    COLON() {
        return this.getToken(Swift5Parser.COLON, 0);
    }
    ;
    closure_expression() {
        return this.getTypedRuleContext(Closure_expressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterLabeled_trailing_closure(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitLabeled_trailing_closure(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitLabeled_trailing_closure(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Argument_namesContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_argument_names;
    }
    argument_name = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Argument_nameContext);
        }
        else {
            return this.getTypedRuleContext(Argument_nameContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterArgument_names(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitArgument_names(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitArgument_names(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Argument_nameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_argument_name;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    COLON() {
        return this.getToken(Swift5Parser.COLON, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterArgument_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitArgument_name(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitArgument_name(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_type;
    }
    function_type() {
        return this.getTypedRuleContext(Function_typeContext, 0);
    }
    ;
    array_type() {
        return this.getTypedRuleContext(Array_typeContext, 0);
    }
    ;
    dictionary_type() {
        return this.getTypedRuleContext(Dictionary_typeContext, 0);
    }
    ;
    protocol_composition_type() {
        return this.getTypedRuleContext(Protocol_composition_typeContext, 0);
    }
    ;
    type_identifier() {
        return this.getTypedRuleContext(Type_identifierContext, 0);
    }
    ;
    tuple_type() {
        return this.getTypedRuleContext(Tuple_typeContext, 0);
    }
    ;
    opaque_type() {
        return this.getTypedRuleContext(Opaque_typeContext, 0);
    }
    ;
    any_type() {
        return this.getTypedRuleContext(Any_typeContext, 0);
    }
    ;
    self_type() {
        return this.getTypedRuleContext(Self_typeContext, 0);
    }
    ;
    LPAREN() {
        return this.getToken(Swift5Parser.LPAREN, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    RPAREN() {
        return this.getToken(Swift5Parser.RPAREN, 0);
    }
    ;
    QUESTION() {
        return this.getToken(Swift5Parser.QUESTION, 0);
    }
    ;
    BANG() {
        return this.getToken(Swift5Parser.BANG, 0);
    }
    ;
    DOT() {
        return this.getToken(Swift5Parser.DOT, 0);
    }
    ;
    TYPE() {
        return this.getToken(Swift5Parser.TYPE, 0);
    }
    ;
    PROTOCOL() {
        return this.getToken(Swift5Parser.PROTOCOL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitType(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Type_annotationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_type_annotation;
    }
    COLON() {
        return this.getToken(Swift5Parser.COLON, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    INOUT() {
        return this.getToken(Swift5Parser.INOUT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterType_annotation(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitType_annotation(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitType_annotation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Type_identifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_type_identifier;
    }
    type_name() {
        return this.getTypedRuleContext(Type_nameContext, 0);
    }
    ;
    generic_argument_clause() {
        return this.getTypedRuleContext(Generic_argument_clauseContext, 0);
    }
    ;
    DOT() {
        return this.getToken(Swift5Parser.DOT, 0);
    }
    ;
    type_identifier() {
        return this.getTypedRuleContext(Type_identifierContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterType_identifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitType_identifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitType_identifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Type_nameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_type_name;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterType_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitType_name(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitType_name(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Tuple_typeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_tuple_type;
    }
    LPAREN() {
        return this.getToken(Swift5Parser.LPAREN, 0);
    }
    ;
    RPAREN() {
        return this.getToken(Swift5Parser.RPAREN, 0);
    }
    ;
    tuple_type_element_list() {
        return this.getTypedRuleContext(Tuple_type_element_listContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterTuple_type(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitTuple_type(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitTuple_type(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Tuple_type_element_listContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_tuple_type_element_list;
    }
    tuple_type_element = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Tuple_type_elementContext);
        }
        else {
            return this.getTypedRuleContext(Tuple_type_elementContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.COMMA);
        }
        else {
            return this.getToken(Swift5Parser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterTuple_type_element_list(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitTuple_type_element_list(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitTuple_type_element_list(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Tuple_type_elementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_tuple_type_element;
    }
    element_name() {
        return this.getTypedRuleContext(Element_nameContext, 0);
    }
    ;
    type_annotation() {
        return this.getTypedRuleContext(Type_annotationContext, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    EQUAL() {
        return this.getToken(Swift5Parser.EQUAL, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterTuple_type_element(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitTuple_type_element(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitTuple_type_element(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Element_nameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_element_name;
    }
    identifier = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(IdentifierContext);
        }
        else {
            return this.getTypedRuleContext(IdentifierContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterElement_name(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitElement_name(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitElement_name(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Function_typeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_function_type;
    }
    function_type_argument_clause() {
        return this.getTypedRuleContext(Function_type_argument_clauseContext, 0);
    }
    ;
    arrow_operator() {
        return this.getTypedRuleContext(Arrow_operatorContext, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    THROWS() {
        return this.getToken(Swift5Parser.THROWS, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterFunction_type(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitFunction_type(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitFunction_type(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Function_type_argument_clauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_function_type_argument_clause;
    }
    LPAREN() {
        return this.getToken(Swift5Parser.LPAREN, 0);
    }
    ;
    RPAREN() {
        return this.getToken(Swift5Parser.RPAREN, 0);
    }
    ;
    function_type_argument_list() {
        return this.getTypedRuleContext(Function_type_argument_listContext, 0);
    }
    ;
    range_operator() {
        return this.getTypedRuleContext(Range_operatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterFunction_type_argument_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitFunction_type_argument_clause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitFunction_type_argument_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Function_type_argument_listContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_function_type_argument_list;
    }
    function_type_argument = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Function_type_argumentContext);
        }
        else {
            return this.getTypedRuleContext(Function_type_argumentContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.COMMA);
        }
        else {
            return this.getToken(Swift5Parser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterFunction_type_argument_list(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitFunction_type_argument_list(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitFunction_type_argument_list(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Function_type_argumentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_function_type_argument;
    }
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    INOUT() {
        return this.getToken(Swift5Parser.INOUT, 0);
    }
    ;
    argument_label() {
        return this.getTypedRuleContext(Argument_labelContext, 0);
    }
    ;
    type_annotation() {
        return this.getTypedRuleContext(Type_annotationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterFunction_type_argument(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitFunction_type_argument(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitFunction_type_argument(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Argument_labelContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_argument_label;
    }
    identifier = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(IdentifierContext);
        }
        else {
            return this.getTypedRuleContext(IdentifierContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterArgument_label(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitArgument_label(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitArgument_label(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Array_typeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_array_type;
    }
    LBRACK() {
        return this.getToken(Swift5Parser.LBRACK, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    RBRACK() {
        return this.getToken(Swift5Parser.RBRACK, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterArray_type(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitArray_type(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitArray_type(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Dictionary_typeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_dictionary_type;
    }
    LBRACK() {
        return this.getToken(Swift5Parser.LBRACK, 0);
    }
    ;
    type = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(TypeContext);
        }
        else {
            return this.getTypedRuleContext(TypeContext, i);
        }
    };
    COLON() {
        return this.getToken(Swift5Parser.COLON, 0);
    }
    ;
    RBRACK() {
        return this.getToken(Swift5Parser.RBRACK, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterDictionary_type(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitDictionary_type(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitDictionary_type(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Protocol_composition_typeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_protocol_composition_type;
    }
    type_identifier = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Type_identifierContext);
        }
        else {
            return this.getTypedRuleContext(Type_identifierContext, i);
        }
    };
    AND = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.AND);
        }
        else {
            return this.getToken(Swift5Parser.AND, i);
        }
    };
    trailing_composition_and() {
        return this.getTypedRuleContext(Trailing_composition_andContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterProtocol_composition_type(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitProtocol_composition_type(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitProtocol_composition_type(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Trailing_composition_andContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_trailing_composition_and;
    }
    AND() {
        return this.getToken(Swift5Parser.AND, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterTrailing_composition_and(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitTrailing_composition_and(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitTrailing_composition_and(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Opaque_typeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_opaque_type;
    }
    SOME() {
        return this.getToken(Swift5Parser.SOME, 0);
    }
    ;
    type() {
        return this.getTypedRuleContext(TypeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterOpaque_type(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitOpaque_type(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitOpaque_type(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Any_typeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_any_type;
    }
    ANY() {
        return this.getToken(Swift5Parser.ANY, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterAny_type(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitAny_type(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitAny_type(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Self_typeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_self_type;
    }
    SELF_BIG() {
        return this.getToken(Swift5Parser.SELF_BIG, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterSelf_type(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitSelf_type(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitSelf_type(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Type_inheritance_clauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_type_inheritance_clause;
    }
    COLON() {
        return this.getToken(Swift5Parser.COLON, 0);
    }
    ;
    type_inheritance_list() {
        return this.getTypedRuleContext(Type_inheritance_listContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterType_inheritance_clause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitType_inheritance_clause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitType_inheritance_clause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Type_inheritance_listContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_type_inheritance_list;
    }
    type_identifier = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Type_identifierContext);
        }
        else {
            return this.getTypedRuleContext(Type_identifierContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.COMMA);
        }
        else {
            return this.getToken(Swift5Parser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterType_inheritance_list(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitType_inheritance_list(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitType_inheritance_list(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class IdentifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_identifier;
    }
    LINUX() {
        return this.getToken(Swift5Parser.LINUX, 0);
    }
    ;
    WINDOWS() {
        return this.getToken(Swift5Parser.WINDOWS, 0);
    }
    ;
    ALPHA() {
        return this.getToken(Swift5Parser.ALPHA, 0);
    }
    ;
    ARCH() {
        return this.getToken(Swift5Parser.ARCH, 0);
    }
    ;
    ARM() {
        return this.getToken(Swift5Parser.ARM, 0);
    }
    ;
    ARM64() {
        return this.getToken(Swift5Parser.ARM64, 0);
    }
    ;
    ASSIGNMENT() {
        return this.getToken(Swift5Parser.ASSIGNMENT, 0);
    }
    ;
    BLUE() {
        return this.getToken(Swift5Parser.BLUE, 0);
    }
    ;
    CAN_IMPORT() {
        return this.getToken(Swift5Parser.CAN_IMPORT, 0);
    }
    ;
    COMPILER() {
        return this.getToken(Swift5Parser.COMPILER, 0);
    }
    ;
    FILE() {
        return this.getToken(Swift5Parser.FILE, 0);
    }
    ;
    GREEN() {
        return this.getToken(Swift5Parser.GREEN, 0);
    }
    ;
    HIGHER_THAN() {
        return this.getToken(Swift5Parser.HIGHER_THAN, 0);
    }
    ;
    I386() {
        return this.getToken(Swift5Parser.I386, 0);
    }
    ;
    I_OS() {
        return this.getToken(Swift5Parser.I_OS, 0);
    }
    ;
    OSX() {
        return this.getToken(Swift5Parser.OSX, 0);
    }
    ;
    I_OS_APPLICATION_EXTENSION() {
        return this.getToken(Swift5Parser.I_OS_APPLICATION_EXTENSION, 0);
    }
    ;
    LINE() {
        return this.getToken(Swift5Parser.LINE, 0);
    }
    ;
    LOWER_THAN() {
        return this.getToken(Swift5Parser.LOWER_THAN, 0);
    }
    ;
    MAC_CATALYST() {
        return this.getToken(Swift5Parser.MAC_CATALYST, 0);
    }
    ;
    MAC_CATALYST_APPLICATION_EXTENSION() {
        return this.getToken(Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION, 0);
    }
    ;
    MAC_OS() {
        return this.getToken(Swift5Parser.MAC_OS, 0);
    }
    ;
    MAC_OS_APPLICATION_EXTENSION() {
        return this.getToken(Swift5Parser.MAC_OS_APPLICATION_EXTENSION, 0);
    }
    ;
    OS() {
        return this.getToken(Swift5Parser.OS, 0);
    }
    ;
    PRECEDENCE_GROUP() {
        return this.getToken(Swift5Parser.PRECEDENCE_GROUP, 0);
    }
    ;
    RED() {
        return this.getToken(Swift5Parser.RED, 0);
    }
    ;
    RESOURCE_NAME() {
        return this.getToken(Swift5Parser.RESOURCE_NAME, 0);
    }
    ;
    SAFE() {
        return this.getToken(Swift5Parser.SAFE, 0);
    }
    ;
    SIMULATOR() {
        return this.getToken(Swift5Parser.SIMULATOR, 0);
    }
    ;
    SOME() {
        return this.getToken(Swift5Parser.SOME, 0);
    }
    ;
    SWIFT() {
        return this.getToken(Swift5Parser.SWIFT, 0);
    }
    ;
    TARGET_ENVIRONMENT() {
        return this.getToken(Swift5Parser.TARGET_ENVIRONMENT, 0);
    }
    ;
    TV_OS() {
        return this.getToken(Swift5Parser.TV_OS, 0);
    }
    ;
    UNSAFE() {
        return this.getToken(Swift5Parser.UNSAFE, 0);
    }
    ;
    WATCH_OS() {
        return this.getToken(Swift5Parser.WATCH_OS, 0);
    }
    ;
    X86_64() {
        return this.getToken(Swift5Parser.X86_64, 0);
    }
    ;
    ASSOCIATIVITY() {
        return this.getToken(Swift5Parser.ASSOCIATIVITY, 0);
    }
    ;
    CONVENIENCE() {
        return this.getToken(Swift5Parser.CONVENIENCE, 0);
    }
    ;
    DYNAMIC() {
        return this.getToken(Swift5Parser.DYNAMIC, 0);
    }
    ;
    DID_SET() {
        return this.getToken(Swift5Parser.DID_SET, 0);
    }
    ;
    FINAL() {
        return this.getToken(Swift5Parser.FINAL, 0);
    }
    ;
    GET() {
        return this.getToken(Swift5Parser.GET, 0);
    }
    ;
    INFIX() {
        return this.getToken(Swift5Parser.INFIX, 0);
    }
    ;
    INDIRECT() {
        return this.getToken(Swift5Parser.INDIRECT, 0);
    }
    ;
    LAZY() {
        return this.getToken(Swift5Parser.LAZY, 0);
    }
    ;
    LEFT() {
        return this.getToken(Swift5Parser.LEFT, 0);
    }
    ;
    MUTATING() {
        return this.getToken(Swift5Parser.MUTATING, 0);
    }
    ;
    NONE() {
        return this.getToken(Swift5Parser.NONE, 0);
    }
    ;
    NONMUTATING() {
        return this.getToken(Swift5Parser.NONMUTATING, 0);
    }
    ;
    OPTIONAL() {
        return this.getToken(Swift5Parser.OPTIONAL, 0);
    }
    ;
    OVERRIDE() {
        return this.getToken(Swift5Parser.OVERRIDE, 0);
    }
    ;
    POSTFIX() {
        return this.getToken(Swift5Parser.POSTFIX, 0);
    }
    ;
    PRECEDENCE() {
        return this.getToken(Swift5Parser.PRECEDENCE, 0);
    }
    ;
    PREFIX() {
        return this.getToken(Swift5Parser.PREFIX, 0);
    }
    ;
    PROTOCOL() {
        return this.getToken(Swift5Parser.PROTOCOL, 0);
    }
    ;
    REQUIRED() {
        return this.getToken(Swift5Parser.REQUIRED, 0);
    }
    ;
    RIGHT() {
        return this.getToken(Swift5Parser.RIGHT, 0);
    }
    ;
    SET() {
        return this.getToken(Swift5Parser.SET, 0);
    }
    ;
    TYPE() {
        return this.getToken(Swift5Parser.TYPE, 0);
    }
    ;
    UNOWNED() {
        return this.getToken(Swift5Parser.UNOWNED, 0);
    }
    ;
    WEAK() {
        return this.getToken(Swift5Parser.WEAK, 0);
    }
    ;
    WILL_SET() {
        return this.getToken(Swift5Parser.WILL_SET, 0);
    }
    ;
    IN() {
        return this.getToken(Swift5Parser.IN, 0);
    }
    ;
    FOR() {
        return this.getToken(Swift5Parser.FOR, 0);
    }
    ;
    GUARD() {
        return this.getToken(Swift5Parser.GUARD, 0);
    }
    ;
    WHERE() {
        return this.getToken(Swift5Parser.WHERE, 0);
    }
    ;
    DEFAULT() {
        return this.getToken(Swift5Parser.DEFAULT, 0);
    }
    ;
    INTERNAL() {
        return this.getToken(Swift5Parser.INTERNAL, 0);
    }
    ;
    PRIVATE() {
        return this.getToken(Swift5Parser.PRIVATE, 0);
    }
    ;
    PUBLIC() {
        return this.getToken(Swift5Parser.PUBLIC, 0);
    }
    ;
    OPEN() {
        return this.getToken(Swift5Parser.OPEN, 0);
    }
    ;
    AS() {
        return this.getToken(Swift5Parser.AS, 0);
    }
    ;
    WHILE() {
        return this.getToken(Swift5Parser.WHILE, 0);
    }
    ;
    SELF() {
        return this.getToken(Swift5Parser.SELF, 0);
    }
    ;
    SELF_BIG() {
        return this.getToken(Swift5Parser.SELF_BIG, 0);
    }
    ;
    CLASS() {
        return this.getToken(Swift5Parser.CLASS, 0);
    }
    ;
    GETTER() {
        return this.getToken(Swift5Parser.GETTER, 0);
    }
    ;
    SETTER() {
        return this.getToken(Swift5Parser.SETTER, 0);
    }
    ;
    OPERATOR() {
        return this.getToken(Swift5Parser.OPERATOR, 0);
    }
    ;
    DO() {
        return this.getToken(Swift5Parser.DO, 0);
    }
    ;
    CATCH() {
        return this.getToken(Swift5Parser.CATCH, 0);
    }
    ;
    Identifier() {
        return this.getToken(Swift5Parser.Identifier, 0);
    }
    ;
    BACKTICK = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.BACKTICK);
        }
        else {
            return this.getToken(Swift5Parser.BACKTICK, i);
        }
    };
    keyword() {
        return this.getTypedRuleContext(KeywordContext, 0);
    }
    ;
    DOLLAR() {
        return this.getToken(Swift5Parser.DOLLAR, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterIdentifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitIdentifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitIdentifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Identifier_listContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_identifier_list;
    }
    identifier = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(IdentifierContext);
        }
        else {
            return this.getTypedRuleContext(IdentifierContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.COMMA);
        }
        else {
            return this.getToken(Swift5Parser.COMMA, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterIdentifier_list(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitIdentifier_list(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitIdentifier_list(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class KeywordContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_keyword;
    }
    ASSOCIATED_TYPE() {
        return this.getToken(Swift5Parser.ASSOCIATED_TYPE, 0);
    }
    ;
    CLASS() {
        return this.getToken(Swift5Parser.CLASS, 0);
    }
    ;
    DEINIT() {
        return this.getToken(Swift5Parser.DEINIT, 0);
    }
    ;
    ENUM() {
        return this.getToken(Swift5Parser.ENUM, 0);
    }
    ;
    EXTENSION() {
        return this.getToken(Swift5Parser.EXTENSION, 0);
    }
    ;
    FILE_PRIVATE() {
        return this.getToken(Swift5Parser.FILE_PRIVATE, 0);
    }
    ;
    FUNC() {
        return this.getToken(Swift5Parser.FUNC, 0);
    }
    ;
    IMPORT() {
        return this.getToken(Swift5Parser.IMPORT, 0);
    }
    ;
    INIT() {
        return this.getToken(Swift5Parser.INIT, 0);
    }
    ;
    INOUT() {
        return this.getToken(Swift5Parser.INOUT, 0);
    }
    ;
    INTERNAL() {
        return this.getToken(Swift5Parser.INTERNAL, 0);
    }
    ;
    LET() {
        return this.getToken(Swift5Parser.LET, 0);
    }
    ;
    OPEN() {
        return this.getToken(Swift5Parser.OPEN, 0);
    }
    ;
    OPERATOR() {
        return this.getToken(Swift5Parser.OPERATOR, 0);
    }
    ;
    PRIVATE() {
        return this.getToken(Swift5Parser.PRIVATE, 0);
    }
    ;
    PROTOCOL() {
        return this.getToken(Swift5Parser.PROTOCOL, 0);
    }
    ;
    PUBLIC() {
        return this.getToken(Swift5Parser.PUBLIC, 0);
    }
    ;
    RETHROWS() {
        return this.getToken(Swift5Parser.RETHROWS, 0);
    }
    ;
    STATIC() {
        return this.getToken(Swift5Parser.STATIC, 0);
    }
    ;
    STRUCT() {
        return this.getToken(Swift5Parser.STRUCT, 0);
    }
    ;
    SUBSCRIPT() {
        return this.getToken(Swift5Parser.SUBSCRIPT, 0);
    }
    ;
    TYPEALIAS() {
        return this.getToken(Swift5Parser.TYPEALIAS, 0);
    }
    ;
    VAR() {
        return this.getToken(Swift5Parser.VAR, 0);
    }
    ;
    BREAK() {
        return this.getToken(Swift5Parser.BREAK, 0);
    }
    ;
    CASE() {
        return this.getToken(Swift5Parser.CASE, 0);
    }
    ;
    CONTINUE() {
        return this.getToken(Swift5Parser.CONTINUE, 0);
    }
    ;
    DEFAULT() {
        return this.getToken(Swift5Parser.DEFAULT, 0);
    }
    ;
    DEFER() {
        return this.getToken(Swift5Parser.DEFER, 0);
    }
    ;
    DO() {
        return this.getToken(Swift5Parser.DO, 0);
    }
    ;
    ELSE() {
        return this.getToken(Swift5Parser.ELSE, 0);
    }
    ;
    FALLTHROUGH() {
        return this.getToken(Swift5Parser.FALLTHROUGH, 0);
    }
    ;
    FOR() {
        return this.getToken(Swift5Parser.FOR, 0);
    }
    ;
    GUARD() {
        return this.getToken(Swift5Parser.GUARD, 0);
    }
    ;
    IF() {
        return this.getToken(Swift5Parser.IF, 0);
    }
    ;
    IN() {
        return this.getToken(Swift5Parser.IN, 0);
    }
    ;
    REPEAT() {
        return this.getToken(Swift5Parser.REPEAT, 0);
    }
    ;
    RETURN() {
        return this.getToken(Swift5Parser.RETURN, 0);
    }
    ;
    SWITCH() {
        return this.getToken(Swift5Parser.SWITCH, 0);
    }
    ;
    WHERE() {
        return this.getToken(Swift5Parser.WHERE, 0);
    }
    ;
    WHILE() {
        return this.getToken(Swift5Parser.WHILE, 0);
    }
    ;
    AS() {
        return this.getToken(Swift5Parser.AS, 0);
    }
    ;
    ANY() {
        return this.getToken(Swift5Parser.ANY, 0);
    }
    ;
    CATCH() {
        return this.getToken(Swift5Parser.CATCH, 0);
    }
    ;
    FALSE() {
        return this.getToken(Swift5Parser.FALSE, 0);
    }
    ;
    IS() {
        return this.getToken(Swift5Parser.IS, 0);
    }
    ;
    NIL() {
        return this.getToken(Swift5Parser.NIL, 0);
    }
    ;
    SUPER() {
        return this.getToken(Swift5Parser.SUPER, 0);
    }
    ;
    SELF() {
        return this.getToken(Swift5Parser.SELF, 0);
    }
    ;
    SELF_BIG() {
        return this.getToken(Swift5Parser.SELF_BIG, 0);
    }
    ;
    THROW() {
        return this.getToken(Swift5Parser.THROW, 0);
    }
    ;
    THROWS() {
        return this.getToken(Swift5Parser.THROWS, 0);
    }
    ;
    TRUE() {
        return this.getToken(Swift5Parser.TRUE, 0);
    }
    ;
    TRY() {
        return this.getToken(Swift5Parser.TRY, 0);
    }
    ;
    UNDERSCORE() {
        return this.getToken(Swift5Parser.UNDERSCORE, 0);
    }
    ;
    AVAILABLE() {
        return this.getToken(Swift5Parser.AVAILABLE, 0);
    }
    ;
    HASH_COLOR_LITERAL() {
        return this.getToken(Swift5Parser.HASH_COLOR_LITERAL, 0);
    }
    ;
    HASH_COLUMN() {
        return this.getToken(Swift5Parser.HASH_COLUMN, 0);
    }
    ;
    HASH_ELSE() {
        return this.getToken(Swift5Parser.HASH_ELSE, 0);
    }
    ;
    HASH_ELSEIF() {
        return this.getToken(Swift5Parser.HASH_ELSEIF, 0);
    }
    ;
    HASH_ENDIF() {
        return this.getToken(Swift5Parser.HASH_ENDIF, 0);
    }
    ;
    ERROR() {
        return this.getToken(Swift5Parser.ERROR, 0);
    }
    ;
    HASH_FILE() {
        return this.getToken(Swift5Parser.HASH_FILE, 0);
    }
    ;
    HASH_FILE_ID() {
        return this.getToken(Swift5Parser.HASH_FILE_ID, 0);
    }
    ;
    HASH_FILE_LITERAL() {
        return this.getToken(Swift5Parser.HASH_FILE_LITERAL, 0);
    }
    ;
    HASH_FILE_PATH() {
        return this.getToken(Swift5Parser.HASH_FILE_PATH, 0);
    }
    ;
    HASH_FUNCTION() {
        return this.getToken(Swift5Parser.HASH_FUNCTION, 0);
    }
    ;
    HASH_IF() {
        return this.getToken(Swift5Parser.HASH_IF, 0);
    }
    ;
    HASH_IMAGE_LITERAL() {
        return this.getToken(Swift5Parser.HASH_IMAGE_LITERAL, 0);
    }
    ;
    HASH_LINE() {
        return this.getToken(Swift5Parser.HASH_LINE, 0);
    }
    ;
    HASH_SELECTOR() {
        return this.getToken(Swift5Parser.HASH_SELECTOR, 0);
    }
    ;
    SOURCE_LOCATION() {
        return this.getToken(Swift5Parser.SOURCE_LOCATION, 0);
    }
    ;
    WARNING() {
        return this.getToken(Swift5Parser.WARNING, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterKeyword(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitKeyword(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitKeyword(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Assignment_operatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_assignment_operator;
    }
    EQUAL() {
        return this.getToken(Swift5Parser.EQUAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterAssignment_operator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitAssignment_operator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitAssignment_operator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Negate_prefix_operatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_negate_prefix_operator;
    }
    SUB() {
        return this.getToken(Swift5Parser.SUB, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterNegate_prefix_operator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitNegate_prefix_operator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitNegate_prefix_operator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Compilation_condition_ANDContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_compilation_condition_AND;
    }
    AND = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.AND);
        }
        else {
            return this.getToken(Swift5Parser.AND, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterCompilation_condition_AND(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitCompilation_condition_AND(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitCompilation_condition_AND(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Compilation_condition_ORContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_compilation_condition_OR;
    }
    OR = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.OR);
        }
        else {
            return this.getToken(Swift5Parser.OR, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterCompilation_condition_OR(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitCompilation_condition_OR(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitCompilation_condition_OR(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Compilation_condition_GEContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_compilation_condition_GE;
    }
    GT() {
        return this.getToken(Swift5Parser.GT, 0);
    }
    ;
    EQUAL() {
        return this.getToken(Swift5Parser.EQUAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterCompilation_condition_GE(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitCompilation_condition_GE(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitCompilation_condition_GE(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Compilation_condition_LContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_compilation_condition_L;
    }
    LT() {
        return this.getToken(Swift5Parser.LT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterCompilation_condition_L(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitCompilation_condition_L(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitCompilation_condition_L(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Arrow_operatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_arrow_operator;
    }
    SUB() {
        return this.getToken(Swift5Parser.SUB, 0);
    }
    ;
    GT() {
        return this.getToken(Swift5Parser.GT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterArrow_operator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitArrow_operator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitArrow_operator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Range_operatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_range_operator;
    }
    DOT = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.DOT);
        }
        else {
            return this.getToken(Swift5Parser.DOT, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterRange_operator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitRange_operator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitRange_operator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Same_type_equalsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_same_type_equals;
    }
    EQUAL = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.EQUAL);
        }
        else {
            return this.getToken(Swift5Parser.EQUAL, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterSame_type_equals(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitSame_type_equals(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitSame_type_equals(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Binary_operatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_binary_operator;
    }
    operator() {
        return this.getTypedRuleContext(OperatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterBinary_operator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitBinary_operator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitBinary_operator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Prefix_operatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_prefix_operator;
    }
    operator() {
        return this.getTypedRuleContext(OperatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterPrefix_operator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitPrefix_operator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitPrefix_operator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Postfix_operatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_postfix_operator;
    }
    operator() {
        return this.getTypedRuleContext(OperatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterPostfix_operator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitPostfix_operator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitPostfix_operator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class OperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_operator;
    }
    operator_head() {
        return this.getTypedRuleContext(Operator_headContext, 0);
    }
    ;
    operator_characters() {
        return this.getTypedRuleContext(Operator_charactersContext, 0);
    }
    ;
    dot_operator_head() {
        return this.getTypedRuleContext(Dot_operator_headContext, 0);
    }
    ;
    dot_operator_characters() {
        return this.getTypedRuleContext(Dot_operator_charactersContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Operator_headContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_operator_head;
    }
    DIV() {
        return this.getToken(Swift5Parser.DIV, 0);
    }
    ;
    EQUAL() {
        return this.getToken(Swift5Parser.EQUAL, 0);
    }
    ;
    SUB() {
        return this.getToken(Swift5Parser.SUB, 0);
    }
    ;
    ADD() {
        return this.getToken(Swift5Parser.ADD, 0);
    }
    ;
    BANG() {
        return this.getToken(Swift5Parser.BANG, 0);
    }
    ;
    MUL() {
        return this.getToken(Swift5Parser.MUL, 0);
    }
    ;
    MOD() {
        return this.getToken(Swift5Parser.MOD, 0);
    }
    ;
    AND() {
        return this.getToken(Swift5Parser.AND, 0);
    }
    ;
    OR() {
        return this.getToken(Swift5Parser.OR, 0);
    }
    ;
    LT() {
        return this.getToken(Swift5Parser.LT, 0);
    }
    ;
    GT() {
        return this.getToken(Swift5Parser.GT, 0);
    }
    ;
    CARET() {
        return this.getToken(Swift5Parser.CARET, 0);
    }
    ;
    TILDE() {
        return this.getToken(Swift5Parser.TILDE, 0);
    }
    ;
    QUESTION() {
        return this.getToken(Swift5Parser.QUESTION, 0);
    }
    ;
    Operator_head_other() {
        return this.getToken(Swift5Parser.Operator_head_other, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterOperator_head(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitOperator_head(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitOperator_head(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Operator_characterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_operator_character;
    }
    operator_head() {
        return this.getTypedRuleContext(Operator_headContext, 0);
    }
    ;
    Operator_following_character() {
        return this.getToken(Swift5Parser.Operator_following_character, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterOperator_character(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitOperator_character(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitOperator_character(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Operator_charactersContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_operator_characters;
    }
    operator_character = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Operator_characterContext);
        }
        else {
            return this.getTypedRuleContext(Operator_characterContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterOperator_characters(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitOperator_characters(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitOperator_characters(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Dot_operator_headContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_dot_operator_head;
    }
    DOT() {
        return this.getToken(Swift5Parser.DOT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterDot_operator_head(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitDot_operator_head(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitDot_operator_head(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Dot_operator_characterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_dot_operator_character;
    }
    DOT() {
        return this.getToken(Swift5Parser.DOT, 0);
    }
    ;
    operator_character() {
        return this.getTypedRuleContext(Operator_characterContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterDot_operator_character(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitDot_operator_character(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitDot_operator_character(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Dot_operator_charactersContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_dot_operator_characters;
    }
    dot_operator_character = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Dot_operator_characterContext);
        }
        else {
            return this.getTypedRuleContext(Dot_operator_characterContext, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterDot_operator_characters(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitDot_operator_characters(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitDot_operator_characters(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LiteralContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_literal;
    }
    numeric_literal() {
        return this.getTypedRuleContext(Numeric_literalContext, 0);
    }
    ;
    string_literal() {
        return this.getTypedRuleContext(String_literalContext, 0);
    }
    ;
    boolean_literal() {
        return this.getTypedRuleContext(Boolean_literalContext, 0);
    }
    ;
    nil_literal() {
        return this.getTypedRuleContext(Nil_literalContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterLiteral(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitLiteral(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Numeric_literalContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_numeric_literal;
    }
    integer_literal() {
        return this.getTypedRuleContext(Integer_literalContext, 0);
    }
    ;
    negate_prefix_operator() {
        return this.getTypedRuleContext(Negate_prefix_operatorContext, 0);
    }
    ;
    Floating_point_literal() {
        return this.getToken(Swift5Parser.Floating_point_literal, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterNumeric_literal(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitNumeric_literal(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitNumeric_literal(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Boolean_literalContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_boolean_literal;
    }
    TRUE() {
        return this.getToken(Swift5Parser.TRUE, 0);
    }
    ;
    FALSE() {
        return this.getToken(Swift5Parser.FALSE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterBoolean_literal(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitBoolean_literal(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitBoolean_literal(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Nil_literalContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_nil_literal;
    }
    NIL() {
        return this.getToken(Swift5Parser.NIL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterNil_literal(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitNil_literal(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitNil_literal(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Integer_literalContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_integer_literal;
    }
    Decimal_digits() {
        return this.getToken(Swift5Parser.Decimal_digits, 0);
    }
    ;
    Decimal_literal() {
        return this.getToken(Swift5Parser.Decimal_literal, 0);
    }
    ;
    Binary_literal() {
        return this.getToken(Swift5Parser.Binary_literal, 0);
    }
    ;
    Octal_literal() {
        return this.getToken(Swift5Parser.Octal_literal, 0);
    }
    ;
    Hexadecimal_literal() {
        return this.getToken(Swift5Parser.Hexadecimal_literal, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterInteger_literal(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitInteger_literal(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitInteger_literal(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class String_literalContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_string_literal;
    }
    extended_string_literal() {
        return this.getTypedRuleContext(Extended_string_literalContext, 0);
    }
    ;
    interpolated_string_literal() {
        return this.getTypedRuleContext(Interpolated_string_literalContext, 0);
    }
    ;
    static_string_literal() {
        return this.getTypedRuleContext(Static_string_literalContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterString_literal(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitString_literal(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitString_literal(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Extended_string_literalContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_extended_string_literal;
    }
    Multi_line_extended_string_open() {
        return this.getToken(Swift5Parser.Multi_line_extended_string_open, 0);
    }
    ;
    Multi_line_extended_string_close() {
        return this.getToken(Swift5Parser.Multi_line_extended_string_close, 0);
    }
    ;
    Quoted_multi_line_extended_text = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.Quoted_multi_line_extended_text);
        }
        else {
            return this.getToken(Swift5Parser.Quoted_multi_line_extended_text, i);
        }
    };
    Single_line_extended_string_open() {
        return this.getToken(Swift5Parser.Single_line_extended_string_open, 0);
    }
    ;
    Single_line_extended_string_close() {
        return this.getToken(Swift5Parser.Single_line_extended_string_close, 0);
    }
    ;
    Quoted_single_line_extended_text = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.Quoted_single_line_extended_text);
        }
        else {
            return this.getToken(Swift5Parser.Quoted_single_line_extended_text, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterExtended_string_literal(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitExtended_string_literal(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitExtended_string_literal(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Static_string_literalContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_static_string_literal;
    }
    Single_line_string_open() {
        return this.getToken(Swift5Parser.Single_line_string_open, 0);
    }
    ;
    Single_line_string_close() {
        return this.getToken(Swift5Parser.Single_line_string_close, 0);
    }
    ;
    Quoted_single_line_text = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.Quoted_single_line_text);
        }
        else {
            return this.getToken(Swift5Parser.Quoted_single_line_text, i);
        }
    };
    Multi_line_string_open() {
        return this.getToken(Swift5Parser.Multi_line_string_open, 0);
    }
    ;
    Multi_line_string_close() {
        return this.getToken(Swift5Parser.Multi_line_string_close, 0);
    }
    ;
    Quoted_multi_line_text = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.Quoted_multi_line_text);
        }
        else {
            return this.getToken(Swift5Parser.Quoted_multi_line_text, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterStatic_string_literal(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitStatic_string_literal(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitStatic_string_literal(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class Interpolated_string_literalContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_interpolated_string_literal;
    }
    Single_line_string_open() {
        return this.getToken(Swift5Parser.Single_line_string_open, 0);
    }
    ;
    Single_line_string_close() {
        return this.getToken(Swift5Parser.Single_line_string_close, 0);
    }
    ;
    Quoted_single_line_text = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.Quoted_single_line_text);
        }
        else {
            return this.getToken(Swift5Parser.Quoted_single_line_text, i);
        }
    };
    Interpolataion_single_line = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.Interpolataion_single_line);
        }
        else {
            return this.getToken(Swift5Parser.Interpolataion_single_line, i);
        }
    };
    RPAREN = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.RPAREN);
        }
        else {
            return this.getToken(Swift5Parser.RPAREN, i);
        }
    };
    expression = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(ExpressionContext);
        }
        else {
            return this.getTypedRuleContext(ExpressionContext, i);
        }
    };
    tuple_element = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Tuple_elementContext);
        }
        else {
            return this.getTypedRuleContext(Tuple_elementContext, i);
        }
    };
    COMMA = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.COMMA);
        }
        else {
            return this.getToken(Swift5Parser.COMMA, i);
        }
    };
    tuple_element_list = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTypedRuleContexts(Tuple_element_listContext);
        }
        else {
            return this.getTypedRuleContext(Tuple_element_listContext, i);
        }
    };
    Multi_line_string_open() {
        return this.getToken(Swift5Parser.Multi_line_string_open, 0);
    }
    ;
    Multi_line_string_close() {
        return this.getToken(Swift5Parser.Multi_line_string_close, 0);
    }
    ;
    Quoted_multi_line_text = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.Quoted_multi_line_text);
        }
        else {
            return this.getToken(Swift5Parser.Quoted_multi_line_text, i);
        }
    };
    Interpolataion_multi_line = function (i) {
        if (i === undefined) {
            i = null;
        }
        if (i === null) {
            return this.getTokens(Swift5Parser.Interpolataion_multi_line);
        }
        else {
            return this.getToken(Swift5Parser.Interpolataion_multi_line, i);
        }
    };
    enterRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.enterInterpolated_string_literal(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof Swift5ParserListener_1.default) {
            listener.exitInterpolated_string_literal(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof Swift5ParserVisitor_1.default) {
            return visitor.visitInterpolated_string_literal(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
Swift5Parser.Top_levelContext = Top_levelContext;
Swift5Parser.StatementContext = StatementContext;
Swift5Parser.StatementsContext = StatementsContext;
Swift5Parser.Loop_statementContext = Loop_statementContext;
Swift5Parser.For_in_statementContext = For_in_statementContext;
Swift5Parser.While_statementContext = While_statementContext;
Swift5Parser.Condition_listContext = Condition_listContext;
Swift5Parser.ConditionContext = ConditionContext;
Swift5Parser.Case_conditionContext = Case_conditionContext;
Swift5Parser.Optional_binding_conditionContext = Optional_binding_conditionContext;
Swift5Parser.Repeat_while_statementContext = Repeat_while_statementContext;
Swift5Parser.Branch_statementContext = Branch_statementContext;
Swift5Parser.If_statementContext = If_statementContext;
Swift5Parser.Else_clauseContext = Else_clauseContext;
Swift5Parser.Guard_statementContext = Guard_statementContext;
Swift5Parser.Switch_statementContext = Switch_statementContext;
Swift5Parser.Switch_casesContext = Switch_casesContext;
Swift5Parser.Switch_caseContext = Switch_caseContext;
Swift5Parser.Case_labelContext = Case_labelContext;
Swift5Parser.Case_item_listContext = Case_item_listContext;
Swift5Parser.Default_labelContext = Default_labelContext;
Swift5Parser.Where_clauseContext = Where_clauseContext;
Swift5Parser.Where_expressionContext = Where_expressionContext;
Swift5Parser.Conditional_switch_caseContext = Conditional_switch_caseContext;
Swift5Parser.Switch_if_directive_clauseContext = Switch_if_directive_clauseContext;
Swift5Parser.Switch_elseif_directive_clausesContext = Switch_elseif_directive_clausesContext;
Swift5Parser.Switch_elseif_directive_clauseContext = Switch_elseif_directive_clauseContext;
Swift5Parser.Switch_else_directive_clauseContext = Switch_else_directive_clauseContext;
Swift5Parser.Labeled_statementContext = Labeled_statementContext;
Swift5Parser.Statement_labelContext = Statement_labelContext;
Swift5Parser.Label_nameContext = Label_nameContext;
Swift5Parser.Control_transfer_statementContext = Control_transfer_statementContext;
Swift5Parser.Break_statementContext = Break_statementContext;
Swift5Parser.Continue_statementContext = Continue_statementContext;
Swift5Parser.Fallthrough_statementContext = Fallthrough_statementContext;
Swift5Parser.Return_statementContext = Return_statementContext;
Swift5Parser.Throw_statementContext = Throw_statementContext;
Swift5Parser.Defer_statementContext = Defer_statementContext;
Swift5Parser.Do_statementContext = Do_statementContext;
Swift5Parser.Catch_clausesContext = Catch_clausesContext;
Swift5Parser.Catch_clauseContext = Catch_clauseContext;
Swift5Parser.Catch_pattern_listContext = Catch_pattern_listContext;
Swift5Parser.Catch_patternContext = Catch_patternContext;
Swift5Parser.Compiler_control_statementContext = Compiler_control_statementContext;
Swift5Parser.Conditional_compilation_blockContext = Conditional_compilation_blockContext;
Swift5Parser.If_directive_clauseContext = If_directive_clauseContext;
Swift5Parser.Elseif_directive_clausesContext = Elseif_directive_clausesContext;
Swift5Parser.Elseif_directive_clauseContext = Elseif_directive_clauseContext;
Swift5Parser.Else_directive_clauseContext = Else_directive_clauseContext;
Swift5Parser.Compilation_conditionContext = Compilation_conditionContext;
Swift5Parser.Platform_conditionContext = Platform_conditionContext;
Swift5Parser.Swift_versionContext = Swift_versionContext;
Swift5Parser.Swift_version_continuationContext = Swift_version_continuationContext;
Swift5Parser.Operating_systemContext = Operating_systemContext;
Swift5Parser.ArchitectureContext = ArchitectureContext;
Swift5Parser.Module_nameContext = Module_nameContext;
Swift5Parser.EnvironmentContext = EnvironmentContext;
Swift5Parser.Line_control_statementContext = Line_control_statementContext;
Swift5Parser.Line_numberContext = Line_numberContext;
Swift5Parser.File_nameContext = File_nameContext;
Swift5Parser.Diagnostic_statementContext = Diagnostic_statementContext;
Swift5Parser.Diagnostic_messageContext = Diagnostic_messageContext;
Swift5Parser.Availability_conditionContext = Availability_conditionContext;
Swift5Parser.Availability_argumentsContext = Availability_argumentsContext;
Swift5Parser.Availability_argumentContext = Availability_argumentContext;
Swift5Parser.Platform_nameContext = Platform_nameContext;
Swift5Parser.Platform_versionContext = Platform_versionContext;
Swift5Parser.Generic_parameter_clauseContext = Generic_parameter_clauseContext;
Swift5Parser.Generic_parameter_listContext = Generic_parameter_listContext;
Swift5Parser.Generic_parameterContext = Generic_parameterContext;
Swift5Parser.Generic_where_clauseContext = Generic_where_clauseContext;
Swift5Parser.Requirement_listContext = Requirement_listContext;
Swift5Parser.RequirementContext = RequirementContext;
Swift5Parser.Conformance_requirementContext = Conformance_requirementContext;
Swift5Parser.Same_type_requirementContext = Same_type_requirementContext;
Swift5Parser.Generic_argument_clauseContext = Generic_argument_clauseContext;
Swift5Parser.Generic_argument_listContext = Generic_argument_listContext;
Swift5Parser.Generic_argumentContext = Generic_argumentContext;
Swift5Parser.DeclarationContext = DeclarationContext;
Swift5Parser.DeclarationsContext = DeclarationsContext;
Swift5Parser.Top_level_declarationContext = Top_level_declarationContext;
Swift5Parser.Code_blockContext = Code_blockContext;
Swift5Parser.Import_declarationContext = Import_declarationContext;
Swift5Parser.Import_kindContext = Import_kindContext;
Swift5Parser.Import_pathContext = Import_pathContext;
Swift5Parser.Import_path_identifierContext = Import_path_identifierContext;
Swift5Parser.Constant_declarationContext = Constant_declarationContext;
Swift5Parser.Pattern_initializer_listContext = Pattern_initializer_listContext;
Swift5Parser.Pattern_initializerContext = Pattern_initializerContext;
Swift5Parser.InitializerContext = InitializerContext;
Swift5Parser.Variable_declarationContext = Variable_declarationContext;
Swift5Parser.Variable_declaration_headContext = Variable_declaration_headContext;
Swift5Parser.Variable_nameContext = Variable_nameContext;
Swift5Parser.Getter_setter_blockContext = Getter_setter_blockContext;
Swift5Parser.Getter_clauseContext = Getter_clauseContext;
Swift5Parser.Setter_clauseContext = Setter_clauseContext;
Swift5Parser.Setter_nameContext = Setter_nameContext;
Swift5Parser.Getter_setter_keyword_blockContext = Getter_setter_keyword_blockContext;
Swift5Parser.Getter_keyword_clauseContext = Getter_keyword_clauseContext;
Swift5Parser.Setter_keyword_clauseContext = Setter_keyword_clauseContext;
Swift5Parser.WillSet_didSet_blockContext = WillSet_didSet_blockContext;
Swift5Parser.WillSet_clauseContext = WillSet_clauseContext;
Swift5Parser.DidSet_clauseContext = DidSet_clauseContext;
Swift5Parser.Typealias_declarationContext = Typealias_declarationContext;
Swift5Parser.Typealias_nameContext = Typealias_nameContext;
Swift5Parser.Typealias_assignmentContext = Typealias_assignmentContext;
Swift5Parser.Function_declarationContext = Function_declarationContext;
Swift5Parser.Function_headContext = Function_headContext;
Swift5Parser.Function_nameContext = Function_nameContext;
Swift5Parser.Function_signatureContext = Function_signatureContext;
Swift5Parser.Function_resultContext = Function_resultContext;
Swift5Parser.Function_bodyContext = Function_bodyContext;
Swift5Parser.Parameter_clauseContext = Parameter_clauseContext;
Swift5Parser.Parameter_listContext = Parameter_listContext;
Swift5Parser.ParameterContext = ParameterContext;
Swift5Parser.External_parameter_nameContext = External_parameter_nameContext;
Swift5Parser.Local_parameter_nameContext = Local_parameter_nameContext;
Swift5Parser.Default_argument_clauseContext = Default_argument_clauseContext;
Swift5Parser.Enum_declarationContext = Enum_declarationContext;
Swift5Parser.Union_style_enumContext = Union_style_enumContext;
Swift5Parser.Union_style_enum_membersContext = Union_style_enum_membersContext;
Swift5Parser.Union_style_enum_memberContext = Union_style_enum_memberContext;
Swift5Parser.Union_style_enum_case_clauseContext = Union_style_enum_case_clauseContext;
Swift5Parser.Union_style_enum_case_listContext = Union_style_enum_case_listContext;
Swift5Parser.Union_style_enum_caseContext = Union_style_enum_caseContext;
Swift5Parser.Enum_nameContext = Enum_nameContext;
Swift5Parser.Enum_case_nameContext = Enum_case_nameContext;
Swift5Parser.Raw_value_style_enumContext = Raw_value_style_enumContext;
Swift5Parser.Raw_value_style_enum_membersContext = Raw_value_style_enum_membersContext;
Swift5Parser.Raw_value_style_enum_memberContext = Raw_value_style_enum_memberContext;
Swift5Parser.Raw_value_style_enum_case_clauseContext = Raw_value_style_enum_case_clauseContext;
Swift5Parser.Raw_value_style_enum_case_listContext = Raw_value_style_enum_case_listContext;
Swift5Parser.Raw_value_style_enum_caseContext = Raw_value_style_enum_caseContext;
Swift5Parser.Raw_value_assignmentContext = Raw_value_assignmentContext;
Swift5Parser.Raw_value_literalContext = Raw_value_literalContext;
Swift5Parser.Struct_declarationContext = Struct_declarationContext;
Swift5Parser.Struct_nameContext = Struct_nameContext;
Swift5Parser.Struct_bodyContext = Struct_bodyContext;
Swift5Parser.Struct_membersContext = Struct_membersContext;
Swift5Parser.Struct_memberContext = Struct_memberContext;
Swift5Parser.Class_declarationContext = Class_declarationContext;
Swift5Parser.Class_nameContext = Class_nameContext;
Swift5Parser.Class_bodyContext = Class_bodyContext;
Swift5Parser.Class_membersContext = Class_membersContext;
Swift5Parser.Class_memberContext = Class_memberContext;
Swift5Parser.Protocol_declarationContext = Protocol_declarationContext;
Swift5Parser.Protocol_nameContext = Protocol_nameContext;
Swift5Parser.Protocol_bodyContext = Protocol_bodyContext;
Swift5Parser.Protocol_membersContext = Protocol_membersContext;
Swift5Parser.Protocol_memberContext = Protocol_memberContext;
Swift5Parser.Protocol_member_declarationContext = Protocol_member_declarationContext;
Swift5Parser.Protocol_property_declarationContext = Protocol_property_declarationContext;
Swift5Parser.Protocol_method_declarationContext = Protocol_method_declarationContext;
Swift5Parser.Protocol_initializer_declarationContext = Protocol_initializer_declarationContext;
Swift5Parser.Protocol_subscript_declarationContext = Protocol_subscript_declarationContext;
Swift5Parser.Protocol_associated_type_declarationContext = Protocol_associated_type_declarationContext;
Swift5Parser.Initializer_declarationContext = Initializer_declarationContext;
Swift5Parser.Initializer_headContext = Initializer_headContext;
Swift5Parser.Initializer_bodyContext = Initializer_bodyContext;
Swift5Parser.Deinitializer_declarationContext = Deinitializer_declarationContext;
Swift5Parser.Extension_declarationContext = Extension_declarationContext;
Swift5Parser.Extension_bodyContext = Extension_bodyContext;
Swift5Parser.Extension_membersContext = Extension_membersContext;
Swift5Parser.Extension_memberContext = Extension_memberContext;
Swift5Parser.Subscript_declarationContext = Subscript_declarationContext;
Swift5Parser.Subscript_headContext = Subscript_headContext;
Swift5Parser.Subscript_resultContext = Subscript_resultContext;
Swift5Parser.Operator_declarationContext = Operator_declarationContext;
Swift5Parser.Prefix_operator_declarationContext = Prefix_operator_declarationContext;
Swift5Parser.Postfix_operator_declarationContext = Postfix_operator_declarationContext;
Swift5Parser.Infix_operator_declarationContext = Infix_operator_declarationContext;
Swift5Parser.Infix_operator_groupContext = Infix_operator_groupContext;
Swift5Parser.Precedence_group_declarationContext = Precedence_group_declarationContext;
Swift5Parser.Precedence_group_attributesContext = Precedence_group_attributesContext;
Swift5Parser.Precedence_group_attributeContext = Precedence_group_attributeContext;
Swift5Parser.Precedence_group_relationContext = Precedence_group_relationContext;
Swift5Parser.Precedence_group_assignmentContext = Precedence_group_assignmentContext;
Swift5Parser.Precedence_group_associativityContext = Precedence_group_associativityContext;
Swift5Parser.Precedence_group_namesContext = Precedence_group_namesContext;
Swift5Parser.Precedence_group_nameContext = Precedence_group_nameContext;
Swift5Parser.Declaration_modifierContext = Declaration_modifierContext;
Swift5Parser.Declaration_modifiersContext = Declaration_modifiersContext;
Swift5Parser.Access_level_modifierContext = Access_level_modifierContext;
Swift5Parser.Mutation_modifierContext = Mutation_modifierContext;
Swift5Parser.PatternContext = PatternContext;
Swift5Parser.Wildcard_patternContext = Wildcard_patternContext;
Swift5Parser.Identifier_patternContext = Identifier_patternContext;
Swift5Parser.Value_binding_patternContext = Value_binding_patternContext;
Swift5Parser.Tuple_patternContext = Tuple_patternContext;
Swift5Parser.Tuple_pattern_element_listContext = Tuple_pattern_element_listContext;
Swift5Parser.Tuple_pattern_elementContext = Tuple_pattern_elementContext;
Swift5Parser.Enum_case_patternContext = Enum_case_patternContext;
Swift5Parser.Optional_patternContext = Optional_patternContext;
Swift5Parser.Expression_patternContext = Expression_patternContext;
Swift5Parser.AttributeContext = AttributeContext;
Swift5Parser.Attribute_nameContext = Attribute_nameContext;
Swift5Parser.Attribute_argument_clauseContext = Attribute_argument_clauseContext;
Swift5Parser.AttributesContext = AttributesContext;
Swift5Parser.Balanced_tokensContext = Balanced_tokensContext;
Swift5Parser.Balanced_tokenContext = Balanced_tokenContext;
Swift5Parser.Balanced_token_punctuationContext = Balanced_token_punctuationContext;
Swift5Parser.ExpressionContext = ExpressionContext;
Swift5Parser.Expression_listContext = Expression_listContext;
Swift5Parser.Prefix_expressionContext = Prefix_expressionContext;
Swift5Parser.In_out_expressionContext = In_out_expressionContext;
Swift5Parser.Try_operatorContext = Try_operatorContext;
Swift5Parser.Binary_expressionContext = Binary_expressionContext;
Swift5Parser.Binary_expressionsContext = Binary_expressionsContext;
Swift5Parser.Conditional_operatorContext = Conditional_operatorContext;
Swift5Parser.Type_casting_operatorContext = Type_casting_operatorContext;
Swift5Parser.Primary_expressionContext = Primary_expressionContext;
Swift5Parser.Unqualified_nameContext = Unqualified_nameContext;
Swift5Parser.Literal_expressionContext = Literal_expressionContext;
Swift5Parser.Array_literalContext = Array_literalContext;
Swift5Parser.Array_literal_itemsContext = Array_literal_itemsContext;
Swift5Parser.Array_literal_itemContext = Array_literal_itemContext;
Swift5Parser.Dictionary_literalContext = Dictionary_literalContext;
Swift5Parser.Dictionary_literal_itemsContext = Dictionary_literal_itemsContext;
Swift5Parser.Dictionary_literal_itemContext = Dictionary_literal_itemContext;
Swift5Parser.Playground_literalContext = Playground_literalContext;
Swift5Parser.Self_expressionContext = Self_expressionContext;
Swift5Parser.Superclass_expressionContext = Superclass_expressionContext;
Swift5Parser.Closure_expressionContext = Closure_expressionContext;
Swift5Parser.Closure_signatureContext = Closure_signatureContext;
Swift5Parser.Closure_parameter_clauseContext = Closure_parameter_clauseContext;
Swift5Parser.Closure_parameter_listContext = Closure_parameter_listContext;
Swift5Parser.Closure_parameterContext = Closure_parameterContext;
Swift5Parser.Capture_listContext = Capture_listContext;
Swift5Parser.Capture_list_itemsContext = Capture_list_itemsContext;
Swift5Parser.Capture_list_itemContext = Capture_list_itemContext;
Swift5Parser.Capture_specifierContext = Capture_specifierContext;
Swift5Parser.Implicit_member_expressionContext = Implicit_member_expressionContext;
Swift5Parser.Parenthesized_operatorContext = Parenthesized_operatorContext;
Swift5Parser.Parenthesized_expressionContext = Parenthesized_expressionContext;
Swift5Parser.Tuple_expressionContext = Tuple_expressionContext;
Swift5Parser.Tuple_element_listContext = Tuple_element_listContext;
Swift5Parser.Tuple_elementContext = Tuple_elementContext;
Swift5Parser.Wildcard_expressionContext = Wildcard_expressionContext;
Swift5Parser.Key_path_expressionContext = Key_path_expressionContext;
Swift5Parser.Key_path_componentsContext = Key_path_componentsContext;
Swift5Parser.Key_path_componentContext = Key_path_componentContext;
Swift5Parser.Key_path_postfixesContext = Key_path_postfixesContext;
Swift5Parser.Key_path_postfixContext = Key_path_postfixContext;
Swift5Parser.Selector_expressionContext = Selector_expressionContext;
Swift5Parser.Key_path_string_expressionContext = Key_path_string_expressionContext;
Swift5Parser.Postfix_expressionContext = Postfix_expressionContext;
Swift5Parser.Function_call_suffixContext = Function_call_suffixContext;
Swift5Parser.Initializer_suffixContext = Initializer_suffixContext;
Swift5Parser.Explicit_member_suffixContext = Explicit_member_suffixContext;
Swift5Parser.Postfix_self_suffixContext = Postfix_self_suffixContext;
Swift5Parser.Subscript_suffixContext = Subscript_suffixContext;
Swift5Parser.Forced_value_suffixContext = Forced_value_suffixContext;
Swift5Parser.Optional_chaining_suffixContext = Optional_chaining_suffixContext;
Swift5Parser.Function_call_argument_clauseContext = Function_call_argument_clauseContext;
Swift5Parser.Function_call_argument_listContext = Function_call_argument_listContext;
Swift5Parser.Function_call_argumentContext = Function_call_argumentContext;
Swift5Parser.Trailing_closuresContext = Trailing_closuresContext;
Swift5Parser.Labeled_trailing_closuresContext = Labeled_trailing_closuresContext;
Swift5Parser.Labeled_trailing_closureContext = Labeled_trailing_closureContext;
Swift5Parser.Argument_namesContext = Argument_namesContext;
Swift5Parser.Argument_nameContext = Argument_nameContext;
Swift5Parser.TypeContext = TypeContext;
Swift5Parser.Type_annotationContext = Type_annotationContext;
Swift5Parser.Type_identifierContext = Type_identifierContext;
Swift5Parser.Type_nameContext = Type_nameContext;
Swift5Parser.Tuple_typeContext = Tuple_typeContext;
Swift5Parser.Tuple_type_element_listContext = Tuple_type_element_listContext;
Swift5Parser.Tuple_type_elementContext = Tuple_type_elementContext;
Swift5Parser.Element_nameContext = Element_nameContext;
Swift5Parser.Function_typeContext = Function_typeContext;
Swift5Parser.Function_type_argument_clauseContext = Function_type_argument_clauseContext;
Swift5Parser.Function_type_argument_listContext = Function_type_argument_listContext;
Swift5Parser.Function_type_argumentContext = Function_type_argumentContext;
Swift5Parser.Argument_labelContext = Argument_labelContext;
Swift5Parser.Array_typeContext = Array_typeContext;
Swift5Parser.Dictionary_typeContext = Dictionary_typeContext;
Swift5Parser.Protocol_composition_typeContext = Protocol_composition_typeContext;
Swift5Parser.Trailing_composition_andContext = Trailing_composition_andContext;
Swift5Parser.Opaque_typeContext = Opaque_typeContext;
Swift5Parser.Any_typeContext = Any_typeContext;
Swift5Parser.Self_typeContext = Self_typeContext;
Swift5Parser.Type_inheritance_clauseContext = Type_inheritance_clauseContext;
Swift5Parser.Type_inheritance_listContext = Type_inheritance_listContext;
Swift5Parser.IdentifierContext = IdentifierContext;
Swift5Parser.Identifier_listContext = Identifier_listContext;
Swift5Parser.KeywordContext = KeywordContext;
Swift5Parser.Assignment_operatorContext = Assignment_operatorContext;
Swift5Parser.Negate_prefix_operatorContext = Negate_prefix_operatorContext;
Swift5Parser.Compilation_condition_ANDContext = Compilation_condition_ANDContext;
Swift5Parser.Compilation_condition_ORContext = Compilation_condition_ORContext;
Swift5Parser.Compilation_condition_GEContext = Compilation_condition_GEContext;
Swift5Parser.Compilation_condition_LContext = Compilation_condition_LContext;
Swift5Parser.Arrow_operatorContext = Arrow_operatorContext;
Swift5Parser.Range_operatorContext = Range_operatorContext;
Swift5Parser.Same_type_equalsContext = Same_type_equalsContext;
Swift5Parser.Binary_operatorContext = Binary_operatorContext;
Swift5Parser.Prefix_operatorContext = Prefix_operatorContext;
Swift5Parser.Postfix_operatorContext = Postfix_operatorContext;
Swift5Parser.OperatorContext = OperatorContext;
Swift5Parser.Operator_headContext = Operator_headContext;
Swift5Parser.Operator_characterContext = Operator_characterContext;
Swift5Parser.Operator_charactersContext = Operator_charactersContext;
Swift5Parser.Dot_operator_headContext = Dot_operator_headContext;
Swift5Parser.Dot_operator_characterContext = Dot_operator_characterContext;
Swift5Parser.Dot_operator_charactersContext = Dot_operator_charactersContext;
Swift5Parser.LiteralContext = LiteralContext;
Swift5Parser.Numeric_literalContext = Numeric_literalContext;
Swift5Parser.Boolean_literalContext = Boolean_literalContext;
Swift5Parser.Nil_literalContext = Nil_literalContext;
Swift5Parser.Integer_literalContext = Integer_literalContext;
Swift5Parser.String_literalContext = String_literalContext;
Swift5Parser.Extended_string_literalContext = Extended_string_literalContext;
Swift5Parser.Static_string_literalContext = Static_string_literalContext;
Swift5Parser.Interpolated_string_literalContext = Interpolated_string_literalContext;
//# sourceMappingURL=Swift5Parser.js.map

/***/ })

}]);